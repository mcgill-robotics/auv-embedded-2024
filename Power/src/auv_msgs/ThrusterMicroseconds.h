// Generated by gencpp from file auv_msgs/ThrusterMicroseconds.msg
// DO NOT EDIT!


#ifndef AUV_MSGS_MESSAGE_THRUSTERMICROSECONDS_H
#define AUV_MSGS_MESSAGE_THRUSTERMICROSECONDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auv_msgs
{
template <class ContainerAllocator>
struct ThrusterMicroseconds_
{
  typedef ThrusterMicroseconds_<ContainerAllocator> Type;

  ThrusterMicroseconds_()
    : microseconds()  {
      microseconds.assign(0);
  }
  ThrusterMicroseconds_(const ContainerAllocator& _alloc)
    : microseconds()  {
  (void)_alloc;
      microseconds.assign(0);
  }



   typedef boost::array<uint16_t, 8>  _microseconds_type;
  _microseconds_type microseconds;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SURGE_PORT)
  #undef SURGE_PORT
#endif
#if defined(_WIN32) && defined(SURGE_STAR)
  #undef SURGE_STAR
#endif
#if defined(_WIN32) && defined(SWAY_BOW)
  #undef SWAY_BOW
#endif
#if defined(_WIN32) && defined(SWAY_STERN)
  #undef SWAY_STERN
#endif
#if defined(_WIN32) && defined(HEAVE_BOW_PORT)
  #undef HEAVE_BOW_PORT
#endif
#if defined(_WIN32) && defined(HEAVE_BOW_STAR)
  #undef HEAVE_BOW_STAR
#endif
#if defined(_WIN32) && defined(HEAVE_STERN_STAR)
  #undef HEAVE_STERN_STAR
#endif
#if defined(_WIN32) && defined(HEAVE_STERN_PORT)
  #undef HEAVE_STERN_PORT
#endif

  enum {
    SURGE_PORT = 0u,
    SURGE_STAR = 1u,
    SWAY_BOW = 2u,
    SWAY_STERN = 3u,
    HEAVE_BOW_PORT = 4u,
    HEAVE_BOW_STAR = 5u,
    HEAVE_STERN_STAR = 6u,
    HEAVE_STERN_PORT = 7u,
  };


  typedef boost::shared_ptr< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> const> ConstPtr;

}; // struct ThrusterMicroseconds_

typedef ::auv_msgs::ThrusterMicroseconds_<std::allocator<void> > ThrusterMicroseconds;

typedef boost::shared_ptr< ::auv_msgs::ThrusterMicroseconds > ThrusterMicrosecondsPtr;
typedef boost::shared_ptr< ::auv_msgs::ThrusterMicroseconds const> ThrusterMicrosecondsConstPtr;

// constants requiring out of line definition



















template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator1> & lhs, const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator2> & rhs)
{
  return lhs.microseconds == rhs.microseconds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator1> & lhs, const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace auv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da54d5f5b49d52537ff663ce87808105";
  }

  static const char* value(const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda54d5f5b49d5253ULL;
  static const uint64_t static_value2 = 0x7ff663ce87808105ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auv_msgs/ThrusterMicroseconds";
  }

  static const char* value(const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Thruster definitions\n"
"uint8 SURGE_PORT=0\n"
"uint8 SURGE_STAR=1\n"
"uint8 SWAY_BOW=2\n"
"uint8 SWAY_STERN=3\n"
"uint8 HEAVE_BOW_PORT=4\n"
"uint8 HEAVE_BOW_STAR=5\n"
"uint8 HEAVE_STERN_STAR=6\n"
"uint8 HEAVE_STERN_PORT=7\n"
"\n"
"uint16[8] microseconds\n"
;
  }

  static const char* value(const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.microseconds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThrusterMicroseconds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auv_msgs::ThrusterMicroseconds_<ContainerAllocator>& v)
  {
    s << indent << "microseconds[]" << std::endl;
    for (size_t i = 0; i < v.microseconds.size(); ++i)
    {
      s << indent << "  microseconds[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.microseconds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_THRUSTERMICROSECONDS_H