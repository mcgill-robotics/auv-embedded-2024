
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08006bb8  08006bb8  00016bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f84  08006f84  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f8c  08006f8c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d4  08007168  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08007168  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb80  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ad  00000000  00000000  0002fdc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba9  00000000  00000000  00032d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a8e  00000000  00000000  00033911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109bb  00000000  00000000  0005739f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d84f9  00000000  00000000  00067d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f40  00000000  00000000  00140254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00145194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b9c 	.word	0x08006b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006b9c 	.word	0x08006b9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <__io_putchar+0x20>)
 8000eb6:	f002 fcbb 	bl	8003830 <HAL_UART_Transmit>
  return ch;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000023c 	.word	0x2000023c

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 fb48 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f80c 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 f8da 	bl	800108c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ed8:	f000 f85a 	bl	8000f90 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000edc:	f000 f8a6 	bl	800102c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ee0:	4801      	ldr	r0, [pc, #4]	; (8000ee8 <main+0x20>)
 8000ee2:	f002 f88d 	bl	8003000 <HAL_TIM_Base_Start_IT>
   fx = fft(sineValues, 1024, 1102, 92972972.97297);*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <main+0x1e>
 8000ee8:	200001f0 	.word	0x200001f0

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b096      	sub	sp, #88	; 0x58
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2244      	movs	r2, #68	; 0x44
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 fefd 	bl	8004cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	463b      	mov	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f12:	f000 fe53 	bl	8001bbc <HAL_PWREx_ControlVoltageScaling>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f1c:	f000 f942 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f32:	2302      	movs	r3, #2
 8000f34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fe8a 	bl	8001c68 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f5a:	f000 f923 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2303      	movs	r3, #3
 8000f64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	2104      	movs	r1, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fa8a 	bl	8002490 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f82:	f000 f90f 	bl	80011a4 <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3758      	adds	r7, #88	; 0x58
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000000;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fc4:	4a18      	ldr	r2, [pc, #96]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd4:	4813      	ldr	r0, [pc, #76]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fd6:	f001 ffbb 	bl	8002f50 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fe0:	f000 f8e0 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_TIM2_Init+0x94>)
 8000ff2:	f002 f95b 	bl	80032ac <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ffc:	f000 f8d2 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_TIM2_Init+0x94>)
 800100e:	f002 fb3d 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001018:	f000 f8c4 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200001f0 	.word	0x200001f0
 8001028:	04c4b400 	.word	0x04c4b400

0800102c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001032:	4a15      	ldr	r2, [pc, #84]	; (8001088 <MX_USART2_UART_Init+0x5c>)
 8001034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART2_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART2_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART2_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART2_UART_Init+0x58>)
 8001070:	f002 fb90 	bl	8003794 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800107a:	f000 f893 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000023c 	.word	0x2000023c
 8001088:	40004400 	.word	0x40004400

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_GPIO_Init+0xe0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <MX_GPIO_Init+0xe0>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_GPIO_Init+0xe0>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_GPIO_Init+0xe0>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a2b      	ldr	r2, [pc, #172]	; (800116c <MX_GPIO_Init+0xe0>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_GPIO_Init+0xe0>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_GPIO_Init+0xe0>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a25      	ldr	r2, [pc, #148]	; (800116c <MX_GPIO_Init+0xe0>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <MX_GPIO_Init+0xe0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <MX_GPIO_Init+0xe0>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <MX_GPIO_Init+0xe0>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_GPIO_Init+0xe0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	21a0      	movs	r1, #160	; 0xa0
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fd31 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001114:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <MX_GPIO_Init+0xe4>)
 8001126:	f000 fba9 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f000 fb9a 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001148:	2340      	movs	r3, #64	; 0x40
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001150:	2301      	movs	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f000 fb8d 	bl	800187c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	48000800 	.word	0x48000800

08001174 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	sec++;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001186:	701a      	strb	r2, [r3, #0]
	printf("%d seconds\r\n", sec);
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001190:	f003 fd5e 	bl	8004c50 <iprintf>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200002c4 	.word	0x200002c4
 80011a0:	08006bb8 	.word	0x08006bb8

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_MspInit+0x44>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6613      	str	r3, [r2, #96]	; 0x60
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_MspInit+0x44>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6593      	str	r3, [r2, #88]	; 0x58
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x44>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001208:	d113      	bne.n	8001232 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_TIM_Base_MspInit+0x44>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <HAL_TIM_Base_MspInit+0x44>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6593      	str	r3, [r2, #88]	; 0x58
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_TIM_Base_MspInit+0x44>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	201c      	movs	r0, #28
 8001228:	f000 faf1 	bl	800180e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800122c:	201c      	movs	r0, #28
 800122e:	f000 fb0a 	bl	8001846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0a2      	sub	sp, #136	; 0x88
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2260      	movs	r2, #96	; 0x60
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fd4a 	bl	8004cfa <memset>
  if(huart->Instance==USART2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a20      	ldr	r2, [pc, #128]	; (80012ec <HAL_UART_MspInit+0xac>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d138      	bne.n	80012e2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001270:	2302      	movs	r3, #2
 8001272:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fb2b 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001288:	f7ff ff8c 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_UART_MspInit+0xb0>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_UART_MspInit+0xb0>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_UART_MspInit+0xb0>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_UART_MspInit+0xb0>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_UART_MspInit+0xb0>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_UART_MspInit+0xb0>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012bc:	230c      	movs	r3, #12
 80012be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ce:	2307      	movs	r3, #7
 80012d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f000 facd 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3788      	adds	r7, #136	; 0x88
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40004400 	.word	0x40004400
 80012f0:	40021000 	.word	0x40021000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f96a 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM2_IRQHandler+0x10>)
 800134e:	f001 feab 	bl	80030a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001f0 	.word	0x200001f0

0800135c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return 1;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_kill>:

int _kill(int pid, int sig)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001376:	f003 fd13 	bl	8004da0 <__errno>
 800137a:	4603      	mov	r3, r0
 800137c:	2216      	movs	r2, #22
 800137e:	601a      	str	r2, [r3, #0]
  return -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_exit>:

void _exit (int status)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffe7 	bl	800136c <_kill>
  while (1) {}    /* Make sure we hang here */
 800139e:	e7fe      	b.n	800139e <_exit+0x12>

080013a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	4601      	mov	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
  }

  return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e009      	b.n	8001400 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60ba      	str	r2, [r7, #8]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fd55 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf1      	blt.n	80013ec <_write+0x12>
  }
  return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_close>:

int _close(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143a:	605a      	str	r2, [r3, #4]
  return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_isatty>:

int _isatty(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f003 fc78 	bl	8004da0 <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20010000 	.word	0x20010000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	200002c8 	.word	0x200002c8
 80014e4:	20000420 	.word	0x20000420

080014e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001510:	f7ff ffea 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <LoopForever+0x6>)
  ldr r1, =_edata
 8001516:	490d      	ldr	r1, [pc, #52]	; (800154c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <LoopForever+0xe>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800152c:	4c0a      	ldr	r4, [pc, #40]	; (8001558 <LoopForever+0x16>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153a:	f003 fc37 	bl	8004dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800153e:	f7ff fcc3 	bl	8000ec8 <main>

08001542 <LoopForever>:

LoopForever:
    b LoopForever
 8001542:	e7fe      	b.n	8001542 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001544:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001550:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 8001554:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001558:	2000041c 	.word	0x2000041c

0800155c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_IRQHandler>
	...

08001560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_Init+0x3c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_Init+0x3c>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001576:	2003      	movs	r0, #3
 8001578:	f000 f93e 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157c:	2000      	movs	r0, #0
 800157e:	f000 f80f 	bl	80015a0 <HAL_InitTick>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	e001      	b.n	8001592 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800158e:	f7ff fe0f 	bl	80011b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001592:	79fb      	ldrb	r3, [r7, #7]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_InitTick+0x6c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d023      	beq.n	80015fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_InitTick+0x70>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_InitTick+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f949 	bl	8001862 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d809      	bhi.n	80015f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e4:	f000 f913 	bl	800180e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_InitTick+0x74>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e007      	b.n	8001600 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e004      	b.n	8001600 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e001      	b.n	8001600 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008
 800163c:	200002cc 	.word	0x200002cc

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200002cc 	.word	0x200002cc

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	; (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	; (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	; 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff29 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001820:	f7ff ff3e 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 8001824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	6978      	ldr	r0, [r7, #20]
 800182c:	f7ff ff8e 	bl	800174c <NVIC_EncodePriority>
 8001830:	4602      	mov	r2, r0
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5d 	bl	80016f8 <__NVIC_SetPriority>
}
 800183e:	bf00      	nop
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff31 	bl	80016bc <__NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffa2 	bl	80017b4 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e154      	b.n	8001b36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8146 	beq.w	8001b30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d005      	beq.n	80018bc <HAL_GPIO_Init+0x40>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d130      	bne.n	800191e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018f2:	2201      	movs	r2, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 0201 	and.w	r2, r3, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b03      	cmp	r3, #3
 8001928:	d017      	beq.n	800195a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d123      	bne.n	80019ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0203 	and.w	r2, r3, #3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80a0 	beq.w	8001b30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6613      	str	r3, [r2, #96]	; 0x60
 80019fc:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <HAL_GPIO_Init+0x2d8>)
 80019fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a08:	4a53      	ldr	r2, [pc, #332]	; (8001b58 <HAL_GPIO_Init+0x2dc>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a32:	d019      	beq.n	8001a68 <HAL_GPIO_Init+0x1ec>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a49      	ldr	r2, [pc, #292]	; (8001b5c <HAL_GPIO_Init+0x2e0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_Init+0x1e8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <HAL_GPIO_Init+0x2e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1e4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1e0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a46      	ldr	r2, [pc, #280]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1dc>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e008      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a58:	2307      	movs	r3, #7
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7a:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2dc>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aac:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f aea3 	bne.w	800188c <HAL_GPIO_Init+0x10>
  }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	48000800 	.word	0x48000800
 8001b64:	48000c00 	.word	0x48000c00
 8001b68:	48001000 	.word	0x48001000
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bca:	d130      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd8:	d038      	beq.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2232      	movs	r2, #50	; 0x32
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c00:	e002      	b.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d102      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f2      	bne.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c28:	d110      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e00f      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3a:	d007      	beq.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c44:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f000 bc02 	b.w	8002480 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7c:	4b96      	ldr	r3, [pc, #600]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c86:	4b94      	ldr	r3, [pc, #592]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80e4 	beq.w	8001e66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4c>
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	f040 808b 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	f040 8087 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb4:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_OscConfig+0x64>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e3d9      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1a      	ldr	r2, [r3, #32]
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x7e>
 8001cdc:	4b7e      	ldr	r3, [pc, #504]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce4:	e005      	b.n	8001cf2 <HAL_RCC_OscConfig+0x8a>
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d223      	bcs.n	8001d3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fd8c 	bl	8002818 <RCC_SetFlashLatencyFromMSIRange>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e3ba      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0a:	4b73      	ldr	r3, [pc, #460]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a72      	ldr	r2, [pc, #456]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b70      	ldr	r3, [pc, #448]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	496d      	ldr	r1, [pc, #436]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d28:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	4968      	ldr	r1, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e025      	b.n	8001d8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3e:	4b66      	ldr	r3, [pc, #408]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4960      	ldr	r1, [pc, #384]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5c:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	495b      	ldr	r1, [pc, #364]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fd4c 	bl	8002818 <RCC_SetFlashLatencyFromMSIRange>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e37a      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8a:	f000 fc81 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b51      	ldr	r3, [pc, #324]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4950      	ldr	r1, [pc, #320]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a4e      	ldr	r2, [pc, #312]	; (8001ee0 <HAL_RCC_OscConfig+0x278>)
 8001da8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001daa:	4b4e      	ldr	r3, [pc, #312]	; (8001ee4 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fbf6 	bl	80015a0 <HAL_InitTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d052      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	e35e      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d032      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a42      	ldr	r2, [pc, #264]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fc33 	bl	8001640 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dde:	f7ff fc2f 	bl	8001640 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e347      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df0:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a35      	ldr	r2, [pc, #212]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4930      	ldr	r1, [pc, #192]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	492b      	ldr	r1, [pc, #172]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e01a      	b.n	8001e66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc00 	bl	8001640 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e44:	f7ff fbfc 	bl	8001640 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e314      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1dc>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d073      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x21c>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d10e      	bne.n	8001e9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d063      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d15f      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e2f1      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x24c>
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e025      	b.n	8001f00 <HAL_RCC_OscConfig+0x298>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d114      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x280>
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a02      	ldr	r2, [pc, #8]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e013      	b.n	8001f00 <HAL_RCC_OscConfig+0x298>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08006bc8 	.word	0x08006bc8
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	4ba0      	ldr	r3, [pc, #640]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a9f      	ldr	r2, [pc, #636]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b9d      	ldr	r3, [pc, #628]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a9c      	ldr	r2, [pc, #624]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fb9a 	bl	8001640 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fb96 	bl	8001640 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e2ae      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f22:	4b92      	ldr	r3, [pc, #584]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2a8>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fb86 	bl	8001640 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fb82 	bl	8001640 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e29a      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2d0>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d060      	beq.n	8002028 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_OscConfig+0x310>
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d119      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d116      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f78:	4b7c      	ldr	r3, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x328>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e277      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	4973      	ldr	r1, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa4:	e040      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d023      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff fb41 	bl	8001640 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fb3d 	bl	8001640 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e255      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd4:	4b65      	ldr	r3, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b62      	ldr	r3, [pc, #392]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	495f      	ldr	r1, [pc, #380]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e018      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5c      	ldr	r2, [pc, #368]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fb1d 	bl	8001640 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fb19 	bl	8001640 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e231      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_OscConfig+0x504>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03c      	beq.n	80020ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203c:	4b4b      	ldr	r3, [pc, #300]	; (800216c <HAL_RCC_OscConfig+0x504>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002042:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff faf8 	bl	8001640 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff faf4 	bl	8001640 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e20c      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8002068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCC_OscConfig+0x3ec>
 8002074:	e01b      	b.n	80020ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <HAL_RCC_OscConfig+0x504>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7ff fadb 	bl	8001640 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208e:	f7ff fad7 	bl	8001640 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1ef      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_RCC_OscConfig+0x504>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ef      	bne.n	800208e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a6 	beq.w	8002208 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_OscConfig+0x504>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x504>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_RCC_OscConfig+0x504>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	; 0x58
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_OscConfig+0x504>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_RCC_OscConfig+0x508>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d118      	bne.n	8002126 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_OscConfig+0x508>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_RCC_OscConfig+0x508>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002100:	f7ff fa9e 	bl	8001640 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7ff fa9a 	bl	8001640 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1b2      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_RCC_OscConfig+0x508>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d108      	bne.n	8002140 <HAL_RCC_OscConfig+0x4d8>
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213e:	e029      	b.n	8002194 <HAL_RCC_OscConfig+0x52c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d115      	bne.n	8002174 <HAL_RCC_OscConfig+0x50c>
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_OscConfig+0x504>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCC_OscConfig+0x504>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_RCC_OscConfig+0x504>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x52c>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
 8002174:	4b9a      	ldr	r3, [pc, #616]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	4a99      	ldr	r2, [pc, #612]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002184:	4b96      	ldr	r3, [pc, #600]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	4a95      	ldr	r2, [pc, #596]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d016      	beq.n	80021ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff fa50 	bl	8001640 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7ff fa4c 	bl	8001640 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e162      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ba:	4b89      	ldr	r3, [pc, #548]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ed      	beq.n	80021a4 <HAL_RCC_OscConfig+0x53c>
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff fa39 	bl	8001640 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7ff fa35 	bl	8001640 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e14b      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e8:	4b7d      	ldr	r3, [pc, #500]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ed      	bne.n	80021d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b78      	ldr	r3, [pc, #480]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4a77      	ldr	r2, [pc, #476]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03c      	beq.n	800228e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01c      	beq.n	8002256 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800221c:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800221e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002222:	4a6f      	ldr	r2, [pc, #444]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fa08 	bl	8001640 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002234:	f7ff fa04 	bl	8001640 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e11c      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002246:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ef      	beq.n	8002234 <HAL_RCC_OscConfig+0x5cc>
 8002254:	e01b      	b.n	800228e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002256:	4b62      	ldr	r3, [pc, #392]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800225c:	4a60      	ldr	r2, [pc, #384]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7ff f9eb 	bl	8001640 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226e:	f7ff f9e7 	bl	8001640 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0ff      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002280:	4b57      	ldr	r3, [pc, #348]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ef      	bne.n	800226e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80f3 	beq.w	800247e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	2b02      	cmp	r3, #2
 800229e:	f040 80c9 	bne.w	8002434 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022a2:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0203 	and.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d12c      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	3b01      	subs	r3, #1
 80022c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d123      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d11b      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d113      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d109      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d06b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d062      	beq.n	80023dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002316:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0ac      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800232c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002330:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002332:	f7ff f985 	bl	8001640 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7ff f981 	bl	8001640 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e099      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_RCC_OscConfig+0x77c>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002368:	3a01      	subs	r2, #1
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800237a:	0852      	lsrs	r2, r2, #1
 800237c:	3a01      	subs	r2, #1
 800237e:	0552      	lsls	r2, r2, #21
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002386:	0852      	lsrs	r2, r2, #1
 8002388:	3a01      	subs	r2, #1
 800238a:	0652      	lsls	r2, r2, #25
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002392:	06d2      	lsls	r2, r2, #27
 8002394:	430a      	orrs	r2, r1
 8002396:	4912      	ldr	r1, [pc, #72]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 8002398:	4313      	orrs	r3, r2
 800239a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023b4:	f7ff f944 	bl	8001640 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7ff f940 	bl	8001640 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e058      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RCC_OscConfig+0x778>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023da:	e050      	b.n	800247e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e04f      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d144      	bne.n	800247e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a23      	ldr	r2, [pc, #140]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800240c:	f7ff f918 	bl	8001640 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7ff f914 	bl	8001640 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e02c      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x7ac>
 8002432:	e024      	b.n	800247e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d01f      	beq.n	800247a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 8002440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7ff f8fb 	bl	8001640 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff f8f7 	bl	8001640 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e00f      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4905      	ldr	r1, [pc, #20]	; (8002488 <HAL_RCC_OscConfig+0x820>)
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002474:	4013      	ands	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
 8002478:	e001      	b.n	800247e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	feeefffc 	.word	0xfeeefffc

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0e7      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	4970      	ldr	r1, [pc, #448]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b6e      	ldr	r3, [pc, #440]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0cf      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d908      	bls.n	8002502 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4960      	ldr	r1, [pc, #384]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d04c      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002516:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d121      	bne.n	8002566 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0a6      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252e:	4b54      	ldr	r3, [pc, #336]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d115      	bne.n	8002566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e09a      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e08e      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e086      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 0203 	bic.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4943      	ldr	r1, [pc, #268]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002578:	f7ff f862 	bl	8001640 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	e00a      	b.n	8002596 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002580:	f7ff f85e 	bl	8001640 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e06e      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 020c 	and.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1eb      	bne.n	8002580 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d010      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d208      	bcs.n	80025d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	492b      	ldr	r1, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d210      	bcs.n	8002606 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 0207 	bic.w	r2, r3, #7
 80025ec:	4923      	ldr	r1, [pc, #140]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e036      	b.n	8002674 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4918      	ldr	r1, [pc, #96]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	4313      	orrs	r3, r2
 8002622:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4910      	ldr	r1, [pc, #64]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002644:	f000 f824 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	490b      	ldr	r1, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x1f4>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
 8002662:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1fc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe ff99 	bl	80015a0 <HAL_InitTick>
 800266e:	4603      	mov	r3, r0
 8002670:	72fb      	strb	r3, [r7, #11]

  return status;
 8002672:	7afb      	ldrb	r3, [r7, #11]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40022000 	.word	0x40022000
 8002680:	40021000 	.word	0x40021000
 8002684:	08006bc8 	.word	0x08006bc8
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a8:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d121      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d11e      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	e005      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026ec:	4a2b      	ldr	r2, [pc, #172]	; (800279c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10d      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b04      	cmp	r3, #4
 8002706:	d102      	bne.n	800270e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	e004      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d101      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002716:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d134      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d003      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0xa6>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d003      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0xac>
 8002734:	e005      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002738:	617b      	str	r3, [r7, #20]
      break;
 800273a:	e005      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800273e:	617b      	str	r3, [r7, #20]
      break;
 8002740:	e002      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	617b      	str	r3, [r7, #20]
      break;
 8002746:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	3301      	adds	r3, #1
 8002754:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	fb03 f202 	mul.w	r2, r3, r2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_GetSysClockFreq+0x108>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	0e5b      	lsrs	r3, r3, #25
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	3301      	adds	r3, #1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002788:	69bb      	ldr	r3, [r7, #24]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	08006be0 	.word	0x08006be0
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	007a1200 	.word	0x007a1200

080027a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000000 	.word	0x20000000

080027c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0a1b      	lsrs	r3, r3, #8
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4904      	ldr	r1, [pc, #16]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08006bd8 	.word	0x08006bd8

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027f0:	f7ff ffda 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0adb      	lsrs	r3, r3, #11
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4904      	ldr	r1, [pc, #16]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000
 8002814:	08006bd8 	.word	0x08006bd8

08002818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002830:	f7ff f9b6 	bl	8001ba0 <HAL_PWREx_GetVoltageRange>
 8002834:	6178      	str	r0, [r7, #20]
 8002836:	e014      	b.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	; 0x58
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002850:	f7ff f9a6 	bl	8001ba0 <HAL_PWREx_GetVoltageRange>
 8002854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002868:	d10b      	bne.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d919      	bls.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2ba0      	cmp	r3, #160	; 0xa0
 8002874:	d902      	bls.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002876:	2302      	movs	r3, #2
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	e013      	b.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800287c:	2301      	movs	r3, #1
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e010      	b.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d902      	bls.n	800288e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002888:	2303      	movs	r3, #3
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e00a      	b.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	d102      	bne.n	800289a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002894:	2302      	movs	r3, #2
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	e004      	b.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b70      	cmp	r3, #112	; 0x70
 800289e:	d101      	bne.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028a0:	2301      	movs	r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 0207 	bic.w	r2, r3, #7
 80028ac:	4909      	ldr	r1, [pc, #36]	; (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40022000 	.word	0x40022000

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e0:	2300      	movs	r3, #0
 80028e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e4:	2300      	movs	r3, #0
 80028e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d031      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fc:	d01a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002902:	d814      	bhi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d009      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290c:	d10f      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4a5c      	ldr	r2, [pc, #368]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800291a:	e00c      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa22 	bl	8002d6c <RCCEx_PLLSAI1_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800292c:	e003      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	74fb      	strb	r3, [r7, #19]
      break;
 8002932:	e000      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10b      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800293c:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	494e      	ldr	r1, [pc, #312]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002952:	e001      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 809e 	beq.w	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	4a3f      	ldr	r2, [pc, #252]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298a:	6593      	str	r3, [r2, #88]	; 0x58
 800298c:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800299c:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a39      	ldr	r2, [pc, #228]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fe4a 	bl	8001640 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ae:	e009      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7fe fe46 	bl	8001640 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	74fb      	strb	r3, [r7, #19]
        break;
 80029c2:	e005      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ef      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d15a      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01e      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d019      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a1e:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d016      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fe06 	bl	8001640 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a36:	e00b      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fe02 	bl	8001640 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d902      	bls.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	74fb      	strb	r3, [r7, #19]
            break;
 8002a4e:	e006      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0ec      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	4904      	ldr	r1, [pc, #16]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a7a:	e009      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	74bb      	strb	r3, [r7, #18]
 8002a80:	e006      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a90:	7c7b      	ldrb	r3, [r7, #17]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d105      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a96:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	4a8c      	ldr	r2, [pc, #560]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aae:	4b87      	ldr	r3, [pc, #540]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f023 0203 	bic.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4983      	ldr	r1, [pc, #524]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad0:	4b7e      	ldr	r3, [pc, #504]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 020c 	bic.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	497b      	ldr	r1, [pc, #492]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002af2:	4b76      	ldr	r3, [pc, #472]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	4972      	ldr	r1, [pc, #456]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b14:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	496a      	ldr	r1, [pc, #424]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b36:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	4961      	ldr	r1, [pc, #388]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b58:	4b5c      	ldr	r3, [pc, #368]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4959      	ldr	r1, [pc, #356]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7a:	4b54      	ldr	r3, [pc, #336]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4950      	ldr	r1, [pc, #320]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	4948      	ldr	r1, [pc, #288]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bbe:	4b43      	ldr	r3, [pc, #268]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	493f      	ldr	r1, [pc, #252]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d028      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be0:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bee:	4937      	ldr	r1, [pc, #220]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]
 8002c0c:	e011      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f8a4 	bl	8002d6c <RCCEx_PLLSAI1_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c3e:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	491f      	ldr	r1, [pc, #124]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c68:	60d3      	str	r3, [r2, #12]
 8002c6a:	e011      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 f875 	bl	8002d6c <RCCEx_PLLSAI1_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02b      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cba:	d109      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a02      	ldr	r2, [pc, #8]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc6:	60d3      	str	r3, [r2, #12]
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f843 	bl	8002d6c <RCCEx_PLLSAI1_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01c      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	4916      	ldr	r1, [pc, #88]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f820 	bl	8002d6c <RCCEx_PLLSAI1_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	4904      	ldr	r1, [pc, #16]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000

08002d6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d7a:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d018      	beq.n	8002db8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d86:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0203 	and.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10d      	bne.n	8002db2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
       ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d9e:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
       ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d047      	beq.n	8002e42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e044      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d018      	beq.n	8002df2 <RCCEx_PLLSAI1_Config+0x86>
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d825      	bhi.n	8002e10 <RCCEx_PLLSAI1_Config+0xa4>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d002      	beq.n	8002dce <RCCEx_PLLSAI1_Config+0x62>
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d009      	beq.n	8002de0 <RCCEx_PLLSAI1_Config+0x74>
 8002dcc:	e020      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dce:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11d      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dde:	e01a      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de0:	4b5a      	ldr	r3, [pc, #360]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df0:	e013      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002df2:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfe:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0e:	e006      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e004      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	4943      	ldr	r1, [pc, #268]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d17c      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e48:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a3f      	ldr	r2, [pc, #252]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e54:	f7fe fbf4 	bl	8001640 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e5a:	e009      	b.n	8002e70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e5c:	f7fe fbf0 	bl	8001640 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6e:	e005      	b.n	8002e7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ef      	bne.n	8002e5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d15f      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d110      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	0211      	lsls	r1, r2, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68d2      	ldr	r2, [r2, #12]
 8002e9e:	06d2      	lsls	r2, r2, #27
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	492a      	ldr	r1, [pc, #168]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	610b      	str	r3, [r1, #16]
 8002ea8:	e027      	b.n	8002efa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d112      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	0211      	lsls	r1, r2, #8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6912      	ldr	r2, [r2, #16]
 8002ec6:	0852      	lsrs	r2, r2, #1
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0552      	lsls	r2, r2, #21
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	491f      	ldr	r1, [pc, #124]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	610b      	str	r3, [r1, #16]
 8002ed4:	e011      	b.n	8002efa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ede:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6892      	ldr	r2, [r2, #8]
 8002ee6:	0211      	lsls	r1, r2, #8
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6952      	ldr	r2, [r2, #20]
 8002eec:	0852      	lsrs	r2, r2, #1
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	0652      	lsls	r2, r2, #25
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	4915      	ldr	r1, [pc, #84]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe fb9b 	bl	8001640 <HAL_GetTick>
 8002f0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f0c:	e009      	b.n	8002f22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f0e:	f7fe fb97 	bl	8001640 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d902      	bls.n	8002f22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	73fb      	strb	r3, [r7, #15]
          break;
 8002f20:	e005      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ef      	beq.n	8002f0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d106      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e049      	b.n	8002ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe f93e 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f000 fa7e 	bl	8003490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d001      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e03b      	b.n	8003090 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a19      	ldr	r2, [pc, #100]	; (800309c <HAL_TIM_Base_Start_IT+0x9c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_TIM_Base_Start_IT+0x4e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d004      	beq.n	800304e <HAL_TIM_Base_Start_IT+0x4e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a15      	ldr	r2, [pc, #84]	; (80030a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d115      	bne.n	800307a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003056:	4013      	ands	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b06      	cmp	r3, #6
 800305e:	d015      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x8c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d011      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003078:	e008      	b.n	800308c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e000      	b.n	800308e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40014000 	.word	0x40014000
 80030a4:	00010007 	.word	0x00010007

080030a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0202 	mvn.w	r2, #2
 80030dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f9ad 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f99f 	bl	800343e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f9b0 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d020      	beq.n	8003158 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0204 	mvn.w	r2, #4
 8003128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f987 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f979 	bl	800343e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f98a 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d020      	beq.n	80031a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01b      	beq.n	80031a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0208 	mvn.w	r2, #8
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2204      	movs	r2, #4
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f961 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f953 	bl	800343e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f964 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d020      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0210 	mvn.w	r2, #16
 80031c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2208      	movs	r2, #8
 80031c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f93b 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f92d 	bl	800343e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f93e 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0201 	mvn.w	r2, #1
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd ffb0 	bl	8001174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa9a 	bl	800376c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fa92 	bl	8003780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8fd 	bl	800347a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0220 	mvn.w	r2, #32
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa5a 	bl	8003758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIM_ConfigClockSource+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0b6      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x18a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d03e      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0xd8>
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330a:	f200 8087 	bhi.w	800341c <HAL_TIM_ConfigClockSource+0x170>
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	f000 8086 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x176>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d87f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d01a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xaa>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d87b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d050      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x11e>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d877      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d03c      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xfe>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d873      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d058      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x13e>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d86f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d064      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d86b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d060      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d867      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003350:	2b10      	cmp	r3, #16
 8003352:	d05a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003354:	e062      	b.n	800341c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	f000 f971 	bl	800364c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	609a      	str	r2, [r3, #8]
      break;
 8003382:	e04f      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003394:	f000 f95a 	bl	800364c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e03c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 f8ce 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2150      	movs	r1, #80	; 0x50
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f927 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e02c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 f8ed 	bl	80035b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2160      	movs	r1, #96	; 0x60
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f917 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e01c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 f8ae 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f907 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 8003408:	e00c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 f8fe 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 800341a:	e003      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e000      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <TIM_Base_SetConfig+0xbc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0x20>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d108      	bne.n	80034c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <TIM_Base_SetConfig+0xbc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_Base_SetConfig+0x52>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d007      	beq.n	80034e2 <TIM_Base_SetConfig+0x52>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <TIM_Base_SetConfig+0xc0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_Base_SetConfig+0x52>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <TIM_Base_SetConfig+0xc4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d108      	bne.n	80034f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <TIM_Base_SetConfig+0xbc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_Base_SetConfig+0xa0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <TIM_Base_SetConfig+0xc0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_Base_SetConfig+0xa0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <TIM_Base_SetConfig+0xc4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d103      	bne.n	8003538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	615a      	str	r2, [r3, #20]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400

08003558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 030a 	bic.w	r3, r3, #10
 8003594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f023 0210 	bic.w	r2, r3, #16
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	031b      	lsls	r3, r3, #12
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	f043 0307 	orr.w	r3, r3, #7
 8003638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	431a      	orrs	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e04f      	b.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d004      	beq.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a10      	ldr	r2, [pc, #64]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10c      	bne.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800371e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	4313      	orrs	r3, r2
 8003728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40014000 	.word	0x40014000

08003758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e040      	b.n	8003828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fd42 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fb0c 	bl	8003df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8af 	bl	8003944 <UART_SetConfig>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e01b      	b.n	8003828 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800380e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fb8b 	bl	8003f3c <UART_CheckIdleState>
 8003826:	4603      	mov	r3, r0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003844:	2b20      	cmp	r3, #32
 8003846:	d178      	bne.n	800393a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_UART_Transmit+0x24>
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e071      	b.n	800393c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2221      	movs	r2, #33	; 0x21
 8003864:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003866:	f7fd feeb 	bl	8001640 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003884:	d108      	bne.n	8003898 <HAL_UART_Transmit+0x68>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e003      	b.n	80038a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038a0:	e030      	b.n	8003904 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fbed 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e03c      	b.n	800393c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	b292      	uxth	r2, r2
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	3302      	adds	r3, #2
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e008      	b.n	80038f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	b292      	uxth	r2, r2
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1c8      	bne.n	80038a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fbb6 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e005      	b.n	800393c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b08a      	sub	sp, #40	; 0x28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	431a      	orrs	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4313      	orrs	r3, r2
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b9e      	ldr	r3, [pc, #632]	; (8003bec <UART_SetConfig+0x2a8>)
 8003974:	4013      	ands	r3, r2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397c:	430b      	orrs	r3, r1
 800397e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a93      	ldr	r2, [pc, #588]	; (8003bf0 <UART_SetConfig+0x2ac>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	4313      	orrs	r3, r2
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	430a      	orrs	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a8a      	ldr	r2, [pc, #552]	; (8003bf4 <UART_SetConfig+0x2b0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d126      	bne.n	8003a1c <UART_SetConfig+0xd8>
 80039ce:	4b8a      	ldr	r3, [pc, #552]	; (8003bf8 <UART_SetConfig+0x2b4>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d81b      	bhi.n	8003a14 <UART_SetConfig+0xd0>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0xa0>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a0d 	.word	0x08003a0d
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fa:	e0ab      	b.n	8003b54 <UART_SetConfig+0x210>
 80039fc:	2302      	movs	r3, #2
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e0a7      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a04:	2304      	movs	r3, #4
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e0a3      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e09f      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e09b      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a76      	ldr	r2, [pc, #472]	; (8003bfc <UART_SetConfig+0x2b8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d138      	bne.n	8003a98 <UART_SetConfig+0x154>
 8003a26:	4b74      	ldr	r3, [pc, #464]	; (8003bf8 <UART_SetConfig+0x2b4>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d82d      	bhi.n	8003a90 <UART_SetConfig+0x14c>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <UART_SetConfig+0xf8>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003a91 	.word	0x08003a91
 8003a44:	08003a91 	.word	0x08003a91
 8003a48:	08003a91 	.word	0x08003a91
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003a91 	.word	0x08003a91
 8003a54:	08003a91 	.word	0x08003a91
 8003a58:	08003a91 	.word	0x08003a91
 8003a5c:	08003a79 	.word	0x08003a79
 8003a60:	08003a91 	.word	0x08003a91
 8003a64:	08003a91 	.word	0x08003a91
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003a89 	.word	0x08003a89
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e06d      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e069      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a80:	2304      	movs	r3, #4
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e065      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e061      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e05d      	b.n	8003b54 <UART_SetConfig+0x210>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <UART_SetConfig+0x2bc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d125      	bne.n	8003aee <UART_SetConfig+0x1aa>
 8003aa2:	4b55      	ldr	r3, [pc, #340]	; (8003bf8 <UART_SetConfig+0x2b4>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aac:	2b30      	cmp	r3, #48	; 0x30
 8003aae:	d016      	beq.n	8003ade <UART_SetConfig+0x19a>
 8003ab0:	2b30      	cmp	r3, #48	; 0x30
 8003ab2:	d818      	bhi.n	8003ae6 <UART_SetConfig+0x1a2>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d00a      	beq.n	8003ace <UART_SetConfig+0x18a>
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d814      	bhi.n	8003ae6 <UART_SetConfig+0x1a2>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <UART_SetConfig+0x182>
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d008      	beq.n	8003ad6 <UART_SetConfig+0x192>
 8003ac4:	e00f      	b.n	8003ae6 <UART_SetConfig+0x1a2>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003acc:	e042      	b.n	8003b54 <UART_SetConfig+0x210>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad4:	e03e      	b.n	8003b54 <UART_SetConfig+0x210>
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003adc:	e03a      	b.n	8003b54 <UART_SetConfig+0x210>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae4:	e036      	b.n	8003b54 <UART_SetConfig+0x210>
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aec:	e032      	b.n	8003b54 <UART_SetConfig+0x210>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3f      	ldr	r2, [pc, #252]	; (8003bf0 <UART_SetConfig+0x2ac>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d12a      	bne.n	8003b4e <UART_SetConfig+0x20a>
 8003af8:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <UART_SetConfig+0x2b4>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b06:	d01a      	beq.n	8003b3e <UART_SetConfig+0x1fa>
 8003b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b0c:	d81b      	bhi.n	8003b46 <UART_SetConfig+0x202>
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b12:	d00c      	beq.n	8003b2e <UART_SetConfig+0x1ea>
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b18:	d815      	bhi.n	8003b46 <UART_SetConfig+0x202>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <UART_SetConfig+0x1e2>
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d008      	beq.n	8003b36 <UART_SetConfig+0x1f2>
 8003b24:	e00f      	b.n	8003b46 <UART_SetConfig+0x202>
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2c:	e012      	b.n	8003b54 <UART_SetConfig+0x210>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b34:	e00e      	b.n	8003b54 <UART_SetConfig+0x210>
 8003b36:	2304      	movs	r3, #4
 8003b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3c:	e00a      	b.n	8003b54 <UART_SetConfig+0x210>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b44:	e006      	b.n	8003b54 <UART_SetConfig+0x210>
 8003b46:	2310      	movs	r3, #16
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4c:	e002      	b.n	8003b54 <UART_SetConfig+0x210>
 8003b4e:	2310      	movs	r3, #16
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a25      	ldr	r2, [pc, #148]	; (8003bf0 <UART_SetConfig+0x2ac>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	f040 808a 	bne.w	8003c74 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d824      	bhi.n	8003bb2 <UART_SetConfig+0x26e>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <UART_SetConfig+0x22c>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003bb3 	.word	0x08003bb3
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003bb3 	.word	0x08003bb3
 8003b80:	08003ba3 	.word	0x08003ba3
 8003b84:	08003bb3 	.word	0x08003bb3
 8003b88:	08003bb3 	.word	0x08003bb3
 8003b8c:	08003bb3 	.word	0x08003bb3
 8003b90:	08003bab 	.word	0x08003bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fe fe14 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8003b98:	61f8      	str	r0, [r7, #28]
        break;
 8003b9a:	e010      	b.n	8003bbe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <UART_SetConfig+0x2c0>)
 8003b9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ba0:	e00d      	b.n	8003bbe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7fe fd75 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8003ba6:	61f8      	str	r0, [r7, #28]
        break;
 8003ba8:	e009      	b.n	8003bbe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bae:	61fb      	str	r3, [r7, #28]
        break;
 8003bb0:	e005      	b.n	8003bbe <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8109 	beq.w	8003dd8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d305      	bcc.n	8003be2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d912      	bls.n	8003c08 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003be8:	e0f6      	b.n	8003dd8 <UART_SetConfig+0x494>
 8003bea:	bf00      	nop
 8003bec:	efff69f3 	.word	0xefff69f3
 8003bf0:	40008000 	.word	0x40008000
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40004400 	.word	0x40004400
 8003c00:	40004800 	.word	0x40004800
 8003c04:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	461c      	mov	r4, r3
 8003c0e:	4615      	mov	r5, r2
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	022b      	lsls	r3, r5, #8
 8003c1a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c1e:	0222      	lsls	r2, r4, #8
 8003c20:	68f9      	ldr	r1, [r7, #12]
 8003c22:	6849      	ldr	r1, [r1, #4]
 8003c24:	0849      	lsrs	r1, r1, #1
 8003c26:	2000      	movs	r0, #0
 8003c28:	4688      	mov	r8, r1
 8003c2a:	4681      	mov	r9, r0
 8003c2c:	eb12 0a08 	adds.w	sl, r2, r8
 8003c30:	eb43 0b09 	adc.w	fp, r3, r9
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c42:	4650      	mov	r0, sl
 8003c44:	4659      	mov	r1, fp
 8003c46:	f7fc ffaf 	bl	8000ba8 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4613      	mov	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c58:	d308      	bcc.n	8003c6c <UART_SetConfig+0x328>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c60:	d204      	bcs.n	8003c6c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e0b5      	b.n	8003dd8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c72:	e0b1      	b.n	8003dd8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d15d      	bne.n	8003d3a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d827      	bhi.n	8003cd6 <UART_SetConfig+0x392>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0x348>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	08003cd7 	.word	0x08003cd7
 8003c9c:	08003cc7 	.word	0x08003cc7
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003cd7 	.word	0x08003cd7
 8003ca8:	08003cd7 	.word	0x08003cd7
 8003cac:	08003ccf 	.word	0x08003ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f7fe fd86 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8003cb4:	61f8      	str	r0, [r7, #28]
        break;
 8003cb6:	e014      	b.n	8003ce2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7fe fd98 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8003cbc:	61f8      	str	r0, [r7, #28]
        break;
 8003cbe:	e010      	b.n	8003ce2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc0:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <UART_SetConfig+0x4b0>)
 8003cc2:	61fb      	str	r3, [r7, #28]
        break;
 8003cc4:	e00d      	b.n	8003ce2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc6:	f7fe fce3 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8003cca:	61f8      	str	r0, [r7, #28]
        break;
 8003ccc:	e009      	b.n	8003ce2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	61fb      	str	r3, [r7, #28]
        break;
 8003cd4:	e005      	b.n	8003ce2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d077      	beq.n	8003dd8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005a      	lsls	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d916      	bls.n	8003d32 <UART_SetConfig+0x3ee>
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0a:	d212      	bcs.n	8003d32 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f023 030f 	bic.w	r3, r3, #15
 8003d14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	8afb      	ldrh	r3, [r7, #22]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	8afa      	ldrh	r2, [r7, #22]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	e052      	b.n	8003dd8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d38:	e04e      	b.n	8003dd8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d827      	bhi.n	8003d92 <UART_SetConfig+0x44e>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x404>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d75 	.word	0x08003d75
 8003d50:	08003d7d 	.word	0x08003d7d
 8003d54:	08003d93 	.word	0x08003d93
 8003d58:	08003d83 	.word	0x08003d83
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003d93 	.word	0x08003d93
 8003d68:	08003d8b 	.word	0x08003d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fd28 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8003d70:	61f8      	str	r0, [r7, #28]
        break;
 8003d72:	e014      	b.n	8003d9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d74:	f7fe fd3a 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8003d78:	61f8      	str	r0, [r7, #28]
        break;
 8003d7a:	e010      	b.n	8003d9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <UART_SetConfig+0x4b0>)
 8003d7e:	61fb      	str	r3, [r7, #28]
        break;
 8003d80:	e00d      	b.n	8003d9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d82:	f7fe fc85 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8003d86:	61f8      	str	r0, [r7, #28]
        break;
 8003d88:	e009      	b.n	8003d9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8e:	61fb      	str	r3, [r7, #28]
        break;
 8003d90:	e005      	b.n	8003d9e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d019      	beq.n	8003dd8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	085a      	lsrs	r2, r3, #1
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	d909      	bls.n	8003dd2 <UART_SetConfig+0x48e>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d205      	bcs.n	8003dd2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60da      	str	r2, [r3, #12]
 8003dd0:	e002      	b.n	8003dd8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003de4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3728      	adds	r7, #40	; 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df2:	bf00      	nop
 8003df4:	00f42400 	.word	0x00f42400

08003df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01a      	beq.n	8003f0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef6:	d10a      	bne.n	8003f0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  }
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b098      	sub	sp, #96	; 0x60
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f4c:	f7fd fb78 	bl	8001640 <HAL_GetTick>
 8003f50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d12e      	bne.n	8003fbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f88c 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d021      	beq.n	8003fbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f98:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e6      	bne.n	8003f7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e062      	b.n	8004084 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d149      	bne.n	8004060 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f856 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d03c      	beq.n	8004060 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004004:	633b      	str	r3, [r7, #48]	; 0x30
 8004006:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e6      	bne.n	8003fe6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	60fb      	str	r3, [r7, #12]
   return(result);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	69b9      	ldr	r1, [r7, #24]
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	617b      	str	r3, [r7, #20]
   return(result);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e011      	b.n	8004084 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3758      	adds	r7, #88	; 0x58
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	e049      	b.n	8004132 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a4:	d045      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fd facb 	bl	8001640 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <UART_WaitOnFlagUntilTimeout+0x30>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e048      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d031      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d110      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2208      	movs	r2, #8
 80040e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f838 	bl	800415a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2208      	movs	r2, #8
 80040ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e029      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410c:	d111      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f81e 	bl	800415a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e00f      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	429a      	cmp	r2, r3
 800414e:	d0a6      	beq.n	800409e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800415a:	b480      	push	{r7}
 800415c:	b095      	sub	sp, #84	; 0x54
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004180:	643b      	str	r3, [r7, #64]	; 0x40
 8004182:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e6      	bne.n	8004162 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d118      	bne.n	8004202 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f023 0310 	bic.w	r3, r3, #16
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6979      	ldr	r1, [r7, #20]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	613b      	str	r3, [r7, #16]
   return(result);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e6      	bne.n	80041d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004216:	bf00      	nop
 8004218:	3754      	adds	r7, #84	; 0x54
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <__cvt>:
 8004222:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004226:	ec55 4b10 	vmov	r4, r5, d0
 800422a:	2d00      	cmp	r5, #0
 800422c:	460e      	mov	r6, r1
 800422e:	4619      	mov	r1, r3
 8004230:	462b      	mov	r3, r5
 8004232:	bfbb      	ittet	lt
 8004234:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004238:	461d      	movlt	r5, r3
 800423a:	2300      	movge	r3, #0
 800423c:	232d      	movlt	r3, #45	; 0x2d
 800423e:	700b      	strb	r3, [r1, #0]
 8004240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004242:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004246:	4691      	mov	r9, r2
 8004248:	f023 0820 	bic.w	r8, r3, #32
 800424c:	bfbc      	itt	lt
 800424e:	4622      	movlt	r2, r4
 8004250:	4614      	movlt	r4, r2
 8004252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004256:	d005      	beq.n	8004264 <__cvt+0x42>
 8004258:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800425c:	d100      	bne.n	8004260 <__cvt+0x3e>
 800425e:	3601      	adds	r6, #1
 8004260:	2102      	movs	r1, #2
 8004262:	e000      	b.n	8004266 <__cvt+0x44>
 8004264:	2103      	movs	r1, #3
 8004266:	ab03      	add	r3, sp, #12
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	ab02      	add	r3, sp, #8
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	ec45 4b10 	vmov	d0, r4, r5
 8004272:	4653      	mov	r3, sl
 8004274:	4632      	mov	r2, r6
 8004276:	f000 fe47 	bl	8004f08 <_dtoa_r>
 800427a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800427e:	4607      	mov	r7, r0
 8004280:	d102      	bne.n	8004288 <__cvt+0x66>
 8004282:	f019 0f01 	tst.w	r9, #1
 8004286:	d022      	beq.n	80042ce <__cvt+0xac>
 8004288:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800428c:	eb07 0906 	add.w	r9, r7, r6
 8004290:	d110      	bne.n	80042b4 <__cvt+0x92>
 8004292:	783b      	ldrb	r3, [r7, #0]
 8004294:	2b30      	cmp	r3, #48	; 0x30
 8004296:	d10a      	bne.n	80042ae <__cvt+0x8c>
 8004298:	2200      	movs	r2, #0
 800429a:	2300      	movs	r3, #0
 800429c:	4620      	mov	r0, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	f7fc fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80042a4:	b918      	cbnz	r0, 80042ae <__cvt+0x8c>
 80042a6:	f1c6 0601 	rsb	r6, r6, #1
 80042aa:	f8ca 6000 	str.w	r6, [sl]
 80042ae:	f8da 3000 	ldr.w	r3, [sl]
 80042b2:	4499      	add	r9, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	2300      	movs	r3, #0
 80042b8:	4620      	mov	r0, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	f7fc fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80042c0:	b108      	cbz	r0, 80042c6 <__cvt+0xa4>
 80042c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80042c6:	2230      	movs	r2, #48	; 0x30
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	454b      	cmp	r3, r9
 80042cc:	d307      	bcc.n	80042de <__cvt+0xbc>
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042d2:	1bdb      	subs	r3, r3, r7
 80042d4:	4638      	mov	r0, r7
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	b004      	add	sp, #16
 80042da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	9103      	str	r1, [sp, #12]
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e7f0      	b.n	80042c8 <__cvt+0xa6>

080042e6 <__exponent>:
 80042e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042e8:	4603      	mov	r3, r0
 80042ea:	2900      	cmp	r1, #0
 80042ec:	bfb8      	it	lt
 80042ee:	4249      	neglt	r1, r1
 80042f0:	f803 2b02 	strb.w	r2, [r3], #2
 80042f4:	bfb4      	ite	lt
 80042f6:	222d      	movlt	r2, #45	; 0x2d
 80042f8:	222b      	movge	r2, #43	; 0x2b
 80042fa:	2909      	cmp	r1, #9
 80042fc:	7042      	strb	r2, [r0, #1]
 80042fe:	dd2a      	ble.n	8004356 <__exponent+0x70>
 8004300:	f10d 0207 	add.w	r2, sp, #7
 8004304:	4617      	mov	r7, r2
 8004306:	260a      	movs	r6, #10
 8004308:	4694      	mov	ip, r2
 800430a:	fb91 f5f6 	sdiv	r5, r1, r6
 800430e:	fb06 1415 	mls	r4, r6, r5, r1
 8004312:	3430      	adds	r4, #48	; 0x30
 8004314:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004318:	460c      	mov	r4, r1
 800431a:	2c63      	cmp	r4, #99	; 0x63
 800431c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004320:	4629      	mov	r1, r5
 8004322:	dcf1      	bgt.n	8004308 <__exponent+0x22>
 8004324:	3130      	adds	r1, #48	; 0x30
 8004326:	f1ac 0402 	sub.w	r4, ip, #2
 800432a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800432e:	1c41      	adds	r1, r0, #1
 8004330:	4622      	mov	r2, r4
 8004332:	42ba      	cmp	r2, r7
 8004334:	d30a      	bcc.n	800434c <__exponent+0x66>
 8004336:	f10d 0209 	add.w	r2, sp, #9
 800433a:	eba2 020c 	sub.w	r2, r2, ip
 800433e:	42bc      	cmp	r4, r7
 8004340:	bf88      	it	hi
 8004342:	2200      	movhi	r2, #0
 8004344:	4413      	add	r3, r2
 8004346:	1a18      	subs	r0, r3, r0
 8004348:	b003      	add	sp, #12
 800434a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004350:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004354:	e7ed      	b.n	8004332 <__exponent+0x4c>
 8004356:	2330      	movs	r3, #48	; 0x30
 8004358:	3130      	adds	r1, #48	; 0x30
 800435a:	7083      	strb	r3, [r0, #2]
 800435c:	70c1      	strb	r1, [r0, #3]
 800435e:	1d03      	adds	r3, r0, #4
 8004360:	e7f1      	b.n	8004346 <__exponent+0x60>
	...

08004364 <_printf_float>:
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	ed2d 8b02 	vpush	{d8}
 800436c:	b08d      	sub	sp, #52	; 0x34
 800436e:	460c      	mov	r4, r1
 8004370:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004374:	4616      	mov	r6, r2
 8004376:	461f      	mov	r7, r3
 8004378:	4605      	mov	r5, r0
 800437a:	f000 fcc7 	bl	8004d0c <_localeconv_r>
 800437e:	f8d0 a000 	ldr.w	sl, [r0]
 8004382:	4650      	mov	r0, sl
 8004384:	f7fb ff74 	bl	8000270 <strlen>
 8004388:	2300      	movs	r3, #0
 800438a:	930a      	str	r3, [sp, #40]	; 0x28
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	9305      	str	r3, [sp, #20]
 8004390:	f8d8 3000 	ldr.w	r3, [r8]
 8004394:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004398:	3307      	adds	r3, #7
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	f103 0208 	add.w	r2, r3, #8
 80043a2:	f8c8 2000 	str.w	r2, [r8]
 80043a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043ae:	9307      	str	r3, [sp, #28]
 80043b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80043b4:	ee08 0a10 	vmov	s16, r0
 80043b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80043bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043c0:	4b9e      	ldr	r3, [pc, #632]	; (800463c <_printf_float+0x2d8>)
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043c6:	f7fc fbb1 	bl	8000b2c <__aeabi_dcmpun>
 80043ca:	bb88      	cbnz	r0, 8004430 <_printf_float+0xcc>
 80043cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043d0:	4b9a      	ldr	r3, [pc, #616]	; (800463c <_printf_float+0x2d8>)
 80043d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043d6:	f7fc fb8b 	bl	8000af0 <__aeabi_dcmple>
 80043da:	bb48      	cbnz	r0, 8004430 <_printf_float+0xcc>
 80043dc:	2200      	movs	r2, #0
 80043de:	2300      	movs	r3, #0
 80043e0:	4640      	mov	r0, r8
 80043e2:	4649      	mov	r1, r9
 80043e4:	f7fc fb7a 	bl	8000adc <__aeabi_dcmplt>
 80043e8:	b110      	cbz	r0, 80043f0 <_printf_float+0x8c>
 80043ea:	232d      	movs	r3, #45	; 0x2d
 80043ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f0:	4a93      	ldr	r2, [pc, #588]	; (8004640 <_printf_float+0x2dc>)
 80043f2:	4b94      	ldr	r3, [pc, #592]	; (8004644 <_printf_float+0x2e0>)
 80043f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043f8:	bf94      	ite	ls
 80043fa:	4690      	movls	r8, r2
 80043fc:	4698      	movhi	r8, r3
 80043fe:	2303      	movs	r3, #3
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	9b05      	ldr	r3, [sp, #20]
 8004404:	f023 0304 	bic.w	r3, r3, #4
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	f04f 0900 	mov.w	r9, #0
 800440e:	9700      	str	r7, [sp, #0]
 8004410:	4633      	mov	r3, r6
 8004412:	aa0b      	add	r2, sp, #44	; 0x2c
 8004414:	4621      	mov	r1, r4
 8004416:	4628      	mov	r0, r5
 8004418:	f000 f9da 	bl	80047d0 <_printf_common>
 800441c:	3001      	adds	r0, #1
 800441e:	f040 8090 	bne.w	8004542 <_printf_float+0x1de>
 8004422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004426:	b00d      	add	sp, #52	; 0x34
 8004428:	ecbd 8b02 	vpop	{d8}
 800442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004430:	4642      	mov	r2, r8
 8004432:	464b      	mov	r3, r9
 8004434:	4640      	mov	r0, r8
 8004436:	4649      	mov	r1, r9
 8004438:	f7fc fb78 	bl	8000b2c <__aeabi_dcmpun>
 800443c:	b140      	cbz	r0, 8004450 <_printf_float+0xec>
 800443e:	464b      	mov	r3, r9
 8004440:	2b00      	cmp	r3, #0
 8004442:	bfbc      	itt	lt
 8004444:	232d      	movlt	r3, #45	; 0x2d
 8004446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800444a:	4a7f      	ldr	r2, [pc, #508]	; (8004648 <_printf_float+0x2e4>)
 800444c:	4b7f      	ldr	r3, [pc, #508]	; (800464c <_printf_float+0x2e8>)
 800444e:	e7d1      	b.n	80043f4 <_printf_float+0x90>
 8004450:	6863      	ldr	r3, [r4, #4]
 8004452:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004456:	9206      	str	r2, [sp, #24]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	d13f      	bne.n	80044dc <_printf_float+0x178>
 800445c:	2306      	movs	r3, #6
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	9b05      	ldr	r3, [sp, #20]
 8004462:	6861      	ldr	r1, [r4, #4]
 8004464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004468:	2300      	movs	r3, #0
 800446a:	9303      	str	r3, [sp, #12]
 800446c:	ab0a      	add	r3, sp, #40	; 0x28
 800446e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004472:	ab09      	add	r3, sp, #36	; 0x24
 8004474:	ec49 8b10 	vmov	d0, r8, r9
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	6022      	str	r2, [r4, #0]
 800447c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004480:	4628      	mov	r0, r5
 8004482:	f7ff fece 	bl	8004222 <__cvt>
 8004486:	9b06      	ldr	r3, [sp, #24]
 8004488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800448a:	2b47      	cmp	r3, #71	; 0x47
 800448c:	4680      	mov	r8, r0
 800448e:	d108      	bne.n	80044a2 <_printf_float+0x13e>
 8004490:	1cc8      	adds	r0, r1, #3
 8004492:	db02      	blt.n	800449a <_printf_float+0x136>
 8004494:	6863      	ldr	r3, [r4, #4]
 8004496:	4299      	cmp	r1, r3
 8004498:	dd41      	ble.n	800451e <_printf_float+0x1ba>
 800449a:	f1ab 0302 	sub.w	r3, fp, #2
 800449e:	fa5f fb83 	uxtb.w	fp, r3
 80044a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044a6:	d820      	bhi.n	80044ea <_printf_float+0x186>
 80044a8:	3901      	subs	r1, #1
 80044aa:	465a      	mov	r2, fp
 80044ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044b0:	9109      	str	r1, [sp, #36]	; 0x24
 80044b2:	f7ff ff18 	bl	80042e6 <__exponent>
 80044b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044b8:	1813      	adds	r3, r2, r0
 80044ba:	2a01      	cmp	r2, #1
 80044bc:	4681      	mov	r9, r0
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	dc02      	bgt.n	80044c8 <_printf_float+0x164>
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	07d2      	lsls	r2, r2, #31
 80044c6:	d501      	bpl.n	80044cc <_printf_float+0x168>
 80044c8:	3301      	adds	r3, #1
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d09c      	beq.n	800440e <_printf_float+0xaa>
 80044d4:	232d      	movs	r3, #45	; 0x2d
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	e798      	b.n	800440e <_printf_float+0xaa>
 80044dc:	9a06      	ldr	r2, [sp, #24]
 80044de:	2a47      	cmp	r2, #71	; 0x47
 80044e0:	d1be      	bne.n	8004460 <_printf_float+0xfc>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1bc      	bne.n	8004460 <_printf_float+0xfc>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e7b9      	b.n	800445e <_printf_float+0xfa>
 80044ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044ee:	d118      	bne.n	8004522 <_printf_float+0x1be>
 80044f0:	2900      	cmp	r1, #0
 80044f2:	6863      	ldr	r3, [r4, #4]
 80044f4:	dd0b      	ble.n	800450e <_printf_float+0x1aa>
 80044f6:	6121      	str	r1, [r4, #16]
 80044f8:	b913      	cbnz	r3, 8004500 <_printf_float+0x19c>
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	07d0      	lsls	r0, r2, #31
 80044fe:	d502      	bpl.n	8004506 <_printf_float+0x1a2>
 8004500:	3301      	adds	r3, #1
 8004502:	440b      	add	r3, r1
 8004504:	6123      	str	r3, [r4, #16]
 8004506:	65a1      	str	r1, [r4, #88]	; 0x58
 8004508:	f04f 0900 	mov.w	r9, #0
 800450c:	e7de      	b.n	80044cc <_printf_float+0x168>
 800450e:	b913      	cbnz	r3, 8004516 <_printf_float+0x1b2>
 8004510:	6822      	ldr	r2, [r4, #0]
 8004512:	07d2      	lsls	r2, r2, #31
 8004514:	d501      	bpl.n	800451a <_printf_float+0x1b6>
 8004516:	3302      	adds	r3, #2
 8004518:	e7f4      	b.n	8004504 <_printf_float+0x1a0>
 800451a:	2301      	movs	r3, #1
 800451c:	e7f2      	b.n	8004504 <_printf_float+0x1a0>
 800451e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004524:	4299      	cmp	r1, r3
 8004526:	db05      	blt.n	8004534 <_printf_float+0x1d0>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	6121      	str	r1, [r4, #16]
 800452c:	07d8      	lsls	r0, r3, #31
 800452e:	d5ea      	bpl.n	8004506 <_printf_float+0x1a2>
 8004530:	1c4b      	adds	r3, r1, #1
 8004532:	e7e7      	b.n	8004504 <_printf_float+0x1a0>
 8004534:	2900      	cmp	r1, #0
 8004536:	bfd4      	ite	le
 8004538:	f1c1 0202 	rsble	r2, r1, #2
 800453c:	2201      	movgt	r2, #1
 800453e:	4413      	add	r3, r2
 8004540:	e7e0      	b.n	8004504 <_printf_float+0x1a0>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	055a      	lsls	r2, r3, #21
 8004546:	d407      	bmi.n	8004558 <_printf_float+0x1f4>
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	4642      	mov	r2, r8
 800454c:	4631      	mov	r1, r6
 800454e:	4628      	mov	r0, r5
 8004550:	47b8      	blx	r7
 8004552:	3001      	adds	r0, #1
 8004554:	d12c      	bne.n	80045b0 <_printf_float+0x24c>
 8004556:	e764      	b.n	8004422 <_printf_float+0xbe>
 8004558:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800455c:	f240 80e0 	bls.w	8004720 <_printf_float+0x3bc>
 8004560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004564:	2200      	movs	r2, #0
 8004566:	2300      	movs	r3, #0
 8004568:	f7fc faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800456c:	2800      	cmp	r0, #0
 800456e:	d034      	beq.n	80045da <_printf_float+0x276>
 8004570:	4a37      	ldr	r2, [pc, #220]	; (8004650 <_printf_float+0x2ec>)
 8004572:	2301      	movs	r3, #1
 8004574:	4631      	mov	r1, r6
 8004576:	4628      	mov	r0, r5
 8004578:	47b8      	blx	r7
 800457a:	3001      	adds	r0, #1
 800457c:	f43f af51 	beq.w	8004422 <_printf_float+0xbe>
 8004580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004584:	429a      	cmp	r2, r3
 8004586:	db02      	blt.n	800458e <_printf_float+0x22a>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	07d8      	lsls	r0, r3, #31
 800458c:	d510      	bpl.n	80045b0 <_printf_float+0x24c>
 800458e:	ee18 3a10 	vmov	r3, s16
 8004592:	4652      	mov	r2, sl
 8004594:	4631      	mov	r1, r6
 8004596:	4628      	mov	r0, r5
 8004598:	47b8      	blx	r7
 800459a:	3001      	adds	r0, #1
 800459c:	f43f af41 	beq.w	8004422 <_printf_float+0xbe>
 80045a0:	f04f 0800 	mov.w	r8, #0
 80045a4:	f104 091a 	add.w	r9, r4, #26
 80045a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4543      	cmp	r3, r8
 80045ae:	dc09      	bgt.n	80045c4 <_printf_float+0x260>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	079b      	lsls	r3, r3, #30
 80045b4:	f100 8107 	bmi.w	80047c6 <_printf_float+0x462>
 80045b8:	68e0      	ldr	r0, [r4, #12]
 80045ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045bc:	4298      	cmp	r0, r3
 80045be:	bfb8      	it	lt
 80045c0:	4618      	movlt	r0, r3
 80045c2:	e730      	b.n	8004426 <_printf_float+0xc2>
 80045c4:	2301      	movs	r3, #1
 80045c6:	464a      	mov	r2, r9
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	f43f af27 	beq.w	8004422 <_printf_float+0xbe>
 80045d4:	f108 0801 	add.w	r8, r8, #1
 80045d8:	e7e6      	b.n	80045a8 <_printf_float+0x244>
 80045da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dc39      	bgt.n	8004654 <_printf_float+0x2f0>
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <_printf_float+0x2ec>)
 80045e2:	2301      	movs	r3, #1
 80045e4:	4631      	mov	r1, r6
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b8      	blx	r7
 80045ea:	3001      	adds	r0, #1
 80045ec:	f43f af19 	beq.w	8004422 <_printf_float+0xbe>
 80045f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045f4:	4313      	orrs	r3, r2
 80045f6:	d102      	bne.n	80045fe <_printf_float+0x29a>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	07d9      	lsls	r1, r3, #31
 80045fc:	d5d8      	bpl.n	80045b0 <_printf_float+0x24c>
 80045fe:	ee18 3a10 	vmov	r3, s16
 8004602:	4652      	mov	r2, sl
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	47b8      	blx	r7
 800460a:	3001      	adds	r0, #1
 800460c:	f43f af09 	beq.w	8004422 <_printf_float+0xbe>
 8004610:	f04f 0900 	mov.w	r9, #0
 8004614:	f104 0a1a 	add.w	sl, r4, #26
 8004618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461a:	425b      	negs	r3, r3
 800461c:	454b      	cmp	r3, r9
 800461e:	dc01      	bgt.n	8004624 <_printf_float+0x2c0>
 8004620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004622:	e792      	b.n	800454a <_printf_float+0x1e6>
 8004624:	2301      	movs	r3, #1
 8004626:	4652      	mov	r2, sl
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f aef7 	beq.w	8004422 <_printf_float+0xbe>
 8004634:	f109 0901 	add.w	r9, r9, #1
 8004638:	e7ee      	b.n	8004618 <_printf_float+0x2b4>
 800463a:	bf00      	nop
 800463c:	7fefffff 	.word	0x7fefffff
 8004640:	08006c10 	.word	0x08006c10
 8004644:	08006c14 	.word	0x08006c14
 8004648:	08006c18 	.word	0x08006c18
 800464c:	08006c1c 	.word	0x08006c1c
 8004650:	08006c20 	.word	0x08006c20
 8004654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004658:	429a      	cmp	r2, r3
 800465a:	bfa8      	it	ge
 800465c:	461a      	movge	r2, r3
 800465e:	2a00      	cmp	r2, #0
 8004660:	4691      	mov	r9, r2
 8004662:	dc37      	bgt.n	80046d4 <_printf_float+0x370>
 8004664:	f04f 0b00 	mov.w	fp, #0
 8004668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800466c:	f104 021a 	add.w	r2, r4, #26
 8004670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004672:	9305      	str	r3, [sp, #20]
 8004674:	eba3 0309 	sub.w	r3, r3, r9
 8004678:	455b      	cmp	r3, fp
 800467a:	dc33      	bgt.n	80046e4 <_printf_float+0x380>
 800467c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004680:	429a      	cmp	r2, r3
 8004682:	db3b      	blt.n	80046fc <_printf_float+0x398>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	07da      	lsls	r2, r3, #31
 8004688:	d438      	bmi.n	80046fc <_printf_float+0x398>
 800468a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800468e:	eba2 0903 	sub.w	r9, r2, r3
 8004692:	9b05      	ldr	r3, [sp, #20]
 8004694:	1ad2      	subs	r2, r2, r3
 8004696:	4591      	cmp	r9, r2
 8004698:	bfa8      	it	ge
 800469a:	4691      	movge	r9, r2
 800469c:	f1b9 0f00 	cmp.w	r9, #0
 80046a0:	dc35      	bgt.n	800470e <_printf_float+0x3aa>
 80046a2:	f04f 0800 	mov.w	r8, #0
 80046a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046aa:	f104 0a1a 	add.w	sl, r4, #26
 80046ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	eba3 0309 	sub.w	r3, r3, r9
 80046b8:	4543      	cmp	r3, r8
 80046ba:	f77f af79 	ble.w	80045b0 <_printf_float+0x24c>
 80046be:	2301      	movs	r3, #1
 80046c0:	4652      	mov	r2, sl
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	47b8      	blx	r7
 80046c8:	3001      	adds	r0, #1
 80046ca:	f43f aeaa 	beq.w	8004422 <_printf_float+0xbe>
 80046ce:	f108 0801 	add.w	r8, r8, #1
 80046d2:	e7ec      	b.n	80046ae <_printf_float+0x34a>
 80046d4:	4613      	mov	r3, r2
 80046d6:	4631      	mov	r1, r6
 80046d8:	4642      	mov	r2, r8
 80046da:	4628      	mov	r0, r5
 80046dc:	47b8      	blx	r7
 80046de:	3001      	adds	r0, #1
 80046e0:	d1c0      	bne.n	8004664 <_printf_float+0x300>
 80046e2:	e69e      	b.n	8004422 <_printf_float+0xbe>
 80046e4:	2301      	movs	r3, #1
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	9205      	str	r2, [sp, #20]
 80046ec:	47b8      	blx	r7
 80046ee:	3001      	adds	r0, #1
 80046f0:	f43f ae97 	beq.w	8004422 <_printf_float+0xbe>
 80046f4:	9a05      	ldr	r2, [sp, #20]
 80046f6:	f10b 0b01 	add.w	fp, fp, #1
 80046fa:	e7b9      	b.n	8004670 <_printf_float+0x30c>
 80046fc:	ee18 3a10 	vmov	r3, s16
 8004700:	4652      	mov	r2, sl
 8004702:	4631      	mov	r1, r6
 8004704:	4628      	mov	r0, r5
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	d1be      	bne.n	800468a <_printf_float+0x326>
 800470c:	e689      	b.n	8004422 <_printf_float+0xbe>
 800470e:	9a05      	ldr	r2, [sp, #20]
 8004710:	464b      	mov	r3, r9
 8004712:	4442      	add	r2, r8
 8004714:	4631      	mov	r1, r6
 8004716:	4628      	mov	r0, r5
 8004718:	47b8      	blx	r7
 800471a:	3001      	adds	r0, #1
 800471c:	d1c1      	bne.n	80046a2 <_printf_float+0x33e>
 800471e:	e680      	b.n	8004422 <_printf_float+0xbe>
 8004720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004722:	2a01      	cmp	r2, #1
 8004724:	dc01      	bgt.n	800472a <_printf_float+0x3c6>
 8004726:	07db      	lsls	r3, r3, #31
 8004728:	d53a      	bpl.n	80047a0 <_printf_float+0x43c>
 800472a:	2301      	movs	r3, #1
 800472c:	4642      	mov	r2, r8
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	f43f ae74 	beq.w	8004422 <_printf_float+0xbe>
 800473a:	ee18 3a10 	vmov	r3, s16
 800473e:	4652      	mov	r2, sl
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f ae6b 	beq.w	8004422 <_printf_float+0xbe>
 800474c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004750:	2200      	movs	r2, #0
 8004752:	2300      	movs	r3, #0
 8004754:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004758:	f7fc f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800475c:	b9d8      	cbnz	r0, 8004796 <_printf_float+0x432>
 800475e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004762:	f108 0201 	add.w	r2, r8, #1
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	d10e      	bne.n	800478e <_printf_float+0x42a>
 8004770:	e657      	b.n	8004422 <_printf_float+0xbe>
 8004772:	2301      	movs	r3, #1
 8004774:	4652      	mov	r2, sl
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	f43f ae50 	beq.w	8004422 <_printf_float+0xbe>
 8004782:	f108 0801 	add.w	r8, r8, #1
 8004786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004788:	3b01      	subs	r3, #1
 800478a:	4543      	cmp	r3, r8
 800478c:	dcf1      	bgt.n	8004772 <_printf_float+0x40e>
 800478e:	464b      	mov	r3, r9
 8004790:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004794:	e6da      	b.n	800454c <_printf_float+0x1e8>
 8004796:	f04f 0800 	mov.w	r8, #0
 800479a:	f104 0a1a 	add.w	sl, r4, #26
 800479e:	e7f2      	b.n	8004786 <_printf_float+0x422>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4642      	mov	r2, r8
 80047a4:	e7df      	b.n	8004766 <_printf_float+0x402>
 80047a6:	2301      	movs	r3, #1
 80047a8:	464a      	mov	r2, r9
 80047aa:	4631      	mov	r1, r6
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b8      	blx	r7
 80047b0:	3001      	adds	r0, #1
 80047b2:	f43f ae36 	beq.w	8004422 <_printf_float+0xbe>
 80047b6:	f108 0801 	add.w	r8, r8, #1
 80047ba:	68e3      	ldr	r3, [r4, #12]
 80047bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047be:	1a5b      	subs	r3, r3, r1
 80047c0:	4543      	cmp	r3, r8
 80047c2:	dcf0      	bgt.n	80047a6 <_printf_float+0x442>
 80047c4:	e6f8      	b.n	80045b8 <_printf_float+0x254>
 80047c6:	f04f 0800 	mov.w	r8, #0
 80047ca:	f104 0919 	add.w	r9, r4, #25
 80047ce:	e7f4      	b.n	80047ba <_printf_float+0x456>

080047d0 <_printf_common>:
 80047d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	4616      	mov	r6, r2
 80047d6:	4699      	mov	r9, r3
 80047d8:	688a      	ldr	r2, [r1, #8]
 80047da:	690b      	ldr	r3, [r1, #16]
 80047dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bfb8      	it	lt
 80047e4:	4613      	movlt	r3, r2
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ec:	4607      	mov	r7, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	b10a      	cbz	r2, 80047f6 <_printf_common+0x26>
 80047f2:	3301      	adds	r3, #1
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	0699      	lsls	r1, r3, #26
 80047fa:	bf42      	ittt	mi
 80047fc:	6833      	ldrmi	r3, [r6, #0]
 80047fe:	3302      	addmi	r3, #2
 8004800:	6033      	strmi	r3, [r6, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	f015 0506 	ands.w	r5, r5, #6
 8004808:	d106      	bne.n	8004818 <_printf_common+0x48>
 800480a:	f104 0a19 	add.w	sl, r4, #25
 800480e:	68e3      	ldr	r3, [r4, #12]
 8004810:	6832      	ldr	r2, [r6, #0]
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	42ab      	cmp	r3, r5
 8004816:	dc26      	bgt.n	8004866 <_printf_common+0x96>
 8004818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800481c:	1e13      	subs	r3, r2, #0
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	bf18      	it	ne
 8004822:	2301      	movne	r3, #1
 8004824:	0692      	lsls	r2, r2, #26
 8004826:	d42b      	bmi.n	8004880 <_printf_common+0xb0>
 8004828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d01e      	beq.n	8004874 <_printf_common+0xa4>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf02      	ittt	eq
 8004842:	68e5      	ldreq	r5, [r4, #12]
 8004844:	6833      	ldreq	r3, [r6, #0]
 8004846:	1aed      	subeq	r5, r5, r3
 8004848:	68a3      	ldr	r3, [r4, #8]
 800484a:	bf0c      	ite	eq
 800484c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004850:	2500      	movne	r5, #0
 8004852:	4293      	cmp	r3, r2
 8004854:	bfc4      	itt	gt
 8004856:	1a9b      	subgt	r3, r3, r2
 8004858:	18ed      	addgt	r5, r5, r3
 800485a:	2600      	movs	r6, #0
 800485c:	341a      	adds	r4, #26
 800485e:	42b5      	cmp	r5, r6
 8004860:	d11a      	bne.n	8004898 <_printf_common+0xc8>
 8004862:	2000      	movs	r0, #0
 8004864:	e008      	b.n	8004878 <_printf_common+0xa8>
 8004866:	2301      	movs	r3, #1
 8004868:	4652      	mov	r2, sl
 800486a:	4649      	mov	r1, r9
 800486c:	4638      	mov	r0, r7
 800486e:	47c0      	blx	r8
 8004870:	3001      	adds	r0, #1
 8004872:	d103      	bne.n	800487c <_printf_common+0xac>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487c:	3501      	adds	r5, #1
 800487e:	e7c6      	b.n	800480e <_printf_common+0x3e>
 8004880:	18e1      	adds	r1, r4, r3
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	2030      	movs	r0, #48	; 0x30
 8004886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800488a:	4422      	add	r2, r4
 800488c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004894:	3302      	adds	r3, #2
 8004896:	e7c7      	b.n	8004828 <_printf_common+0x58>
 8004898:	2301      	movs	r3, #1
 800489a:	4622      	mov	r2, r4
 800489c:	4649      	mov	r1, r9
 800489e:	4638      	mov	r0, r7
 80048a0:	47c0      	blx	r8
 80048a2:	3001      	adds	r0, #1
 80048a4:	d0e6      	beq.n	8004874 <_printf_common+0xa4>
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7d9      	b.n	800485e <_printf_common+0x8e>
	...

080048ac <_printf_i>:
 80048ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	7e0f      	ldrb	r7, [r1, #24]
 80048b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048b4:	2f78      	cmp	r7, #120	; 0x78
 80048b6:	4691      	mov	r9, r2
 80048b8:	4680      	mov	r8, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	469a      	mov	sl, r3
 80048be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048c2:	d807      	bhi.n	80048d4 <_printf_i+0x28>
 80048c4:	2f62      	cmp	r7, #98	; 0x62
 80048c6:	d80a      	bhi.n	80048de <_printf_i+0x32>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	f000 80d4 	beq.w	8004a76 <_printf_i+0x1ca>
 80048ce:	2f58      	cmp	r7, #88	; 0x58
 80048d0:	f000 80c0 	beq.w	8004a54 <_printf_i+0x1a8>
 80048d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048dc:	e03a      	b.n	8004954 <_printf_i+0xa8>
 80048de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e2:	2b15      	cmp	r3, #21
 80048e4:	d8f6      	bhi.n	80048d4 <_printf_i+0x28>
 80048e6:	a101      	add	r1, pc, #4	; (adr r1, 80048ec <_printf_i+0x40>)
 80048e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048ec:	08004945 	.word	0x08004945
 80048f0:	08004959 	.word	0x08004959
 80048f4:	080048d5 	.word	0x080048d5
 80048f8:	080048d5 	.word	0x080048d5
 80048fc:	080048d5 	.word	0x080048d5
 8004900:	080048d5 	.word	0x080048d5
 8004904:	08004959 	.word	0x08004959
 8004908:	080048d5 	.word	0x080048d5
 800490c:	080048d5 	.word	0x080048d5
 8004910:	080048d5 	.word	0x080048d5
 8004914:	080048d5 	.word	0x080048d5
 8004918:	08004a5d 	.word	0x08004a5d
 800491c:	08004985 	.word	0x08004985
 8004920:	08004a17 	.word	0x08004a17
 8004924:	080048d5 	.word	0x080048d5
 8004928:	080048d5 	.word	0x080048d5
 800492c:	08004a7f 	.word	0x08004a7f
 8004930:	080048d5 	.word	0x080048d5
 8004934:	08004985 	.word	0x08004985
 8004938:	080048d5 	.word	0x080048d5
 800493c:	080048d5 	.word	0x080048d5
 8004940:	08004a1f 	.word	0x08004a1f
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	602a      	str	r2, [r5, #0]
 800494c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004954:	2301      	movs	r3, #1
 8004956:	e09f      	b.n	8004a98 <_printf_i+0x1ec>
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	0607      	lsls	r7, r0, #24
 800495e:	f103 0104 	add.w	r1, r3, #4
 8004962:	6029      	str	r1, [r5, #0]
 8004964:	d501      	bpl.n	800496a <_printf_i+0xbe>
 8004966:	681e      	ldr	r6, [r3, #0]
 8004968:	e003      	b.n	8004972 <_printf_i+0xc6>
 800496a:	0646      	lsls	r6, r0, #25
 800496c:	d5fb      	bpl.n	8004966 <_printf_i+0xba>
 800496e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004972:	2e00      	cmp	r6, #0
 8004974:	da03      	bge.n	800497e <_printf_i+0xd2>
 8004976:	232d      	movs	r3, #45	; 0x2d
 8004978:	4276      	negs	r6, r6
 800497a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497e:	485a      	ldr	r0, [pc, #360]	; (8004ae8 <_printf_i+0x23c>)
 8004980:	230a      	movs	r3, #10
 8004982:	e012      	b.n	80049aa <_printf_i+0xfe>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	6029      	str	r1, [r5, #0]
 800498c:	0605      	lsls	r5, r0, #24
 800498e:	d501      	bpl.n	8004994 <_printf_i+0xe8>
 8004990:	681e      	ldr	r6, [r3, #0]
 8004992:	e002      	b.n	800499a <_printf_i+0xee>
 8004994:	0641      	lsls	r1, r0, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0xe4>
 8004998:	881e      	ldrh	r6, [r3, #0]
 800499a:	4853      	ldr	r0, [pc, #332]	; (8004ae8 <_printf_i+0x23c>)
 800499c:	2f6f      	cmp	r7, #111	; 0x6f
 800499e:	bf0c      	ite	eq
 80049a0:	2308      	moveq	r3, #8
 80049a2:	230a      	movne	r3, #10
 80049a4:	2100      	movs	r1, #0
 80049a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049aa:	6865      	ldr	r5, [r4, #4]
 80049ac:	60a5      	str	r5, [r4, #8]
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	bfa2      	ittt	ge
 80049b2:	6821      	ldrge	r1, [r4, #0]
 80049b4:	f021 0104 	bicge.w	r1, r1, #4
 80049b8:	6021      	strge	r1, [r4, #0]
 80049ba:	b90e      	cbnz	r6, 80049c0 <_printf_i+0x114>
 80049bc:	2d00      	cmp	r5, #0
 80049be:	d04b      	beq.n	8004a58 <_printf_i+0x1ac>
 80049c0:	4615      	mov	r5, r2
 80049c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80049c6:	fb03 6711 	mls	r7, r3, r1, r6
 80049ca:	5dc7      	ldrb	r7, [r0, r7]
 80049cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049d0:	4637      	mov	r7, r6
 80049d2:	42bb      	cmp	r3, r7
 80049d4:	460e      	mov	r6, r1
 80049d6:	d9f4      	bls.n	80049c2 <_printf_i+0x116>
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d10b      	bne.n	80049f4 <_printf_i+0x148>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	07de      	lsls	r6, r3, #31
 80049e0:	d508      	bpl.n	80049f4 <_printf_i+0x148>
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	6861      	ldr	r1, [r4, #4]
 80049e6:	4299      	cmp	r1, r3
 80049e8:	bfde      	ittt	le
 80049ea:	2330      	movle	r3, #48	; 0x30
 80049ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049f4:	1b52      	subs	r2, r2, r5
 80049f6:	6122      	str	r2, [r4, #16]
 80049f8:	f8cd a000 	str.w	sl, [sp]
 80049fc:	464b      	mov	r3, r9
 80049fe:	aa03      	add	r2, sp, #12
 8004a00:	4621      	mov	r1, r4
 8004a02:	4640      	mov	r0, r8
 8004a04:	f7ff fee4 	bl	80047d0 <_printf_common>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d14a      	bne.n	8004aa2 <_printf_i+0x1f6>
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a10:	b004      	add	sp, #16
 8004a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	f043 0320 	orr.w	r3, r3, #32
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	4833      	ldr	r0, [pc, #204]	; (8004aec <_printf_i+0x240>)
 8004a20:	2778      	movs	r7, #120	; 0x78
 8004a22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	6829      	ldr	r1, [r5, #0]
 8004a2a:	061f      	lsls	r7, r3, #24
 8004a2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a30:	d402      	bmi.n	8004a38 <_printf_i+0x18c>
 8004a32:	065f      	lsls	r7, r3, #25
 8004a34:	bf48      	it	mi
 8004a36:	b2b6      	uxthmi	r6, r6
 8004a38:	07df      	lsls	r7, r3, #31
 8004a3a:	bf48      	it	mi
 8004a3c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a40:	6029      	str	r1, [r5, #0]
 8004a42:	bf48      	it	mi
 8004a44:	6023      	strmi	r3, [r4, #0]
 8004a46:	b91e      	cbnz	r6, 8004a50 <_printf_i+0x1a4>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f023 0320 	bic.w	r3, r3, #32
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	2310      	movs	r3, #16
 8004a52:	e7a7      	b.n	80049a4 <_printf_i+0xf8>
 8004a54:	4824      	ldr	r0, [pc, #144]	; (8004ae8 <_printf_i+0x23c>)
 8004a56:	e7e4      	b.n	8004a22 <_printf_i+0x176>
 8004a58:	4615      	mov	r5, r2
 8004a5a:	e7bd      	b.n	80049d8 <_printf_i+0x12c>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	6826      	ldr	r6, [r4, #0]
 8004a60:	6961      	ldr	r1, [r4, #20]
 8004a62:	1d18      	adds	r0, r3, #4
 8004a64:	6028      	str	r0, [r5, #0]
 8004a66:	0635      	lsls	r5, r6, #24
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	d501      	bpl.n	8004a70 <_printf_i+0x1c4>
 8004a6c:	6019      	str	r1, [r3, #0]
 8004a6e:	e002      	b.n	8004a76 <_printf_i+0x1ca>
 8004a70:	0670      	lsls	r0, r6, #25
 8004a72:	d5fb      	bpl.n	8004a6c <_printf_i+0x1c0>
 8004a74:	8019      	strh	r1, [r3, #0]
 8004a76:	2300      	movs	r3, #0
 8004a78:	6123      	str	r3, [r4, #16]
 8004a7a:	4615      	mov	r5, r2
 8004a7c:	e7bc      	b.n	80049f8 <_printf_i+0x14c>
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	1d1a      	adds	r2, r3, #4
 8004a82:	602a      	str	r2, [r5, #0]
 8004a84:	681d      	ldr	r5, [r3, #0]
 8004a86:	6862      	ldr	r2, [r4, #4]
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7fb fba0 	bl	80001d0 <memchr>
 8004a90:	b108      	cbz	r0, 8004a96 <_printf_i+0x1ea>
 8004a92:	1b40      	subs	r0, r0, r5
 8004a94:	6060      	str	r0, [r4, #4]
 8004a96:	6863      	ldr	r3, [r4, #4]
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa0:	e7aa      	b.n	80049f8 <_printf_i+0x14c>
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	47d0      	blx	sl
 8004aac:	3001      	adds	r0, #1
 8004aae:	d0ad      	beq.n	8004a0c <_printf_i+0x160>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	079b      	lsls	r3, r3, #30
 8004ab4:	d413      	bmi.n	8004ade <_printf_i+0x232>
 8004ab6:	68e0      	ldr	r0, [r4, #12]
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	4298      	cmp	r0, r3
 8004abc:	bfb8      	it	lt
 8004abe:	4618      	movlt	r0, r3
 8004ac0:	e7a6      	b.n	8004a10 <_printf_i+0x164>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	4640      	mov	r0, r8
 8004aca:	47d0      	blx	sl
 8004acc:	3001      	adds	r0, #1
 8004ace:	d09d      	beq.n	8004a0c <_printf_i+0x160>
 8004ad0:	3501      	adds	r5, #1
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	9903      	ldr	r1, [sp, #12]
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dcf2      	bgt.n	8004ac2 <_printf_i+0x216>
 8004adc:	e7eb      	b.n	8004ab6 <_printf_i+0x20a>
 8004ade:	2500      	movs	r5, #0
 8004ae0:	f104 0619 	add.w	r6, r4, #25
 8004ae4:	e7f5      	b.n	8004ad2 <_printf_i+0x226>
 8004ae6:	bf00      	nop
 8004ae8:	08006c22 	.word	0x08006c22
 8004aec:	08006c33 	.word	0x08006c33

08004af0 <std>:
 8004af0:	2300      	movs	r3, #0
 8004af2:	b510      	push	{r4, lr}
 8004af4:	4604      	mov	r4, r0
 8004af6:	e9c0 3300 	strd	r3, r3, [r0]
 8004afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004afe:	6083      	str	r3, [r0, #8]
 8004b00:	8181      	strh	r1, [r0, #12]
 8004b02:	6643      	str	r3, [r0, #100]	; 0x64
 8004b04:	81c2      	strh	r2, [r0, #14]
 8004b06:	6183      	str	r3, [r0, #24]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	305c      	adds	r0, #92	; 0x5c
 8004b0e:	f000 f8f4 	bl	8004cfa <memset>
 8004b12:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <std+0x38>)
 8004b14:	6263      	str	r3, [r4, #36]	; 0x24
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <std+0x3c>)
 8004b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <std+0x40>)
 8004b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <std+0x44>)
 8004b20:	6224      	str	r4, [r4, #32]
 8004b22:	6323      	str	r3, [r4, #48]	; 0x30
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	08004c75 	.word	0x08004c75
 8004b2c:	08004c97 	.word	0x08004c97
 8004b30:	08004ccf 	.word	0x08004ccf
 8004b34:	08004cf3 	.word	0x08004cf3

08004b38 <stdio_exit_handler>:
 8004b38:	4a02      	ldr	r2, [pc, #8]	; (8004b44 <stdio_exit_handler+0xc>)
 8004b3a:	4903      	ldr	r1, [pc, #12]	; (8004b48 <stdio_exit_handler+0x10>)
 8004b3c:	4803      	ldr	r0, [pc, #12]	; (8004b4c <stdio_exit_handler+0x14>)
 8004b3e:	f000 b869 	b.w	8004c14 <_fwalk_sglue>
 8004b42:	bf00      	nop
 8004b44:	2000000c 	.word	0x2000000c
 8004b48:	08006779 	.word	0x08006779
 8004b4c:	20000018 	.word	0x20000018

08004b50 <cleanup_stdio>:
 8004b50:	6841      	ldr	r1, [r0, #4]
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <cleanup_stdio+0x34>)
 8004b54:	4299      	cmp	r1, r3
 8004b56:	b510      	push	{r4, lr}
 8004b58:	4604      	mov	r4, r0
 8004b5a:	d001      	beq.n	8004b60 <cleanup_stdio+0x10>
 8004b5c:	f001 fe0c 	bl	8006778 <_fflush_r>
 8004b60:	68a1      	ldr	r1, [r4, #8]
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <cleanup_stdio+0x38>)
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d002      	beq.n	8004b6e <cleanup_stdio+0x1e>
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f001 fe05 	bl	8006778 <_fflush_r>
 8004b6e:	68e1      	ldr	r1, [r4, #12]
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <cleanup_stdio+0x3c>)
 8004b72:	4299      	cmp	r1, r3
 8004b74:	d004      	beq.n	8004b80 <cleanup_stdio+0x30>
 8004b76:	4620      	mov	r0, r4
 8004b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b7c:	f001 bdfc 	b.w	8006778 <_fflush_r>
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	bf00      	nop
 8004b84:	200002d0 	.word	0x200002d0
 8004b88:	20000338 	.word	0x20000338
 8004b8c:	200003a0 	.word	0x200003a0

08004b90 <global_stdio_init.part.0>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <global_stdio_init.part.0+0x30>)
 8004b94:	4c0b      	ldr	r4, [pc, #44]	; (8004bc4 <global_stdio_init.part.0+0x34>)
 8004b96:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <global_stdio_init.part.0+0x38>)
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	f7ff ffa6 	bl	8004af0 <std>
 8004ba4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ba8:	2201      	movs	r2, #1
 8004baa:	2109      	movs	r1, #9
 8004bac:	f7ff ffa0 	bl	8004af0 <std>
 8004bb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bba:	2112      	movs	r1, #18
 8004bbc:	f7ff bf98 	b.w	8004af0 <std>
 8004bc0:	20000408 	.word	0x20000408
 8004bc4:	200002d0 	.word	0x200002d0
 8004bc8:	08004b39 	.word	0x08004b39

08004bcc <__sfp_lock_acquire>:
 8004bcc:	4801      	ldr	r0, [pc, #4]	; (8004bd4 <__sfp_lock_acquire+0x8>)
 8004bce:	f000 b911 	b.w	8004df4 <__retarget_lock_acquire_recursive>
 8004bd2:	bf00      	nop
 8004bd4:	20000411 	.word	0x20000411

08004bd8 <__sfp_lock_release>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	; (8004be0 <__sfp_lock_release+0x8>)
 8004bda:	f000 b90c 	b.w	8004df6 <__retarget_lock_release_recursive>
 8004bde:	bf00      	nop
 8004be0:	20000411 	.word	0x20000411

08004be4 <__sinit>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4604      	mov	r4, r0
 8004be8:	f7ff fff0 	bl	8004bcc <__sfp_lock_acquire>
 8004bec:	6a23      	ldr	r3, [r4, #32]
 8004bee:	b11b      	cbz	r3, 8004bf8 <__sinit+0x14>
 8004bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf4:	f7ff bff0 	b.w	8004bd8 <__sfp_lock_release>
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <__sinit+0x28>)
 8004bfa:	6223      	str	r3, [r4, #32]
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <__sinit+0x2c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f5      	bne.n	8004bf0 <__sinit+0xc>
 8004c04:	f7ff ffc4 	bl	8004b90 <global_stdio_init.part.0>
 8004c08:	e7f2      	b.n	8004bf0 <__sinit+0xc>
 8004c0a:	bf00      	nop
 8004c0c:	08004b51 	.word	0x08004b51
 8004c10:	20000408 	.word	0x20000408

08004c14 <_fwalk_sglue>:
 8004c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c18:	4607      	mov	r7, r0
 8004c1a:	4688      	mov	r8, r1
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	2600      	movs	r6, #0
 8004c20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c24:	f1b9 0901 	subs.w	r9, r9, #1
 8004c28:	d505      	bpl.n	8004c36 <_fwalk_sglue+0x22>
 8004c2a:	6824      	ldr	r4, [r4, #0]
 8004c2c:	2c00      	cmp	r4, #0
 8004c2e:	d1f7      	bne.n	8004c20 <_fwalk_sglue+0xc>
 8004c30:	4630      	mov	r0, r6
 8004c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d907      	bls.n	8004c4c <_fwalk_sglue+0x38>
 8004c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c40:	3301      	adds	r3, #1
 8004c42:	d003      	beq.n	8004c4c <_fwalk_sglue+0x38>
 8004c44:	4629      	mov	r1, r5
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	4306      	orrs	r6, r0
 8004c4c:	3568      	adds	r5, #104	; 0x68
 8004c4e:	e7e9      	b.n	8004c24 <_fwalk_sglue+0x10>

08004c50 <iprintf>:
 8004c50:	b40f      	push	{r0, r1, r2, r3}
 8004c52:	b507      	push	{r0, r1, r2, lr}
 8004c54:	4906      	ldr	r1, [pc, #24]	; (8004c70 <iprintf+0x20>)
 8004c56:	ab04      	add	r3, sp, #16
 8004c58:	6808      	ldr	r0, [r1, #0]
 8004c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c5e:	6881      	ldr	r1, [r0, #8]
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	f001 fbe9 	bl	8006438 <_vfiprintf_r>
 8004c66:	b003      	add	sp, #12
 8004c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c6c:	b004      	add	sp, #16
 8004c6e:	4770      	bx	lr
 8004c70:	20000064 	.word	0x20000064

08004c74 <__sread>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	460c      	mov	r4, r1
 8004c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7c:	f000 f86c 	bl	8004d58 <_read_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	bfab      	itete	ge
 8004c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c86:	89a3      	ldrhlt	r3, [r4, #12]
 8004c88:	181b      	addge	r3, r3, r0
 8004c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c8e:	bfac      	ite	ge
 8004c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c92:	81a3      	strhlt	r3, [r4, #12]
 8004c94:	bd10      	pop	{r4, pc}

08004c96 <__swrite>:
 8004c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	898b      	ldrh	r3, [r1, #12]
 8004c9e:	05db      	lsls	r3, r3, #23
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	4616      	mov	r6, r2
 8004ca6:	d505      	bpl.n	8004cb4 <__swrite+0x1e>
 8004ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cac:	2302      	movs	r3, #2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f000 f840 	bl	8004d34 <_lseek_r>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	4632      	mov	r2, r6
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cca:	f000 b857 	b.w	8004d7c <_write_r>

08004cce <__sseek>:
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd6:	f000 f82d 	bl	8004d34 <_lseek_r>
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	bf15      	itete	ne
 8004ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cea:	81a3      	strheq	r3, [r4, #12]
 8004cec:	bf18      	it	ne
 8004cee:	81a3      	strhne	r3, [r4, #12]
 8004cf0:	bd10      	pop	{r4, pc}

08004cf2 <__sclose>:
 8004cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf6:	f000 b80d 	b.w	8004d14 <_close_r>

08004cfa <memset>:
 8004cfa:	4402      	add	r2, r0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d100      	bne.n	8004d04 <memset+0xa>
 8004d02:	4770      	bx	lr
 8004d04:	f803 1b01 	strb.w	r1, [r3], #1
 8004d08:	e7f9      	b.n	8004cfe <memset+0x4>
	...

08004d0c <_localeconv_r>:
 8004d0c:	4800      	ldr	r0, [pc, #0]	; (8004d10 <_localeconv_r+0x4>)
 8004d0e:	4770      	bx	lr
 8004d10:	20000158 	.word	0x20000158

08004d14 <_close_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4d06      	ldr	r5, [pc, #24]	; (8004d30 <_close_r+0x1c>)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	f7fc fb77 	bl	8001412 <_close>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_close_r+0x1a>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_close_r+0x1a>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	2000040c 	.word	0x2000040c

08004d34 <_lseek_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4d07      	ldr	r5, [pc, #28]	; (8004d54 <_lseek_r+0x20>)
 8004d38:	4604      	mov	r4, r0
 8004d3a:	4608      	mov	r0, r1
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	602a      	str	r2, [r5, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f7fc fb8c 	bl	8001460 <_lseek>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_lseek_r+0x1e>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_lseek_r+0x1e>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	2000040c 	.word	0x2000040c

08004d58 <_read_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d07      	ldr	r5, [pc, #28]	; (8004d78 <_read_r+0x20>)
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	4608      	mov	r0, r1
 8004d60:	4611      	mov	r1, r2
 8004d62:	2200      	movs	r2, #0
 8004d64:	602a      	str	r2, [r5, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f7fc fb1a 	bl	80013a0 <_read>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_read_r+0x1e>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_read_r+0x1e>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	2000040c 	.word	0x2000040c

08004d7c <_write_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4d07      	ldr	r5, [pc, #28]	; (8004d9c <_write_r+0x20>)
 8004d80:	4604      	mov	r4, r0
 8004d82:	4608      	mov	r0, r1
 8004d84:	4611      	mov	r1, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	602a      	str	r2, [r5, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7fc fb25 	bl	80013da <_write>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_write_r+0x1e>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_write_r+0x1e>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	2000040c 	.word	0x2000040c

08004da0 <__errno>:
 8004da0:	4b01      	ldr	r3, [pc, #4]	; (8004da8 <__errno+0x8>)
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000064 	.word	0x20000064

08004dac <__libc_init_array>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4d0d      	ldr	r5, [pc, #52]	; (8004de4 <__libc_init_array+0x38>)
 8004db0:	4c0d      	ldr	r4, [pc, #52]	; (8004de8 <__libc_init_array+0x3c>)
 8004db2:	1b64      	subs	r4, r4, r5
 8004db4:	10a4      	asrs	r4, r4, #2
 8004db6:	2600      	movs	r6, #0
 8004db8:	42a6      	cmp	r6, r4
 8004dba:	d109      	bne.n	8004dd0 <__libc_init_array+0x24>
 8004dbc:	4d0b      	ldr	r5, [pc, #44]	; (8004dec <__libc_init_array+0x40>)
 8004dbe:	4c0c      	ldr	r4, [pc, #48]	; (8004df0 <__libc_init_array+0x44>)
 8004dc0:	f001 feec 	bl	8006b9c <_init>
 8004dc4:	1b64      	subs	r4, r4, r5
 8004dc6:	10a4      	asrs	r4, r4, #2
 8004dc8:	2600      	movs	r6, #0
 8004dca:	42a6      	cmp	r6, r4
 8004dcc:	d105      	bne.n	8004dda <__libc_init_array+0x2e>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd4:	4798      	blx	r3
 8004dd6:	3601      	adds	r6, #1
 8004dd8:	e7ee      	b.n	8004db8 <__libc_init_array+0xc>
 8004dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dde:	4798      	blx	r3
 8004de0:	3601      	adds	r6, #1
 8004de2:	e7f2      	b.n	8004dca <__libc_init_array+0x1e>
 8004de4:	08006f8c 	.word	0x08006f8c
 8004de8:	08006f8c 	.word	0x08006f8c
 8004dec:	08006f8c 	.word	0x08006f8c
 8004df0:	08006f90 	.word	0x08006f90

08004df4 <__retarget_lock_acquire_recursive>:
 8004df4:	4770      	bx	lr

08004df6 <__retarget_lock_release_recursive>:
 8004df6:	4770      	bx	lr

08004df8 <quorem>:
 8004df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	6903      	ldr	r3, [r0, #16]
 8004dfe:	690c      	ldr	r4, [r1, #16]
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	4607      	mov	r7, r0
 8004e04:	db7e      	blt.n	8004f04 <quorem+0x10c>
 8004e06:	3c01      	subs	r4, #1
 8004e08:	f101 0814 	add.w	r8, r1, #20
 8004e0c:	f100 0514 	add.w	r5, r0, #20
 8004e10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	429a      	cmp	r2, r3
 8004e22:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e2e:	d331      	bcc.n	8004e94 <quorem+0x9c>
 8004e30:	f04f 0e00 	mov.w	lr, #0
 8004e34:	4640      	mov	r0, r8
 8004e36:	46ac      	mov	ip, r5
 8004e38:	46f2      	mov	sl, lr
 8004e3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e3e:	b293      	uxth	r3, r2
 8004e40:	fb06 e303 	mla	r3, r6, r3, lr
 8004e44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e48:	0c1a      	lsrs	r2, r3, #16
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	ebaa 0303 	sub.w	r3, sl, r3
 8004e50:	f8dc a000 	ldr.w	sl, [ip]
 8004e54:	fa13 f38a 	uxtah	r3, r3, sl
 8004e58:	fb06 220e 	mla	r2, r6, lr, r2
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	9b00      	ldr	r3, [sp, #0]
 8004e60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e64:	b292      	uxth	r2, r2
 8004e66:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e6e:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e72:	4581      	cmp	r9, r0
 8004e74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e78:	f84c 3b04 	str.w	r3, [ip], #4
 8004e7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e80:	d2db      	bcs.n	8004e3a <quorem+0x42>
 8004e82:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e86:	b92b      	cbnz	r3, 8004e94 <quorem+0x9c>
 8004e88:	9b01      	ldr	r3, [sp, #4]
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	429d      	cmp	r5, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	d32c      	bcc.n	8004eec <quorem+0xf4>
 8004e92:	613c      	str	r4, [r7, #16]
 8004e94:	4638      	mov	r0, r7
 8004e96:	f001 f9a5 	bl	80061e4 <__mcmp>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	db22      	blt.n	8004ee4 <quorem+0xec>
 8004e9e:	3601      	adds	r6, #1
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ea8:	f8d1 c000 	ldr.w	ip, [r1]
 8004eac:	b293      	uxth	r3, r2
 8004eae:	1ac3      	subs	r3, r0, r3
 8004eb0:	0c12      	lsrs	r2, r2, #16
 8004eb2:	fa13 f38c 	uxtah	r3, r3, ip
 8004eb6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004eba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ec4:	45c1      	cmp	r9, r8
 8004ec6:	f841 3b04 	str.w	r3, [r1], #4
 8004eca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ece:	d2e9      	bcs.n	8004ea4 <quorem+0xac>
 8004ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ed8:	b922      	cbnz	r2, 8004ee4 <quorem+0xec>
 8004eda:	3b04      	subs	r3, #4
 8004edc:	429d      	cmp	r5, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	d30a      	bcc.n	8004ef8 <quorem+0x100>
 8004ee2:	613c      	str	r4, [r7, #16]
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	b003      	add	sp, #12
 8004ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	2a00      	cmp	r2, #0
 8004ef2:	d1ce      	bne.n	8004e92 <quorem+0x9a>
 8004ef4:	3c01      	subs	r4, #1
 8004ef6:	e7c9      	b.n	8004e8c <quorem+0x94>
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	3b04      	subs	r3, #4
 8004efc:	2a00      	cmp	r2, #0
 8004efe:	d1f0      	bne.n	8004ee2 <quorem+0xea>
 8004f00:	3c01      	subs	r4, #1
 8004f02:	e7eb      	b.n	8004edc <quorem+0xe4>
 8004f04:	2000      	movs	r0, #0
 8004f06:	e7ee      	b.n	8004ee6 <quorem+0xee>

08004f08 <_dtoa_r>:
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	ed2d 8b04 	vpush	{d8-d9}
 8004f10:	69c5      	ldr	r5, [r0, #28]
 8004f12:	b093      	sub	sp, #76	; 0x4c
 8004f14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f18:	ec57 6b10 	vmov	r6, r7, d0
 8004f1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f20:	9107      	str	r1, [sp, #28]
 8004f22:	4604      	mov	r4, r0
 8004f24:	920a      	str	r2, [sp, #40]	; 0x28
 8004f26:	930d      	str	r3, [sp, #52]	; 0x34
 8004f28:	b975      	cbnz	r5, 8004f48 <_dtoa_r+0x40>
 8004f2a:	2010      	movs	r0, #16
 8004f2c:	f000 fe2a 	bl	8005b84 <malloc>
 8004f30:	4602      	mov	r2, r0
 8004f32:	61e0      	str	r0, [r4, #28]
 8004f34:	b920      	cbnz	r0, 8004f40 <_dtoa_r+0x38>
 8004f36:	4bae      	ldr	r3, [pc, #696]	; (80051f0 <_dtoa_r+0x2e8>)
 8004f38:	21ef      	movs	r1, #239	; 0xef
 8004f3a:	48ae      	ldr	r0, [pc, #696]	; (80051f4 <_dtoa_r+0x2ec>)
 8004f3c:	f001 fcf8 	bl	8006930 <__assert_func>
 8004f40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f44:	6005      	str	r5, [r0, #0]
 8004f46:	60c5      	str	r5, [r0, #12]
 8004f48:	69e3      	ldr	r3, [r4, #28]
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	b151      	cbz	r1, 8004f64 <_dtoa_r+0x5c>
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	604a      	str	r2, [r1, #4]
 8004f52:	2301      	movs	r3, #1
 8004f54:	4093      	lsls	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 ff07 	bl	8005d6c <_Bfree>
 8004f5e:	69e3      	ldr	r3, [r4, #28]
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	1e3b      	subs	r3, r7, #0
 8004f66:	bfbb      	ittet	lt
 8004f68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f6c:	9303      	strlt	r3, [sp, #12]
 8004f6e:	2300      	movge	r3, #0
 8004f70:	2201      	movlt	r2, #1
 8004f72:	bfac      	ite	ge
 8004f74:	f8c8 3000 	strge.w	r3, [r8]
 8004f78:	f8c8 2000 	strlt.w	r2, [r8]
 8004f7c:	4b9e      	ldr	r3, [pc, #632]	; (80051f8 <_dtoa_r+0x2f0>)
 8004f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f82:	ea33 0308 	bics.w	r3, r3, r8
 8004f86:	d11b      	bne.n	8004fc0 <_dtoa_r+0xb8>
 8004f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004f94:	4333      	orrs	r3, r6
 8004f96:	f000 8593 	beq.w	8005ac0 <_dtoa_r+0xbb8>
 8004f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f9c:	b963      	cbnz	r3, 8004fb8 <_dtoa_r+0xb0>
 8004f9e:	4b97      	ldr	r3, [pc, #604]	; (80051fc <_dtoa_r+0x2f4>)
 8004fa0:	e027      	b.n	8004ff2 <_dtoa_r+0xea>
 8004fa2:	4b97      	ldr	r3, [pc, #604]	; (8005200 <_dtoa_r+0x2f8>)
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	9800      	ldr	r0, [sp, #0]
 8004fae:	b013      	add	sp, #76	; 0x4c
 8004fb0:	ecbd 8b04 	vpop	{d8-d9}
 8004fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb8:	4b90      	ldr	r3, [pc, #576]	; (80051fc <_dtoa_r+0x2f4>)
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	3303      	adds	r3, #3
 8004fbe:	e7f3      	b.n	8004fa8 <_dtoa_r+0xa0>
 8004fc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	ec51 0b17 	vmov	r0, r1, d7
 8004fca:	eeb0 8a47 	vmov.f32	s16, s14
 8004fce:	eef0 8a67 	vmov.f32	s17, s15
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f7fb fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fd8:	4681      	mov	r9, r0
 8004fda:	b160      	cbz	r0, 8004ff6 <_dtoa_r+0xee>
 8004fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fde:	2301      	movs	r3, #1
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8568 	beq.w	8005aba <_dtoa_r+0xbb2>
 8004fea:	4b86      	ldr	r3, [pc, #536]	; (8005204 <_dtoa_r+0x2fc>)
 8004fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	e7da      	b.n	8004fac <_dtoa_r+0xa4>
 8004ff6:	aa10      	add	r2, sp, #64	; 0x40
 8004ff8:	a911      	add	r1, sp, #68	; 0x44
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8005000:	eef0 0a68 	vmov.f32	s1, s17
 8005004:	f001 f994 	bl	8006330 <__d2b>
 8005008:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800500c:	4682      	mov	sl, r0
 800500e:	2d00      	cmp	r5, #0
 8005010:	d07f      	beq.n	8005112 <_dtoa_r+0x20a>
 8005012:	ee18 3a90 	vmov	r3, s17
 8005016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800501a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800501e:	ec51 0b18 	vmov	r0, r1, d8
 8005022:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800502a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800502e:	4619      	mov	r1, r3
 8005030:	2200      	movs	r2, #0
 8005032:	4b75      	ldr	r3, [pc, #468]	; (8005208 <_dtoa_r+0x300>)
 8005034:	f7fb f928 	bl	8000288 <__aeabi_dsub>
 8005038:	a367      	add	r3, pc, #412	; (adr r3, 80051d8 <_dtoa_r+0x2d0>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb fadb 	bl	80005f8 <__aeabi_dmul>
 8005042:	a367      	add	r3, pc, #412	; (adr r3, 80051e0 <_dtoa_r+0x2d8>)
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f7fb f920 	bl	800028c <__adddf3>
 800504c:	4606      	mov	r6, r0
 800504e:	4628      	mov	r0, r5
 8005050:	460f      	mov	r7, r1
 8005052:	f7fb fa67 	bl	8000524 <__aeabi_i2d>
 8005056:	a364      	add	r3, pc, #400	; (adr r3, 80051e8 <_dtoa_r+0x2e0>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f7fb facc 	bl	80005f8 <__aeabi_dmul>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb f910 	bl	800028c <__adddf3>
 800506c:	4606      	mov	r6, r0
 800506e:	460f      	mov	r7, r1
 8005070:	f7fb fd72 	bl	8000b58 <__aeabi_d2iz>
 8005074:	2200      	movs	r2, #0
 8005076:	4683      	mov	fp, r0
 8005078:	2300      	movs	r3, #0
 800507a:	4630      	mov	r0, r6
 800507c:	4639      	mov	r1, r7
 800507e:	f7fb fd2d 	bl	8000adc <__aeabi_dcmplt>
 8005082:	b148      	cbz	r0, 8005098 <_dtoa_r+0x190>
 8005084:	4658      	mov	r0, fp
 8005086:	f7fb fa4d 	bl	8000524 <__aeabi_i2d>
 800508a:	4632      	mov	r2, r6
 800508c:	463b      	mov	r3, r7
 800508e:	f7fb fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005092:	b908      	cbnz	r0, 8005098 <_dtoa_r+0x190>
 8005094:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005098:	f1bb 0f16 	cmp.w	fp, #22
 800509c:	d857      	bhi.n	800514e <_dtoa_r+0x246>
 800509e:	4b5b      	ldr	r3, [pc, #364]	; (800520c <_dtoa_r+0x304>)
 80050a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	ec51 0b18 	vmov	r0, r1, d8
 80050ac:	f7fb fd16 	bl	8000adc <__aeabi_dcmplt>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d04e      	beq.n	8005152 <_dtoa_r+0x24a>
 80050b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80050b8:	2300      	movs	r3, #0
 80050ba:	930c      	str	r3, [sp, #48]	; 0x30
 80050bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050be:	1b5b      	subs	r3, r3, r5
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	bf45      	ittet	mi
 80050c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80050c8:	9305      	strmi	r3, [sp, #20]
 80050ca:	2300      	movpl	r3, #0
 80050cc:	2300      	movmi	r3, #0
 80050ce:	9206      	str	r2, [sp, #24]
 80050d0:	bf54      	ite	pl
 80050d2:	9305      	strpl	r3, [sp, #20]
 80050d4:	9306      	strmi	r3, [sp, #24]
 80050d6:	f1bb 0f00 	cmp.w	fp, #0
 80050da:	db3c      	blt.n	8005156 <_dtoa_r+0x24e>
 80050dc:	9b06      	ldr	r3, [sp, #24]
 80050de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80050e2:	445b      	add	r3, fp
 80050e4:	9306      	str	r3, [sp, #24]
 80050e6:	2300      	movs	r3, #0
 80050e8:	9308      	str	r3, [sp, #32]
 80050ea:	9b07      	ldr	r3, [sp, #28]
 80050ec:	2b09      	cmp	r3, #9
 80050ee:	d868      	bhi.n	80051c2 <_dtoa_r+0x2ba>
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	bfc4      	itt	gt
 80050f4:	3b04      	subgt	r3, #4
 80050f6:	9307      	strgt	r3, [sp, #28]
 80050f8:	9b07      	ldr	r3, [sp, #28]
 80050fa:	f1a3 0302 	sub.w	r3, r3, #2
 80050fe:	bfcc      	ite	gt
 8005100:	2500      	movgt	r5, #0
 8005102:	2501      	movle	r5, #1
 8005104:	2b03      	cmp	r3, #3
 8005106:	f200 8085 	bhi.w	8005214 <_dtoa_r+0x30c>
 800510a:	e8df f003 	tbb	[pc, r3]
 800510e:	3b2e      	.short	0x3b2e
 8005110:	5839      	.short	0x5839
 8005112:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005116:	441d      	add	r5, r3
 8005118:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800511c:	2b20      	cmp	r3, #32
 800511e:	bfc1      	itttt	gt
 8005120:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005124:	fa08 f803 	lslgt.w	r8, r8, r3
 8005128:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800512c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005130:	bfd6      	itet	le
 8005132:	f1c3 0320 	rsble	r3, r3, #32
 8005136:	ea48 0003 	orrgt.w	r0, r8, r3
 800513a:	fa06 f003 	lslle.w	r0, r6, r3
 800513e:	f7fb f9e1 	bl	8000504 <__aeabi_ui2d>
 8005142:	2201      	movs	r2, #1
 8005144:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005148:	3d01      	subs	r5, #1
 800514a:	920e      	str	r2, [sp, #56]	; 0x38
 800514c:	e76f      	b.n	800502e <_dtoa_r+0x126>
 800514e:	2301      	movs	r3, #1
 8005150:	e7b3      	b.n	80050ba <_dtoa_r+0x1b2>
 8005152:	900c      	str	r0, [sp, #48]	; 0x30
 8005154:	e7b2      	b.n	80050bc <_dtoa_r+0x1b4>
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	eba3 030b 	sub.w	r3, r3, fp
 800515c:	9305      	str	r3, [sp, #20]
 800515e:	f1cb 0300 	rsb	r3, fp, #0
 8005162:	9308      	str	r3, [sp, #32]
 8005164:	2300      	movs	r3, #0
 8005166:	930b      	str	r3, [sp, #44]	; 0x2c
 8005168:	e7bf      	b.n	80050ea <_dtoa_r+0x1e2>
 800516a:	2300      	movs	r3, #0
 800516c:	9309      	str	r3, [sp, #36]	; 0x24
 800516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	dc52      	bgt.n	800521a <_dtoa_r+0x312>
 8005174:	2301      	movs	r3, #1
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	9304      	str	r3, [sp, #16]
 800517a:	461a      	mov	r2, r3
 800517c:	920a      	str	r2, [sp, #40]	; 0x28
 800517e:	e00b      	b.n	8005198 <_dtoa_r+0x290>
 8005180:	2301      	movs	r3, #1
 8005182:	e7f3      	b.n	800516c <_dtoa_r+0x264>
 8005184:	2300      	movs	r3, #0
 8005186:	9309      	str	r3, [sp, #36]	; 0x24
 8005188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518a:	445b      	add	r3, fp
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	3301      	adds	r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	bfb8      	it	lt
 8005196:	2301      	movlt	r3, #1
 8005198:	69e0      	ldr	r0, [r4, #28]
 800519a:	2100      	movs	r1, #0
 800519c:	2204      	movs	r2, #4
 800519e:	f102 0614 	add.w	r6, r2, #20
 80051a2:	429e      	cmp	r6, r3
 80051a4:	d93d      	bls.n	8005222 <_dtoa_r+0x31a>
 80051a6:	6041      	str	r1, [r0, #4]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 fd9f 	bl	8005cec <_Balloc>
 80051ae:	9000      	str	r0, [sp, #0]
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d139      	bne.n	8005228 <_dtoa_r+0x320>
 80051b4:	4b16      	ldr	r3, [pc, #88]	; (8005210 <_dtoa_r+0x308>)
 80051b6:	4602      	mov	r2, r0
 80051b8:	f240 11af 	movw	r1, #431	; 0x1af
 80051bc:	e6bd      	b.n	8004f3a <_dtoa_r+0x32>
 80051be:	2301      	movs	r3, #1
 80051c0:	e7e1      	b.n	8005186 <_dtoa_r+0x27e>
 80051c2:	2501      	movs	r5, #1
 80051c4:	2300      	movs	r3, #0
 80051c6:	9307      	str	r3, [sp, #28]
 80051c8:	9509      	str	r5, [sp, #36]	; 0x24
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	9304      	str	r3, [sp, #16]
 80051d2:	2200      	movs	r2, #0
 80051d4:	2312      	movs	r3, #18
 80051d6:	e7d1      	b.n	800517c <_dtoa_r+0x274>
 80051d8:	636f4361 	.word	0x636f4361
 80051dc:	3fd287a7 	.word	0x3fd287a7
 80051e0:	8b60c8b3 	.word	0x8b60c8b3
 80051e4:	3fc68a28 	.word	0x3fc68a28
 80051e8:	509f79fb 	.word	0x509f79fb
 80051ec:	3fd34413 	.word	0x3fd34413
 80051f0:	08006c51 	.word	0x08006c51
 80051f4:	08006c68 	.word	0x08006c68
 80051f8:	7ff00000 	.word	0x7ff00000
 80051fc:	08006c4d 	.word	0x08006c4d
 8005200:	08006c44 	.word	0x08006c44
 8005204:	08006c21 	.word	0x08006c21
 8005208:	3ff80000 	.word	0x3ff80000
 800520c:	08006d58 	.word	0x08006d58
 8005210:	08006cc0 	.word	0x08006cc0
 8005214:	2301      	movs	r3, #1
 8005216:	9309      	str	r3, [sp, #36]	; 0x24
 8005218:	e7d7      	b.n	80051ca <_dtoa_r+0x2c2>
 800521a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	e7ba      	b.n	8005198 <_dtoa_r+0x290>
 8005222:	3101      	adds	r1, #1
 8005224:	0052      	lsls	r2, r2, #1
 8005226:	e7ba      	b.n	800519e <_dtoa_r+0x296>
 8005228:	69e3      	ldr	r3, [r4, #28]
 800522a:	9a00      	ldr	r2, [sp, #0]
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	2b0e      	cmp	r3, #14
 8005232:	f200 80a8 	bhi.w	8005386 <_dtoa_r+0x47e>
 8005236:	2d00      	cmp	r5, #0
 8005238:	f000 80a5 	beq.w	8005386 <_dtoa_r+0x47e>
 800523c:	f1bb 0f00 	cmp.w	fp, #0
 8005240:	dd38      	ble.n	80052b4 <_dtoa_r+0x3ac>
 8005242:	4bc0      	ldr	r3, [pc, #768]	; (8005544 <_dtoa_r+0x63c>)
 8005244:	f00b 020f 	and.w	r2, fp, #15
 8005248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800524c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005250:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005254:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005258:	d019      	beq.n	800528e <_dtoa_r+0x386>
 800525a:	4bbb      	ldr	r3, [pc, #748]	; (8005548 <_dtoa_r+0x640>)
 800525c:	ec51 0b18 	vmov	r0, r1, d8
 8005260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005264:	f7fb faf2 	bl	800084c <__aeabi_ddiv>
 8005268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800526c:	f008 080f 	and.w	r8, r8, #15
 8005270:	2503      	movs	r5, #3
 8005272:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005548 <_dtoa_r+0x640>
 8005276:	f1b8 0f00 	cmp.w	r8, #0
 800527a:	d10a      	bne.n	8005292 <_dtoa_r+0x38a>
 800527c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005280:	4632      	mov	r2, r6
 8005282:	463b      	mov	r3, r7
 8005284:	f7fb fae2 	bl	800084c <__aeabi_ddiv>
 8005288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800528c:	e02b      	b.n	80052e6 <_dtoa_r+0x3de>
 800528e:	2502      	movs	r5, #2
 8005290:	e7ef      	b.n	8005272 <_dtoa_r+0x36a>
 8005292:	f018 0f01 	tst.w	r8, #1
 8005296:	d008      	beq.n	80052aa <_dtoa_r+0x3a2>
 8005298:	4630      	mov	r0, r6
 800529a:	4639      	mov	r1, r7
 800529c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80052a0:	f7fb f9aa 	bl	80005f8 <__aeabi_dmul>
 80052a4:	3501      	adds	r5, #1
 80052a6:	4606      	mov	r6, r0
 80052a8:	460f      	mov	r7, r1
 80052aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80052ae:	f109 0908 	add.w	r9, r9, #8
 80052b2:	e7e0      	b.n	8005276 <_dtoa_r+0x36e>
 80052b4:	f000 809f 	beq.w	80053f6 <_dtoa_r+0x4ee>
 80052b8:	f1cb 0600 	rsb	r6, fp, #0
 80052bc:	4ba1      	ldr	r3, [pc, #644]	; (8005544 <_dtoa_r+0x63c>)
 80052be:	4fa2      	ldr	r7, [pc, #648]	; (8005548 <_dtoa_r+0x640>)
 80052c0:	f006 020f 	and.w	r2, r6, #15
 80052c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	ec51 0b18 	vmov	r0, r1, d8
 80052d0:	f7fb f992 	bl	80005f8 <__aeabi_dmul>
 80052d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d8:	1136      	asrs	r6, r6, #4
 80052da:	2300      	movs	r3, #0
 80052dc:	2502      	movs	r5, #2
 80052de:	2e00      	cmp	r6, #0
 80052e0:	d17e      	bne.n	80053e0 <_dtoa_r+0x4d8>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1d0      	bne.n	8005288 <_dtoa_r+0x380>
 80052e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8084 	beq.w	80053fa <_dtoa_r+0x4f2>
 80052f2:	4b96      	ldr	r3, [pc, #600]	; (800554c <_dtoa_r+0x644>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	f7fb fbef 	bl	8000adc <__aeabi_dcmplt>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d07b      	beq.n	80053fa <_dtoa_r+0x4f2>
 8005302:	9b04      	ldr	r3, [sp, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d078      	beq.n	80053fa <_dtoa_r+0x4f2>
 8005308:	9b01      	ldr	r3, [sp, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dd39      	ble.n	8005382 <_dtoa_r+0x47a>
 800530e:	4b90      	ldr	r3, [pc, #576]	; (8005550 <_dtoa_r+0x648>)
 8005310:	2200      	movs	r2, #0
 8005312:	4640      	mov	r0, r8
 8005314:	4649      	mov	r1, r9
 8005316:	f7fb f96f 	bl	80005f8 <__aeabi_dmul>
 800531a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800531e:	9e01      	ldr	r6, [sp, #4]
 8005320:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005324:	3501      	adds	r5, #1
 8005326:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800532a:	4628      	mov	r0, r5
 800532c:	f7fb f8fa 	bl	8000524 <__aeabi_i2d>
 8005330:	4642      	mov	r2, r8
 8005332:	464b      	mov	r3, r9
 8005334:	f7fb f960 	bl	80005f8 <__aeabi_dmul>
 8005338:	4b86      	ldr	r3, [pc, #536]	; (8005554 <_dtoa_r+0x64c>)
 800533a:	2200      	movs	r2, #0
 800533c:	f7fa ffa6 	bl	800028c <__adddf3>
 8005340:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005348:	9303      	str	r3, [sp, #12]
 800534a:	2e00      	cmp	r6, #0
 800534c:	d158      	bne.n	8005400 <_dtoa_r+0x4f8>
 800534e:	4b82      	ldr	r3, [pc, #520]	; (8005558 <_dtoa_r+0x650>)
 8005350:	2200      	movs	r2, #0
 8005352:	4640      	mov	r0, r8
 8005354:	4649      	mov	r1, r9
 8005356:	f7fa ff97 	bl	8000288 <__aeabi_dsub>
 800535a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800535e:	4680      	mov	r8, r0
 8005360:	4689      	mov	r9, r1
 8005362:	f7fb fbd9 	bl	8000b18 <__aeabi_dcmpgt>
 8005366:	2800      	cmp	r0, #0
 8005368:	f040 8296 	bne.w	8005898 <_dtoa_r+0x990>
 800536c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005370:	4640      	mov	r0, r8
 8005372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005376:	4649      	mov	r1, r9
 8005378:	f7fb fbb0 	bl	8000adc <__aeabi_dcmplt>
 800537c:	2800      	cmp	r0, #0
 800537e:	f040 8289 	bne.w	8005894 <_dtoa_r+0x98c>
 8005382:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005388:	2b00      	cmp	r3, #0
 800538a:	f2c0 814e 	blt.w	800562a <_dtoa_r+0x722>
 800538e:	f1bb 0f0e 	cmp.w	fp, #14
 8005392:	f300 814a 	bgt.w	800562a <_dtoa_r+0x722>
 8005396:	4b6b      	ldr	r3, [pc, #428]	; (8005544 <_dtoa_r+0x63c>)
 8005398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800539c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f280 80dc 	bge.w	8005560 <_dtoa_r+0x658>
 80053a8:	9b04      	ldr	r3, [sp, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f300 80d8 	bgt.w	8005560 <_dtoa_r+0x658>
 80053b0:	f040 826f 	bne.w	8005892 <_dtoa_r+0x98a>
 80053b4:	4b68      	ldr	r3, [pc, #416]	; (8005558 <_dtoa_r+0x650>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fb f91c 	bl	80005f8 <__aeabi_dmul>
 80053c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053c4:	f7fb fb9e 	bl	8000b04 <__aeabi_dcmpge>
 80053c8:	9e04      	ldr	r6, [sp, #16]
 80053ca:	4637      	mov	r7, r6
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f040 8245 	bne.w	800585c <_dtoa_r+0x954>
 80053d2:	9d00      	ldr	r5, [sp, #0]
 80053d4:	2331      	movs	r3, #49	; 0x31
 80053d6:	f805 3b01 	strb.w	r3, [r5], #1
 80053da:	f10b 0b01 	add.w	fp, fp, #1
 80053de:	e241      	b.n	8005864 <_dtoa_r+0x95c>
 80053e0:	07f2      	lsls	r2, r6, #31
 80053e2:	d505      	bpl.n	80053f0 <_dtoa_r+0x4e8>
 80053e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e8:	f7fb f906 	bl	80005f8 <__aeabi_dmul>
 80053ec:	3501      	adds	r5, #1
 80053ee:	2301      	movs	r3, #1
 80053f0:	1076      	asrs	r6, r6, #1
 80053f2:	3708      	adds	r7, #8
 80053f4:	e773      	b.n	80052de <_dtoa_r+0x3d6>
 80053f6:	2502      	movs	r5, #2
 80053f8:	e775      	b.n	80052e6 <_dtoa_r+0x3de>
 80053fa:	9e04      	ldr	r6, [sp, #16]
 80053fc:	465f      	mov	r7, fp
 80053fe:	e792      	b.n	8005326 <_dtoa_r+0x41e>
 8005400:	9900      	ldr	r1, [sp, #0]
 8005402:	4b50      	ldr	r3, [pc, #320]	; (8005544 <_dtoa_r+0x63c>)
 8005404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005408:	4431      	add	r1, r6
 800540a:	9102      	str	r1, [sp, #8]
 800540c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800540e:	eeb0 9a47 	vmov.f32	s18, s14
 8005412:	eef0 9a67 	vmov.f32	s19, s15
 8005416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800541a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800541e:	2900      	cmp	r1, #0
 8005420:	d044      	beq.n	80054ac <_dtoa_r+0x5a4>
 8005422:	494e      	ldr	r1, [pc, #312]	; (800555c <_dtoa_r+0x654>)
 8005424:	2000      	movs	r0, #0
 8005426:	f7fb fa11 	bl	800084c <__aeabi_ddiv>
 800542a:	ec53 2b19 	vmov	r2, r3, d9
 800542e:	f7fa ff2b 	bl	8000288 <__aeabi_dsub>
 8005432:	9d00      	ldr	r5, [sp, #0]
 8005434:	ec41 0b19 	vmov	d9, r0, r1
 8005438:	4649      	mov	r1, r9
 800543a:	4640      	mov	r0, r8
 800543c:	f7fb fb8c 	bl	8000b58 <__aeabi_d2iz>
 8005440:	4606      	mov	r6, r0
 8005442:	f7fb f86f 	bl	8000524 <__aeabi_i2d>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4640      	mov	r0, r8
 800544c:	4649      	mov	r1, r9
 800544e:	f7fa ff1b 	bl	8000288 <__aeabi_dsub>
 8005452:	3630      	adds	r6, #48	; 0x30
 8005454:	f805 6b01 	strb.w	r6, [r5], #1
 8005458:	ec53 2b19 	vmov	r2, r3, d9
 800545c:	4680      	mov	r8, r0
 800545e:	4689      	mov	r9, r1
 8005460:	f7fb fb3c 	bl	8000adc <__aeabi_dcmplt>
 8005464:	2800      	cmp	r0, #0
 8005466:	d164      	bne.n	8005532 <_dtoa_r+0x62a>
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	4937      	ldr	r1, [pc, #220]	; (800554c <_dtoa_r+0x644>)
 800546e:	2000      	movs	r0, #0
 8005470:	f7fa ff0a 	bl	8000288 <__aeabi_dsub>
 8005474:	ec53 2b19 	vmov	r2, r3, d9
 8005478:	f7fb fb30 	bl	8000adc <__aeabi_dcmplt>
 800547c:	2800      	cmp	r0, #0
 800547e:	f040 80b6 	bne.w	80055ee <_dtoa_r+0x6e6>
 8005482:	9b02      	ldr	r3, [sp, #8]
 8005484:	429d      	cmp	r5, r3
 8005486:	f43f af7c 	beq.w	8005382 <_dtoa_r+0x47a>
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <_dtoa_r+0x648>)
 800548c:	ec51 0b19 	vmov	r0, r1, d9
 8005490:	2200      	movs	r2, #0
 8005492:	f7fb f8b1 	bl	80005f8 <__aeabi_dmul>
 8005496:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <_dtoa_r+0x648>)
 8005498:	ec41 0b19 	vmov	d9, r0, r1
 800549c:	2200      	movs	r2, #0
 800549e:	4640      	mov	r0, r8
 80054a0:	4649      	mov	r1, r9
 80054a2:	f7fb f8a9 	bl	80005f8 <__aeabi_dmul>
 80054a6:	4680      	mov	r8, r0
 80054a8:	4689      	mov	r9, r1
 80054aa:	e7c5      	b.n	8005438 <_dtoa_r+0x530>
 80054ac:	ec51 0b17 	vmov	r0, r1, d7
 80054b0:	f7fb f8a2 	bl	80005f8 <__aeabi_dmul>
 80054b4:	9b02      	ldr	r3, [sp, #8]
 80054b6:	9d00      	ldr	r5, [sp, #0]
 80054b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80054ba:	ec41 0b19 	vmov	d9, r0, r1
 80054be:	4649      	mov	r1, r9
 80054c0:	4640      	mov	r0, r8
 80054c2:	f7fb fb49 	bl	8000b58 <__aeabi_d2iz>
 80054c6:	4606      	mov	r6, r0
 80054c8:	f7fb f82c 	bl	8000524 <__aeabi_i2d>
 80054cc:	3630      	adds	r6, #48	; 0x30
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4640      	mov	r0, r8
 80054d4:	4649      	mov	r1, r9
 80054d6:	f7fa fed7 	bl	8000288 <__aeabi_dsub>
 80054da:	f805 6b01 	strb.w	r6, [r5], #1
 80054de:	9b02      	ldr	r3, [sp, #8]
 80054e0:	429d      	cmp	r5, r3
 80054e2:	4680      	mov	r8, r0
 80054e4:	4689      	mov	r9, r1
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	d124      	bne.n	8005536 <_dtoa_r+0x62e>
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <_dtoa_r+0x654>)
 80054ee:	ec51 0b19 	vmov	r0, r1, d9
 80054f2:	f7fa fecb 	bl	800028c <__adddf3>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fb fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8005502:	2800      	cmp	r0, #0
 8005504:	d173      	bne.n	80055ee <_dtoa_r+0x6e6>
 8005506:	ec53 2b19 	vmov	r2, r3, d9
 800550a:	4914      	ldr	r1, [pc, #80]	; (800555c <_dtoa_r+0x654>)
 800550c:	2000      	movs	r0, #0
 800550e:	f7fa febb 	bl	8000288 <__aeabi_dsub>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	f7fb fadf 	bl	8000adc <__aeabi_dcmplt>
 800551e:	2800      	cmp	r0, #0
 8005520:	f43f af2f 	beq.w	8005382 <_dtoa_r+0x47a>
 8005524:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005526:	1e6b      	subs	r3, r5, #1
 8005528:	930f      	str	r3, [sp, #60]	; 0x3c
 800552a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d0f8      	beq.n	8005524 <_dtoa_r+0x61c>
 8005532:	46bb      	mov	fp, r7
 8005534:	e04a      	b.n	80055cc <_dtoa_r+0x6c4>
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <_dtoa_r+0x648>)
 8005538:	f7fb f85e 	bl	80005f8 <__aeabi_dmul>
 800553c:	4680      	mov	r8, r0
 800553e:	4689      	mov	r9, r1
 8005540:	e7bd      	b.n	80054be <_dtoa_r+0x5b6>
 8005542:	bf00      	nop
 8005544:	08006d58 	.word	0x08006d58
 8005548:	08006d30 	.word	0x08006d30
 800554c:	3ff00000 	.word	0x3ff00000
 8005550:	40240000 	.word	0x40240000
 8005554:	401c0000 	.word	0x401c0000
 8005558:	40140000 	.word	0x40140000
 800555c:	3fe00000 	.word	0x3fe00000
 8005560:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005564:	9d00      	ldr	r5, [sp, #0]
 8005566:	4642      	mov	r2, r8
 8005568:	464b      	mov	r3, r9
 800556a:	4630      	mov	r0, r6
 800556c:	4639      	mov	r1, r7
 800556e:	f7fb f96d 	bl	800084c <__aeabi_ddiv>
 8005572:	f7fb faf1 	bl	8000b58 <__aeabi_d2iz>
 8005576:	9001      	str	r0, [sp, #4]
 8005578:	f7fa ffd4 	bl	8000524 <__aeabi_i2d>
 800557c:	4642      	mov	r2, r8
 800557e:	464b      	mov	r3, r9
 8005580:	f7fb f83a 	bl	80005f8 <__aeabi_dmul>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4630      	mov	r0, r6
 800558a:	4639      	mov	r1, r7
 800558c:	f7fa fe7c 	bl	8000288 <__aeabi_dsub>
 8005590:	9e01      	ldr	r6, [sp, #4]
 8005592:	9f04      	ldr	r7, [sp, #16]
 8005594:	3630      	adds	r6, #48	; 0x30
 8005596:	f805 6b01 	strb.w	r6, [r5], #1
 800559a:	9e00      	ldr	r6, [sp, #0]
 800559c:	1bae      	subs	r6, r5, r6
 800559e:	42b7      	cmp	r7, r6
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	d134      	bne.n	8005610 <_dtoa_r+0x708>
 80055a6:	f7fa fe71 	bl	800028c <__adddf3>
 80055aa:	4642      	mov	r2, r8
 80055ac:	464b      	mov	r3, r9
 80055ae:	4606      	mov	r6, r0
 80055b0:	460f      	mov	r7, r1
 80055b2:	f7fb fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80055b6:	b9c8      	cbnz	r0, 80055ec <_dtoa_r+0x6e4>
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	4630      	mov	r0, r6
 80055be:	4639      	mov	r1, r7
 80055c0:	f7fb fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80055c4:	b110      	cbz	r0, 80055cc <_dtoa_r+0x6c4>
 80055c6:	9b01      	ldr	r3, [sp, #4]
 80055c8:	07db      	lsls	r3, r3, #31
 80055ca:	d40f      	bmi.n	80055ec <_dtoa_r+0x6e4>
 80055cc:	4651      	mov	r1, sl
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 fbcc 	bl	8005d6c <_Bfree>
 80055d4:	2300      	movs	r3, #0
 80055d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055d8:	702b      	strb	r3, [r5, #0]
 80055da:	f10b 0301 	add.w	r3, fp, #1
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f43f ace2 	beq.w	8004fac <_dtoa_r+0xa4>
 80055e8:	601d      	str	r5, [r3, #0]
 80055ea:	e4df      	b.n	8004fac <_dtoa_r+0xa4>
 80055ec:	465f      	mov	r7, fp
 80055ee:	462b      	mov	r3, r5
 80055f0:	461d      	mov	r5, r3
 80055f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055f6:	2a39      	cmp	r2, #57	; 0x39
 80055f8:	d106      	bne.n	8005608 <_dtoa_r+0x700>
 80055fa:	9a00      	ldr	r2, [sp, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d1f7      	bne.n	80055f0 <_dtoa_r+0x6e8>
 8005600:	9900      	ldr	r1, [sp, #0]
 8005602:	2230      	movs	r2, #48	; 0x30
 8005604:	3701      	adds	r7, #1
 8005606:	700a      	strb	r2, [r1, #0]
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	3201      	adds	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e790      	b.n	8005532 <_dtoa_r+0x62a>
 8005610:	4ba3      	ldr	r3, [pc, #652]	; (80058a0 <_dtoa_r+0x998>)
 8005612:	2200      	movs	r2, #0
 8005614:	f7fa fff0 	bl	80005f8 <__aeabi_dmul>
 8005618:	2200      	movs	r2, #0
 800561a:	2300      	movs	r3, #0
 800561c:	4606      	mov	r6, r0
 800561e:	460f      	mov	r7, r1
 8005620:	f7fb fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005624:	2800      	cmp	r0, #0
 8005626:	d09e      	beq.n	8005566 <_dtoa_r+0x65e>
 8005628:	e7d0      	b.n	80055cc <_dtoa_r+0x6c4>
 800562a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562c:	2a00      	cmp	r2, #0
 800562e:	f000 80ca 	beq.w	80057c6 <_dtoa_r+0x8be>
 8005632:	9a07      	ldr	r2, [sp, #28]
 8005634:	2a01      	cmp	r2, #1
 8005636:	f300 80ad 	bgt.w	8005794 <_dtoa_r+0x88c>
 800563a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800563c:	2a00      	cmp	r2, #0
 800563e:	f000 80a5 	beq.w	800578c <_dtoa_r+0x884>
 8005642:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005646:	9e08      	ldr	r6, [sp, #32]
 8005648:	9d05      	ldr	r5, [sp, #20]
 800564a:	9a05      	ldr	r2, [sp, #20]
 800564c:	441a      	add	r2, r3
 800564e:	9205      	str	r2, [sp, #20]
 8005650:	9a06      	ldr	r2, [sp, #24]
 8005652:	2101      	movs	r1, #1
 8005654:	441a      	add	r2, r3
 8005656:	4620      	mov	r0, r4
 8005658:	9206      	str	r2, [sp, #24]
 800565a:	f000 fc3d 	bl	8005ed8 <__i2b>
 800565e:	4607      	mov	r7, r0
 8005660:	b165      	cbz	r5, 800567c <_dtoa_r+0x774>
 8005662:	9b06      	ldr	r3, [sp, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	dd09      	ble.n	800567c <_dtoa_r+0x774>
 8005668:	42ab      	cmp	r3, r5
 800566a:	9a05      	ldr	r2, [sp, #20]
 800566c:	bfa8      	it	ge
 800566e:	462b      	movge	r3, r5
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	9205      	str	r2, [sp, #20]
 8005674:	9a06      	ldr	r2, [sp, #24]
 8005676:	1aed      	subs	r5, r5, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	9306      	str	r3, [sp, #24]
 800567c:	9b08      	ldr	r3, [sp, #32]
 800567e:	b1f3      	cbz	r3, 80056be <_dtoa_r+0x7b6>
 8005680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80a3 	beq.w	80057ce <_dtoa_r+0x8c6>
 8005688:	2e00      	cmp	r6, #0
 800568a:	dd10      	ble.n	80056ae <_dtoa_r+0x7a6>
 800568c:	4639      	mov	r1, r7
 800568e:	4632      	mov	r2, r6
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fce1 	bl	8006058 <__pow5mult>
 8005696:	4652      	mov	r2, sl
 8005698:	4601      	mov	r1, r0
 800569a:	4607      	mov	r7, r0
 800569c:	4620      	mov	r0, r4
 800569e:	f000 fc31 	bl	8005f04 <__multiply>
 80056a2:	4651      	mov	r1, sl
 80056a4:	4680      	mov	r8, r0
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fb60 	bl	8005d6c <_Bfree>
 80056ac:	46c2      	mov	sl, r8
 80056ae:	9b08      	ldr	r3, [sp, #32]
 80056b0:	1b9a      	subs	r2, r3, r6
 80056b2:	d004      	beq.n	80056be <_dtoa_r+0x7b6>
 80056b4:	4651      	mov	r1, sl
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fcce 	bl	8006058 <__pow5mult>
 80056bc:	4682      	mov	sl, r0
 80056be:	2101      	movs	r1, #1
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 fc09 	bl	8005ed8 <__i2b>
 80056c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	4606      	mov	r6, r0
 80056cc:	f340 8081 	ble.w	80057d2 <_dtoa_r+0x8ca>
 80056d0:	461a      	mov	r2, r3
 80056d2:	4601      	mov	r1, r0
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 fcbf 	bl	8006058 <__pow5mult>
 80056da:	9b07      	ldr	r3, [sp, #28]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	4606      	mov	r6, r0
 80056e0:	dd7a      	ble.n	80057d8 <_dtoa_r+0x8d0>
 80056e2:	f04f 0800 	mov.w	r8, #0
 80056e6:	6933      	ldr	r3, [r6, #16]
 80056e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056ec:	6918      	ldr	r0, [r3, #16]
 80056ee:	f000 fba5 	bl	8005e3c <__hi0bits>
 80056f2:	f1c0 0020 	rsb	r0, r0, #32
 80056f6:	9b06      	ldr	r3, [sp, #24]
 80056f8:	4418      	add	r0, r3
 80056fa:	f010 001f 	ands.w	r0, r0, #31
 80056fe:	f000 8094 	beq.w	800582a <_dtoa_r+0x922>
 8005702:	f1c0 0320 	rsb	r3, r0, #32
 8005706:	2b04      	cmp	r3, #4
 8005708:	f340 8085 	ble.w	8005816 <_dtoa_r+0x90e>
 800570c:	9b05      	ldr	r3, [sp, #20]
 800570e:	f1c0 001c 	rsb	r0, r0, #28
 8005712:	4403      	add	r3, r0
 8005714:	9305      	str	r3, [sp, #20]
 8005716:	9b06      	ldr	r3, [sp, #24]
 8005718:	4403      	add	r3, r0
 800571a:	4405      	add	r5, r0
 800571c:	9306      	str	r3, [sp, #24]
 800571e:	9b05      	ldr	r3, [sp, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dd05      	ble.n	8005730 <_dtoa_r+0x828>
 8005724:	4651      	mov	r1, sl
 8005726:	461a      	mov	r2, r3
 8005728:	4620      	mov	r0, r4
 800572a:	f000 fcef 	bl	800610c <__lshift>
 800572e:	4682      	mov	sl, r0
 8005730:	9b06      	ldr	r3, [sp, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	dd05      	ble.n	8005742 <_dtoa_r+0x83a>
 8005736:	4631      	mov	r1, r6
 8005738:	461a      	mov	r2, r3
 800573a:	4620      	mov	r0, r4
 800573c:	f000 fce6 	bl	800610c <__lshift>
 8005740:	4606      	mov	r6, r0
 8005742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d072      	beq.n	800582e <_dtoa_r+0x926>
 8005748:	4631      	mov	r1, r6
 800574a:	4650      	mov	r0, sl
 800574c:	f000 fd4a 	bl	80061e4 <__mcmp>
 8005750:	2800      	cmp	r0, #0
 8005752:	da6c      	bge.n	800582e <_dtoa_r+0x926>
 8005754:	2300      	movs	r3, #0
 8005756:	4651      	mov	r1, sl
 8005758:	220a      	movs	r2, #10
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fb28 	bl	8005db0 <__multadd>
 8005760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005762:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005766:	4682      	mov	sl, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 81b0 	beq.w	8005ace <_dtoa_r+0xbc6>
 800576e:	2300      	movs	r3, #0
 8005770:	4639      	mov	r1, r7
 8005772:	220a      	movs	r2, #10
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fb1b 	bl	8005db0 <__multadd>
 800577a:	9b01      	ldr	r3, [sp, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	4607      	mov	r7, r0
 8005780:	f300 8096 	bgt.w	80058b0 <_dtoa_r+0x9a8>
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	2b02      	cmp	r3, #2
 8005788:	dc59      	bgt.n	800583e <_dtoa_r+0x936>
 800578a:	e091      	b.n	80058b0 <_dtoa_r+0x9a8>
 800578c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800578e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005792:	e758      	b.n	8005646 <_dtoa_r+0x73e>
 8005794:	9b04      	ldr	r3, [sp, #16]
 8005796:	1e5e      	subs	r6, r3, #1
 8005798:	9b08      	ldr	r3, [sp, #32]
 800579a:	42b3      	cmp	r3, r6
 800579c:	bfbf      	itttt	lt
 800579e:	9b08      	ldrlt	r3, [sp, #32]
 80057a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80057a2:	9608      	strlt	r6, [sp, #32]
 80057a4:	1af3      	sublt	r3, r6, r3
 80057a6:	bfb4      	ite	lt
 80057a8:	18d2      	addlt	r2, r2, r3
 80057aa:	1b9e      	subge	r6, r3, r6
 80057ac:	9b04      	ldr	r3, [sp, #16]
 80057ae:	bfbc      	itt	lt
 80057b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80057b2:	2600      	movlt	r6, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bfb7      	itett	lt
 80057b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80057bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80057c0:	1a9d      	sublt	r5, r3, r2
 80057c2:	2300      	movlt	r3, #0
 80057c4:	e741      	b.n	800564a <_dtoa_r+0x742>
 80057c6:	9e08      	ldr	r6, [sp, #32]
 80057c8:	9d05      	ldr	r5, [sp, #20]
 80057ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057cc:	e748      	b.n	8005660 <_dtoa_r+0x758>
 80057ce:	9a08      	ldr	r2, [sp, #32]
 80057d0:	e770      	b.n	80056b4 <_dtoa_r+0x7ac>
 80057d2:	9b07      	ldr	r3, [sp, #28]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	dc19      	bgt.n	800580c <_dtoa_r+0x904>
 80057d8:	9b02      	ldr	r3, [sp, #8]
 80057da:	b9bb      	cbnz	r3, 800580c <_dtoa_r+0x904>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e2:	b99b      	cbnz	r3, 800580c <_dtoa_r+0x904>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057ea:	0d1b      	lsrs	r3, r3, #20
 80057ec:	051b      	lsls	r3, r3, #20
 80057ee:	b183      	cbz	r3, 8005812 <_dtoa_r+0x90a>
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	3301      	adds	r3, #1
 80057f4:	9305      	str	r3, [sp, #20]
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	3301      	adds	r3, #1
 80057fa:	9306      	str	r3, [sp, #24]
 80057fc:	f04f 0801 	mov.w	r8, #1
 8005800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	f47f af6f 	bne.w	80056e6 <_dtoa_r+0x7de>
 8005808:	2001      	movs	r0, #1
 800580a:	e774      	b.n	80056f6 <_dtoa_r+0x7ee>
 800580c:	f04f 0800 	mov.w	r8, #0
 8005810:	e7f6      	b.n	8005800 <_dtoa_r+0x8f8>
 8005812:	4698      	mov	r8, r3
 8005814:	e7f4      	b.n	8005800 <_dtoa_r+0x8f8>
 8005816:	d082      	beq.n	800571e <_dtoa_r+0x816>
 8005818:	9a05      	ldr	r2, [sp, #20]
 800581a:	331c      	adds	r3, #28
 800581c:	441a      	add	r2, r3
 800581e:	9205      	str	r2, [sp, #20]
 8005820:	9a06      	ldr	r2, [sp, #24]
 8005822:	441a      	add	r2, r3
 8005824:	441d      	add	r5, r3
 8005826:	9206      	str	r2, [sp, #24]
 8005828:	e779      	b.n	800571e <_dtoa_r+0x816>
 800582a:	4603      	mov	r3, r0
 800582c:	e7f4      	b.n	8005818 <_dtoa_r+0x910>
 800582e:	9b04      	ldr	r3, [sp, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	dc37      	bgt.n	80058a4 <_dtoa_r+0x99c>
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	2b02      	cmp	r3, #2
 8005838:	dd34      	ble.n	80058a4 <_dtoa_r+0x99c>
 800583a:	9b04      	ldr	r3, [sp, #16]
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	9b01      	ldr	r3, [sp, #4]
 8005840:	b963      	cbnz	r3, 800585c <_dtoa_r+0x954>
 8005842:	4631      	mov	r1, r6
 8005844:	2205      	movs	r2, #5
 8005846:	4620      	mov	r0, r4
 8005848:	f000 fab2 	bl	8005db0 <__multadd>
 800584c:	4601      	mov	r1, r0
 800584e:	4606      	mov	r6, r0
 8005850:	4650      	mov	r0, sl
 8005852:	f000 fcc7 	bl	80061e4 <__mcmp>
 8005856:	2800      	cmp	r0, #0
 8005858:	f73f adbb 	bgt.w	80053d2 <_dtoa_r+0x4ca>
 800585c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585e:	9d00      	ldr	r5, [sp, #0]
 8005860:	ea6f 0b03 	mvn.w	fp, r3
 8005864:	f04f 0800 	mov.w	r8, #0
 8005868:	4631      	mov	r1, r6
 800586a:	4620      	mov	r0, r4
 800586c:	f000 fa7e 	bl	8005d6c <_Bfree>
 8005870:	2f00      	cmp	r7, #0
 8005872:	f43f aeab 	beq.w	80055cc <_dtoa_r+0x6c4>
 8005876:	f1b8 0f00 	cmp.w	r8, #0
 800587a:	d005      	beq.n	8005888 <_dtoa_r+0x980>
 800587c:	45b8      	cmp	r8, r7
 800587e:	d003      	beq.n	8005888 <_dtoa_r+0x980>
 8005880:	4641      	mov	r1, r8
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fa72 	bl	8005d6c <_Bfree>
 8005888:	4639      	mov	r1, r7
 800588a:	4620      	mov	r0, r4
 800588c:	f000 fa6e 	bl	8005d6c <_Bfree>
 8005890:	e69c      	b.n	80055cc <_dtoa_r+0x6c4>
 8005892:	2600      	movs	r6, #0
 8005894:	4637      	mov	r7, r6
 8005896:	e7e1      	b.n	800585c <_dtoa_r+0x954>
 8005898:	46bb      	mov	fp, r7
 800589a:	4637      	mov	r7, r6
 800589c:	e599      	b.n	80053d2 <_dtoa_r+0x4ca>
 800589e:	bf00      	nop
 80058a0:	40240000 	.word	0x40240000
 80058a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80c8 	beq.w	8005a3c <_dtoa_r+0xb34>
 80058ac:	9b04      	ldr	r3, [sp, #16]
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	dd05      	ble.n	80058c0 <_dtoa_r+0x9b8>
 80058b4:	4639      	mov	r1, r7
 80058b6:	462a      	mov	r2, r5
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fc27 	bl	800610c <__lshift>
 80058be:	4607      	mov	r7, r0
 80058c0:	f1b8 0f00 	cmp.w	r8, #0
 80058c4:	d05b      	beq.n	800597e <_dtoa_r+0xa76>
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fa0f 	bl	8005cec <_Balloc>
 80058ce:	4605      	mov	r5, r0
 80058d0:	b928      	cbnz	r0, 80058de <_dtoa_r+0x9d6>
 80058d2:	4b83      	ldr	r3, [pc, #524]	; (8005ae0 <_dtoa_r+0xbd8>)
 80058d4:	4602      	mov	r2, r0
 80058d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80058da:	f7ff bb2e 	b.w	8004f3a <_dtoa_r+0x32>
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	3202      	adds	r2, #2
 80058e2:	0092      	lsls	r2, r2, #2
 80058e4:	f107 010c 	add.w	r1, r7, #12
 80058e8:	300c      	adds	r0, #12
 80058ea:	f001 f813 	bl	8006914 <memcpy>
 80058ee:	2201      	movs	r2, #1
 80058f0:	4629      	mov	r1, r5
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fc0a 	bl	800610c <__lshift>
 80058f8:	9b00      	ldr	r3, [sp, #0]
 80058fa:	3301      	adds	r3, #1
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005902:	4413      	add	r3, r2
 8005904:	9308      	str	r3, [sp, #32]
 8005906:	9b02      	ldr	r3, [sp, #8]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	46b8      	mov	r8, r7
 800590e:	9306      	str	r3, [sp, #24]
 8005910:	4607      	mov	r7, r0
 8005912:	9b04      	ldr	r3, [sp, #16]
 8005914:	4631      	mov	r1, r6
 8005916:	3b01      	subs	r3, #1
 8005918:	4650      	mov	r0, sl
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	f7ff fa6c 	bl	8004df8 <quorem>
 8005920:	4641      	mov	r1, r8
 8005922:	9002      	str	r0, [sp, #8]
 8005924:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005928:	4650      	mov	r0, sl
 800592a:	f000 fc5b 	bl	80061e4 <__mcmp>
 800592e:	463a      	mov	r2, r7
 8005930:	9005      	str	r0, [sp, #20]
 8005932:	4631      	mov	r1, r6
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fc71 	bl	800621c <__mdiff>
 800593a:	68c2      	ldr	r2, [r0, #12]
 800593c:	4605      	mov	r5, r0
 800593e:	bb02      	cbnz	r2, 8005982 <_dtoa_r+0xa7a>
 8005940:	4601      	mov	r1, r0
 8005942:	4650      	mov	r0, sl
 8005944:	f000 fc4e 	bl	80061e4 <__mcmp>
 8005948:	4602      	mov	r2, r0
 800594a:	4629      	mov	r1, r5
 800594c:	4620      	mov	r0, r4
 800594e:	9209      	str	r2, [sp, #36]	; 0x24
 8005950:	f000 fa0c 	bl	8005d6c <_Bfree>
 8005954:	9b07      	ldr	r3, [sp, #28]
 8005956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005958:	9d04      	ldr	r5, [sp, #16]
 800595a:	ea43 0102 	orr.w	r1, r3, r2
 800595e:	9b06      	ldr	r3, [sp, #24]
 8005960:	4319      	orrs	r1, r3
 8005962:	d110      	bne.n	8005986 <_dtoa_r+0xa7e>
 8005964:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005968:	d029      	beq.n	80059be <_dtoa_r+0xab6>
 800596a:	9b05      	ldr	r3, [sp, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	dd02      	ble.n	8005976 <_dtoa_r+0xa6e>
 8005970:	9b02      	ldr	r3, [sp, #8]
 8005972:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	f883 9000 	strb.w	r9, [r3]
 800597c:	e774      	b.n	8005868 <_dtoa_r+0x960>
 800597e:	4638      	mov	r0, r7
 8005980:	e7ba      	b.n	80058f8 <_dtoa_r+0x9f0>
 8005982:	2201      	movs	r2, #1
 8005984:	e7e1      	b.n	800594a <_dtoa_r+0xa42>
 8005986:	9b05      	ldr	r3, [sp, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	db04      	blt.n	8005996 <_dtoa_r+0xa8e>
 800598c:	9907      	ldr	r1, [sp, #28]
 800598e:	430b      	orrs	r3, r1
 8005990:	9906      	ldr	r1, [sp, #24]
 8005992:	430b      	orrs	r3, r1
 8005994:	d120      	bne.n	80059d8 <_dtoa_r+0xad0>
 8005996:	2a00      	cmp	r2, #0
 8005998:	dded      	ble.n	8005976 <_dtoa_r+0xa6e>
 800599a:	4651      	mov	r1, sl
 800599c:	2201      	movs	r2, #1
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 fbb4 	bl	800610c <__lshift>
 80059a4:	4631      	mov	r1, r6
 80059a6:	4682      	mov	sl, r0
 80059a8:	f000 fc1c 	bl	80061e4 <__mcmp>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	dc03      	bgt.n	80059b8 <_dtoa_r+0xab0>
 80059b0:	d1e1      	bne.n	8005976 <_dtoa_r+0xa6e>
 80059b2:	f019 0f01 	tst.w	r9, #1
 80059b6:	d0de      	beq.n	8005976 <_dtoa_r+0xa6e>
 80059b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059bc:	d1d8      	bne.n	8005970 <_dtoa_r+0xa68>
 80059be:	9a01      	ldr	r2, [sp, #4]
 80059c0:	2339      	movs	r3, #57	; 0x39
 80059c2:	7013      	strb	r3, [r2, #0]
 80059c4:	462b      	mov	r3, r5
 80059c6:	461d      	mov	r5, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059ce:	2a39      	cmp	r2, #57	; 0x39
 80059d0:	d06c      	beq.n	8005aac <_dtoa_r+0xba4>
 80059d2:	3201      	adds	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	e747      	b.n	8005868 <_dtoa_r+0x960>
 80059d8:	2a00      	cmp	r2, #0
 80059da:	dd07      	ble.n	80059ec <_dtoa_r+0xae4>
 80059dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059e0:	d0ed      	beq.n	80059be <_dtoa_r+0xab6>
 80059e2:	9a01      	ldr	r2, [sp, #4]
 80059e4:	f109 0301 	add.w	r3, r9, #1
 80059e8:	7013      	strb	r3, [r2, #0]
 80059ea:	e73d      	b.n	8005868 <_dtoa_r+0x960>
 80059ec:	9b04      	ldr	r3, [sp, #16]
 80059ee:	9a08      	ldr	r2, [sp, #32]
 80059f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d043      	beq.n	8005a80 <_dtoa_r+0xb78>
 80059f8:	4651      	mov	r1, sl
 80059fa:	2300      	movs	r3, #0
 80059fc:	220a      	movs	r2, #10
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 f9d6 	bl	8005db0 <__multadd>
 8005a04:	45b8      	cmp	r8, r7
 8005a06:	4682      	mov	sl, r0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	f04f 020a 	mov.w	r2, #10
 8005a10:	4641      	mov	r1, r8
 8005a12:	4620      	mov	r0, r4
 8005a14:	d107      	bne.n	8005a26 <_dtoa_r+0xb1e>
 8005a16:	f000 f9cb 	bl	8005db0 <__multadd>
 8005a1a:	4680      	mov	r8, r0
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	9b04      	ldr	r3, [sp, #16]
 8005a20:	3301      	adds	r3, #1
 8005a22:	9304      	str	r3, [sp, #16]
 8005a24:	e775      	b.n	8005912 <_dtoa_r+0xa0a>
 8005a26:	f000 f9c3 	bl	8005db0 <__multadd>
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	220a      	movs	r2, #10
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f9bc 	bl	8005db0 <__multadd>
 8005a38:	4607      	mov	r7, r0
 8005a3a:	e7f0      	b.n	8005a1e <_dtoa_r+0xb16>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	9d00      	ldr	r5, [sp, #0]
 8005a42:	4631      	mov	r1, r6
 8005a44:	4650      	mov	r0, sl
 8005a46:	f7ff f9d7 	bl	8004df8 <quorem>
 8005a4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a4e:	9b00      	ldr	r3, [sp, #0]
 8005a50:	f805 9b01 	strb.w	r9, [r5], #1
 8005a54:	1aea      	subs	r2, r5, r3
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	dd07      	ble.n	8005a6c <_dtoa_r+0xb64>
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	2300      	movs	r3, #0
 8005a60:	220a      	movs	r2, #10
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f9a4 	bl	8005db0 <__multadd>
 8005a68:	4682      	mov	sl, r0
 8005a6a:	e7ea      	b.n	8005a42 <_dtoa_r+0xb3a>
 8005a6c:	9b01      	ldr	r3, [sp, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfc8      	it	gt
 8005a72:	461d      	movgt	r5, r3
 8005a74:	9b00      	ldr	r3, [sp, #0]
 8005a76:	bfd8      	it	le
 8005a78:	2501      	movle	r5, #1
 8005a7a:	441d      	add	r5, r3
 8005a7c:	f04f 0800 	mov.w	r8, #0
 8005a80:	4651      	mov	r1, sl
 8005a82:	2201      	movs	r2, #1
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 fb41 	bl	800610c <__lshift>
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4682      	mov	sl, r0
 8005a8e:	f000 fba9 	bl	80061e4 <__mcmp>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	dc96      	bgt.n	80059c4 <_dtoa_r+0xabc>
 8005a96:	d102      	bne.n	8005a9e <_dtoa_r+0xb96>
 8005a98:	f019 0f01 	tst.w	r9, #1
 8005a9c:	d192      	bne.n	80059c4 <_dtoa_r+0xabc>
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aa6:	2a30      	cmp	r2, #48	; 0x30
 8005aa8:	d0fa      	beq.n	8005aa0 <_dtoa_r+0xb98>
 8005aaa:	e6dd      	b.n	8005868 <_dtoa_r+0x960>
 8005aac:	9a00      	ldr	r2, [sp, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d189      	bne.n	80059c6 <_dtoa_r+0xabe>
 8005ab2:	f10b 0b01 	add.w	fp, fp, #1
 8005ab6:	2331      	movs	r3, #49	; 0x31
 8005ab8:	e796      	b.n	80059e8 <_dtoa_r+0xae0>
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <_dtoa_r+0xbdc>)
 8005abc:	f7ff ba99 	b.w	8004ff2 <_dtoa_r+0xea>
 8005ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f47f aa6d 	bne.w	8004fa2 <_dtoa_r+0x9a>
 8005ac8:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <_dtoa_r+0xbe0>)
 8005aca:	f7ff ba92 	b.w	8004ff2 <_dtoa_r+0xea>
 8005ace:	9b01      	ldr	r3, [sp, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dcb5      	bgt.n	8005a40 <_dtoa_r+0xb38>
 8005ad4:	9b07      	ldr	r3, [sp, #28]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	f73f aeb1 	bgt.w	800583e <_dtoa_r+0x936>
 8005adc:	e7b0      	b.n	8005a40 <_dtoa_r+0xb38>
 8005ade:	bf00      	nop
 8005ae0:	08006cc0 	.word	0x08006cc0
 8005ae4:	08006c20 	.word	0x08006c20
 8005ae8:	08006c44 	.word	0x08006c44

08005aec <_free_r>:
 8005aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d044      	beq.n	8005b7c <_free_r+0x90>
 8005af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af6:	9001      	str	r0, [sp, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f1a1 0404 	sub.w	r4, r1, #4
 8005afe:	bfb8      	it	lt
 8005b00:	18e4      	addlt	r4, r4, r3
 8005b02:	f000 f8e7 	bl	8005cd4 <__malloc_lock>
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <_free_r+0x94>)
 8005b08:	9801      	ldr	r0, [sp, #4]
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	b933      	cbnz	r3, 8005b1c <_free_r+0x30>
 8005b0e:	6063      	str	r3, [r4, #4]
 8005b10:	6014      	str	r4, [r2, #0]
 8005b12:	b003      	add	sp, #12
 8005b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b18:	f000 b8e2 	b.w	8005ce0 <__malloc_unlock>
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d908      	bls.n	8005b32 <_free_r+0x46>
 8005b20:	6825      	ldr	r5, [r4, #0]
 8005b22:	1961      	adds	r1, r4, r5
 8005b24:	428b      	cmp	r3, r1
 8005b26:	bf01      	itttt	eq
 8005b28:	6819      	ldreq	r1, [r3, #0]
 8005b2a:	685b      	ldreq	r3, [r3, #4]
 8005b2c:	1949      	addeq	r1, r1, r5
 8005b2e:	6021      	streq	r1, [r4, #0]
 8005b30:	e7ed      	b.n	8005b0e <_free_r+0x22>
 8005b32:	461a      	mov	r2, r3
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	b10b      	cbz	r3, 8005b3c <_free_r+0x50>
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d9fa      	bls.n	8005b32 <_free_r+0x46>
 8005b3c:	6811      	ldr	r1, [r2, #0]
 8005b3e:	1855      	adds	r5, r2, r1
 8005b40:	42a5      	cmp	r5, r4
 8005b42:	d10b      	bne.n	8005b5c <_free_r+0x70>
 8005b44:	6824      	ldr	r4, [r4, #0]
 8005b46:	4421      	add	r1, r4
 8005b48:	1854      	adds	r4, r2, r1
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	6011      	str	r1, [r2, #0]
 8005b4e:	d1e0      	bne.n	8005b12 <_free_r+0x26>
 8005b50:	681c      	ldr	r4, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	6053      	str	r3, [r2, #4]
 8005b56:	440c      	add	r4, r1
 8005b58:	6014      	str	r4, [r2, #0]
 8005b5a:	e7da      	b.n	8005b12 <_free_r+0x26>
 8005b5c:	d902      	bls.n	8005b64 <_free_r+0x78>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	e7d6      	b.n	8005b12 <_free_r+0x26>
 8005b64:	6825      	ldr	r5, [r4, #0]
 8005b66:	1961      	adds	r1, r4, r5
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	bf04      	itt	eq
 8005b6c:	6819      	ldreq	r1, [r3, #0]
 8005b6e:	685b      	ldreq	r3, [r3, #4]
 8005b70:	6063      	str	r3, [r4, #4]
 8005b72:	bf04      	itt	eq
 8005b74:	1949      	addeq	r1, r1, r5
 8005b76:	6021      	streq	r1, [r4, #0]
 8005b78:	6054      	str	r4, [r2, #4]
 8005b7a:	e7ca      	b.n	8005b12 <_free_r+0x26>
 8005b7c:	b003      	add	sp, #12
 8005b7e:	bd30      	pop	{r4, r5, pc}
 8005b80:	20000414 	.word	0x20000414

08005b84 <malloc>:
 8005b84:	4b02      	ldr	r3, [pc, #8]	; (8005b90 <malloc+0xc>)
 8005b86:	4601      	mov	r1, r0
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	f000 b823 	b.w	8005bd4 <_malloc_r>
 8005b8e:	bf00      	nop
 8005b90:	20000064 	.word	0x20000064

08005b94 <sbrk_aligned>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	4e0e      	ldr	r6, [pc, #56]	; (8005bd0 <sbrk_aligned+0x3c>)
 8005b98:	460c      	mov	r4, r1
 8005b9a:	6831      	ldr	r1, [r6, #0]
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	b911      	cbnz	r1, 8005ba6 <sbrk_aligned+0x12>
 8005ba0:	f000 fea8 	bl	80068f4 <_sbrk_r>
 8005ba4:	6030      	str	r0, [r6, #0]
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	4628      	mov	r0, r5
 8005baa:	f000 fea3 	bl	80068f4 <_sbrk_r>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	d00a      	beq.n	8005bc8 <sbrk_aligned+0x34>
 8005bb2:	1cc4      	adds	r4, r0, #3
 8005bb4:	f024 0403 	bic.w	r4, r4, #3
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d007      	beq.n	8005bcc <sbrk_aligned+0x38>
 8005bbc:	1a21      	subs	r1, r4, r0
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 fe98 	bl	80068f4 <_sbrk_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d101      	bne.n	8005bcc <sbrk_aligned+0x38>
 8005bc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bcc:	4620      	mov	r0, r4
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	20000418 	.word	0x20000418

08005bd4 <_malloc_r>:
 8005bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd8:	1ccd      	adds	r5, r1, #3
 8005bda:	f025 0503 	bic.w	r5, r5, #3
 8005bde:	3508      	adds	r5, #8
 8005be0:	2d0c      	cmp	r5, #12
 8005be2:	bf38      	it	cc
 8005be4:	250c      	movcc	r5, #12
 8005be6:	2d00      	cmp	r5, #0
 8005be8:	4607      	mov	r7, r0
 8005bea:	db01      	blt.n	8005bf0 <_malloc_r+0x1c>
 8005bec:	42a9      	cmp	r1, r5
 8005bee:	d905      	bls.n	8005bfc <_malloc_r+0x28>
 8005bf0:	230c      	movs	r3, #12
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	2600      	movs	r6, #0
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cd0 <_malloc_r+0xfc>
 8005c00:	f000 f868 	bl	8005cd4 <__malloc_lock>
 8005c04:	f8d8 3000 	ldr.w	r3, [r8]
 8005c08:	461c      	mov	r4, r3
 8005c0a:	bb5c      	cbnz	r4, 8005c64 <_malloc_r+0x90>
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	4638      	mov	r0, r7
 8005c10:	f7ff ffc0 	bl	8005b94 <sbrk_aligned>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	4604      	mov	r4, r0
 8005c18:	d155      	bne.n	8005cc6 <_malloc_r+0xf2>
 8005c1a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c1e:	4626      	mov	r6, r4
 8005c20:	2e00      	cmp	r6, #0
 8005c22:	d145      	bne.n	8005cb0 <_malloc_r+0xdc>
 8005c24:	2c00      	cmp	r4, #0
 8005c26:	d048      	beq.n	8005cba <_malloc_r+0xe6>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	eb04 0903 	add.w	r9, r4, r3
 8005c32:	f000 fe5f 	bl	80068f4 <_sbrk_r>
 8005c36:	4581      	cmp	r9, r0
 8005c38:	d13f      	bne.n	8005cba <_malloc_r+0xe6>
 8005c3a:	6821      	ldr	r1, [r4, #0]
 8005c3c:	1a6d      	subs	r5, r5, r1
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff ffa7 	bl	8005b94 <sbrk_aligned>
 8005c46:	3001      	adds	r0, #1
 8005c48:	d037      	beq.n	8005cba <_malloc_r+0xe6>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	442b      	add	r3, r5
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	f8d8 3000 	ldr.w	r3, [r8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d038      	beq.n	8005cca <_malloc_r+0xf6>
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	42a2      	cmp	r2, r4
 8005c5c:	d12b      	bne.n	8005cb6 <_malloc_r+0xe2>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	e00f      	b.n	8005c84 <_malloc_r+0xb0>
 8005c64:	6822      	ldr	r2, [r4, #0]
 8005c66:	1b52      	subs	r2, r2, r5
 8005c68:	d41f      	bmi.n	8005caa <_malloc_r+0xd6>
 8005c6a:	2a0b      	cmp	r2, #11
 8005c6c:	d917      	bls.n	8005c9e <_malloc_r+0xca>
 8005c6e:	1961      	adds	r1, r4, r5
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	6025      	str	r5, [r4, #0]
 8005c74:	bf18      	it	ne
 8005c76:	6059      	strne	r1, [r3, #4]
 8005c78:	6863      	ldr	r3, [r4, #4]
 8005c7a:	bf08      	it	eq
 8005c7c:	f8c8 1000 	streq.w	r1, [r8]
 8005c80:	5162      	str	r2, [r4, r5]
 8005c82:	604b      	str	r3, [r1, #4]
 8005c84:	4638      	mov	r0, r7
 8005c86:	f104 060b 	add.w	r6, r4, #11
 8005c8a:	f000 f829 	bl	8005ce0 <__malloc_unlock>
 8005c8e:	f026 0607 	bic.w	r6, r6, #7
 8005c92:	1d23      	adds	r3, r4, #4
 8005c94:	1af2      	subs	r2, r6, r3
 8005c96:	d0ae      	beq.n	8005bf6 <_malloc_r+0x22>
 8005c98:	1b9b      	subs	r3, r3, r6
 8005c9a:	50a3      	str	r3, [r4, r2]
 8005c9c:	e7ab      	b.n	8005bf6 <_malloc_r+0x22>
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	6862      	ldr	r2, [r4, #4]
 8005ca2:	d1dd      	bne.n	8005c60 <_malloc_r+0x8c>
 8005ca4:	f8c8 2000 	str.w	r2, [r8]
 8005ca8:	e7ec      	b.n	8005c84 <_malloc_r+0xb0>
 8005caa:	4623      	mov	r3, r4
 8005cac:	6864      	ldr	r4, [r4, #4]
 8005cae:	e7ac      	b.n	8005c0a <_malloc_r+0x36>
 8005cb0:	4634      	mov	r4, r6
 8005cb2:	6876      	ldr	r6, [r6, #4]
 8005cb4:	e7b4      	b.n	8005c20 <_malloc_r+0x4c>
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	e7cc      	b.n	8005c54 <_malloc_r+0x80>
 8005cba:	230c      	movs	r3, #12
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	f000 f80e 	bl	8005ce0 <__malloc_unlock>
 8005cc4:	e797      	b.n	8005bf6 <_malloc_r+0x22>
 8005cc6:	6025      	str	r5, [r4, #0]
 8005cc8:	e7dc      	b.n	8005c84 <_malloc_r+0xb0>
 8005cca:	605b      	str	r3, [r3, #4]
 8005ccc:	deff      	udf	#255	; 0xff
 8005cce:	bf00      	nop
 8005cd0:	20000414 	.word	0x20000414

08005cd4 <__malloc_lock>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	; (8005cdc <__malloc_lock+0x8>)
 8005cd6:	f7ff b88d 	b.w	8004df4 <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20000410 	.word	0x20000410

08005ce0 <__malloc_unlock>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <__malloc_unlock+0x8>)
 8005ce2:	f7ff b888 	b.w	8004df6 <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20000410 	.word	0x20000410

08005cec <_Balloc>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	69c6      	ldr	r6, [r0, #28]
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	460d      	mov	r5, r1
 8005cf4:	b976      	cbnz	r6, 8005d14 <_Balloc+0x28>
 8005cf6:	2010      	movs	r0, #16
 8005cf8:	f7ff ff44 	bl	8005b84 <malloc>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	61e0      	str	r0, [r4, #28]
 8005d00:	b920      	cbnz	r0, 8005d0c <_Balloc+0x20>
 8005d02:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <_Balloc+0x78>)
 8005d04:	4818      	ldr	r0, [pc, #96]	; (8005d68 <_Balloc+0x7c>)
 8005d06:	216b      	movs	r1, #107	; 0x6b
 8005d08:	f000 fe12 	bl	8006930 <__assert_func>
 8005d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d10:	6006      	str	r6, [r0, #0]
 8005d12:	60c6      	str	r6, [r0, #12]
 8005d14:	69e6      	ldr	r6, [r4, #28]
 8005d16:	68f3      	ldr	r3, [r6, #12]
 8005d18:	b183      	cbz	r3, 8005d3c <_Balloc+0x50>
 8005d1a:	69e3      	ldr	r3, [r4, #28]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d22:	b9b8      	cbnz	r0, 8005d54 <_Balloc+0x68>
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f605 	lsl.w	r6, r1, r5
 8005d2a:	1d72      	adds	r2, r6, #5
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 fe1c 	bl	800696c <_calloc_r>
 8005d34:	b160      	cbz	r0, 8005d50 <_Balloc+0x64>
 8005d36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d3a:	e00e      	b.n	8005d5a <_Balloc+0x6e>
 8005d3c:	2221      	movs	r2, #33	; 0x21
 8005d3e:	2104      	movs	r1, #4
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fe13 	bl	800696c <_calloc_r>
 8005d46:	69e3      	ldr	r3, [r4, #28]
 8005d48:	60f0      	str	r0, [r6, #12]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e4      	bne.n	8005d1a <_Balloc+0x2e>
 8005d50:	2000      	movs	r0, #0
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	6802      	ldr	r2, [r0, #0]
 8005d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d60:	e7f7      	b.n	8005d52 <_Balloc+0x66>
 8005d62:	bf00      	nop
 8005d64:	08006c51 	.word	0x08006c51
 8005d68:	08006cd1 	.word	0x08006cd1

08005d6c <_Bfree>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	69c6      	ldr	r6, [r0, #28]
 8005d70:	4605      	mov	r5, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	b976      	cbnz	r6, 8005d94 <_Bfree+0x28>
 8005d76:	2010      	movs	r0, #16
 8005d78:	f7ff ff04 	bl	8005b84 <malloc>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	61e8      	str	r0, [r5, #28]
 8005d80:	b920      	cbnz	r0, 8005d8c <_Bfree+0x20>
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <_Bfree+0x3c>)
 8005d84:	4809      	ldr	r0, [pc, #36]	; (8005dac <_Bfree+0x40>)
 8005d86:	218f      	movs	r1, #143	; 0x8f
 8005d88:	f000 fdd2 	bl	8006930 <__assert_func>
 8005d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d90:	6006      	str	r6, [r0, #0]
 8005d92:	60c6      	str	r6, [r0, #12]
 8005d94:	b13c      	cbz	r4, 8005da6 <_Bfree+0x3a>
 8005d96:	69eb      	ldr	r3, [r5, #28]
 8005d98:	6862      	ldr	r2, [r4, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005da0:	6021      	str	r1, [r4, #0]
 8005da2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	08006c51 	.word	0x08006c51
 8005dac:	08006cd1 	.word	0x08006cd1

08005db0 <__multadd>:
 8005db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db4:	690d      	ldr	r5, [r1, #16]
 8005db6:	4607      	mov	r7, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	461e      	mov	r6, r3
 8005dbc:	f101 0c14 	add.w	ip, r1, #20
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f8dc 3000 	ldr.w	r3, [ip]
 8005dc6:	b299      	uxth	r1, r3
 8005dc8:	fb02 6101 	mla	r1, r2, r1, r6
 8005dcc:	0c1e      	lsrs	r6, r3, #16
 8005dce:	0c0b      	lsrs	r3, r1, #16
 8005dd0:	fb02 3306 	mla	r3, r2, r6, r3
 8005dd4:	b289      	uxth	r1, r1
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ddc:	4285      	cmp	r5, r0
 8005dde:	f84c 1b04 	str.w	r1, [ip], #4
 8005de2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005de6:	dcec      	bgt.n	8005dc2 <__multadd+0x12>
 8005de8:	b30e      	cbz	r6, 8005e2e <__multadd+0x7e>
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dc19      	bgt.n	8005e24 <__multadd+0x74>
 8005df0:	6861      	ldr	r1, [r4, #4]
 8005df2:	4638      	mov	r0, r7
 8005df4:	3101      	adds	r1, #1
 8005df6:	f7ff ff79 	bl	8005cec <_Balloc>
 8005dfa:	4680      	mov	r8, r0
 8005dfc:	b928      	cbnz	r0, 8005e0a <__multadd+0x5a>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <__multadd+0x84>)
 8005e02:	480d      	ldr	r0, [pc, #52]	; (8005e38 <__multadd+0x88>)
 8005e04:	21ba      	movs	r1, #186	; 0xba
 8005e06:	f000 fd93 	bl	8006930 <__assert_func>
 8005e0a:	6922      	ldr	r2, [r4, #16]
 8005e0c:	3202      	adds	r2, #2
 8005e0e:	f104 010c 	add.w	r1, r4, #12
 8005e12:	0092      	lsls	r2, r2, #2
 8005e14:	300c      	adds	r0, #12
 8005e16:	f000 fd7d 	bl	8006914 <memcpy>
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f7ff ffa5 	bl	8005d6c <_Bfree>
 8005e22:	4644      	mov	r4, r8
 8005e24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e28:	3501      	adds	r5, #1
 8005e2a:	615e      	str	r6, [r3, #20]
 8005e2c:	6125      	str	r5, [r4, #16]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e34:	08006cc0 	.word	0x08006cc0
 8005e38:	08006cd1 	.word	0x08006cd1

08005e3c <__hi0bits>:
 8005e3c:	0c03      	lsrs	r3, r0, #16
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	b9d3      	cbnz	r3, 8005e78 <__hi0bits+0x3c>
 8005e42:	0400      	lsls	r0, r0, #16
 8005e44:	2310      	movs	r3, #16
 8005e46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e4a:	bf04      	itt	eq
 8005e4c:	0200      	lsleq	r0, r0, #8
 8005e4e:	3308      	addeq	r3, #8
 8005e50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e54:	bf04      	itt	eq
 8005e56:	0100      	lsleq	r0, r0, #4
 8005e58:	3304      	addeq	r3, #4
 8005e5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e5e:	bf04      	itt	eq
 8005e60:	0080      	lsleq	r0, r0, #2
 8005e62:	3302      	addeq	r3, #2
 8005e64:	2800      	cmp	r0, #0
 8005e66:	db05      	blt.n	8005e74 <__hi0bits+0x38>
 8005e68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e6c:	f103 0301 	add.w	r3, r3, #1
 8005e70:	bf08      	it	eq
 8005e72:	2320      	moveq	r3, #32
 8005e74:	4618      	mov	r0, r3
 8005e76:	4770      	bx	lr
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e7e4      	b.n	8005e46 <__hi0bits+0xa>

08005e7c <__lo0bits>:
 8005e7c:	6803      	ldr	r3, [r0, #0]
 8005e7e:	f013 0207 	ands.w	r2, r3, #7
 8005e82:	d00c      	beq.n	8005e9e <__lo0bits+0x22>
 8005e84:	07d9      	lsls	r1, r3, #31
 8005e86:	d422      	bmi.n	8005ece <__lo0bits+0x52>
 8005e88:	079a      	lsls	r2, r3, #30
 8005e8a:	bf49      	itett	mi
 8005e8c:	085b      	lsrmi	r3, r3, #1
 8005e8e:	089b      	lsrpl	r3, r3, #2
 8005e90:	6003      	strmi	r3, [r0, #0]
 8005e92:	2201      	movmi	r2, #1
 8005e94:	bf5c      	itt	pl
 8005e96:	6003      	strpl	r3, [r0, #0]
 8005e98:	2202      	movpl	r2, #2
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4770      	bx	lr
 8005e9e:	b299      	uxth	r1, r3
 8005ea0:	b909      	cbnz	r1, 8005ea6 <__lo0bits+0x2a>
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	b2d9      	uxtb	r1, r3
 8005ea8:	b909      	cbnz	r1, 8005eae <__lo0bits+0x32>
 8005eaa:	3208      	adds	r2, #8
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	0719      	lsls	r1, r3, #28
 8005eb0:	bf04      	itt	eq
 8005eb2:	091b      	lsreq	r3, r3, #4
 8005eb4:	3204      	addeq	r2, #4
 8005eb6:	0799      	lsls	r1, r3, #30
 8005eb8:	bf04      	itt	eq
 8005eba:	089b      	lsreq	r3, r3, #2
 8005ebc:	3202      	addeq	r2, #2
 8005ebe:	07d9      	lsls	r1, r3, #31
 8005ec0:	d403      	bmi.n	8005eca <__lo0bits+0x4e>
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	f102 0201 	add.w	r2, r2, #1
 8005ec8:	d003      	beq.n	8005ed2 <__lo0bits+0x56>
 8005eca:	6003      	str	r3, [r0, #0]
 8005ecc:	e7e5      	b.n	8005e9a <__lo0bits+0x1e>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	e7e3      	b.n	8005e9a <__lo0bits+0x1e>
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	e7e1      	b.n	8005e9a <__lo0bits+0x1e>
	...

08005ed8 <__i2b>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	460c      	mov	r4, r1
 8005edc:	2101      	movs	r1, #1
 8005ede:	f7ff ff05 	bl	8005cec <_Balloc>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	b928      	cbnz	r0, 8005ef2 <__i2b+0x1a>
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <__i2b+0x24>)
 8005ee8:	4805      	ldr	r0, [pc, #20]	; (8005f00 <__i2b+0x28>)
 8005eea:	f240 1145 	movw	r1, #325	; 0x145
 8005eee:	f000 fd1f 	bl	8006930 <__assert_func>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	6144      	str	r4, [r0, #20]
 8005ef6:	6103      	str	r3, [r0, #16]
 8005ef8:	bd10      	pop	{r4, pc}
 8005efa:	bf00      	nop
 8005efc:	08006cc0 	.word	0x08006cc0
 8005f00:	08006cd1 	.word	0x08006cd1

08005f04 <__multiply>:
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	4691      	mov	r9, r2
 8005f0a:	690a      	ldr	r2, [r1, #16]
 8005f0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	bfb8      	it	lt
 8005f14:	460b      	movlt	r3, r1
 8005f16:	460c      	mov	r4, r1
 8005f18:	bfbc      	itt	lt
 8005f1a:	464c      	movlt	r4, r9
 8005f1c:	4699      	movlt	r9, r3
 8005f1e:	6927      	ldr	r7, [r4, #16]
 8005f20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f24:	68a3      	ldr	r3, [r4, #8]
 8005f26:	6861      	ldr	r1, [r4, #4]
 8005f28:	eb07 060a 	add.w	r6, r7, sl
 8005f2c:	42b3      	cmp	r3, r6
 8005f2e:	b085      	sub	sp, #20
 8005f30:	bfb8      	it	lt
 8005f32:	3101      	addlt	r1, #1
 8005f34:	f7ff feda 	bl	8005cec <_Balloc>
 8005f38:	b930      	cbnz	r0, 8005f48 <__multiply+0x44>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	4b44      	ldr	r3, [pc, #272]	; (8006050 <__multiply+0x14c>)
 8005f3e:	4845      	ldr	r0, [pc, #276]	; (8006054 <__multiply+0x150>)
 8005f40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f44:	f000 fcf4 	bl	8006930 <__assert_func>
 8005f48:	f100 0514 	add.w	r5, r0, #20
 8005f4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f50:	462b      	mov	r3, r5
 8005f52:	2200      	movs	r2, #0
 8005f54:	4543      	cmp	r3, r8
 8005f56:	d321      	bcc.n	8005f9c <__multiply+0x98>
 8005f58:	f104 0314 	add.w	r3, r4, #20
 8005f5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f60:	f109 0314 	add.w	r3, r9, #20
 8005f64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f68:	9202      	str	r2, [sp, #8]
 8005f6a:	1b3a      	subs	r2, r7, r4
 8005f6c:	3a15      	subs	r2, #21
 8005f6e:	f022 0203 	bic.w	r2, r2, #3
 8005f72:	3204      	adds	r2, #4
 8005f74:	f104 0115 	add.w	r1, r4, #21
 8005f78:	428f      	cmp	r7, r1
 8005f7a:	bf38      	it	cc
 8005f7c:	2204      	movcc	r2, #4
 8005f7e:	9201      	str	r2, [sp, #4]
 8005f80:	9a02      	ldr	r2, [sp, #8]
 8005f82:	9303      	str	r3, [sp, #12]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d80c      	bhi.n	8005fa2 <__multiply+0x9e>
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	dd03      	ble.n	8005f94 <__multiply+0x90>
 8005f8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d05b      	beq.n	800604c <__multiply+0x148>
 8005f94:	6106      	str	r6, [r0, #16]
 8005f96:	b005      	add	sp, #20
 8005f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9c:	f843 2b04 	str.w	r2, [r3], #4
 8005fa0:	e7d8      	b.n	8005f54 <__multiply+0x50>
 8005fa2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fa6:	f1ba 0f00 	cmp.w	sl, #0
 8005faa:	d024      	beq.n	8005ff6 <__multiply+0xf2>
 8005fac:	f104 0e14 	add.w	lr, r4, #20
 8005fb0:	46a9      	mov	r9, r5
 8005fb2:	f04f 0c00 	mov.w	ip, #0
 8005fb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fba:	f8d9 1000 	ldr.w	r1, [r9]
 8005fbe:	fa1f fb82 	uxth.w	fp, r2
 8005fc2:	b289      	uxth	r1, r1
 8005fc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8005fd0:	4461      	add	r1, ip
 8005fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005fda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fde:	b289      	uxth	r1, r1
 8005fe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fe4:	4577      	cmp	r7, lr
 8005fe6:	f849 1b04 	str.w	r1, [r9], #4
 8005fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fee:	d8e2      	bhi.n	8005fb6 <__multiply+0xb2>
 8005ff0:	9a01      	ldr	r2, [sp, #4]
 8005ff2:	f845 c002 	str.w	ip, [r5, r2]
 8005ff6:	9a03      	ldr	r2, [sp, #12]
 8005ff8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	f1b9 0f00 	cmp.w	r9, #0
 8006002:	d021      	beq.n	8006048 <__multiply+0x144>
 8006004:	6829      	ldr	r1, [r5, #0]
 8006006:	f104 0c14 	add.w	ip, r4, #20
 800600a:	46ae      	mov	lr, r5
 800600c:	f04f 0a00 	mov.w	sl, #0
 8006010:	f8bc b000 	ldrh.w	fp, [ip]
 8006014:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006018:	fb09 220b 	mla	r2, r9, fp, r2
 800601c:	4452      	add	r2, sl
 800601e:	b289      	uxth	r1, r1
 8006020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006024:	f84e 1b04 	str.w	r1, [lr], #4
 8006028:	f85c 1b04 	ldr.w	r1, [ip], #4
 800602c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006030:	f8be 1000 	ldrh.w	r1, [lr]
 8006034:	fb09 110a 	mla	r1, r9, sl, r1
 8006038:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800603c:	4567      	cmp	r7, ip
 800603e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006042:	d8e5      	bhi.n	8006010 <__multiply+0x10c>
 8006044:	9a01      	ldr	r2, [sp, #4]
 8006046:	50a9      	str	r1, [r5, r2]
 8006048:	3504      	adds	r5, #4
 800604a:	e799      	b.n	8005f80 <__multiply+0x7c>
 800604c:	3e01      	subs	r6, #1
 800604e:	e79b      	b.n	8005f88 <__multiply+0x84>
 8006050:	08006cc0 	.word	0x08006cc0
 8006054:	08006cd1 	.word	0x08006cd1

08006058 <__pow5mult>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	4615      	mov	r5, r2
 800605e:	f012 0203 	ands.w	r2, r2, #3
 8006062:	4606      	mov	r6, r0
 8006064:	460f      	mov	r7, r1
 8006066:	d007      	beq.n	8006078 <__pow5mult+0x20>
 8006068:	4c25      	ldr	r4, [pc, #148]	; (8006100 <__pow5mult+0xa8>)
 800606a:	3a01      	subs	r2, #1
 800606c:	2300      	movs	r3, #0
 800606e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006072:	f7ff fe9d 	bl	8005db0 <__multadd>
 8006076:	4607      	mov	r7, r0
 8006078:	10ad      	asrs	r5, r5, #2
 800607a:	d03d      	beq.n	80060f8 <__pow5mult+0xa0>
 800607c:	69f4      	ldr	r4, [r6, #28]
 800607e:	b97c      	cbnz	r4, 80060a0 <__pow5mult+0x48>
 8006080:	2010      	movs	r0, #16
 8006082:	f7ff fd7f 	bl	8005b84 <malloc>
 8006086:	4602      	mov	r2, r0
 8006088:	61f0      	str	r0, [r6, #28]
 800608a:	b928      	cbnz	r0, 8006098 <__pow5mult+0x40>
 800608c:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <__pow5mult+0xac>)
 800608e:	481e      	ldr	r0, [pc, #120]	; (8006108 <__pow5mult+0xb0>)
 8006090:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006094:	f000 fc4c 	bl	8006930 <__assert_func>
 8006098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800609c:	6004      	str	r4, [r0, #0]
 800609e:	60c4      	str	r4, [r0, #12]
 80060a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060a8:	b94c      	cbnz	r4, 80060be <__pow5mult+0x66>
 80060aa:	f240 2171 	movw	r1, #625	; 0x271
 80060ae:	4630      	mov	r0, r6
 80060b0:	f7ff ff12 	bl	8005ed8 <__i2b>
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80060ba:	4604      	mov	r4, r0
 80060bc:	6003      	str	r3, [r0, #0]
 80060be:	f04f 0900 	mov.w	r9, #0
 80060c2:	07eb      	lsls	r3, r5, #31
 80060c4:	d50a      	bpl.n	80060dc <__pow5mult+0x84>
 80060c6:	4639      	mov	r1, r7
 80060c8:	4622      	mov	r2, r4
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ff1a 	bl	8005f04 <__multiply>
 80060d0:	4639      	mov	r1, r7
 80060d2:	4680      	mov	r8, r0
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff fe49 	bl	8005d6c <_Bfree>
 80060da:	4647      	mov	r7, r8
 80060dc:	106d      	asrs	r5, r5, #1
 80060de:	d00b      	beq.n	80060f8 <__pow5mult+0xa0>
 80060e0:	6820      	ldr	r0, [r4, #0]
 80060e2:	b938      	cbnz	r0, 80060f4 <__pow5mult+0x9c>
 80060e4:	4622      	mov	r2, r4
 80060e6:	4621      	mov	r1, r4
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff ff0b 	bl	8005f04 <__multiply>
 80060ee:	6020      	str	r0, [r4, #0]
 80060f0:	f8c0 9000 	str.w	r9, [r0]
 80060f4:	4604      	mov	r4, r0
 80060f6:	e7e4      	b.n	80060c2 <__pow5mult+0x6a>
 80060f8:	4638      	mov	r0, r7
 80060fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fe:	bf00      	nop
 8006100:	08006e20 	.word	0x08006e20
 8006104:	08006c51 	.word	0x08006c51
 8006108:	08006cd1 	.word	0x08006cd1

0800610c <__lshift>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	460c      	mov	r4, r1
 8006112:	6849      	ldr	r1, [r1, #4]
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800611a:	68a3      	ldr	r3, [r4, #8]
 800611c:	4607      	mov	r7, r0
 800611e:	4691      	mov	r9, r2
 8006120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006124:	f108 0601 	add.w	r6, r8, #1
 8006128:	42b3      	cmp	r3, r6
 800612a:	db0b      	blt.n	8006144 <__lshift+0x38>
 800612c:	4638      	mov	r0, r7
 800612e:	f7ff fddd 	bl	8005cec <_Balloc>
 8006132:	4605      	mov	r5, r0
 8006134:	b948      	cbnz	r0, 800614a <__lshift+0x3e>
 8006136:	4602      	mov	r2, r0
 8006138:	4b28      	ldr	r3, [pc, #160]	; (80061dc <__lshift+0xd0>)
 800613a:	4829      	ldr	r0, [pc, #164]	; (80061e0 <__lshift+0xd4>)
 800613c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006140:	f000 fbf6 	bl	8006930 <__assert_func>
 8006144:	3101      	adds	r1, #1
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	e7ee      	b.n	8006128 <__lshift+0x1c>
 800614a:	2300      	movs	r3, #0
 800614c:	f100 0114 	add.w	r1, r0, #20
 8006150:	f100 0210 	add.w	r2, r0, #16
 8006154:	4618      	mov	r0, r3
 8006156:	4553      	cmp	r3, sl
 8006158:	db33      	blt.n	80061c2 <__lshift+0xb6>
 800615a:	6920      	ldr	r0, [r4, #16]
 800615c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006160:	f104 0314 	add.w	r3, r4, #20
 8006164:	f019 091f 	ands.w	r9, r9, #31
 8006168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800616c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006170:	d02b      	beq.n	80061ca <__lshift+0xbe>
 8006172:	f1c9 0e20 	rsb	lr, r9, #32
 8006176:	468a      	mov	sl, r1
 8006178:	2200      	movs	r2, #0
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	fa00 f009 	lsl.w	r0, r0, r9
 8006180:	4310      	orrs	r0, r2
 8006182:	f84a 0b04 	str.w	r0, [sl], #4
 8006186:	f853 2b04 	ldr.w	r2, [r3], #4
 800618a:	459c      	cmp	ip, r3
 800618c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006190:	d8f3      	bhi.n	800617a <__lshift+0x6e>
 8006192:	ebac 0304 	sub.w	r3, ip, r4
 8006196:	3b15      	subs	r3, #21
 8006198:	f023 0303 	bic.w	r3, r3, #3
 800619c:	3304      	adds	r3, #4
 800619e:	f104 0015 	add.w	r0, r4, #21
 80061a2:	4584      	cmp	ip, r0
 80061a4:	bf38      	it	cc
 80061a6:	2304      	movcc	r3, #4
 80061a8:	50ca      	str	r2, [r1, r3]
 80061aa:	b10a      	cbz	r2, 80061b0 <__lshift+0xa4>
 80061ac:	f108 0602 	add.w	r6, r8, #2
 80061b0:	3e01      	subs	r6, #1
 80061b2:	4638      	mov	r0, r7
 80061b4:	612e      	str	r6, [r5, #16]
 80061b6:	4621      	mov	r1, r4
 80061b8:	f7ff fdd8 	bl	8005d6c <_Bfree>
 80061bc:	4628      	mov	r0, r5
 80061be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80061c6:	3301      	adds	r3, #1
 80061c8:	e7c5      	b.n	8006156 <__lshift+0x4a>
 80061ca:	3904      	subs	r1, #4
 80061cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80061d4:	459c      	cmp	ip, r3
 80061d6:	d8f9      	bhi.n	80061cc <__lshift+0xc0>
 80061d8:	e7ea      	b.n	80061b0 <__lshift+0xa4>
 80061da:	bf00      	nop
 80061dc:	08006cc0 	.word	0x08006cc0
 80061e0:	08006cd1 	.word	0x08006cd1

080061e4 <__mcmp>:
 80061e4:	b530      	push	{r4, r5, lr}
 80061e6:	6902      	ldr	r2, [r0, #16]
 80061e8:	690c      	ldr	r4, [r1, #16]
 80061ea:	1b12      	subs	r2, r2, r4
 80061ec:	d10e      	bne.n	800620c <__mcmp+0x28>
 80061ee:	f100 0314 	add.w	r3, r0, #20
 80061f2:	3114      	adds	r1, #20
 80061f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80061fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006200:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006204:	42a5      	cmp	r5, r4
 8006206:	d003      	beq.n	8006210 <__mcmp+0x2c>
 8006208:	d305      	bcc.n	8006216 <__mcmp+0x32>
 800620a:	2201      	movs	r2, #1
 800620c:	4610      	mov	r0, r2
 800620e:	bd30      	pop	{r4, r5, pc}
 8006210:	4283      	cmp	r3, r0
 8006212:	d3f3      	bcc.n	80061fc <__mcmp+0x18>
 8006214:	e7fa      	b.n	800620c <__mcmp+0x28>
 8006216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621a:	e7f7      	b.n	800620c <__mcmp+0x28>

0800621c <__mdiff>:
 800621c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	460c      	mov	r4, r1
 8006222:	4606      	mov	r6, r0
 8006224:	4611      	mov	r1, r2
 8006226:	4620      	mov	r0, r4
 8006228:	4690      	mov	r8, r2
 800622a:	f7ff ffdb 	bl	80061e4 <__mcmp>
 800622e:	1e05      	subs	r5, r0, #0
 8006230:	d110      	bne.n	8006254 <__mdiff+0x38>
 8006232:	4629      	mov	r1, r5
 8006234:	4630      	mov	r0, r6
 8006236:	f7ff fd59 	bl	8005cec <_Balloc>
 800623a:	b930      	cbnz	r0, 800624a <__mdiff+0x2e>
 800623c:	4b3a      	ldr	r3, [pc, #232]	; (8006328 <__mdiff+0x10c>)
 800623e:	4602      	mov	r2, r0
 8006240:	f240 2137 	movw	r1, #567	; 0x237
 8006244:	4839      	ldr	r0, [pc, #228]	; (800632c <__mdiff+0x110>)
 8006246:	f000 fb73 	bl	8006930 <__assert_func>
 800624a:	2301      	movs	r3, #1
 800624c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006254:	bfa4      	itt	ge
 8006256:	4643      	movge	r3, r8
 8006258:	46a0      	movge	r8, r4
 800625a:	4630      	mov	r0, r6
 800625c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006260:	bfa6      	itte	ge
 8006262:	461c      	movge	r4, r3
 8006264:	2500      	movge	r5, #0
 8006266:	2501      	movlt	r5, #1
 8006268:	f7ff fd40 	bl	8005cec <_Balloc>
 800626c:	b920      	cbnz	r0, 8006278 <__mdiff+0x5c>
 800626e:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <__mdiff+0x10c>)
 8006270:	4602      	mov	r2, r0
 8006272:	f240 2145 	movw	r1, #581	; 0x245
 8006276:	e7e5      	b.n	8006244 <__mdiff+0x28>
 8006278:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800627c:	6926      	ldr	r6, [r4, #16]
 800627e:	60c5      	str	r5, [r0, #12]
 8006280:	f104 0914 	add.w	r9, r4, #20
 8006284:	f108 0514 	add.w	r5, r8, #20
 8006288:	f100 0e14 	add.w	lr, r0, #20
 800628c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006294:	f108 0210 	add.w	r2, r8, #16
 8006298:	46f2      	mov	sl, lr
 800629a:	2100      	movs	r1, #0
 800629c:	f859 3b04 	ldr.w	r3, [r9], #4
 80062a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062a4:	fa11 f88b 	uxtah	r8, r1, fp
 80062a8:	b299      	uxth	r1, r3
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	eba8 0801 	sub.w	r8, r8, r1
 80062b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062b8:	fa1f f888 	uxth.w	r8, r8
 80062bc:	1419      	asrs	r1, r3, #16
 80062be:	454e      	cmp	r6, r9
 80062c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062c4:	f84a 3b04 	str.w	r3, [sl], #4
 80062c8:	d8e8      	bhi.n	800629c <__mdiff+0x80>
 80062ca:	1b33      	subs	r3, r6, r4
 80062cc:	3b15      	subs	r3, #21
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	3304      	adds	r3, #4
 80062d4:	3415      	adds	r4, #21
 80062d6:	42a6      	cmp	r6, r4
 80062d8:	bf38      	it	cc
 80062da:	2304      	movcc	r3, #4
 80062dc:	441d      	add	r5, r3
 80062de:	4473      	add	r3, lr
 80062e0:	469e      	mov	lr, r3
 80062e2:	462e      	mov	r6, r5
 80062e4:	4566      	cmp	r6, ip
 80062e6:	d30e      	bcc.n	8006306 <__mdiff+0xea>
 80062e8:	f10c 0203 	add.w	r2, ip, #3
 80062ec:	1b52      	subs	r2, r2, r5
 80062ee:	f022 0203 	bic.w	r2, r2, #3
 80062f2:	3d03      	subs	r5, #3
 80062f4:	45ac      	cmp	ip, r5
 80062f6:	bf38      	it	cc
 80062f8:	2200      	movcc	r2, #0
 80062fa:	4413      	add	r3, r2
 80062fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006300:	b17a      	cbz	r2, 8006322 <__mdiff+0x106>
 8006302:	6107      	str	r7, [r0, #16]
 8006304:	e7a4      	b.n	8006250 <__mdiff+0x34>
 8006306:	f856 8b04 	ldr.w	r8, [r6], #4
 800630a:	fa11 f288 	uxtah	r2, r1, r8
 800630e:	1414      	asrs	r4, r2, #16
 8006310:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006314:	b292      	uxth	r2, r2
 8006316:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800631a:	f84e 2b04 	str.w	r2, [lr], #4
 800631e:	1421      	asrs	r1, r4, #16
 8006320:	e7e0      	b.n	80062e4 <__mdiff+0xc8>
 8006322:	3f01      	subs	r7, #1
 8006324:	e7ea      	b.n	80062fc <__mdiff+0xe0>
 8006326:	bf00      	nop
 8006328:	08006cc0 	.word	0x08006cc0
 800632c:	08006cd1 	.word	0x08006cd1

08006330 <__d2b>:
 8006330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006334:	460f      	mov	r7, r1
 8006336:	2101      	movs	r1, #1
 8006338:	ec59 8b10 	vmov	r8, r9, d0
 800633c:	4616      	mov	r6, r2
 800633e:	f7ff fcd5 	bl	8005cec <_Balloc>
 8006342:	4604      	mov	r4, r0
 8006344:	b930      	cbnz	r0, 8006354 <__d2b+0x24>
 8006346:	4602      	mov	r2, r0
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <__d2b+0xac>)
 800634a:	4825      	ldr	r0, [pc, #148]	; (80063e0 <__d2b+0xb0>)
 800634c:	f240 310f 	movw	r1, #783	; 0x30f
 8006350:	f000 faee 	bl	8006930 <__assert_func>
 8006354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800635c:	bb2d      	cbnz	r5, 80063aa <__d2b+0x7a>
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	f1b8 0300 	subs.w	r3, r8, #0
 8006364:	d026      	beq.n	80063b4 <__d2b+0x84>
 8006366:	4668      	mov	r0, sp
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	f7ff fd87 	bl	8005e7c <__lo0bits>
 800636e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006372:	b1e8      	cbz	r0, 80063b0 <__d2b+0x80>
 8006374:	f1c0 0320 	rsb	r3, r0, #32
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	430b      	orrs	r3, r1
 800637e:	40c2      	lsrs	r2, r0
 8006380:	6163      	str	r3, [r4, #20]
 8006382:	9201      	str	r2, [sp, #4]
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	61a3      	str	r3, [r4, #24]
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf14      	ite	ne
 800638c:	2202      	movne	r2, #2
 800638e:	2201      	moveq	r2, #1
 8006390:	6122      	str	r2, [r4, #16]
 8006392:	b1bd      	cbz	r5, 80063c4 <__d2b+0x94>
 8006394:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006398:	4405      	add	r5, r0
 800639a:	603d      	str	r5, [r7, #0]
 800639c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063a0:	6030      	str	r0, [r6, #0]
 80063a2:	4620      	mov	r0, r4
 80063a4:	b003      	add	sp, #12
 80063a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ae:	e7d6      	b.n	800635e <__d2b+0x2e>
 80063b0:	6161      	str	r1, [r4, #20]
 80063b2:	e7e7      	b.n	8006384 <__d2b+0x54>
 80063b4:	a801      	add	r0, sp, #4
 80063b6:	f7ff fd61 	bl	8005e7c <__lo0bits>
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	6163      	str	r3, [r4, #20]
 80063be:	3020      	adds	r0, #32
 80063c0:	2201      	movs	r2, #1
 80063c2:	e7e5      	b.n	8006390 <__d2b+0x60>
 80063c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063cc:	6038      	str	r0, [r7, #0]
 80063ce:	6918      	ldr	r0, [r3, #16]
 80063d0:	f7ff fd34 	bl	8005e3c <__hi0bits>
 80063d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063d8:	e7e2      	b.n	80063a0 <__d2b+0x70>
 80063da:	bf00      	nop
 80063dc:	08006cc0 	.word	0x08006cc0
 80063e0:	08006cd1 	.word	0x08006cd1

080063e4 <__sfputc_r>:
 80063e4:	6893      	ldr	r3, [r2, #8]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	b410      	push	{r4}
 80063ec:	6093      	str	r3, [r2, #8]
 80063ee:	da08      	bge.n	8006402 <__sfputc_r+0x1e>
 80063f0:	6994      	ldr	r4, [r2, #24]
 80063f2:	42a3      	cmp	r3, r4
 80063f4:	db01      	blt.n	80063fa <__sfputc_r+0x16>
 80063f6:	290a      	cmp	r1, #10
 80063f8:	d103      	bne.n	8006402 <__sfputc_r+0x1e>
 80063fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063fe:	f000 b9e3 	b.w	80067c8 <__swbuf_r>
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	1c58      	adds	r0, r3, #1
 8006406:	6010      	str	r0, [r2, #0]
 8006408:	7019      	strb	r1, [r3, #0]
 800640a:	4608      	mov	r0, r1
 800640c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006410:	4770      	bx	lr

08006412 <__sfputs_r>:
 8006412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006414:	4606      	mov	r6, r0
 8006416:	460f      	mov	r7, r1
 8006418:	4614      	mov	r4, r2
 800641a:	18d5      	adds	r5, r2, r3
 800641c:	42ac      	cmp	r4, r5
 800641e:	d101      	bne.n	8006424 <__sfputs_r+0x12>
 8006420:	2000      	movs	r0, #0
 8006422:	e007      	b.n	8006434 <__sfputs_r+0x22>
 8006424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006428:	463a      	mov	r2, r7
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ffda 	bl	80063e4 <__sfputc_r>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d1f3      	bne.n	800641c <__sfputs_r+0xa>
 8006434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006438 <_vfiprintf_r>:
 8006438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	460d      	mov	r5, r1
 800643e:	b09d      	sub	sp, #116	; 0x74
 8006440:	4614      	mov	r4, r2
 8006442:	4698      	mov	r8, r3
 8006444:	4606      	mov	r6, r0
 8006446:	b118      	cbz	r0, 8006450 <_vfiprintf_r+0x18>
 8006448:	6a03      	ldr	r3, [r0, #32]
 800644a:	b90b      	cbnz	r3, 8006450 <_vfiprintf_r+0x18>
 800644c:	f7fe fbca 	bl	8004be4 <__sinit>
 8006450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006452:	07d9      	lsls	r1, r3, #31
 8006454:	d405      	bmi.n	8006462 <_vfiprintf_r+0x2a>
 8006456:	89ab      	ldrh	r3, [r5, #12]
 8006458:	059a      	lsls	r2, r3, #22
 800645a:	d402      	bmi.n	8006462 <_vfiprintf_r+0x2a>
 800645c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800645e:	f7fe fcc9 	bl	8004df4 <__retarget_lock_acquire_recursive>
 8006462:	89ab      	ldrh	r3, [r5, #12]
 8006464:	071b      	lsls	r3, r3, #28
 8006466:	d501      	bpl.n	800646c <_vfiprintf_r+0x34>
 8006468:	692b      	ldr	r3, [r5, #16]
 800646a:	b99b      	cbnz	r3, 8006494 <_vfiprintf_r+0x5c>
 800646c:	4629      	mov	r1, r5
 800646e:	4630      	mov	r0, r6
 8006470:	f000 f9e8 	bl	8006844 <__swsetup_r>
 8006474:	b170      	cbz	r0, 8006494 <_vfiprintf_r+0x5c>
 8006476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006478:	07dc      	lsls	r4, r3, #31
 800647a:	d504      	bpl.n	8006486 <_vfiprintf_r+0x4e>
 800647c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006480:	b01d      	add	sp, #116	; 0x74
 8006482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006486:	89ab      	ldrh	r3, [r5, #12]
 8006488:	0598      	lsls	r0, r3, #22
 800648a:	d4f7      	bmi.n	800647c <_vfiprintf_r+0x44>
 800648c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800648e:	f7fe fcb2 	bl	8004df6 <__retarget_lock_release_recursive>
 8006492:	e7f3      	b.n	800647c <_vfiprintf_r+0x44>
 8006494:	2300      	movs	r3, #0
 8006496:	9309      	str	r3, [sp, #36]	; 0x24
 8006498:	2320      	movs	r3, #32
 800649a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800649e:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a2:	2330      	movs	r3, #48	; 0x30
 80064a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006658 <_vfiprintf_r+0x220>
 80064a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ac:	f04f 0901 	mov.w	r9, #1
 80064b0:	4623      	mov	r3, r4
 80064b2:	469a      	mov	sl, r3
 80064b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b8:	b10a      	cbz	r2, 80064be <_vfiprintf_r+0x86>
 80064ba:	2a25      	cmp	r2, #37	; 0x25
 80064bc:	d1f9      	bne.n	80064b2 <_vfiprintf_r+0x7a>
 80064be:	ebba 0b04 	subs.w	fp, sl, r4
 80064c2:	d00b      	beq.n	80064dc <_vfiprintf_r+0xa4>
 80064c4:	465b      	mov	r3, fp
 80064c6:	4622      	mov	r2, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7ff ffa1 	bl	8006412 <__sfputs_r>
 80064d0:	3001      	adds	r0, #1
 80064d2:	f000 80a9 	beq.w	8006628 <_vfiprintf_r+0x1f0>
 80064d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d8:	445a      	add	r2, fp
 80064da:	9209      	str	r2, [sp, #36]	; 0x24
 80064dc:	f89a 3000 	ldrb.w	r3, [sl]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80a1 	beq.w	8006628 <_vfiprintf_r+0x1f0>
 80064e6:	2300      	movs	r3, #0
 80064e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f0:	f10a 0a01 	add.w	sl, sl, #1
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064fc:	931a      	str	r3, [sp, #104]	; 0x68
 80064fe:	4654      	mov	r4, sl
 8006500:	2205      	movs	r2, #5
 8006502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006506:	4854      	ldr	r0, [pc, #336]	; (8006658 <_vfiprintf_r+0x220>)
 8006508:	f7f9 fe62 	bl	80001d0 <memchr>
 800650c:	9a04      	ldr	r2, [sp, #16]
 800650e:	b9d8      	cbnz	r0, 8006548 <_vfiprintf_r+0x110>
 8006510:	06d1      	lsls	r1, r2, #27
 8006512:	bf44      	itt	mi
 8006514:	2320      	movmi	r3, #32
 8006516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651a:	0713      	lsls	r3, r2, #28
 800651c:	bf44      	itt	mi
 800651e:	232b      	movmi	r3, #43	; 0x2b
 8006520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006524:	f89a 3000 	ldrb.w	r3, [sl]
 8006528:	2b2a      	cmp	r3, #42	; 0x2a
 800652a:	d015      	beq.n	8006558 <_vfiprintf_r+0x120>
 800652c:	9a07      	ldr	r2, [sp, #28]
 800652e:	4654      	mov	r4, sl
 8006530:	2000      	movs	r0, #0
 8006532:	f04f 0c0a 	mov.w	ip, #10
 8006536:	4621      	mov	r1, r4
 8006538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800653c:	3b30      	subs	r3, #48	; 0x30
 800653e:	2b09      	cmp	r3, #9
 8006540:	d94d      	bls.n	80065de <_vfiprintf_r+0x1a6>
 8006542:	b1b0      	cbz	r0, 8006572 <_vfiprintf_r+0x13a>
 8006544:	9207      	str	r2, [sp, #28]
 8006546:	e014      	b.n	8006572 <_vfiprintf_r+0x13a>
 8006548:	eba0 0308 	sub.w	r3, r0, r8
 800654c:	fa09 f303 	lsl.w	r3, r9, r3
 8006550:	4313      	orrs	r3, r2
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	46a2      	mov	sl, r4
 8006556:	e7d2      	b.n	80064fe <_vfiprintf_r+0xc6>
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	1d19      	adds	r1, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	9103      	str	r1, [sp, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	bfbb      	ittet	lt
 8006564:	425b      	neglt	r3, r3
 8006566:	f042 0202 	orrlt.w	r2, r2, #2
 800656a:	9307      	strge	r3, [sp, #28]
 800656c:	9307      	strlt	r3, [sp, #28]
 800656e:	bfb8      	it	lt
 8006570:	9204      	strlt	r2, [sp, #16]
 8006572:	7823      	ldrb	r3, [r4, #0]
 8006574:	2b2e      	cmp	r3, #46	; 0x2e
 8006576:	d10c      	bne.n	8006592 <_vfiprintf_r+0x15a>
 8006578:	7863      	ldrb	r3, [r4, #1]
 800657a:	2b2a      	cmp	r3, #42	; 0x2a
 800657c:	d134      	bne.n	80065e8 <_vfiprintf_r+0x1b0>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	9203      	str	r2, [sp, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfb8      	it	lt
 800658a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800658e:	3402      	adds	r4, #2
 8006590:	9305      	str	r3, [sp, #20]
 8006592:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006668 <_vfiprintf_r+0x230>
 8006596:	7821      	ldrb	r1, [r4, #0]
 8006598:	2203      	movs	r2, #3
 800659a:	4650      	mov	r0, sl
 800659c:	f7f9 fe18 	bl	80001d0 <memchr>
 80065a0:	b138      	cbz	r0, 80065b2 <_vfiprintf_r+0x17a>
 80065a2:	9b04      	ldr	r3, [sp, #16]
 80065a4:	eba0 000a 	sub.w	r0, r0, sl
 80065a8:	2240      	movs	r2, #64	; 0x40
 80065aa:	4082      	lsls	r2, r0
 80065ac:	4313      	orrs	r3, r2
 80065ae:	3401      	adds	r4, #1
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b6:	4829      	ldr	r0, [pc, #164]	; (800665c <_vfiprintf_r+0x224>)
 80065b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065bc:	2206      	movs	r2, #6
 80065be:	f7f9 fe07 	bl	80001d0 <memchr>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d03f      	beq.n	8006646 <_vfiprintf_r+0x20e>
 80065c6:	4b26      	ldr	r3, [pc, #152]	; (8006660 <_vfiprintf_r+0x228>)
 80065c8:	bb1b      	cbnz	r3, 8006612 <_vfiprintf_r+0x1da>
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	3307      	adds	r3, #7
 80065ce:	f023 0307 	bic.w	r3, r3, #7
 80065d2:	3308      	adds	r3, #8
 80065d4:	9303      	str	r3, [sp, #12]
 80065d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d8:	443b      	add	r3, r7
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	e768      	b.n	80064b0 <_vfiprintf_r+0x78>
 80065de:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e2:	460c      	mov	r4, r1
 80065e4:	2001      	movs	r0, #1
 80065e6:	e7a6      	b.n	8006536 <_vfiprintf_r+0xfe>
 80065e8:	2300      	movs	r3, #0
 80065ea:	3401      	adds	r4, #1
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	4619      	mov	r1, r3
 80065f0:	f04f 0c0a 	mov.w	ip, #10
 80065f4:	4620      	mov	r0, r4
 80065f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065fa:	3a30      	subs	r2, #48	; 0x30
 80065fc:	2a09      	cmp	r2, #9
 80065fe:	d903      	bls.n	8006608 <_vfiprintf_r+0x1d0>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0c6      	beq.n	8006592 <_vfiprintf_r+0x15a>
 8006604:	9105      	str	r1, [sp, #20]
 8006606:	e7c4      	b.n	8006592 <_vfiprintf_r+0x15a>
 8006608:	fb0c 2101 	mla	r1, ip, r1, r2
 800660c:	4604      	mov	r4, r0
 800660e:	2301      	movs	r3, #1
 8006610:	e7f0      	b.n	80065f4 <_vfiprintf_r+0x1bc>
 8006612:	ab03      	add	r3, sp, #12
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	462a      	mov	r2, r5
 8006618:	4b12      	ldr	r3, [pc, #72]	; (8006664 <_vfiprintf_r+0x22c>)
 800661a:	a904      	add	r1, sp, #16
 800661c:	4630      	mov	r0, r6
 800661e:	f7fd fea1 	bl	8004364 <_printf_float>
 8006622:	4607      	mov	r7, r0
 8006624:	1c78      	adds	r0, r7, #1
 8006626:	d1d6      	bne.n	80065d6 <_vfiprintf_r+0x19e>
 8006628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800662a:	07d9      	lsls	r1, r3, #31
 800662c:	d405      	bmi.n	800663a <_vfiprintf_r+0x202>
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	059a      	lsls	r2, r3, #22
 8006632:	d402      	bmi.n	800663a <_vfiprintf_r+0x202>
 8006634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006636:	f7fe fbde 	bl	8004df6 <__retarget_lock_release_recursive>
 800663a:	89ab      	ldrh	r3, [r5, #12]
 800663c:	065b      	lsls	r3, r3, #25
 800663e:	f53f af1d 	bmi.w	800647c <_vfiprintf_r+0x44>
 8006642:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006644:	e71c      	b.n	8006480 <_vfiprintf_r+0x48>
 8006646:	ab03      	add	r3, sp, #12
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	462a      	mov	r2, r5
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <_vfiprintf_r+0x22c>)
 800664e:	a904      	add	r1, sp, #16
 8006650:	4630      	mov	r0, r6
 8006652:	f7fe f92b 	bl	80048ac <_printf_i>
 8006656:	e7e4      	b.n	8006622 <_vfiprintf_r+0x1ea>
 8006658:	08006e2c 	.word	0x08006e2c
 800665c:	08006e36 	.word	0x08006e36
 8006660:	08004365 	.word	0x08004365
 8006664:	08006413 	.word	0x08006413
 8006668:	08006e32 	.word	0x08006e32

0800666c <__sflush_r>:
 800666c:	898a      	ldrh	r2, [r1, #12]
 800666e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006672:	4605      	mov	r5, r0
 8006674:	0710      	lsls	r0, r2, #28
 8006676:	460c      	mov	r4, r1
 8006678:	d458      	bmi.n	800672c <__sflush_r+0xc0>
 800667a:	684b      	ldr	r3, [r1, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	dc05      	bgt.n	800668c <__sflush_r+0x20>
 8006680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	dc02      	bgt.n	800668c <__sflush_r+0x20>
 8006686:	2000      	movs	r0, #0
 8006688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800668e:	2e00      	cmp	r6, #0
 8006690:	d0f9      	beq.n	8006686 <__sflush_r+0x1a>
 8006692:	2300      	movs	r3, #0
 8006694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006698:	682f      	ldr	r7, [r5, #0]
 800669a:	6a21      	ldr	r1, [r4, #32]
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	d032      	beq.n	8006706 <__sflush_r+0x9a>
 80066a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	075a      	lsls	r2, r3, #29
 80066a6:	d505      	bpl.n	80066b4 <__sflush_r+0x48>
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	1ac0      	subs	r0, r0, r3
 80066ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066ae:	b10b      	cbz	r3, 80066b4 <__sflush_r+0x48>
 80066b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066b2:	1ac0      	subs	r0, r0, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	4602      	mov	r2, r0
 80066b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ba:	6a21      	ldr	r1, [r4, #32]
 80066bc:	4628      	mov	r0, r5
 80066be:	47b0      	blx	r6
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	d106      	bne.n	80066d4 <__sflush_r+0x68>
 80066c6:	6829      	ldr	r1, [r5, #0]
 80066c8:	291d      	cmp	r1, #29
 80066ca:	d82b      	bhi.n	8006724 <__sflush_r+0xb8>
 80066cc:	4a29      	ldr	r2, [pc, #164]	; (8006774 <__sflush_r+0x108>)
 80066ce:	410a      	asrs	r2, r1
 80066d0:	07d6      	lsls	r6, r2, #31
 80066d2:	d427      	bmi.n	8006724 <__sflush_r+0xb8>
 80066d4:	2200      	movs	r2, #0
 80066d6:	6062      	str	r2, [r4, #4]
 80066d8:	04d9      	lsls	r1, r3, #19
 80066da:	6922      	ldr	r2, [r4, #16]
 80066dc:	6022      	str	r2, [r4, #0]
 80066de:	d504      	bpl.n	80066ea <__sflush_r+0x7e>
 80066e0:	1c42      	adds	r2, r0, #1
 80066e2:	d101      	bne.n	80066e8 <__sflush_r+0x7c>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b903      	cbnz	r3, 80066ea <__sflush_r+0x7e>
 80066e8:	6560      	str	r0, [r4, #84]	; 0x54
 80066ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ec:	602f      	str	r7, [r5, #0]
 80066ee:	2900      	cmp	r1, #0
 80066f0:	d0c9      	beq.n	8006686 <__sflush_r+0x1a>
 80066f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066f6:	4299      	cmp	r1, r3
 80066f8:	d002      	beq.n	8006700 <__sflush_r+0x94>
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7ff f9f6 	bl	8005aec <_free_r>
 8006700:	2000      	movs	r0, #0
 8006702:	6360      	str	r0, [r4, #52]	; 0x34
 8006704:	e7c0      	b.n	8006688 <__sflush_r+0x1c>
 8006706:	2301      	movs	r3, #1
 8006708:	4628      	mov	r0, r5
 800670a:	47b0      	blx	r6
 800670c:	1c41      	adds	r1, r0, #1
 800670e:	d1c8      	bne.n	80066a2 <__sflush_r+0x36>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0c5      	beq.n	80066a2 <__sflush_r+0x36>
 8006716:	2b1d      	cmp	r3, #29
 8006718:	d001      	beq.n	800671e <__sflush_r+0xb2>
 800671a:	2b16      	cmp	r3, #22
 800671c:	d101      	bne.n	8006722 <__sflush_r+0xb6>
 800671e:	602f      	str	r7, [r5, #0]
 8006720:	e7b1      	b.n	8006686 <__sflush_r+0x1a>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006728:	81a3      	strh	r3, [r4, #12]
 800672a:	e7ad      	b.n	8006688 <__sflush_r+0x1c>
 800672c:	690f      	ldr	r7, [r1, #16]
 800672e:	2f00      	cmp	r7, #0
 8006730:	d0a9      	beq.n	8006686 <__sflush_r+0x1a>
 8006732:	0793      	lsls	r3, r2, #30
 8006734:	680e      	ldr	r6, [r1, #0]
 8006736:	bf08      	it	eq
 8006738:	694b      	ldreq	r3, [r1, #20]
 800673a:	600f      	str	r7, [r1, #0]
 800673c:	bf18      	it	ne
 800673e:	2300      	movne	r3, #0
 8006740:	eba6 0807 	sub.w	r8, r6, r7
 8006744:	608b      	str	r3, [r1, #8]
 8006746:	f1b8 0f00 	cmp.w	r8, #0
 800674a:	dd9c      	ble.n	8006686 <__sflush_r+0x1a>
 800674c:	6a21      	ldr	r1, [r4, #32]
 800674e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006750:	4643      	mov	r3, r8
 8006752:	463a      	mov	r2, r7
 8006754:	4628      	mov	r0, r5
 8006756:	47b0      	blx	r6
 8006758:	2800      	cmp	r0, #0
 800675a:	dc06      	bgt.n	800676a <__sflush_r+0xfe>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006768:	e78e      	b.n	8006688 <__sflush_r+0x1c>
 800676a:	4407      	add	r7, r0
 800676c:	eba8 0800 	sub.w	r8, r8, r0
 8006770:	e7e9      	b.n	8006746 <__sflush_r+0xda>
 8006772:	bf00      	nop
 8006774:	dfbffffe 	.word	0xdfbffffe

08006778 <_fflush_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	4605      	mov	r5, r0
 800677e:	460c      	mov	r4, r1
 8006780:	b913      	cbnz	r3, 8006788 <_fflush_r+0x10>
 8006782:	2500      	movs	r5, #0
 8006784:	4628      	mov	r0, r5
 8006786:	bd38      	pop	{r3, r4, r5, pc}
 8006788:	b118      	cbz	r0, 8006792 <_fflush_r+0x1a>
 800678a:	6a03      	ldr	r3, [r0, #32]
 800678c:	b90b      	cbnz	r3, 8006792 <_fflush_r+0x1a>
 800678e:	f7fe fa29 	bl	8004be4 <__sinit>
 8006792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f3      	beq.n	8006782 <_fflush_r+0xa>
 800679a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800679c:	07d0      	lsls	r0, r2, #31
 800679e:	d404      	bmi.n	80067aa <_fflush_r+0x32>
 80067a0:	0599      	lsls	r1, r3, #22
 80067a2:	d402      	bmi.n	80067aa <_fflush_r+0x32>
 80067a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a6:	f7fe fb25 	bl	8004df4 <__retarget_lock_acquire_recursive>
 80067aa:	4628      	mov	r0, r5
 80067ac:	4621      	mov	r1, r4
 80067ae:	f7ff ff5d 	bl	800666c <__sflush_r>
 80067b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b4:	07da      	lsls	r2, r3, #31
 80067b6:	4605      	mov	r5, r0
 80067b8:	d4e4      	bmi.n	8006784 <_fflush_r+0xc>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	059b      	lsls	r3, r3, #22
 80067be:	d4e1      	bmi.n	8006784 <_fflush_r+0xc>
 80067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c2:	f7fe fb18 	bl	8004df6 <__retarget_lock_release_recursive>
 80067c6:	e7dd      	b.n	8006784 <_fflush_r+0xc>

080067c8 <__swbuf_r>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	460e      	mov	r6, r1
 80067cc:	4614      	mov	r4, r2
 80067ce:	4605      	mov	r5, r0
 80067d0:	b118      	cbz	r0, 80067da <__swbuf_r+0x12>
 80067d2:	6a03      	ldr	r3, [r0, #32]
 80067d4:	b90b      	cbnz	r3, 80067da <__swbuf_r+0x12>
 80067d6:	f7fe fa05 	bl	8004be4 <__sinit>
 80067da:	69a3      	ldr	r3, [r4, #24]
 80067dc:	60a3      	str	r3, [r4, #8]
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	071a      	lsls	r2, r3, #28
 80067e2:	d525      	bpl.n	8006830 <__swbuf_r+0x68>
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	b31b      	cbz	r3, 8006830 <__swbuf_r+0x68>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	6922      	ldr	r2, [r4, #16]
 80067ec:	1a98      	subs	r0, r3, r2
 80067ee:	6963      	ldr	r3, [r4, #20]
 80067f0:	b2f6      	uxtb	r6, r6
 80067f2:	4283      	cmp	r3, r0
 80067f4:	4637      	mov	r7, r6
 80067f6:	dc04      	bgt.n	8006802 <__swbuf_r+0x3a>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f7ff ffbc 	bl	8006778 <_fflush_r>
 8006800:	b9e0      	cbnz	r0, 800683c <__swbuf_r+0x74>
 8006802:	68a3      	ldr	r3, [r4, #8]
 8006804:	3b01      	subs	r3, #1
 8006806:	60a3      	str	r3, [r4, #8]
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	6022      	str	r2, [r4, #0]
 800680e:	701e      	strb	r6, [r3, #0]
 8006810:	6962      	ldr	r2, [r4, #20]
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	429a      	cmp	r2, r3
 8006816:	d004      	beq.n	8006822 <__swbuf_r+0x5a>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	07db      	lsls	r3, r3, #31
 800681c:	d506      	bpl.n	800682c <__swbuf_r+0x64>
 800681e:	2e0a      	cmp	r6, #10
 8006820:	d104      	bne.n	800682c <__swbuf_r+0x64>
 8006822:	4621      	mov	r1, r4
 8006824:	4628      	mov	r0, r5
 8006826:	f7ff ffa7 	bl	8006778 <_fflush_r>
 800682a:	b938      	cbnz	r0, 800683c <__swbuf_r+0x74>
 800682c:	4638      	mov	r0, r7
 800682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006830:	4621      	mov	r1, r4
 8006832:	4628      	mov	r0, r5
 8006834:	f000 f806 	bl	8006844 <__swsetup_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	d0d5      	beq.n	80067e8 <__swbuf_r+0x20>
 800683c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006840:	e7f4      	b.n	800682c <__swbuf_r+0x64>
	...

08006844 <__swsetup_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4b2a      	ldr	r3, [pc, #168]	; (80068f0 <__swsetup_r+0xac>)
 8006848:	4605      	mov	r5, r0
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	460c      	mov	r4, r1
 800684e:	b118      	cbz	r0, 8006858 <__swsetup_r+0x14>
 8006850:	6a03      	ldr	r3, [r0, #32]
 8006852:	b90b      	cbnz	r3, 8006858 <__swsetup_r+0x14>
 8006854:	f7fe f9c6 	bl	8004be4 <__sinit>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800685e:	0718      	lsls	r0, r3, #28
 8006860:	d422      	bmi.n	80068a8 <__swsetup_r+0x64>
 8006862:	06d9      	lsls	r1, r3, #27
 8006864:	d407      	bmi.n	8006876 <__swsetup_r+0x32>
 8006866:	2309      	movs	r3, #9
 8006868:	602b      	str	r3, [r5, #0]
 800686a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006874:	e034      	b.n	80068e0 <__swsetup_r+0x9c>
 8006876:	0758      	lsls	r0, r3, #29
 8006878:	d512      	bpl.n	80068a0 <__swsetup_r+0x5c>
 800687a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800687c:	b141      	cbz	r1, 8006890 <__swsetup_r+0x4c>
 800687e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006882:	4299      	cmp	r1, r3
 8006884:	d002      	beq.n	800688c <__swsetup_r+0x48>
 8006886:	4628      	mov	r0, r5
 8006888:	f7ff f930 	bl	8005aec <_free_r>
 800688c:	2300      	movs	r3, #0
 800688e:	6363      	str	r3, [r4, #52]	; 0x34
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	2300      	movs	r3, #0
 800689a:	6063      	str	r3, [r4, #4]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f043 0308 	orr.w	r3, r3, #8
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	b94b      	cbnz	r3, 80068c0 <__swsetup_r+0x7c>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b6:	d003      	beq.n	80068c0 <__swsetup_r+0x7c>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 f8c4 	bl	8006a48 <__smakebuf_r>
 80068c0:	89a0      	ldrh	r0, [r4, #12]
 80068c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c6:	f010 0301 	ands.w	r3, r0, #1
 80068ca:	d00a      	beq.n	80068e2 <__swsetup_r+0x9e>
 80068cc:	2300      	movs	r3, #0
 80068ce:	60a3      	str	r3, [r4, #8]
 80068d0:	6963      	ldr	r3, [r4, #20]
 80068d2:	425b      	negs	r3, r3
 80068d4:	61a3      	str	r3, [r4, #24]
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	b943      	cbnz	r3, 80068ec <__swsetup_r+0xa8>
 80068da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068de:	d1c4      	bne.n	800686a <__swsetup_r+0x26>
 80068e0:	bd38      	pop	{r3, r4, r5, pc}
 80068e2:	0781      	lsls	r1, r0, #30
 80068e4:	bf58      	it	pl
 80068e6:	6963      	ldrpl	r3, [r4, #20]
 80068e8:	60a3      	str	r3, [r4, #8]
 80068ea:	e7f4      	b.n	80068d6 <__swsetup_r+0x92>
 80068ec:	2000      	movs	r0, #0
 80068ee:	e7f7      	b.n	80068e0 <__swsetup_r+0x9c>
 80068f0:	20000064 	.word	0x20000064

080068f4 <_sbrk_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_sbrk_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fa fdbc 	bl	800147c <_sbrk>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_sbrk_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_sbrk_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	2000040c 	.word	0x2000040c

08006914 <memcpy>:
 8006914:	440a      	add	r2, r1
 8006916:	4291      	cmp	r1, r2
 8006918:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800691c:	d100      	bne.n	8006920 <memcpy+0xc>
 800691e:	4770      	bx	lr
 8006920:	b510      	push	{r4, lr}
 8006922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800692a:	4291      	cmp	r1, r2
 800692c:	d1f9      	bne.n	8006922 <memcpy+0xe>
 800692e:	bd10      	pop	{r4, pc}

08006930 <__assert_func>:
 8006930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006932:	4614      	mov	r4, r2
 8006934:	461a      	mov	r2, r3
 8006936:	4b09      	ldr	r3, [pc, #36]	; (800695c <__assert_func+0x2c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4605      	mov	r5, r0
 800693c:	68d8      	ldr	r0, [r3, #12]
 800693e:	b14c      	cbz	r4, 8006954 <__assert_func+0x24>
 8006940:	4b07      	ldr	r3, [pc, #28]	; (8006960 <__assert_func+0x30>)
 8006942:	9100      	str	r1, [sp, #0]
 8006944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006948:	4906      	ldr	r1, [pc, #24]	; (8006964 <__assert_func+0x34>)
 800694a:	462b      	mov	r3, r5
 800694c:	f000 f844 	bl	80069d8 <fiprintf>
 8006950:	f000 f8d8 	bl	8006b04 <abort>
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <__assert_func+0x38>)
 8006956:	461c      	mov	r4, r3
 8006958:	e7f3      	b.n	8006942 <__assert_func+0x12>
 800695a:	bf00      	nop
 800695c:	20000064 	.word	0x20000064
 8006960:	08006e47 	.word	0x08006e47
 8006964:	08006e54 	.word	0x08006e54
 8006968:	08006e82 	.word	0x08006e82

0800696c <_calloc_r>:
 800696c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800696e:	fba1 2402 	umull	r2, r4, r1, r2
 8006972:	b94c      	cbnz	r4, 8006988 <_calloc_r+0x1c>
 8006974:	4611      	mov	r1, r2
 8006976:	9201      	str	r2, [sp, #4]
 8006978:	f7ff f92c 	bl	8005bd4 <_malloc_r>
 800697c:	9a01      	ldr	r2, [sp, #4]
 800697e:	4605      	mov	r5, r0
 8006980:	b930      	cbnz	r0, 8006990 <_calloc_r+0x24>
 8006982:	4628      	mov	r0, r5
 8006984:	b003      	add	sp, #12
 8006986:	bd30      	pop	{r4, r5, pc}
 8006988:	220c      	movs	r2, #12
 800698a:	6002      	str	r2, [r0, #0]
 800698c:	2500      	movs	r5, #0
 800698e:	e7f8      	b.n	8006982 <_calloc_r+0x16>
 8006990:	4621      	mov	r1, r4
 8006992:	f7fe f9b2 	bl	8004cfa <memset>
 8006996:	e7f4      	b.n	8006982 <_calloc_r+0x16>

08006998 <__ascii_mbtowc>:
 8006998:	b082      	sub	sp, #8
 800699a:	b901      	cbnz	r1, 800699e <__ascii_mbtowc+0x6>
 800699c:	a901      	add	r1, sp, #4
 800699e:	b142      	cbz	r2, 80069b2 <__ascii_mbtowc+0x1a>
 80069a0:	b14b      	cbz	r3, 80069b6 <__ascii_mbtowc+0x1e>
 80069a2:	7813      	ldrb	r3, [r2, #0]
 80069a4:	600b      	str	r3, [r1, #0]
 80069a6:	7812      	ldrb	r2, [r2, #0]
 80069a8:	1e10      	subs	r0, r2, #0
 80069aa:	bf18      	it	ne
 80069ac:	2001      	movne	r0, #1
 80069ae:	b002      	add	sp, #8
 80069b0:	4770      	bx	lr
 80069b2:	4610      	mov	r0, r2
 80069b4:	e7fb      	b.n	80069ae <__ascii_mbtowc+0x16>
 80069b6:	f06f 0001 	mvn.w	r0, #1
 80069ba:	e7f8      	b.n	80069ae <__ascii_mbtowc+0x16>

080069bc <__ascii_wctomb>:
 80069bc:	b149      	cbz	r1, 80069d2 <__ascii_wctomb+0x16>
 80069be:	2aff      	cmp	r2, #255	; 0xff
 80069c0:	bf85      	ittet	hi
 80069c2:	238a      	movhi	r3, #138	; 0x8a
 80069c4:	6003      	strhi	r3, [r0, #0]
 80069c6:	700a      	strbls	r2, [r1, #0]
 80069c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80069cc:	bf98      	it	ls
 80069ce:	2001      	movls	r0, #1
 80069d0:	4770      	bx	lr
 80069d2:	4608      	mov	r0, r1
 80069d4:	4770      	bx	lr
	...

080069d8 <fiprintf>:
 80069d8:	b40e      	push	{r1, r2, r3}
 80069da:	b503      	push	{r0, r1, lr}
 80069dc:	4601      	mov	r1, r0
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	4805      	ldr	r0, [pc, #20]	; (80069f8 <fiprintf+0x20>)
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	f7ff fd25 	bl	8006438 <_vfiprintf_r>
 80069ee:	b002      	add	sp, #8
 80069f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f4:	b003      	add	sp, #12
 80069f6:	4770      	bx	lr
 80069f8:	20000064 	.word	0x20000064

080069fc <__swhatbuf_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	460c      	mov	r4, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	2900      	cmp	r1, #0
 8006a06:	b096      	sub	sp, #88	; 0x58
 8006a08:	4615      	mov	r5, r2
 8006a0a:	461e      	mov	r6, r3
 8006a0c:	da0d      	bge.n	8006a2a <__swhatbuf_r+0x2e>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	bf0c      	ite	eq
 8006a1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a1e:	2340      	movne	r3, #64	; 0x40
 8006a20:	2000      	movs	r0, #0
 8006a22:	6031      	str	r1, [r6, #0]
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	b016      	add	sp, #88	; 0x58
 8006a28:	bd70      	pop	{r4, r5, r6, pc}
 8006a2a:	466a      	mov	r2, sp
 8006a2c:	f000 f848 	bl	8006ac0 <_fstat_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	dbec      	blt.n	8006a0e <__swhatbuf_r+0x12>
 8006a34:	9901      	ldr	r1, [sp, #4]
 8006a36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a3e:	4259      	negs	r1, r3
 8006a40:	4159      	adcs	r1, r3
 8006a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a46:	e7eb      	b.n	8006a20 <__swhatbuf_r+0x24>

08006a48 <__smakebuf_r>:
 8006a48:	898b      	ldrh	r3, [r1, #12]
 8006a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a4c:	079d      	lsls	r5, r3, #30
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	d507      	bpl.n	8006a64 <__smakebuf_r+0x1c>
 8006a54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	6163      	str	r3, [r4, #20]
 8006a60:	b002      	add	sp, #8
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	ab01      	add	r3, sp, #4
 8006a66:	466a      	mov	r2, sp
 8006a68:	f7ff ffc8 	bl	80069fc <__swhatbuf_r>
 8006a6c:	9900      	ldr	r1, [sp, #0]
 8006a6e:	4605      	mov	r5, r0
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7ff f8af 	bl	8005bd4 <_malloc_r>
 8006a76:	b948      	cbnz	r0, 8006a8c <__smakebuf_r+0x44>
 8006a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7c:	059a      	lsls	r2, r3, #22
 8006a7e:	d4ef      	bmi.n	8006a60 <__smakebuf_r+0x18>
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	f043 0302 	orr.w	r3, r3, #2
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	e7e3      	b.n	8006a54 <__smakebuf_r+0xc>
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	6020      	str	r0, [r4, #0]
 8006a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	6163      	str	r3, [r4, #20]
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	6120      	str	r0, [r4, #16]
 8006a9e:	b15b      	cbz	r3, 8006ab8 <__smakebuf_r+0x70>
 8006aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 f81d 	bl	8006ae4 <_isatty_r>
 8006aaa:	b128      	cbz	r0, 8006ab8 <__smakebuf_r+0x70>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	431d      	orrs	r5, r3
 8006abc:	81a5      	strh	r5, [r4, #12]
 8006abe:	e7cf      	b.n	8006a60 <__smakebuf_r+0x18>

08006ac0 <_fstat_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d07      	ldr	r5, [pc, #28]	; (8006ae0 <_fstat_r+0x20>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	f7fa fcac 	bl	800142a <_fstat>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d102      	bne.n	8006adc <_fstat_r+0x1c>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b103      	cbz	r3, 8006adc <_fstat_r+0x1c>
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	2000040c 	.word	0x2000040c

08006ae4 <_isatty_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d06      	ldr	r5, [pc, #24]	; (8006b00 <_isatty_r+0x1c>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fa fcab 	bl	800144a <_isatty>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_isatty_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_isatty_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	2000040c 	.word	0x2000040c

08006b04 <abort>:
 8006b04:	b508      	push	{r3, lr}
 8006b06:	2006      	movs	r0, #6
 8006b08:	f000 f82c 	bl	8006b64 <raise>
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	f7fa fc3d 	bl	800138c <_exit>

08006b12 <_raise_r>:
 8006b12:	291f      	cmp	r1, #31
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4604      	mov	r4, r0
 8006b18:	460d      	mov	r5, r1
 8006b1a:	d904      	bls.n	8006b26 <_raise_r+0x14>
 8006b1c:	2316      	movs	r3, #22
 8006b1e:	6003      	str	r3, [r0, #0]
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b24:	bd38      	pop	{r3, r4, r5, pc}
 8006b26:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006b28:	b112      	cbz	r2, 8006b30 <_raise_r+0x1e>
 8006b2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b2e:	b94b      	cbnz	r3, 8006b44 <_raise_r+0x32>
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 f831 	bl	8006b98 <_getpid_r>
 8006b36:	462a      	mov	r2, r5
 8006b38:	4601      	mov	r1, r0
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b40:	f000 b818 	b.w	8006b74 <_kill_r>
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d00a      	beq.n	8006b5e <_raise_r+0x4c>
 8006b48:	1c59      	adds	r1, r3, #1
 8006b4a:	d103      	bne.n	8006b54 <_raise_r+0x42>
 8006b4c:	2316      	movs	r3, #22
 8006b4e:	6003      	str	r3, [r0, #0]
 8006b50:	2001      	movs	r0, #1
 8006b52:	e7e7      	b.n	8006b24 <_raise_r+0x12>
 8006b54:	2400      	movs	r4, #0
 8006b56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	4798      	blx	r3
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e7e0      	b.n	8006b24 <_raise_r+0x12>
	...

08006b64 <raise>:
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <raise+0xc>)
 8006b66:	4601      	mov	r1, r0
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f7ff bfd2 	b.w	8006b12 <_raise_r>
 8006b6e:	bf00      	nop
 8006b70:	20000064 	.word	0x20000064

08006b74 <_kill_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d07      	ldr	r5, [pc, #28]	; (8006b94 <_kill_r+0x20>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	f7fa fbf3 	bl	800136c <_kill>
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	d102      	bne.n	8006b90 <_kill_r+0x1c>
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	b103      	cbz	r3, 8006b90 <_kill_r+0x1c>
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	bd38      	pop	{r3, r4, r5, pc}
 8006b92:	bf00      	nop
 8006b94:	2000040c 	.word	0x2000040c

08006b98 <_getpid_r>:
 8006b98:	f7fa bbe0 	b.w	800135c <_getpid>

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
