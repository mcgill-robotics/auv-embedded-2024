
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e4  0800a590  0800a590  0001a590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd74  0800bd74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd74  0800bd74  0001bd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd7c  0800bd7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd7c  0800bd7c  0001bd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd80  0800bd80  0001bd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bd84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  0800bf58  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800bf58  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b540  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ed  00000000  00000000  0003b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  0003edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0c  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f21  00000000  00000000  00041104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180b5  00000000  00000000  00067025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea39a  00000000  00000000  0007f0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067b0  00000000  00000000  00169474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016fc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000284c  00000000  00000000  0016fca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  001724ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a574 	.word	0x0800a574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a574 	.word	0x0800a574

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000eec:	1d39      	adds	r1, r7, #4
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <__io_putchar+0x20>)
 8000ef6:	f004 fdbb 	bl	8005a70 <HAL_UART_Transmit>
  return ch;
 8000efa:	687b      	ldr	r3, [r7, #4]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200002e8 	.word	0x200002e8

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	f5ad 5d41 	sub.w	sp, sp, #12352	; 0x3040
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f001 f879 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 faef 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 fc6f 	bl	80017fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1e:	f000 fc4f 	bl	80017c0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f22:	f000 fbcf 	bl	80016c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f26:	f000 fc1b 	bl	8001760 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f2a:	f000 fb37 	bl	800159c <MX_ADC1_Init>
  float32_t hydrophone1[1024];
  float32_t hydrophone2[1024];
  float32_t V2, V3, V4;
  uint32_t frequency;
  float32_t v2Variance;
  float32_t v2Sum = 0;
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8000f36:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000f3a:	6013      	str	r3, [r2, #0]
  float32_t v2SumSquares = 0;
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8000f44:	f102 0220 	add.w	r2, r2, #32
 8000f48:	6013      	str	r3, [r2, #0]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f4a:	217f      	movs	r1, #127	; 0x7f
 8000f4c:	4833      	ldr	r0, [pc, #204]	; (800101c <main+0x114>)
 8000f4e:	f002 fa4b 	bl	80033e8 <HAL_ADCEx_Calibration_Start>
  for (int i = 0; i < 512; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8000f58:	f102 021c 	add.w	r2, r2, #28
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e03b      	b.n	8000fd8 <main+0xd0>
	  hydrophone0[2*i + 1] = 0;
 8000f60:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8000f64:	f103 031c 	add.w	r3, r3, #28
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000f72:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	3b5c      	subs	r3, #92	; 0x5c
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
	  hydrophone1[2*i + 1] = 0;
 8000f82:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8000f86:	f103 031c 	add.w	r3, r3, #28
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	3301      	adds	r3, #1
 8000f90:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000f94:	f102 0208 	add.w	r2, r2, #8
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b5c      	subs	r3, #92	; 0x5c
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
	  hydrophone2[2*i + 1] = 0;
 8000fa4:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8000fa8:	f103 031c 	add.w	r3, r3, #28
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	3b5c      	subs	r3, #92	; 0x5c
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 512; i++) {
 8000fc2:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8000fc6:	f103 031c 	add.w	r3, r3, #28
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8000fd2:	f102 021c 	add.w	r2, r2, #28
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8000fdc:	f103 031c 	add.w	r3, r3, #28
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe6:	dbbb      	blt.n	8000f60 <main+0x58>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <main+0x118>)
 8000fea:	f004 f929 	bl	8005240 <HAL_TIM_Base_Start_IT>
  //printf("HI!\n\r");
  while (1)
  {
	  HAL_Delay(400);
 8000fee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ff2:	f001 f885 	bl	8002100 <HAL_Delay>
	  printf("%lu\r\n", usecs_elapsed);
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <main+0x11c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <main+0x120>)
 8000ffe:	f006 ff9d 	bl	8007f3c <iprintf>
	  for(int i = 0; i < 512; i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8001008:	f102 0218 	add.w	r2, r2, #24
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e192      	b.n	8001336 <main+0x42e>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 8001010:	2204      	movs	r2, #4
 8001012:	4906      	ldr	r1, [pc, #24]	; (800102c <main+0x124>)
 8001014:	4801      	ldr	r0, [pc, #4]	; (800101c <main+0x114>)
 8001016:	f001 fbc7 	bl	80027a8 <HAL_ADC_Start_DMA>
		  while (conversionComplete == 0) {
 800101a:	e00a      	b.n	8001032 <main+0x12a>
 800101c:	200001f0 	.word	0x200001f0
 8001020:	2000029c 	.word	0x2000029c
 8001024:	20000370 	.word	0x20000370
 8001028:	0800a590 	.word	0x0800a590
 800102c:	20000374 	.word	0x20000374
			  continue;
 8001030:	bf00      	nop
		  while (conversionComplete == 0) {
 8001032:	4bdf      	ldr	r3, [pc, #892]	; (80013b0 <main+0x4a8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0fa      	beq.n	8001030 <main+0x128>
		  }
		  conversionComplete = 0;
 800103a:	4bdd      	ldr	r3, [pc, #884]	; (80013b0 <main+0x4a8>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
		  calculateVoltage(adcChannels[0], adcChannels[1], &V2);
 8001040:	4bdc      	ldr	r3, [pc, #880]	; (80013b4 <main+0x4ac>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b29a      	uxth	r2, r3
 8001046:	4bdb      	ldr	r3, [pc, #876]	; (80013b4 <main+0x4ac>)
 8001048:	885b      	ldrh	r3, [r3, #2]
 800104a:	b29b      	uxth	r3, r3
 800104c:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8001050:	f101 012a 	add.w	r1, r1, #42	; 0x2a
 8001054:	800a      	strh	r2, [r1, #0]
 8001056:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800105a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800105e:	8013      	strh	r3, [r2, #0]
 8001060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001064:	3b20      	subs	r3, #32
 8001066:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800106a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800106e:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8001070:	4bd1      	ldr	r3, [pc, #836]	; (80013b8 <main+0x4b0>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107c:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001080:	f103 0320 	add.w	r3, r3, #32
 8001084:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8001088:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800108c:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800109e:	f103 0320 	add.w	r3, r3, #32
 80010a2:	edd3 6a00 	vldr	s13, [r3]
 80010a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010aa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b2:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80010b6:	f103 031c 	add.w	r3, r3, #28
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80010be:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80010c2:	f103 031c 	add.w	r3, r3, #28
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eddf 6abc 	vldr	s13, [pc, #752]	; 80013bc <main+0x4b4>
 80010ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010d2:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80010d6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80010ec:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	edc3 7a00 	vstr	s15, [r3]
}
 80010f6:	bf00      	nop
		  calculateVoltage(adcChannels[0], adcChannels[2], &V3);
 80010f8:	4bae      	ldr	r3, [pc, #696]	; (80013b4 <main+0x4ac>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4bad      	ldr	r3, [pc, #692]	; (80013b4 <main+0x4ac>)
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	b29b      	uxth	r3, r3
 8001104:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8001108:	f101 013a 	add.w	r1, r1, #58	; 0x3a
 800110c:	800a      	strh	r2, [r1, #0]
 800110e:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8001112:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001116:	8013      	strh	r3, [r2, #0]
 8001118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111c:	3b24      	subs	r3, #36	; 0x24
 800111e:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8001122:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001126:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8001128:	4ba3      	ldr	r3, [pc, #652]	; (80013b8 <main+0x4b0>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001134:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001138:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800113c:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8001140:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001144:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001156:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800115a:	edd3 6a00 	vldr	s13, [r3]
 800115e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001162:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800116e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001172:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 8001176:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800117a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80013bc <main+0x4b4>
 8001186:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800118a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800118e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80011a4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	edc3 7a00 	vstr	s15, [r3]
}
 80011ae:	bf00      	nop
		  calculateVoltage(adcChannels[0], adcChannels[3], &V4);
 80011b0:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <main+0x4ac>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <main+0x4ac>)
 80011b8:	88db      	ldrh	r3, [r3, #6]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f507 5141 	add.w	r1, r7, #12352	; 0x3040
 80011c0:	f101 010a 	add.w	r1, r1, #10
 80011c4:	800a      	strh	r2, [r1, #0]
 80011c6:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80011ca:	f102 0208 	add.w	r2, r2, #8
 80011ce:	8013      	strh	r3, [r2, #0]
 80011d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d4:	3b28      	subs	r3, #40	; 0x28
 80011d6:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80011da:	f102 0204 	add.w	r2, r2, #4
 80011de:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 80011e0:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <main+0x4b0>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ec:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80011f0:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 80011f4:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80011f8:	f103 030a 	add.w	r3, r3, #10
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001206:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800120a:	edd3 6a00 	vldr	s13, [r3]
 800120e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001212:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800121e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001222:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 8001226:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800122a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eddf 6a62 	vldr	s13, [pc, #392]	; 80013bc <main+0x4b4>
 8001236:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800123a:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800123e:	f103 0308 	add.w	r3, r3, #8
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8001254:	f103 0304 	add.w	r3, r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	edc3 7a00 	vstr	s15, [r3]
}
 800125e:	bf00      	nop
		  v2Sum += V2;
 8001260:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001264:	ed53 7a18 	vldr	s15, [r3, #-96]	; 0xffffffa0
 8001268:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800126c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001278:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800127c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001280:	edc3 7a00 	vstr	s15, [r3]
		  v2SumSquares += powf(V2, 2);
 8001284:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001288:	ed53 7a18 	vldr	s15, [r3, #-96]	; 0xffffffa0
 800128c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f008 fd46 	bl	8009d24 <powf>
 8001298:	eeb0 7a40 	vmov.f32	s14, s0
 800129c:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80012a0:	f103 0320 	add.w	r3, r3, #32
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ac:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80012b0:	f103 0320 	add.w	r3, r3, #32
 80012b4:	edc3 7a00 	vstr	s15, [r3]
		  hydrophone0[2*i] = V2;
 80012b8:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80012bc:	f103 0318 	add.w	r3, r3, #24
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80012c8:	f852 2c60 	ldr.w	r2, [r2, #-96]
 80012cc:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80012d0:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	3b5c      	subs	r3, #92	; 0x5c
 80012da:	601a      	str	r2, [r3, #0]
		  hydrophone1[2*i] = V3;
 80012dc:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80012e0:	f103 0318 	add.w	r3, r3, #24
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80012ec:	f852 2c64 	ldr.w	r2, [r2, #-100]
 80012f0:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 80012f4:	f101 0108 	add.w	r1, r1, #8
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	3b5c      	subs	r3, #92	; 0x5c
 80012fe:	601a      	str	r2, [r3, #0]
		  hydrophone2[2*i] = V4;
 8001300:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8001304:	f103 0318 	add.w	r3, r3, #24
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001310:	f852 2c68 	ldr.w	r2, [r2, #-104]
 8001314:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	3b5c      	subs	r3, #92	; 0x5c
 800131e:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 512; i++) {
 8001320:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8001324:	f103 0318 	add.w	r3, r3, #24
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8001330:	f102 0218 	add.w	r2, r2, #24
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800133a:	f103 0318 	add.w	r3, r3, #24
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001344:	f6ff ae64 	blt.w	8001010 <main+0x108>
	  }
	  //printf("%f\r\n", v2Sum);
	  //printf("%f\r\n", v2SumSquares);
	  v2Variance = (v2SumSquares - ((powf(v2Sum, 2))/512.0f)) / (512.0f - 1.0f);
 8001348:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800134c:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8001350:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001354:	ed93 0a00 	vldr	s0, [r3]
 8001358:	f008 fce4 	bl	8009d24 <powf>
 800135c:	eeb0 7a40 	vmov.f32	s14, s0
 8001360:	eddf 6a17 	vldr	s13, [pc, #92]	; 80013c0 <main+0x4b8>
 8001364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001368:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800136c:	f103 0320 	add.w	r3, r3, #32
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001378:	eddf 6a12 	vldr	s13, [pc, #72]	; 80013c4 <main+0x4bc>
 800137c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001380:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8001384:	f103 0314 	add.w	r3, r3, #20
 8001388:	edc3 7a00 	vstr	s15, [r3]
	  v2Sum = 0;
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8001394:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001398:	6013      	str	r3, [r2, #0]
	  v2SumSquares = 0;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80013a2:	f102 0220 	add.w	r2, r2, #32
 80013a6:	6013      	str	r3, [r2, #0]
	  frequency = get_frequency(hydrophone0, 1024, 4705882.3529);
 80013a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013ac:	e00e      	b.n	80013cc <main+0x4c4>
 80013ae:	bf00      	nop
 80013b0:	2000037c 	.word	0x2000037c
 80013b4:	20000374 	.word	0x20000374
 80013b8:	1fff75aa 	.word	0x1fff75aa
 80013bc:	457ff000 	.word	0x457ff000
 80013c0:	44000000 	.word	0x44000000
 80013c4:	43ff8000 	.word	0x43ff8000
 80013c8:	4a8f9cb5 	.word	0x4a8f9cb5
 80013cc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80013d0:	3b1c      	subs	r3, #28
 80013d2:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 80013c8 <main+0x4c0>
 80013d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fa9c 	bl	8001918 <get_frequency>
 80013e0:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80013e4:	f103 0310 	add.w	r3, r3, #16
 80013e8:	6018      	str	r0, [r3, #0]
	  if (v2Variance > 0.9) {
 80013ea:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80013ee:	f103 0314 	add.w	r3, r3, #20
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	f7ff f8a8 	bl	8000548 <__aeabi_f2d>
 80013f8:	a33d      	add	r3, pc, #244	; (adr r3, 80014f0 <main+0x5e8>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d06a      	beq.n	80014de <main+0x5d6>
		  printf("variance of hydrophone 1: %f\r\n", v2Variance);
 8001408:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800140c:	f103 0314 	add.w	r3, r3, #20
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	f7ff f899 	bl	8000548 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4831      	ldr	r0, [pc, #196]	; (80014e0 <main+0x5d8>)
 800141c:	f006 fd8e 	bl	8007f3c <iprintf>
		  Payload *payload1 = createPayload(frequency, usecs_elapsed, HYDROPHONE1);
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <main+0x5dc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8001428:	f102 0210 	add.w	r2, r2, #16
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8001432:	f101 0118 	add.w	r1, r1, #24
 8001436:	600a      	str	r2, [r1, #0]
 8001438:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800143c:	f102 0214 	add.w	r2, r2, #20
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8001448:	f102 0213 	add.w	r2, r2, #19
 800144c:	7013      	strb	r3, [r2, #0]
	Payload *payloadPtr = (Payload *) malloc(sizeof(Payload));
 800144e:	200c      	movs	r0, #12
 8001450:	f005 ffaa 	bl	80073a8 <malloc>
 8001454:	4603      	mov	r3, r0
 8001456:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800145a:	f102 020c 	add.w	r2, r2, #12
 800145e:	6013      	str	r3, [r2, #0]
	payloadPtr->frequency = frequency;
 8001460:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001464:	f103 030c 	add.w	r3, r3, #12
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800146e:	f102 0218 	add.w	r2, r2, #24
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	605a      	str	r2, [r3, #4]
	payloadPtr->time = time;
 8001476:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800147a:	f103 030c 	add.w	r3, r3, #12
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8001484:	f102 0214 	add.w	r2, r2, #20
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	609a      	str	r2, [r3, #8]
	payloadPtr->hydrophone = hydrophone;
 800148c:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001490:	f103 030c 	add.w	r3, r3, #12
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800149a:	f102 0213 	add.w	r2, r2, #19
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	701a      	strb	r2, [r3, #0]
	return payloadPtr;
 80014a2:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80014a6:	f103 030c 	add.w	r3, r3, #12
 80014aa:	681b      	ldr	r3, [r3, #0]
		  Payload *payload1 = createPayload(frequency, usecs_elapsed, HYDROPHONE1);
 80014ac:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80014b0:	f102 020c 	add.w	r2, r2, #12
 80014b4:	6013      	str	r3, [r2, #0]
		  printf("frequency from hydrophone 1: %lu\r\n", payload1->frequency);
 80014b6:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80014ba:	f103 030c 	add.w	r3, r3, #12
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <main+0x5e0>)
 80014c6:	f006 fd39 	bl	8007f3c <iprintf>
		  printf("time from hydrophone 1: %lu\r\n", payload1->time);
 80014ca:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80014ce:	f103 030c 	add.w	r3, r3, #12
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <main+0x5e4>)
 80014da:	f006 fd2f 	bl	8007f3c <iprintf>
	  HAL_Delay(400);
 80014de:	e586      	b.n	8000fee <main+0xe6>
 80014e0:	0800a598 	.word	0x0800a598
 80014e4:	20000370 	.word	0x20000370
 80014e8:	0800a5b8 	.word	0x0800a5b8
 80014ec:	0800a5dc 	.word	0x0800a5dc
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	3feccccc 	.word	0x3feccccc

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b096      	sub	sp, #88	; 0x58
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2244      	movs	r2, #68	; 0x44
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f006 fd6d 	bl	8007fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800151a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800151e:	f002 fc6d 	bl	8003dfc <HAL_PWREx_ControlVoltageScaling>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001528:	f000 f9f0 	bl	800190c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001536:	2310      	movs	r3, #16
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001546:	230a      	movs	r3, #10
 8001548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800154a:	2307      	movs	r3, #7
 800154c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fca4 	bl	8003ea8 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001566:	f000 f9d1 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2303      	movs	r3, #3
 8001570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	2104      	movs	r1, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f003 f8a4 	bl	80046d0 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800158e:	f000 f9bd 	bl	800190c <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3758      	adds	r7, #88	; 0x58
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <MX_ADC1_Init+0x110>)
 80015b4:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <MX_ADC1_Init+0x114>)
 80015b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015b8:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <MX_ADC1_Init+0x110>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <MX_ADC1_Init+0x110>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <MX_ADC1_Init+0x110>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <MX_ADC1_Init+0x110>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <MX_ADC1_Init+0x110>)
 80015d2:	2204      	movs	r2, #4
 80015d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <MX_ADC1_Init+0x110>)
 80015d8:	2200      	movs	r2, #0
 80015da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <MX_ADC1_Init+0x110>)
 80015de:	2201      	movs	r2, #1
 80015e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <MX_ADC1_Init+0x110>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <MX_ADC1_Init+0x110>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <MX_ADC1_Init+0x110>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <MX_ADC1_Init+0x110>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <MX_ADC1_Init+0x110>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_ADC1_Init+0x110>)
 8001606:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_ADC1_Init+0x110>)
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001614:	4825      	ldr	r0, [pc, #148]	; (80016ac <MX_ADC1_Init+0x110>)
 8001616:	f000 ff85 	bl	8002524 <HAL_ADC_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001620:	f000 f974 	bl	800190c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <MX_ADC1_Init+0x118>)
 8001626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001628:	2306      	movs	r3, #6
 800162a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001630:	237f      	movs	r3, #127	; 0x7f
 8001632:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001634:	2304      	movs	r3, #4
 8001636:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	481a      	ldr	r0, [pc, #104]	; (80016ac <MX_ADC1_Init+0x110>)
 8001642:	f001 f949 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800164c:	f000 f95e 	bl	800190c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_ADC1_Init+0x11c>)
 8001652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001654:	230c      	movs	r3, #12
 8001656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <MX_ADC1_Init+0x110>)
 800165e:	f001 f93b 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001668:	f000 f950 	bl	800190c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_ADC1_Init+0x120>)
 800166e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001670:	2312      	movs	r3, #18
 8001672:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <MX_ADC1_Init+0x110>)
 800167a:	f001 f92d 	bl	80028d8 <HAL_ADC_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001684:	f000 f942 	bl	800190c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_ADC1_Init+0x124>)
 800168a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800168c:	2318      	movs	r3, #24
 800168e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001690:	463b      	mov	r3, r7
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_ADC1_Init+0x110>)
 8001696:	f001 f91f 	bl	80028d8 <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80016a0:	f000 f934 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200001f0 	.word	0x200001f0
 80016b0:	50040000 	.word	0x50040000
 80016b4:	80000001 	.word	0x80000001
 80016b8:	43210000 	.word	0x43210000
 80016bc:	2e300800 	.word	0x2e300800
 80016c0:	25b00200 	.word	0x25b00200

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_TIM2_Init+0x98>)
 80016e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_TIM2_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_TIM2_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_TIM2_Init+0x98>)
 80016f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_TIM2_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_TIM2_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <MX_TIM2_Init+0x98>)
 800170c:	f003 fd40 	bl	8005190 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001716:	f000 f8f9 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_TIM2_Init+0x98>)
 8001728:	f003 fee0 	bl	80054ec <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001732:	f000 f8eb 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_TIM2_Init+0x98>)
 8001744:	f004 f8c2 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800174e:	f000 f8dd 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000029c 	.word	0x2000029c

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <MX_USART2_UART_Init+0x5c>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USART2_UART_Init+0x58>)
 80017a4:	f004 f916 	bl	80059d4 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 f8ad 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002e8 	.word	0x200002e8
 80017bc:	40004400 	.word	0x40004400

080017c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_DMA_Init+0x38>)
 80017c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <MX_DMA_Init+0x38>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6493      	str	r3, [r2, #72]	; 0x48
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_DMA_Init+0x38>)
 80017d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	200b      	movs	r0, #11
 80017e4:	f001 ff3b 	bl	800365e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017e8:	200b      	movs	r0, #11
 80017ea:	f001 ff54 	bl	8003696 <HAL_NVIC_EnableIRQ>

}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_GPIO_Init+0xc4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <MX_GPIO_Init+0xc4>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_GPIO_Init+0xc4>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	21a0      	movs	r1, #160	; 0xa0
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f002 fa99 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001884:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <MX_GPIO_Init+0xc8>)
 8001896:	f002 f911 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 800189a:	23a0      	movs	r3, #160	; 0xa0
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f002 f902 	bl	8003abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000800 	.word	0x48000800

080018c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	usecs_elapsed += 10;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	330a      	adds	r3, #10
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000370 	.word	0x20000370

080018ec <HAL_ADC_ConvCpltCallback>:

/*void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc) {
}*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	conversionComplete = 1;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_ADC_ConvCpltCallback+0x1c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000037c 	.word	0x2000037c

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	e7fe      	b.n	8001914 <Error_Handler+0x8>
	...

08001918 <get_frequency>:
    return freq[target_bin] / sum;
}


uint32_t get_frequency(float32_t* buff, uint32_t size, float32_t fs)
{
 8001918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800191c:	b095      	sub	sp, #84	; 0x54
 800191e:	af00      	add	r7, sp, #0
 8001920:	6178      	str	r0, [r7, #20]
 8001922:	6139      	str	r1, [r7, #16]
 8001924:	ed87 0a03 	vstr	s0, [r7, #12]
 8001928:	466b      	mov	r3, sp
 800192a:	60bb      	str	r3, [r7, #8]
    uint32_t target_frequencies[] = {25000, 30000, 35000, 40000};
 800192c:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <get_frequency+0x1c8>)
 800192e:	f107 061c 	add.w	r6, r7, #28
 8001932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001934:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    float32_t temp_buff[size];
 8001938:	6939      	ldr	r1, [r7, #16]
 800193a:	460b      	mov	r3, r1
 800193c:	3b01      	subs	r3, #1
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001940:	2300      	movs	r3, #0
 8001942:	6039      	str	r1, [r7, #0]
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	0143      	lsls	r3, r0, #5
 8001952:	6838      	ldr	r0, [r7, #0]
 8001954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	0142      	lsls	r2, r0, #5
 800195c:	2300      	movs	r3, #0
 800195e:	468a      	mov	sl, r1
 8001960:	469b      	mov	fp, r3
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800196e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001972:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001976:	008b      	lsls	r3, r1, #2
 8001978:	3307      	adds	r3, #7
 800197a:	08db      	lsrs	r3, r3, #3
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	ebad 0d03 	sub.w	sp, sp, r3
 8001982:	466b      	mov	r3, sp
 8001984:	3303      	adds	r3, #3
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38

    for (int i = 0; i < size; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001990:	e00c      	b.n	80019ac <get_frequency+0x94>
    {
        temp_buff[i] = buff[i];
 8001992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4413      	add	r3, r2
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800199e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 80019a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a8:	3301      	adds	r3, #1
 80019aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8ee      	bhi.n	8001992 <get_frequency+0x7a>
    }

    arm_cfft_f32(&instance, temp_buff, 0, 0);
 80019b4:	2300      	movs	r3, #0
 80019b6:	2200      	movs	r2, #0
 80019b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019ba:	484a      	ldr	r0, [pc, #296]	; (8001ae4 <get_frequency+0x1cc>)
 80019bc:	f005 f878 	bl	8006ab0 <arm_cfft_f32>

    float32_t freq[size / 2];
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	0859      	lsrs	r1, r3, #1
 80019c4:	460b      	mov	r3, r1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ca:	2300      	movs	r3, #0
 80019cc:	4688      	mov	r8, r1
 80019ce:	4699      	mov	r9, r3
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80019dc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80019e0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80019e4:	2300      	movs	r3, #0
 80019e6:	460c      	mov	r4, r1
 80019e8:	461d      	mov	r5, r3
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	016b      	lsls	r3, r5, #5
 80019f4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80019f8:	0162      	lsls	r2, r4, #5
 80019fa:	008b      	lsls	r3, r1, #2
 80019fc:	3307      	adds	r3, #7
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	ebad 0d03 	sub.w	sp, sp, r3
 8001a06:	466b      	mov	r3, sp
 8001a08:	3303      	adds	r3, #3
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
    arm_cmplx_mag_f32(temp_buff, freq, size / 2);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	461a      	mov	r2, r3
 8001a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a1a:	f005 f8e1 	bl	8006be0 <arm_cmplx_mag_f32>

    uint32_t max = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t frequency = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t target_bin = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (int i = 0; i < 4; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001a2e:	e04b      	b.n	8001ac8 <get_frequency+0x1b0>
        target_bin = (uint32_t) round(target_frequencies[i] * size / fs);
 8001a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	3348      	adds	r3, #72	; 0x48
 8001a36:	f107 0208 	add.w	r2, r7, #8
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a56:	ee16 0a90 	vmov	r0, s13
 8001a5a:	f7fe fd75 	bl	8000548 <__aeabi_f2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	ec43 2b10 	vmov	d0, r2, r3
 8001a66:	f008 f9e3 	bl	8009e30 <round>
 8001a6a:	ec53 2b10 	vmov	r2, r3, d0
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f899 	bl	8000ba8 <__aeabi_d2uiz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (freq[target_bin] > max) {
 8001a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	dd13      	ble.n	8001ac2 <get_frequency+0x1aa>
        	frequency = target_frequencies[i];
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	3348      	adds	r3, #72	; 0x48
 8001aa0:	f107 0208 	add.w	r2, r7, #8
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
        	max = freq[target_bin];
 8001aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001abc:	ee17 3a90 	vmov	r3, s15
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < 4; i++) {
 8001ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	ddb0      	ble.n	8001a30 <get_frequency+0x118>
        }
    }

    return frequency;
 8001ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad0:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3754      	adds	r7, #84	; 0x54
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ade:	bf00      	nop
 8001ae0:	0800a5fc 	.word	0x0800a5fc
 8001ae4:	0800a614 	.word	0x0800a614

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_MspInit+0x44>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_MspInit+0x44>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6613      	str	r3, [r2, #96]	; 0x60
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_MspInit+0x44>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_MspInit+0x44>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_MspInit+0x44>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_MspInit+0x44>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0a2      	sub	sp, #136	; 0x88
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2260      	movs	r2, #96	; 0x60
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f006 fa48 	bl	8007fe6 <memset>
  if(hadc->Instance==ADC1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a47      	ldr	r2, [pc, #284]	; (8001c78 <HAL_ADC_MspInit+0x148>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	f040 8087 	bne.w	8001c70 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b6c:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b76:	2308      	movs	r3, #8
 8001b78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 ffc1 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b9c:	f7ff feb6 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a35      	ldr	r2, [pc, #212]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_ADC_MspInit+0x14c>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001be8:	2350      	movs	r3, #80	; 0x50
 8001bea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bec:	230b      	movs	r3, #11
 8001bee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfe:	f001 ff5d 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c02:	2302      	movs	r3, #2
 8001c04:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c06:	230b      	movs	r3, #11
 8001c08:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c12:	4619      	mov	r1, r3
 8001c14:	481a      	ldr	r0, [pc, #104]	; (8001c80 <HAL_ADC_MspInit+0x150>)
 8001c16:	f001 ff51 	bl	8003abc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_ADC_MspInit+0x158>)
 8001c1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c46:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c56:	f001 fd39 	bl	80036cc <HAL_DMA_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001c60:	f7ff fe54 	bl	800190c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c68:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c6a:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_ADC_MspInit+0x154>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3788      	adds	r7, #136	; 0x88
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	50040000 	.word	0x50040000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	20000254 	.word	0x20000254
 8001c88:	40020008 	.word	0x40020008

08001c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9c:	d113      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_TIM_Base_MspInit+0x44>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_TIM_Base_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_TIM_Base_MspInit+0x44>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f001 fccf 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc0:	201c      	movs	r0, #28
 8001cc2:	f001 fce8 	bl	8003696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0a2      	sub	sp, #136	; 0x88
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2260      	movs	r2, #96	; 0x60
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f006 f976 	bl	8007fe6 <memset>
  if(huart->Instance==USART2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_UART_MspInit+0xac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d138      	bne.n	8001d76 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 ff01 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d1c:	f7ff fdf6 	bl	800190c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_UART_MspInit+0xb0>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_UART_MspInit+0xb0>)
 8001d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_UART_MspInit+0xb0>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_UART_MspInit+0xb0>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_UART_MspInit+0xb0>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_UART_MspInit+0xb0>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d50:	230c      	movs	r3, #12
 8001d52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f001 fea3 	bl	8003abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3788      	adds	r7, #136	; 0x88
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40004400 	.word	0x40004400
 8001d84:	40021000 	.word	0x40021000

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd4:	f000 f974 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <DMA1_Channel1_IRQHandler+0x10>)
 8001de2:	f001 fd8b 	bl	80038fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000254 	.word	0x20000254

08001df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <TIM2_IRQHandler+0x10>)
 8001df6:	f003 fa77 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000029c 	.word	0x2000029c

08001e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_kill>:

int _kill(int pid, int sig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1e:	f006 f945 	bl	80080ac <__errno>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2216      	movs	r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
  return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_exit>:

void _exit (int status)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffe7 	bl	8001e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e46:	e7fe      	b.n	8001e46 <_exit+0x12>

08001e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e00a      	b.n	8001e70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5a:	f3af 8000 	nop.w
 8001e5e:	4601      	mov	r1, r0
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	b2ca      	uxtb	r2, r1
 8001e68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbf0      	blt.n	8001e5a <_read+0x12>
  }

  return len;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e009      	b.n	8001ea8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f821 	bl	8000ee4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf1      	blt.n	8001e94 <_write+0x12>
  }
  return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_close>:

int _close(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_isatty>:

int _isatty(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f006 f8aa 	bl	80080ac <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20010000 	.word	0x20010000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	20000380 	.word	0x20000380
 8001f8c:	200004d8 	.word	0x200004d8

08001f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <SystemInit+0x20>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <SystemInit+0x20>)
 8001f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb8:	f7ff ffea 	bl	8001f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fbe:	490d      	ldr	r1, [pc, #52]	; (8001ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <LoopForever+0xe>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd4:	4c0a      	ldr	r4, [pc, #40]	; (8002000 <LoopForever+0x16>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f006 f869 	bl	80080b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fe6:	f7fe ff8f 	bl	8000f08 <main>

08001fea <LoopForever>:

LoopForever:
    b LoopForever
 8001fea:	e7fe      	b.n	8001fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ff8:	0800bd84 	.word	0x0800bd84
  ldr r2, =_sbss
 8001ffc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002000:	200004d4 	.word	0x200004d4

08002004 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC1_IRQHandler>
	...

08002008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_Init+0x3c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_Init+0x3c>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201e:	2003      	movs	r0, #3
 8002020:	f001 fb12 	bl	8003648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f80f 	bl	8002048 <HAL_InitTick>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	e001      	b.n	800203a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002036:	f7ff fd57 	bl	8001ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800203a:	79fb      	ldrb	r3, [r7, #7]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_InitTick+0x6c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_InitTick+0x70>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_InitTick+0x6c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206a:	fbb3 f3f1 	udiv	r3, r3, r1
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f001 fb1d 	bl	80036b2 <HAL_SYSTICK_Config>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d809      	bhi.n	8002098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800208c:	f001 fae7 	bl	800365e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_InitTick+0x74>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e007      	b.n	80020a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e004      	b.n	80020a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e001      	b.n	80020a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000008 	.word	0x20000008
 80020e4:	20000384 	.word	0x20000384

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000384 	.word	0x20000384

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff ffee 	bl	80020e8 <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002118:	d005      	beq.n	8002126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_Delay+0x44>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002126:	bf00      	nop
 8002128:	f7ff ffde 	bl	80020e8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8f7      	bhi.n	8002128 <HAL_Delay+0x28>
  {
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000008 	.word	0x20000008

08002148 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <LL_ADC_SetOffset+0x44>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	4313      	orrs	r3, r2
 80021e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021e8:	bf00      	nop
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	03fff000 	.word	0x03fff000

080021f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3360      	adds	r3, #96	; 0x60
 8002206:	461a      	mov	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3330      	adds	r3, #48	; 0x30
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	4413      	add	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	211f      	movs	r1, #31
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	401a      	ands	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 011f 	and.w	r1, r3, #31
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	431a      	orrs	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3314      	adds	r3, #20
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0e5b      	lsrs	r3, r3, #25
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	0d1b      	lsrs	r3, r3, #20
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2107      	movs	r1, #7
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	401a      	ands	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	0d1b      	lsrs	r3, r3, #20
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0318 	and.w	r3, r3, #24
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002354:	40d9      	lsrs	r1, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	400b      	ands	r3, r1
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	431a      	orrs	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	0007ffff 	.word	0x0007ffff

08002378 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6093      	str	r3, [r2, #8]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023b0:	d101      	bne.n	80023b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002400:	d101      	bne.n	8002406 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800244c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002450:	f043 0202 	orr.w	r2, r3, #2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <LL_ADC_IsEnabled+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_ADC_IsEnabled+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d101      	bne.n	80024a2 <LL_ADC_IsDisableOngoing+0x18>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_IsDisableOngoing+0x1a>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c4:	f043 0204 	orr.w	r2, r3, #4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d101      	bne.n	80024f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b08      	cmp	r3, #8
 8002510:	d101      	bne.n	8002516 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e126      	b.n	800278c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff faef 	bl	8001b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff19 	bl	800239c <LL_ADC_IsDeepPowerDownEnabled>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff feff 	bl	8002378 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff34 	bl	80023ec <LL_ADC_IsInternalRegulatorEnabled>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d115      	bne.n	80025b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff18 	bl	80023c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002594:	4b7f      	ldr	r3, [pc, #508]	; (8002794 <HAL_ADC_Init+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	4a7f      	ldr	r2, [pc, #508]	; (8002798 <HAL_ADC_Init+0x274>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	3301      	adds	r3, #1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025a8:	e002      	b.n	80025b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff16 	bl	80023ec <LL_ADC_IsInternalRegulatorEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff76 	bl	80024d8 <LL_ADC_REG_IsConversionOngoing>
 80025ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 80bf 	bne.w	800277a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 80bb 	bne.w	800277a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800260c:	f043 0202 	orr.w	r2, r3, #2
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff23 	bl	8002464 <LL_ADC_IsEnabled>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10b      	bne.n	800263c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002624:	485d      	ldr	r0, [pc, #372]	; (800279c <HAL_ADC_Init+0x278>)
 8002626:	f7ff ff1d 	bl	8002464 <LL_ADC_IsEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4619      	mov	r1, r3
 8002636:	485a      	ldr	r0, [pc, #360]	; (80027a0 <HAL_ADC_Init+0x27c>)
 8002638:	f7ff fd86 	bl	8002148 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7e5b      	ldrb	r3, [r3, #25]
 8002640:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002646:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800264c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002652:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d106      	bne.n	8002678 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	045b      	lsls	r3, r3, #17
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d009      	beq.n	8002694 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <HAL_ADC_Init+0x280>)
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff26 	bl	80024fe <LL_ADC_INJ_IsConversionOngoing>
 80026b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d13d      	bne.n	8002736 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d13a      	bne.n	8002736 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026dc:	f023 0302 	bic.w	r3, r3, #2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	69b9      	ldr	r1, [r7, #24]
 80026e6:	430b      	orrs	r3, r1
 80026e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d118      	bne.n	8002726 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800270a:	4311      	orrs	r1, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002710:	4311      	orrs	r1, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002716:	430a      	orrs	r2, r1
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	e007      	b.n	8002736 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10c      	bne.n	8002758 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f023 010f 	bic.w	r1, r3, #15
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
 8002756:	e007      	b.n	8002768 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020f 	bic.w	r2, r2, #15
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f023 0303 	bic.w	r3, r3, #3
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
 8002778:	e007      	b.n	800278a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800278a:	7ffb      	ldrb	r3, [r7, #31]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000000 	.word	0x20000000
 8002798:	053e2d63 	.word	0x053e2d63
 800279c:	50040000 	.word	0x50040000
 80027a0:	50040300 	.word	0x50040300
 80027a4:	fff0c007 	.word	0xfff0c007

080027a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fe8d 	bl	80024d8 <LL_ADC_REG_IsConversionOngoing>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d167      	bne.n	8002894 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x2a>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e063      	b.n	800289a <HAL_ADC_Start_DMA+0xf2>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fc5e 	bl	800309c <ADC_Enable>
 80027e0:	4603      	mov	r3, r0
 80027e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d14f      	bne.n	800288a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f023 0206 	bic.w	r2, r3, #6
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	659a      	str	r2, [r3, #88]	; 0x58
 8002816:	e002      	b.n	800281e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <HAL_ADC_Start_DMA+0xfc>)
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_ADC_Start_DMA+0x100>)
 800282c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_ADC_Start_DMA+0x104>)
 8002834:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	221c      	movs	r2, #28
 800283c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0210 	orr.w	r2, r2, #16
 8002854:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3340      	adds	r3, #64	; 0x40
 8002870:	4619      	mov	r1, r3
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f000 ffe1 	bl	800383c <HAL_DMA_Start_IT>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fe14 	bl	80024b0 <LL_ADC_REG_StartConversion>
 8002888:	e006      	b.n	8002898 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002892:	e001      	b.n	8002898 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002894:	2302      	movs	r3, #2
 8002896:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002898:	7dfb      	ldrb	r3, [r7, #23]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08003267 	.word	0x08003267
 80028a8:	0800333f 	.word	0x0800333f
 80028ac:	0800335b 	.word	0x0800335b

080028b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0b6      	sub	sp, #216	; 0xd8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x22>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e3bb      	b.n	8003072 <HAL_ADC_ConfigChannel+0x79a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fde6 	bl	80024d8 <LL_ADC_REG_IsConversionOngoing>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 83a0 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d824      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	3b02      	subs	r3, #2
 800292a:	2b03      	cmp	r3, #3
 800292c:	d81b      	bhi.n	8002966 <HAL_ADC_ConfigChannel+0x8e>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_ADC_ConfigChannel+0x5c>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	0800294d 	.word	0x0800294d
 800293c:	08002955 	.word	0x08002955
 8002940:	0800295d 	.word	0x0800295d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002944:	230c      	movs	r3, #12
 8002946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800294a:	e010      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800294c:	2312      	movs	r3, #18
 800294e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002952:	e00c      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002954:	2318      	movs	r3, #24
 8002956:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800295a:	e008      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800295c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002966:	2306      	movs	r3, #6
 8002968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800296c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800297c:	f7ff fc80 	bl	8002280 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fda7 	bl	80024d8 <LL_ADC_REG_IsConversionOngoing>
 800298a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fdb3 	bl	80024fe <LL_ADC_INJ_IsConversionOngoing>
 8002998:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800299c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 81a4 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 819f 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	461a      	mov	r2, r3
 80029be:	f7ff fc8b 	bl	80022d8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	08db      	lsrs	r3, r3, #3
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d00a      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f4:	f7ff fbdc 	bl	80021b0 <LL_ADC_SetOffset>
 80029f8:	e179      	b.n	8002cee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fbf9 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x14e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fbee 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	e01e      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x18c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fbe3 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e004      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1a4>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	e018      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1d6>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e004      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d106      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fbb2 	bl	8002224 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fb96 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x214>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fb8b 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	e01e      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x252>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fb80 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x26a>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	e018      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x29c>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e004      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fb4f 	bl	8002224 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fb33 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x2da>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fb28 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	e01e      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x318>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fb1d 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e004      	b.n	8002bee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x330>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	e014      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x35a>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e004      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d106      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff faf0 	bl	8002224 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2103      	movs	r1, #3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fad4 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x398>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2103      	movs	r1, #3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fac9 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 021f 	and.w	r2, r3, #31
 8002c6e:	e017      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x3c8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2103      	movs	r1, #3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fabe 	bl	80021f8 <LL_ADC_GetOffsetChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e003      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x3e0>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	e011      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x404>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e003      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fa9b 	bl	8002224 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fbb6 	bl	8002464 <LL_ADC_IsEnabled>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8140 	bne.w	8002f80 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f7ff fb0f 	bl	8002330 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a8f      	ldr	r2, [pc, #572]	; (8002f54 <HAL_ADC_ConfigChannel+0x67c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f040 8131 	bne.w	8002f80 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x46e>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2b09      	cmp	r3, #9
 8002d3c:	bf94      	ite	ls
 8002d3e:	2301      	movls	r3, #1
 8002d40:	2300      	movhi	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	e019      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x4a2>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d56:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e003      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	bf94      	ite	ls
 8002d74:	2301      	movls	r3, #1
 8002d76:	2300      	movhi	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d079      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x4c2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	3301      	adds	r3, #1
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d98:	e015      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x4ee>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002daa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	069b      	lsls	r3, r3, #26
 8002dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x50e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	e017      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x53e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	ea42 0103 	orr.w	r1, r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x564>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	051b      	lsls	r3, r3, #20
 8002e3a:	e018      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x596>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e54:	2320      	movs	r3, #32
 8002e56:	e003      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	e081      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x5b6>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	3301      	adds	r3, #1
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e8c:	e015      	b.n	8002eba <HAL_ADC_ConfigChannel+0x5e2>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e003      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	069b      	lsls	r3, r3, #26
 8002eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x602>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	e017      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x632>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	e003      	b.n	8002efe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	ea42 0103 	orr.w	r1, r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x65e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0e9b      	lsrs	r3, r3, #26
 8002f20:	3301      	adds	r3, #1
 8002f22:	f003 021f 	and.w	r2, r3, #31
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b1e      	subs	r3, #30
 8002f2e:	051b      	lsls	r3, r3, #20
 8002f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f34:	e01e      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x69c>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	60fb      	str	r3, [r7, #12]
  return result;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e006      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x688>
 8002f52:	bf00      	nop
 8002f54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 021f 	and.w	r2, r3, #31
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b1e      	subs	r3, #30
 8002f6e:	051b      	lsls	r3, r3, #20
 8002f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7ff f9ac 	bl	80022d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_ADC_ConfigChannel+0x7a4>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d06c      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f8c:	483c      	ldr	r0, [pc, #240]	; (8003080 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f8e:	f7ff f901 	bl	8002194 <LL_ADC_GetCommonPathInternalCh>
 8002f92:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d127      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d121      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a35      	ldr	r2, [pc, #212]	; (8003088 <HAL_ADC_ConfigChannel+0x7b0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d157      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	482f      	ldr	r0, [pc, #188]	; (8003080 <HAL_ADC_ConfigChannel+0x7a8>)
 8002fc2:	f7ff f8d4 	bl	800216e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_ADC_ConfigChannel+0x7b4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	099b      	lsrs	r3, r3, #6
 8002fcc:	4a30      	ldr	r2, [pc, #192]	; (8003090 <HAL_ADC_ConfigChannel+0x7b8>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fe0:	e002      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f9      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fee:	e03a      	b.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d113      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_ADC_ConfigChannel+0x7b0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d12a      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003018:	4619      	mov	r1, r3
 800301a:	4819      	ldr	r0, [pc, #100]	; (8003080 <HAL_ADC_ConfigChannel+0x7a8>)
 800301c:	f7ff f8a7 	bl	800216e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003020:	e021      	b.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_ADC_ConfigChannel+0x7c0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d11c      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800302c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d116      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <HAL_ADC_ConfigChannel+0x7b0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d111      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800304a:	4619      	mov	r1, r3
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <HAL_ADC_ConfigChannel+0x7a8>)
 800304e:	f7ff f88e 	bl	800216e <LL_ADC_SetCommonPathInternalCh>
 8003052:	e008      	b.n	8003066 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800306e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003072:	4618      	mov	r0, r3
 8003074:	37d8      	adds	r7, #216	; 0xd8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	80080000 	.word	0x80080000
 8003080:	50040300 	.word	0x50040300
 8003084:	c7520000 	.word	0xc7520000
 8003088:	50040000 	.word	0x50040000
 800308c:	20000000 	.word	0x20000000
 8003090:	053e2d63 	.word	0x053e2d63
 8003094:	cb840000 	.word	0xcb840000
 8003098:	80000001 	.word	0x80000001

0800309c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f9d9 	bl	8002464 <LL_ADC_IsEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d169      	bne.n	800318c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <ADC_Enable+0xfc>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0210 	orr.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e055      	b.n	800318e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f994 	bl	8002414 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030ec:	482b      	ldr	r0, [pc, #172]	; (800319c <ADC_Enable+0x100>)
 80030ee:	f7ff f851 	bl	8002194 <LL_ADC_GetCommonPathInternalCh>
 80030f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <ADC_Enable+0x104>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <ADC_Enable+0x108>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003116:	e002      	b.n	800311e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	3b01      	subs	r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f9      	bne.n	8003118 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003124:	f7fe ffe0 	bl	80020e8 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800312a:	e028      	b.n	800317e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f997 	bl	8002464 <LL_ADC_IsEnabled>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff f967 	bl	8002414 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003146:	f7fe ffcf 	bl	80020e8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d914      	bls.n	800317e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d00d      	beq.n	800317e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e007      	b.n	800318e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d1cf      	bne.n	800312c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	8000003f 	.word	0x8000003f
 800319c:	50040300 	.word	0x50040300
 80031a0:	20000000 	.word	0x20000000
 80031a4:	053e2d63 	.word	0x053e2d63

080031a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff f968 	bl	800248a <LL_ADC_IsDisableOngoing>
 80031ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f94f 	bl	8002464 <LL_ADC_IsEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d047      	beq.n	800325c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d144      	bne.n	800325c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030d 	and.w	r3, r3, #13
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10c      	bne.n	80031fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f929 	bl	800243c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2203      	movs	r2, #3
 80031f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031f2:	f7fe ff79 	bl	80020e8 <HAL_GetTick>
 80031f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031f8:	e029      	b.n	800324e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f043 0210 	orr.w	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e023      	b.n	800325e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003216:	f7fe ff67 	bl	80020e8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d914      	bls.n	800324e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f043 0210 	orr.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e007      	b.n	800325e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1dc      	bne.n	8003216 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800327c:	2b00      	cmp	r3, #0
 800327e:	d14b      	bne.n	8003318 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d021      	beq.n	80032de <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ffdb 	bl	800225a <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d032      	beq.n	8003310 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d12b      	bne.n	8003310 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d11f      	bne.n	8003310 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
 80032dc:	e018      	b.n	8003310 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7fe faeb 	bl	80018ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003316:	e00e      	b.n	8003336 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff facd 	bl	80028c4 <HAL_ADC_ErrorCallback>
}
 800332a:	e004      	b.n	8003336 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff faaf 	bl	80028b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f043 0204 	orr.w	r2, r3, #4
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fa9f 	bl	80028c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <LL_ADC_StartCalibration>:
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_IsCalibrationOnGoing>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d4:	d101      	bne.n	80033da <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_ADCEx_Calibration_Start+0x1c>
 8003400:	2302      	movs	r3, #2
 8003402:	e04d      	b.n	80034a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fecb 	bl	80031a8 <ADC_Disable>
 8003412:	4603      	mov	r3, r0
 8003414:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d136      	bne.n	800348a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003424:	f023 0302 	bic.w	r3, r3, #2
 8003428:	f043 0202 	orr.w	r2, r3, #2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ffa9 	bl	800338e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800343c:	e014      	b.n	8003468 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3301      	adds	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800344a:	d30d      	bcc.n	8003468 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	f023 0312 	bic.w	r3, r3, #18
 8003454:	f043 0210 	orr.w	r2, r3, #16
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e01b      	b.n	80034a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ffa7 	bl	80033c0 <LL_ADC_IsCalibrationOnGoing>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e2      	bne.n	800343e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f023 0303 	bic.w	r3, r3, #3
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
 8003488:	e005      	b.n	8003496 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f043 0210 	orr.w	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034da:	4a04      	ldr	r2, [pc, #16]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	60d3      	str	r3, [r2, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <__NVIC_GetPriorityGrouping+0x18>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0307 	and.w	r3, r3, #7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db0b      	blt.n	8003536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4907      	ldr	r1, [pc, #28]	; (8003544 <__NVIC_EnableIRQ+0x38>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2001      	movs	r0, #1
 800352e:	fa00 f202 	lsl.w	r2, r0, r2
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d301      	bcc.n	800361a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003616:	2301      	movs	r3, #1
 8003618:	e00f      	b.n	800363a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <SysTick_Config+0x40>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003622:	210f      	movs	r1, #15
 8003624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003628:	f7ff ff8e 	bl	8003548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SysTick_Config+0x40>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SysTick_Config+0x40>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff29 	bl	80034a8 <__NVIC_SetPriorityGrouping>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003670:	f7ff ff3e 	bl	80034f0 <__NVIC_GetPriorityGrouping>
 8003674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff8e 	bl	800359c <NVIC_EncodePriority>
 8003680:	4602      	mov	r2, r0
 8003682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5d 	bl	8003548 <__NVIC_SetPriority>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff31 	bl	800350c <__NVIC_EnableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffa2 	bl	8003604 <SysTick_Config>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e098      	b.n	8003810 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_DMA_Init+0x150>)
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d80f      	bhi.n	800370a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_DMA_Init+0x154>)
 80036f2:	4413      	add	r3, r2
 80036f4:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <HAL_DMA_Init+0x158>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	009a      	lsls	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a48      	ldr	r2, [pc, #288]	; (8003828 <HAL_DMA_Init+0x15c>)
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
 8003708:	e00e      	b.n	8003728 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	4b46      	ldr	r3, [pc, #280]	; (800382c <HAL_DMA_Init+0x160>)
 8003712:	4413      	add	r3, r2
 8003714:	4a43      	ldr	r2, [pc, #268]	; (8003824 <HAL_DMA_Init+0x158>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	009a      	lsls	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a42      	ldr	r2, [pc, #264]	; (8003830 <HAL_DMA_Init+0x164>)
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800374c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003782:	d039      	beq.n	80037f8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	4a27      	ldr	r2, [pc, #156]	; (8003828 <HAL_DMA_Init+0x15c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d11a      	bne.n	80037c4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_DMA_Init+0x168>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f003 031c 	and.w	r3, r3, #28
 800379a:	210f      	movs	r1, #15
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	4924      	ldr	r1, [pc, #144]	; (8003834 <HAL_DMA_Init+0x168>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_DMA_Init+0x168>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f003 031c 	and.w	r3, r3, #28
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	491d      	ldr	r1, [pc, #116]	; (8003834 <HAL_DMA_Init+0x168>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
 80037c2:	e019      	b.n	80037f8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037c4:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_DMA_Init+0x16c>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f003 031c 	and.w	r3, r3, #28
 80037d0:	210f      	movs	r1, #15
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	4917      	ldr	r1, [pc, #92]	; (8003838 <HAL_DMA_Init+0x16c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <HAL_DMA_Init+0x16c>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f003 031c 	and.w	r3, r3, #28
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	4911      	ldr	r1, [pc, #68]	; (8003838 <HAL_DMA_Init+0x16c>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40020407 	.word	0x40020407
 8003820:	bffdfff8 	.word	0xbffdfff8
 8003824:	cccccccd 	.word	0xcccccccd
 8003828:	40020000 	.word	0x40020000
 800382c:	bffdfbf8 	.word	0xbffdfbf8
 8003830:	40020400 	.word	0x40020400
 8003834:	400200a8 	.word	0x400200a8
 8003838:	400204a8 	.word	0x400204a8

0800383c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_DMA_Start_IT+0x20>
 8003858:	2302      	movs	r3, #2
 800385a:	e04b      	b.n	80038f4 <HAL_DMA_Start_IT+0xb8>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d13a      	bne.n	80038e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8e0 	bl	8003a5a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 020e 	orr.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e00f      	b.n	80038d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 020a 	orr.w	r2, r2, #10
 80038d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e005      	b.n	80038f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
 80038f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f003 031c 	and.w	r3, r3, #28
 800391c:	2204      	movs	r2, #4
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d026      	beq.n	8003976 <HAL_DMA_IRQHandler+0x7a>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d021      	beq.n	8003976 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0204 	bic.w	r2, r2, #4
 800394e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f003 021c 	and.w	r2, r3, #28
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2104      	movs	r1, #4
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	2b00      	cmp	r3, #0
 800396a:	d071      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003974:	e06c      	b.n	8003a50 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 031c 	and.w	r3, r3, #28
 800397e:	2202      	movs	r2, #2
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d02e      	beq.n	80039e8 <HAL_DMA_IRQHandler+0xec>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d029      	beq.n	80039e8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 020a 	bic.w	r2, r2, #10
 80039b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	f003 021c 	and.w	r2, r3, #28
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2102      	movs	r1, #2
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d038      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039e6:	e033      	b.n	8003a50 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f003 031c 	and.w	r3, r3, #28
 80039f0:	2208      	movs	r2, #8
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02a      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x156>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d025      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 020e 	bic.w	r2, r2, #14
 8003a14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f003 021c 	and.w	r2, r3, #28
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2101      	movs	r1, #1
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
}
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f003 021c 	and.w	r2, r3, #28
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d108      	bne.n	8003a9e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a9c:	e007      	b.n	8003aae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	60da      	str	r2, [r3, #12]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aca:	e154      	b.n	8003d76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8146 	beq.w	8003d70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d005      	beq.n	8003afc <HAL_GPIO_Init+0x40>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d130      	bne.n	8003b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b32:	2201      	movs	r2, #1
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 0201 	and.w	r2, r3, #1
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d017      	beq.n	8003b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d123      	bne.n	8003bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	08da      	lsrs	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3208      	adds	r2, #8
 8003bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	08da      	lsrs	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3208      	adds	r2, #8
 8003be8:	6939      	ldr	r1, [r7, #16]
 8003bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0203 	and.w	r2, r3, #3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80a0 	beq.w	8003d70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c30:	4b58      	ldr	r3, [pc, #352]	; (8003d94 <HAL_GPIO_Init+0x2d8>)
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	4a57      	ldr	r2, [pc, #348]	; (8003d94 <HAL_GPIO_Init+0x2d8>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6613      	str	r3, [r2, #96]	; 0x60
 8003c3c:	4b55      	ldr	r3, [pc, #340]	; (8003d94 <HAL_GPIO_Init+0x2d8>)
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c48:	4a53      	ldr	r2, [pc, #332]	; (8003d98 <HAL_GPIO_Init+0x2dc>)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	3302      	adds	r3, #2
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	220f      	movs	r2, #15
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c72:	d019      	beq.n	8003ca8 <HAL_GPIO_Init+0x1ec>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a49      	ldr	r2, [pc, #292]	; (8003d9c <HAL_GPIO_Init+0x2e0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d013      	beq.n	8003ca4 <HAL_GPIO_Init+0x1e8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a48      	ldr	r2, [pc, #288]	; (8003da0 <HAL_GPIO_Init+0x2e4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00d      	beq.n	8003ca0 <HAL_GPIO_Init+0x1e4>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a47      	ldr	r2, [pc, #284]	; (8003da4 <HAL_GPIO_Init+0x2e8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <HAL_GPIO_Init+0x1e0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a46      	ldr	r2, [pc, #280]	; (8003da8 <HAL_GPIO_Init+0x2ec>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d101      	bne.n	8003c98 <HAL_GPIO_Init+0x1dc>
 8003c94:	2304      	movs	r3, #4
 8003c96:	e008      	b.n	8003caa <HAL_GPIO_Init+0x1ee>
 8003c98:	2307      	movs	r3, #7
 8003c9a:	e006      	b.n	8003caa <HAL_GPIO_Init+0x1ee>
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e004      	b.n	8003caa <HAL_GPIO_Init+0x1ee>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e002      	b.n	8003caa <HAL_GPIO_Init+0x1ee>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_GPIO_Init+0x1ee>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	f002 0203 	and.w	r2, r2, #3
 8003cb0:	0092      	lsls	r2, r2, #2
 8003cb2:	4093      	lsls	r3, r2
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cba:	4937      	ldr	r1, [pc, #220]	; (8003d98 <HAL_GPIO_Init+0x2dc>)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc8:	4b38      	ldr	r3, [pc, #224]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cec:	4a2f      	ldr	r2, [pc, #188]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cf2:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d16:	4a25      	ldr	r2, [pc, #148]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d40:	4a1a      	ldr	r2, [pc, #104]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d46:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_GPIO_Init+0x2f0>)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3301      	adds	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f aea3 	bne.w	8003acc <HAL_GPIO_Init+0x10>
  }
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	48000400 	.word	0x48000400
 8003da0:	48000800 	.word	0x48000800
 8003da4:	48000c00 	.word	0x48000c00
 8003da8:	48001000 	.word	0x48001000
 8003dac:	40010400 	.word	0x40010400

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40007000 	.word	0x40007000

08003dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0a:	d130      	bne.n	8003e6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d038      	beq.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2232      	movs	r2, #50	; 0x32
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0c9b      	lsrs	r3, r3, #18
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e40:	e002      	b.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d102      	bne.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f2      	bne.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e68:	d110      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e00f      	b.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	d007      	beq.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e84:	4a05      	ldr	r2, [pc, #20]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	431bde83 	.word	0x431bde83

08003ea8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f000 bc02 	b.w	80046c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebc:	4b96      	ldr	r3, [pc, #600]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec6:	4b94      	ldr	r3, [pc, #592]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80e4 	beq.w	80040a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x4c>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	f040 808b 	bne.w	8004002 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	f040 8087 	bne.w	8004002 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef4:	4b88      	ldr	r3, [pc, #544]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_OscConfig+0x64>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e3d9      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	4b81      	ldr	r3, [pc, #516]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_RCC_OscConfig+0x7e>
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f24:	e005      	b.n	8003f32 <HAL_RCC_OscConfig+0x8a>
 8003f26:	4b7c      	ldr	r3, [pc, #496]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d223      	bcs.n	8003f7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fd8c 	bl	8004a58 <RCC_SetFlashLatencyFromMSIRange>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e3ba      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f4a:	4b73      	ldr	r3, [pc, #460]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a72      	ldr	r2, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b70      	ldr	r3, [pc, #448]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	496d      	ldr	r1, [pc, #436]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f68:	4b6b      	ldr	r3, [pc, #428]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	4968      	ldr	r1, [pc, #416]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
 8003f7c:	e025      	b.n	8003fca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f7e:	4b66      	ldr	r3, [pc, #408]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f84:	f043 0308 	orr.w	r3, r3, #8
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4960      	ldr	r1, [pc, #384]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f9c:	4b5e      	ldr	r3, [pc, #376]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	495b      	ldr	r1, [pc, #364]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fd4c 	bl	8004a58 <RCC_SetFlashLatencyFromMSIRange>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e37a      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fca:	f000 fc81 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b51      	ldr	r3, [pc, #324]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	4950      	ldr	r1, [pc, #320]	; (800411c <HAL_RCC_OscConfig+0x274>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <HAL_RCC_OscConfig+0x278>)
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fea:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe f82a 	bl	8002048 <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d052      	beq.n	80040a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	e35e      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d032      	beq.n	8004070 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a42      	ldr	r2, [pc, #264]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004016:	f7fe f867 	bl	80020e8 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800401e:	f7fe f863 	bl	80020e8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e347      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004030:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403c:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a35      	ldr	r2, [pc, #212]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004042:	f043 0308 	orr.w	r3, r3, #8
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b33      	ldr	r3, [pc, #204]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	4930      	ldr	r1, [pc, #192]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	492b      	ldr	r1, [pc, #172]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
 800406e:	e01a      	b.n	80040a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004070:	4b29      	ldr	r3, [pc, #164]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800407c:	f7fe f834 	bl	80020e8 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004084:	f7fe f830 	bl	80020e8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e314      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x1dc>
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d073      	beq.n	800419a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_OscConfig+0x21c>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d10e      	bne.n	80040dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d063      	beq.n	8004198 <HAL_RCC_OscConfig+0x2f0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d15f      	bne.n	8004198 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e2f1      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x24c>
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e025      	b.n	8004140 <HAL_RCC_OscConfig+0x298>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d114      	bne.n	8004128 <HAL_RCC_OscConfig+0x280>
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a02      	ldr	r2, [pc, #8]	; (8004118 <HAL_RCC_OscConfig+0x270>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e013      	b.n	8004140 <HAL_RCC_OscConfig+0x298>
 8004118:	40021000 	.word	0x40021000
 800411c:	0800a624 	.word	0x0800a624
 8004120:	20000000 	.word	0x20000000
 8004124:	20000004 	.word	0x20000004
 8004128:	4ba0      	ldr	r3, [pc, #640]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a9f      	ldr	r2, [pc, #636]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b9d      	ldr	r3, [pc, #628]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a9c      	ldr	r2, [pc, #624]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fd ffce 	bl	80020e8 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd ffca 	bl	80020e8 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e2ae      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004162:	4b92      	ldr	r3, [pc, #584]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x2a8>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd ffba 	bl	80020e8 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004178:	f7fd ffb6 	bl	80020e8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e29a      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x2d0>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d060      	beq.n	8004268 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_OscConfig+0x310>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d119      	bne.n	80041e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d116      	bne.n	80041e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b8:	4b7c      	ldr	r3, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_OscConfig+0x328>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e277      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	4973      	ldr	r1, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e4:	e040      	b.n	8004268 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d023      	beq.n	8004236 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ee:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fd ff75 	bl	80020e8 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004202:	f7fd ff71 	bl	80020e8 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e255      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004214:	4b65      	ldr	r3, [pc, #404]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	4b62      	ldr	r3, [pc, #392]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	061b      	lsls	r3, r3, #24
 800422e:	495f      	ldr	r1, [pc, #380]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	e018      	b.n	8004268 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004236:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5c      	ldr	r2, [pc, #368]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800423c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd ff51 	bl	80020e8 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424a:	f7fd ff4d 	bl	80020e8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e231      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800425c:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d03c      	beq.n	80042ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427c:	4b4b      	ldr	r3, [pc, #300]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800427e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004282:	4a4a      	ldr	r2, [pc, #296]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd ff2c 	bl	80020e8 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004294:	f7fd ff28 	bl	80020e8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e20c      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a6:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80042a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <HAL_RCC_OscConfig+0x3ec>
 80042b4:	e01b      	b.n	80042ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80042b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042bc:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd ff0f 	bl	80020e8 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fd ff0b 	bl	80020e8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e1ef      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ef      	bne.n	80042ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80a6 	beq.w	8004448 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004316:	6593      	str	r3, [r2, #88]	; 0x58
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004324:	2301      	movs	r3, #1
 8004326:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004328:	4b21      	ldr	r3, [pc, #132]	; (80043b0 <HAL_RCC_OscConfig+0x508>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d118      	bne.n	8004366 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004334:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <HAL_RCC_OscConfig+0x508>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_RCC_OscConfig+0x508>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004340:	f7fd fed2 	bl	80020e8 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fd fece 	bl	80020e8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1b2      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_RCC_OscConfig+0x508>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d108      	bne.n	8004380 <HAL_RCC_OscConfig+0x4d8>
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800437e:	e029      	b.n	80043d4 <HAL_RCC_OscConfig+0x52c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b05      	cmp	r3, #5
 8004386:	d115      	bne.n	80043b4 <HAL_RCC_OscConfig+0x50c>
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	4a07      	ldr	r2, [pc, #28]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	4a03      	ldr	r2, [pc, #12]	; (80043ac <HAL_RCC_OscConfig+0x504>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a8:	e014      	b.n	80043d4 <HAL_RCC_OscConfig+0x52c>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
 80043b4:	4b9a      	ldr	r3, [pc, #616]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	4a99      	ldr	r2, [pc, #612]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c4:	4b96      	ldr	r3, [pc, #600]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	4a95      	ldr	r2, [pc, #596]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d016      	beq.n	800440a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd fe84 	bl	80020e8 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fd fe80 	bl	80020e8 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e162      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fa:	4b89      	ldr	r3, [pc, #548]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ed      	beq.n	80043e4 <HAL_RCC_OscConfig+0x53c>
 8004408:	e015      	b.n	8004436 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fd fe6d 	bl	80020e8 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fd fe69 	bl	80020e8 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e14b      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004428:	4b7d      	ldr	r3, [pc, #500]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1ed      	bne.n	8004412 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d105      	bne.n	8004448 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443c:	4b78      	ldr	r3, [pc, #480]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	4a77      	ldr	r2, [pc, #476]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 8004442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03c      	beq.n	80044ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01c      	beq.n	8004496 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800445c:	4b70      	ldr	r3, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 800445e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004462:	4a6f      	ldr	r2, [pc, #444]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd fe3c 	bl	80020e8 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004474:	f7fd fe38 	bl	80020e8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e11c      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004486:	4b66      	ldr	r3, [pc, #408]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 8004488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ef      	beq.n	8004474 <HAL_RCC_OscConfig+0x5cc>
 8004494:	e01b      	b.n	80044ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004496:	4b62      	ldr	r3, [pc, #392]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 8004498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449c:	4a60      	ldr	r2, [pc, #384]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a6:	f7fd fe1f 	bl	80020e8 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ae:	f7fd fe1b 	bl	80020e8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e0ff      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044c0:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80044c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ef      	bne.n	80044ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80f3 	beq.w	80046be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	2b02      	cmp	r3, #2
 80044de:	f040 80c9 	bne.w	8004674 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044e2:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 0203 	and.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d12c      	bne.n	8004550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	3b01      	subs	r3, #1
 8004502:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d123      	bne.n	8004550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d11b      	bne.n	8004550 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d113      	bne.n	8004550 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	3b01      	subs	r3, #1
 8004536:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d109      	bne.n	8004550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	3b01      	subs	r3, #1
 800454a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d06b      	beq.n	8004628 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b0c      	cmp	r3, #12
 8004554:	d062      	beq.n	800461c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004556:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e0ac      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004566:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 800456c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004570:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004572:	f7fd fdb9 	bl	80020e8 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457a:	f7fd fdb5 	bl	80020e8 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e099      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458c:	4b24      	ldr	r3, [pc, #144]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <HAL_RCC_OscConfig+0x77c>)
 800459e:	4013      	ands	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045a8:	3a01      	subs	r2, #1
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	4311      	orrs	r1, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b2:	0212      	lsls	r2, r2, #8
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	3a01      	subs	r2, #1
 80045be:	0552      	lsls	r2, r2, #21
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045c6:	0852      	lsrs	r2, r2, #1
 80045c8:	3a01      	subs	r2, #1
 80045ca:	0652      	lsls	r2, r2, #25
 80045cc:	4311      	orrs	r1, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d2:	06d2      	lsls	r2, r2, #27
 80045d4:	430a      	orrs	r2, r1
 80045d6:	4912      	ldr	r1, [pc, #72]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80045e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 80045ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045f4:	f7fd fd78 	bl	80020e8 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd fd74 	bl	80020e8 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e058      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <HAL_RCC_OscConfig+0x778>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800461a:	e050      	b.n	80046be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e04f      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
 8004620:	40021000 	.word	0x40021000
 8004624:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004628:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d144      	bne.n	80046be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004640:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800464c:	f7fd fd4c 	bl	80020e8 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd fd48 	bl	80020e8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e02c      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004666:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x7ac>
 8004672:	e024      	b.n	80046be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d01f      	beq.n	80046ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 8004680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004686:	f7fd fd2f 	bl	80020e8 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468e:	f7fd fd2b 	bl	80020e8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e00f      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	4905      	ldr	r1, [pc, #20]	; (80046c8 <HAL_RCC_OscConfig+0x820>)
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_OscConfig+0x824>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
 80046b8:	e001      	b.n	80046be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	feeefffc 	.word	0xfeeefffc

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0e7      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b75      	ldr	r3, [pc, #468]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d910      	bls.n	8004714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b72      	ldr	r3, [pc, #456]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 0207 	bic.w	r2, r3, #7
 80046fa:	4970      	ldr	r1, [pc, #448]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b6e      	ldr	r3, [pc, #440]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0cf      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d010      	beq.n	8004742 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800472c:	429a      	cmp	r2, r3
 800472e:	d908      	bls.n	8004742 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4960      	ldr	r1, [pc, #384]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d04c      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	4b5a      	ldr	r3, [pc, #360]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d121      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0a6      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476e:	4b54      	ldr	r3, [pc, #336]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d115      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e09a      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004786:	4b4e      	ldr	r3, [pc, #312]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e08e      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e086      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4943      	ldr	r1, [pc, #268]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fd fc96 	bl	80020e8 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7fd fc92 	bl	80020e8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e06e      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b3a      	ldr	r3, [pc, #232]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004800:	429a      	cmp	r2, r3
 8004802:	d208      	bcs.n	8004816 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	492b      	ldr	r1, [pc, #172]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004816:	4b29      	ldr	r3, [pc, #164]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d210      	bcs.n	8004846 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 0207 	bic.w	r2, r3, #7
 800482c:	4923      	ldr	r1, [pc, #140]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004834:	4b21      	ldr	r3, [pc, #132]	; (80048bc <HAL_RCC_ClockConfig+0x1ec>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d001      	beq.n	8004846 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e036      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004852:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4918      	ldr	r1, [pc, #96]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004870:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4910      	ldr	r1, [pc, #64]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004884:	f000 f824 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <HAL_RCC_ClockConfig+0x1f0>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	490b      	ldr	r1, [pc, #44]	; (80048c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1f8>)
 80048a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1fc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd fbcd 	bl	8002048 <HAL_InitTick>
 80048ae:	4603      	mov	r3, r0
 80048b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80048b2:	7afb      	ldrb	r3, [r7, #11]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40021000 	.word	0x40021000
 80048c4:	0800a624 	.word	0x0800a624
 80048c8:	20000000 	.word	0x20000000
 80048cc:	20000004 	.word	0x20000004

080048d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048de:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x34>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d121      	bne.n	8004942 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d11e      	bne.n	8004942 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d107      	bne.n	8004920 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004910:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	e005      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800492c:	4a2b      	ldr	r2, [pc, #172]	; (80049dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004934:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10d      	bne.n	8004958 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b04      	cmp	r3, #4
 8004946:	d102      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004948:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e004      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d101      	bne.n	8004958 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004954:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004956:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d134      	bne.n	80049c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800495e:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d003      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0xa6>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d003      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0xac>
 8004974:	e005      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004978:	617b      	str	r3, [r7, #20]
      break;
 800497a:	e005      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800497e:	617b      	str	r3, [r7, #20]
      break;
 8004980:	e002      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	617b      	str	r3, [r7, #20]
      break;
 8004986:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	3301      	adds	r3, #1
 8004994:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	fb03 f202 	mul.w	r2, r3, r2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	0e5b      	lsrs	r3, r3, #25
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	3301      	adds	r3, #1
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049c8:	69bb      	ldr	r3, [r7, #24]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3724      	adds	r7, #36	; 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	0800a63c 	.word	0x0800a63c
 80049e0:	00f42400 	.word	0x00f42400
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000000 	.word	0x20000000

08004a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a04:	f7ff fff0 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4904      	ldr	r1, [pc, #16]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	0800a634 	.word	0x0800a634

08004a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a30:	f7ff ffda 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0adb      	lsrs	r3, r3, #11
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4904      	ldr	r1, [pc, #16]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	0800a634 	.word	0x0800a634

08004a58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a64:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a70:	f7ff f9b6 	bl	8003de0 <HAL_PWREx_GetVoltageRange>
 8004a74:	6178      	str	r0, [r7, #20]
 8004a76:	e014      	b.n	8004aa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a78:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6593      	str	r3, [r2, #88]	; 0x58
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a90:	f7ff f9a6 	bl	8003de0 <HAL_PWREx_GetVoltageRange>
 8004a94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4a1d      	ldr	r2, [pc, #116]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d10b      	bne.n	8004ac2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d919      	bls.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ab4:	d902      	bls.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e013      	b.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004abc:	2301      	movs	r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	e010      	b.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b80      	cmp	r3, #128	; 0x80
 8004ac6:	d902      	bls.n	8004ace <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ac8:	2303      	movs	r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e00a      	b.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d102      	bne.n	8004ada <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e004      	b.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b70      	cmp	r3, #112	; 0x70
 8004ade:	d101      	bne.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 0207 	bic.w	r2, r3, #7
 8004aec:	4909      	ldr	r1, [pc, #36]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40022000 	.word	0x40022000

08004b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b20:	2300      	movs	r3, #0
 8004b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b24:	2300      	movs	r3, #0
 8004b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d031      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b3c:	d01a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b42:	d814      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b4c:	d10f      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b4e:	4b5d      	ldr	r3, [pc, #372]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4a5c      	ldr	r2, [pc, #368]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b5a:	e00c      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa22 	bl	8004fac <RCCEx_PLLSAI1_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	74fb      	strb	r3, [r7, #19]
      break;
 8004b72:	e000      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b7c:	4b51      	ldr	r3, [pc, #324]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	494e      	ldr	r1, [pc, #312]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b92:	e001      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 809e 	beq.w	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004baa:	4b46      	ldr	r3, [pc, #280]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc0:	4b40      	ldr	r3, [pc, #256]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc4:	4a3f      	ldr	r2, [pc, #252]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bca:	6593      	str	r3, [r2, #88]	; 0x58
 8004bcc:	4b3d      	ldr	r3, [pc, #244]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a39      	ldr	r2, [pc, #228]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004be8:	f7fd fa7e 	bl	80020e8 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bee:	e009      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fd fa7a 	bl	80020e8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d902      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	74fb      	strb	r3, [r7, #19]
        break;
 8004c02:	e005      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c04:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d15a      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c16:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01e      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d019      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c3e:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d016      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fd fa3a 	bl	80020e8 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c76:	e00b      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fd fa36 	bl	80020e8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d902      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c8e:	e006      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ec      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca4:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cba:	e009      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	74bb      	strb	r3, [r7, #18]
 8004cc0:	e006      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd0:	7c7b      	ldrb	r3, [r7, #17]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d105      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd6:	4b8d      	ldr	r3, [pc, #564]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	4a8c      	ldr	r2, [pc, #560]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cee:	4b87      	ldr	r3, [pc, #540]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f023 0203 	bic.w	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	4983      	ldr	r1, [pc, #524]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d10:	4b7e      	ldr	r3, [pc, #504]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f023 020c 	bic.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	497b      	ldr	r1, [pc, #492]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	4972      	ldr	r1, [pc, #456]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d54:	4b6d      	ldr	r3, [pc, #436]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	496a      	ldr	r1, [pc, #424]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	4961      	ldr	r1, [pc, #388]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d98:	4b5c      	ldr	r3, [pc, #368]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4959      	ldr	r1, [pc, #356]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dba:	4b54      	ldr	r3, [pc, #336]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	4950      	ldr	r1, [pc, #320]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ddc:	4b4b      	ldr	r3, [pc, #300]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	4948      	ldr	r1, [pc, #288]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dfe:	4b43      	ldr	r3, [pc, #268]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	493f      	ldr	r1, [pc, #252]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d028      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e20:	4b3a      	ldr	r3, [pc, #232]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2e:	4937      	ldr	r1, [pc, #220]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e40:	4b32      	ldr	r3, [pc, #200]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a31      	ldr	r2, [pc, #196]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4a:	60d3      	str	r3, [r2, #12]
 8004e4c:	e011      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f8a4 	bl	8004fac <RCCEx_PLLSAI1_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d028      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e7e:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8c:	491f      	ldr	r1, [pc, #124]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9c:	d106      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4a1a      	ldr	r2, [pc, #104]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea8:	60d3      	str	r3, [r2, #12]
 8004eaa:	e011      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f875 	bl	8004fac <RCCEx_PLLSAI1_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02b      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	4908      	ldr	r1, [pc, #32]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004efa:	d109      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a02      	ldr	r2, [pc, #8]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f06:	60d3      	str	r3, [r2, #12]
 8004f08:	e014      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f843 	bl	8004fac <RCCEx_PLLSAI1_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01c      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	4916      	ldr	r1, [pc, #88]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f5e:	d10c      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	2102      	movs	r1, #2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f820 	bl	8004fac <RCCEx_PLLSAI1_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	4904      	ldr	r1, [pc, #16]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000

08004fac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fba:	4b74      	ldr	r3, [pc, #464]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d018      	beq.n	8004ff8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fc6:	4b71      	ldr	r3, [pc, #452]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0203 	and.w	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d10d      	bne.n	8004ff2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fde:	4b6b      	ldr	r3, [pc, #428]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
       ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d047      	beq.n	8005082 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	e044      	b.n	8005082 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d018      	beq.n	8005032 <RCCEx_PLLSAI1_Config+0x86>
 8005000:	2b03      	cmp	r3, #3
 8005002:	d825      	bhi.n	8005050 <RCCEx_PLLSAI1_Config+0xa4>
 8005004:	2b01      	cmp	r3, #1
 8005006:	d002      	beq.n	800500e <RCCEx_PLLSAI1_Config+0x62>
 8005008:	2b02      	cmp	r3, #2
 800500a:	d009      	beq.n	8005020 <RCCEx_PLLSAI1_Config+0x74>
 800500c:	e020      	b.n	8005050 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800500e:	4b5f      	ldr	r3, [pc, #380]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11d      	bne.n	8005056 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501e:	e01a      	b.n	8005056 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005020:	4b5a      	ldr	r3, [pc, #360]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005028:	2b00      	cmp	r3, #0
 800502a:	d116      	bne.n	800505a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005030:	e013      	b.n	800505a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005032:	4b56      	ldr	r3, [pc, #344]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800503e:	4b53      	ldr	r3, [pc, #332]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800504e:	e006      	b.n	800505e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	73fb      	strb	r3, [r7, #15]
      break;
 8005054:	e004      	b.n	8005060 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800505e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005066:	4b49      	ldr	r3, [pc, #292]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	3b01      	subs	r3, #1
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	430b      	orrs	r3, r1
 800507c:	4943      	ldr	r1, [pc, #268]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d17c      	bne.n	8005182 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005088:	4b40      	ldr	r3, [pc, #256]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a3f      	ldr	r2, [pc, #252]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 800508e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fd f828 	bl	80020e8 <HAL_GetTick>
 8005098:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800509a:	e009      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800509c:	f7fd f824 	bl	80020e8 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d902      	bls.n	80050b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	73fb      	strb	r3, [r7, #15]
        break;
 80050ae:	e005      	b.n	80050bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050b0:	4b36      	ldr	r3, [pc, #216]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1ef      	bne.n	800509c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d15f      	bne.n	8005182 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d110      	bne.n	80050ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c8:	4b30      	ldr	r3, [pc, #192]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80050d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6892      	ldr	r2, [r2, #8]
 80050d8:	0211      	lsls	r1, r2, #8
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68d2      	ldr	r2, [r2, #12]
 80050de:	06d2      	lsls	r2, r2, #27
 80050e0:	430a      	orrs	r2, r1
 80050e2:	492a      	ldr	r1, [pc, #168]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	610b      	str	r3, [r1, #16]
 80050e8:	e027      	b.n	800513a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d112      	bne.n	8005116 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f0:	4b26      	ldr	r3, [pc, #152]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6892      	ldr	r2, [r2, #8]
 8005100:	0211      	lsls	r1, r2, #8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6912      	ldr	r2, [r2, #16]
 8005106:	0852      	lsrs	r2, r2, #1
 8005108:	3a01      	subs	r2, #1
 800510a:	0552      	lsls	r2, r2, #21
 800510c:	430a      	orrs	r2, r1
 800510e:	491f      	ldr	r1, [pc, #124]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	610b      	str	r3, [r1, #16]
 8005114:	e011      	b.n	800513a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800511e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	0211      	lsls	r1, r2, #8
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6952      	ldr	r2, [r2, #20]
 800512c:	0852      	lsrs	r2, r2, #1
 800512e:	3a01      	subs	r2, #1
 8005130:	0652      	lsls	r2, r2, #25
 8005132:	430a      	orrs	r2, r1
 8005134:	4915      	ldr	r1, [pc, #84]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005136:	4313      	orrs	r3, r2
 8005138:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005144:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005146:	f7fc ffcf 	bl	80020e8 <HAL_GetTick>
 800514a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800514c:	e009      	b.n	8005162 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800514e:	f7fc ffcb 	bl	80020e8 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d902      	bls.n	8005162 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	73fb      	strb	r3, [r7, #15]
          break;
 8005160:	e005      	b.n	800516e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005162:	4b0a      	ldr	r3, [pc, #40]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0ef      	beq.n	800514e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4903      	ldr	r1, [pc, #12]	; (800518c <RCCEx_PLLSAI1_Config+0x1e0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40021000 	.word	0x40021000

08005190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e049      	b.n	8005236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc fd68 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f000 fa7e 	bl	80056d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d001      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e03b      	b.n	80052d0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <HAL_TIM_Base_Start_IT+0x9c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_TIM_Base_Start_IT+0x4e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d004      	beq.n	800528e <HAL_TIM_Base_Start_IT+0x4e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d115      	bne.n	80052ba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005296:	4013      	ands	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b06      	cmp	r3, #6
 800529e:	d015      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x8c>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d011      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	e008      	b.n	80052cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e000      	b.n	80052ce <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40014000 	.word	0x40014000
 80052e4:	00010007 	.word	0x00010007

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d020      	beq.n	800534c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01b      	beq.n	800534c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0202 	mvn.w	r2, #2
 800531c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9ad 	bl	8005692 <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f99f 	bl	800567e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9b0 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d020      	beq.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f987 	bl	8005692 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f979 	bl	800567e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f98a 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d020      	beq.n	80053e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01b      	beq.n	80053e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0208 	mvn.w	r2, #8
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2204      	movs	r2, #4
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f961 	bl	8005692 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f953 	bl	800567e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f964 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d020      	beq.n	8005430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01b      	beq.n	8005430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0210 	mvn.w	r2, #16
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2208      	movs	r2, #8
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f93b 	bl	8005692 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f92d 	bl	800567e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f93e 	bl	80056a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0201 	mvn.w	r2, #1
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc fa3a 	bl	80018c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa9a 	bl	80059ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00c      	beq.n	800549c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa92 	bl	80059c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8fd 	bl	80056ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00c      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0220 	mvn.w	r2, #32
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa5a 	bl	8005998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIM_ConfigClockSource+0x1c>
 8005504:	2302      	movs	r3, #2
 8005506:	e0b6      	b.n	8005676 <HAL_TIM_ConfigClockSource+0x18a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800552a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005544:	d03e      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0xd8>
 8005546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554a:	f200 8087 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x170>
 800554e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005552:	f000 8086 	beq.w	8005662 <HAL_TIM_ConfigClockSource+0x176>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d87f      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x170>
 800555c:	2b70      	cmp	r3, #112	; 0x70
 800555e:	d01a      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xaa>
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d87b      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x170>
 8005564:	2b60      	cmp	r3, #96	; 0x60
 8005566:	d050      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x11e>
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d877      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x170>
 800556c:	2b50      	cmp	r3, #80	; 0x50
 800556e:	d03c      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0xfe>
 8005570:	2b50      	cmp	r3, #80	; 0x50
 8005572:	d873      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x170>
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d058      	beq.n	800562a <HAL_TIM_ConfigClockSource+0x13e>
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d86f      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x170>
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d064      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x15e>
 8005580:	2b30      	cmp	r3, #48	; 0x30
 8005582:	d86b      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x170>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d060      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x15e>
 8005588:	2b20      	cmp	r3, #32
 800558a:	d867      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x170>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d05c      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x15e>
 8005590:	2b10      	cmp	r3, #16
 8005592:	d05a      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x15e>
 8005594:	e062      	b.n	800565c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055a6:	f000 f971 	bl	800588c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	609a      	str	r2, [r3, #8]
      break;
 80055c2:	e04f      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055d4:	f000 f95a 	bl	800588c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e6:	609a      	str	r2, [r3, #8]
      break;
 80055e8:	e03c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f6:	461a      	mov	r2, r3
 80055f8:	f000 f8ce 	bl	8005798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2150      	movs	r1, #80	; 0x50
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f927 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8005608:	e02c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005616:	461a      	mov	r2, r3
 8005618:	f000 f8ed 	bl	80057f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2160      	movs	r1, #96	; 0x60
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f917 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8005628:	e01c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	461a      	mov	r2, r3
 8005638:	f000 f8ae 	bl	8005798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2140      	movs	r1, #64	; 0x40
 8005642:	4618      	mov	r0, r3
 8005644:	f000 f907 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8005648:	e00c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f000 f8fe 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 800565a:	e003      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      break;
 8005660:	e000      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a2a      	ldr	r2, [pc, #168]	; (800578c <TIM_Base_SetConfig+0xbc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_Base_SetConfig+0x20>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ee:	d108      	bne.n	8005702 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a21      	ldr	r2, [pc, #132]	; (800578c <TIM_Base_SetConfig+0xbc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00b      	beq.n	8005722 <TIM_Base_SetConfig+0x52>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005710:	d007      	beq.n	8005722 <TIM_Base_SetConfig+0x52>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <TIM_Base_SetConfig+0xc0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_Base_SetConfig+0x52>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <TIM_Base_SetConfig+0xc4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d108      	bne.n	8005734 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a0c      	ldr	r2, [pc, #48]	; (800578c <TIM_Base_SetConfig+0xbc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d007      	beq.n	8005770 <TIM_Base_SetConfig+0xa0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a0b      	ldr	r2, [pc, #44]	; (8005790 <TIM_Base_SetConfig+0xc0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_Base_SetConfig+0xa0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <TIM_Base_SetConfig+0xc4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d103      	bne.n	8005778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	615a      	str	r2, [r3, #20]
}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400

08005798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f023 0201 	bic.w	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 030a 	bic.w	r3, r3, #10
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f023 0210 	bic.w	r2, r3, #16
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	031b      	lsls	r3, r3, #12
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	f043 0307 	orr.w	r3, r3, #7
 8005878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	021a      	lsls	r2, r3, #8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e04f      	b.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a21      	ldr	r2, [pc, #132]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a14      	ldr	r2, [pc, #80]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d004      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a10      	ldr	r2, [pc, #64]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10c      	bne.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4313      	orrs	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40014000 	.word	0x40014000

08005998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e040      	b.n	8005a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc f96c 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb0c 	bl	8006038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f8af 	bl	8005b84 <UART_SetConfig>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e01b      	b.n	8005a68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb8b 	bl	800617c <UART_CheckIdleState>
 8005a66:	4603      	mov	r3, r0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08a      	sub	sp, #40	; 0x28
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d178      	bne.n	8005b7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_UART_Transmit+0x24>
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e071      	b.n	8005b7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aa6:	f7fc fb1f 	bl	80020e8 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac4:	d108      	bne.n	8005ad8 <HAL_UART_Transmit+0x68>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e003      	b.n	8005ae0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ae0:	e030      	b.n	8005b44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fbed 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e03c      	b.n	8005b7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10b      	bne.n	8005b20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	881a      	ldrh	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b14:	b292      	uxth	r2, r2
 8005b16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e008      	b.n	8005b32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	b292      	uxth	r2, r2
 8005b2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1c8      	bne.n	8005ae2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2200      	movs	r2, #0
 8005b58:	2140      	movs	r1, #64	; 0x40
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fbb6 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e005      	b.n	8005b7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b88:	b08a      	sub	sp, #40	; 0x28
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b9e      	ldr	r3, [pc, #632]	; (8005e2c <UART_SetConfig+0x2a8>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a93      	ldr	r2, [pc, #588]	; (8005e30 <UART_SetConfig+0x2ac>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bec:	4313      	orrs	r3, r2
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c00:	430a      	orrs	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a8a      	ldr	r2, [pc, #552]	; (8005e34 <UART_SetConfig+0x2b0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d126      	bne.n	8005c5c <UART_SetConfig+0xd8>
 8005c0e:	4b8a      	ldr	r3, [pc, #552]	; (8005e38 <UART_SetConfig+0x2b4>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d81b      	bhi.n	8005c54 <UART_SetConfig+0xd0>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <UART_SetConfig+0xa0>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c45 	.word	0x08005c45
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c4d 	.word	0x08005c4d
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3a:	e0ab      	b.n	8005d94 <UART_SetConfig+0x210>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c42:	e0a7      	b.n	8005d94 <UART_SetConfig+0x210>
 8005c44:	2304      	movs	r3, #4
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4a:	e0a3      	b.n	8005d94 <UART_SetConfig+0x210>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c52:	e09f      	b.n	8005d94 <UART_SetConfig+0x210>
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5a:	e09b      	b.n	8005d94 <UART_SetConfig+0x210>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a76      	ldr	r2, [pc, #472]	; (8005e3c <UART_SetConfig+0x2b8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d138      	bne.n	8005cd8 <UART_SetConfig+0x154>
 8005c66:	4b74      	ldr	r3, [pc, #464]	; (8005e38 <UART_SetConfig+0x2b4>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f003 030c 	and.w	r3, r3, #12
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d82d      	bhi.n	8005cd0 <UART_SetConfig+0x14c>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0xf8>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005cb1 	.word	0x08005cb1
 8005c80:	08005cd1 	.word	0x08005cd1
 8005c84:	08005cd1 	.word	0x08005cd1
 8005c88:	08005cd1 	.word	0x08005cd1
 8005c8c:	08005cc1 	.word	0x08005cc1
 8005c90:	08005cd1 	.word	0x08005cd1
 8005c94:	08005cd1 	.word	0x08005cd1
 8005c98:	08005cd1 	.word	0x08005cd1
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005cd1 	.word	0x08005cd1
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb6:	e06d      	b.n	8005d94 <UART_SetConfig+0x210>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbe:	e069      	b.n	8005d94 <UART_SetConfig+0x210>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc6:	e065      	b.n	8005d94 <UART_SetConfig+0x210>
 8005cc8:	2308      	movs	r3, #8
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cce:	e061      	b.n	8005d94 <UART_SetConfig+0x210>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cd6:	e05d      	b.n	8005d94 <UART_SetConfig+0x210>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a58      	ldr	r2, [pc, #352]	; (8005e40 <UART_SetConfig+0x2bc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d125      	bne.n	8005d2e <UART_SetConfig+0x1aa>
 8005ce2:	4b55      	ldr	r3, [pc, #340]	; (8005e38 <UART_SetConfig+0x2b4>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d016      	beq.n	8005d1e <UART_SetConfig+0x19a>
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d818      	bhi.n	8005d26 <UART_SetConfig+0x1a2>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d00a      	beq.n	8005d0e <UART_SetConfig+0x18a>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d814      	bhi.n	8005d26 <UART_SetConfig+0x1a2>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <UART_SetConfig+0x182>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d008      	beq.n	8005d16 <UART_SetConfig+0x192>
 8005d04:	e00f      	b.n	8005d26 <UART_SetConfig+0x1a2>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0c:	e042      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d14:	e03e      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d16:	2304      	movs	r3, #4
 8005d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1c:	e03a      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d1e:	2308      	movs	r3, #8
 8005d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d24:	e036      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d26:	2310      	movs	r3, #16
 8005d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2c:	e032      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3f      	ldr	r2, [pc, #252]	; (8005e30 <UART_SetConfig+0x2ac>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d12a      	bne.n	8005d8e <UART_SetConfig+0x20a>
 8005d38:	4b3f      	ldr	r3, [pc, #252]	; (8005e38 <UART_SetConfig+0x2b4>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d46:	d01a      	beq.n	8005d7e <UART_SetConfig+0x1fa>
 8005d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d4c:	d81b      	bhi.n	8005d86 <UART_SetConfig+0x202>
 8005d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d52:	d00c      	beq.n	8005d6e <UART_SetConfig+0x1ea>
 8005d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d58:	d815      	bhi.n	8005d86 <UART_SetConfig+0x202>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <UART_SetConfig+0x1e2>
 8005d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d62:	d008      	beq.n	8005d76 <UART_SetConfig+0x1f2>
 8005d64:	e00f      	b.n	8005d86 <UART_SetConfig+0x202>
 8005d66:	2300      	movs	r3, #0
 8005d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6c:	e012      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d74:	e00e      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d76:	2304      	movs	r3, #4
 8005d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7c:	e00a      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d84:	e006      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d86:	2310      	movs	r3, #16
 8005d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8c:	e002      	b.n	8005d94 <UART_SetConfig+0x210>
 8005d8e:	2310      	movs	r3, #16
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <UART_SetConfig+0x2ac>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	f040 808a 	bne.w	8005eb4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d824      	bhi.n	8005df2 <UART_SetConfig+0x26e>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x22c>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005de3 	.word	0x08005de3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005df3 	.word	0x08005df3
 8005dcc:	08005df3 	.word	0x08005df3
 8005dd0:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f7fe fe14 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	61f8      	str	r0, [r7, #28]
        break;
 8005dda:	e010      	b.n	8005dfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <UART_SetConfig+0x2c0>)
 8005dde:	61fb      	str	r3, [r7, #28]
        break;
 8005de0:	e00d      	b.n	8005dfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fe fd75 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8005de6:	61f8      	str	r0, [r7, #28]
        break;
 8005de8:	e009      	b.n	8005dfe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	61fb      	str	r3, [r7, #28]
        break;
 8005df0:	e005      	b.n	8005dfe <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005dfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8109 	beq.w	8006018 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	4413      	add	r3, r2
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d305      	bcc.n	8005e22 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d912      	bls.n	8005e48 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e28:	e0f6      	b.n	8006018 <UART_SetConfig+0x494>
 8005e2a:	bf00      	nop
 8005e2c:	efff69f3 	.word	0xefff69f3
 8005e30:	40008000 	.word	0x40008000
 8005e34:	40013800 	.word	0x40013800
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40004400 	.word	0x40004400
 8005e40:	40004800 	.word	0x40004800
 8005e44:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	461c      	mov	r4, r3
 8005e4e:	4615      	mov	r5, r2
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	022b      	lsls	r3, r5, #8
 8005e5a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e5e:	0222      	lsls	r2, r4, #8
 8005e60:	68f9      	ldr	r1, [r7, #12]
 8005e62:	6849      	ldr	r1, [r1, #4]
 8005e64:	0849      	lsrs	r1, r1, #1
 8005e66:	2000      	movs	r0, #0
 8005e68:	4688      	mov	r8, r1
 8005e6a:	4681      	mov	r9, r0
 8005e6c:	eb12 0a08 	adds.w	sl, r2, r8
 8005e70:	eb43 0b09 	adc.w	fp, r3, r9
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e82:	4650      	mov	r0, sl
 8005e84:	4659      	mov	r1, fp
 8005e86:	f7fa feaf 	bl	8000be8 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4613      	mov	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e98:	d308      	bcc.n	8005eac <UART_SetConfig+0x328>
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea0:	d204      	bcs.n	8005eac <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	e0b5      	b.n	8006018 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eb2:	e0b1      	b.n	8006018 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d15d      	bne.n	8005f7a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d827      	bhi.n	8005f16 <UART_SetConfig+0x392>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <UART_SetConfig+0x348>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	08005f17 	.word	0x08005f17
 8005edc:	08005f07 	.word	0x08005f07
 8005ee0:	08005f17 	.word	0x08005f17
 8005ee4:	08005f17 	.word	0x08005f17
 8005ee8:	08005f17 	.word	0x08005f17
 8005eec:	08005f0f 	.word	0x08005f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef0:	f7fe fd86 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8005ef4:	61f8      	str	r0, [r7, #28]
        break;
 8005ef6:	e014      	b.n	8005f22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef8:	f7fe fd98 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 8005efc:	61f8      	str	r0, [r7, #28]
        break;
 8005efe:	e010      	b.n	8005f22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f00:	4b4c      	ldr	r3, [pc, #304]	; (8006034 <UART_SetConfig+0x4b0>)
 8005f02:	61fb      	str	r3, [r7, #28]
        break;
 8005f04:	e00d      	b.n	8005f22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f06:	f7fe fce3 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8005f0a:	61f8      	str	r0, [r7, #28]
        break;
 8005f0c:	e009      	b.n	8005f22 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f12:	61fb      	str	r3, [r7, #28]
        break;
 8005f14:	e005      	b.n	8005f22 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d077      	beq.n	8006018 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	005a      	lsls	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	441a      	add	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b0f      	cmp	r3, #15
 8005f42:	d916      	bls.n	8005f72 <UART_SetConfig+0x3ee>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4a:	d212      	bcs.n	8005f72 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f023 030f 	bic.w	r3, r3, #15
 8005f54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	8afb      	ldrh	r3, [r7, #22]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	8afa      	ldrh	r2, [r7, #22]
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	e052      	b.n	8006018 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f78:	e04e      	b.n	8006018 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d827      	bhi.n	8005fd2 <UART_SetConfig+0x44e>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x404>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	08005fd3 	.word	0x08005fd3
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fd3 	.word	0x08005fd3
 8005fa0:	08005fd3 	.word	0x08005fd3
 8005fa4:	08005fd3 	.word	0x08005fd3
 8005fa8:	08005fcb 	.word	0x08005fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7fe fd28 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8005fb0:	61f8      	str	r0, [r7, #28]
        break;
 8005fb2:	e014      	b.n	8005fde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb4:	f7fe fd3a 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 8005fb8:	61f8      	str	r0, [r7, #28]
        break;
 8005fba:	e010      	b.n	8005fde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fbc:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <UART_SetConfig+0x4b0>)
 8005fbe:	61fb      	str	r3, [r7, #28]
        break;
 8005fc0:	e00d      	b.n	8005fde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7fe fc85 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8005fc6:	61f8      	str	r0, [r7, #28]
        break;
 8005fc8:	e009      	b.n	8005fde <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fce:	61fb      	str	r3, [r7, #28]
        break;
 8005fd0:	e005      	b.n	8005fde <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d019      	beq.n	8006018 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	085a      	lsrs	r2, r3, #1
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b0f      	cmp	r3, #15
 8005ffc:	d909      	bls.n	8006012 <UART_SetConfig+0x48e>
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006004:	d205      	bcs.n	8006012 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60da      	str	r2, [r3, #12]
 8006010:	e002      	b.n	8006018 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006024:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006028:	4618      	mov	r0, r3
 800602a:	3728      	adds	r7, #40	; 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006032:	bf00      	nop
 8006034:	00f42400 	.word	0x00f42400

08006038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01a      	beq.n	800614e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d10a      	bne.n	800614e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b098      	sub	sp, #96	; 0x60
 8006180:	af02      	add	r7, sp, #8
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800618c:	f7fb ffac 	bl	80020e8 <HAL_GetTick>
 8006190:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b08      	cmp	r3, #8
 800619e:	d12e      	bne.n	80061fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f88c 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d021      	beq.n	80061fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ce:	653b      	str	r3, [r7, #80]	; 0x50
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
 80061da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e6      	bne.n	80061ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e062      	b.n	80062c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d149      	bne.n	80062a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006214:	2200      	movs	r2, #0
 8006216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f856 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d03c      	beq.n	80062a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	623b      	str	r3, [r7, #32]
   return(result);
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800623a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006244:	633b      	str	r3, [r7, #48]	; 0x30
 8006246:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800624a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e6      	bne.n	8006226 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3308      	adds	r3, #8
 800625e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	60fb      	str	r3, [r7, #12]
   return(result);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3308      	adds	r3, #8
 8006276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006278:	61fa      	str	r2, [r7, #28]
 800627a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	617b      	str	r3, [r7, #20]
   return(result);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e5      	bne.n	8006258 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e011      	b.n	80062c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3758      	adds	r7, #88	; 0x58
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062dc:	e049      	b.n	8006372 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e4:	d045      	beq.n	8006372 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fb feff 	bl	80020e8 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <UART_WaitOnFlagUntilTimeout+0x30>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e048      	b.n	8006392 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d031      	beq.n	8006372 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b08      	cmp	r3, #8
 800631a:	d110      	bne.n	800633e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2208      	movs	r2, #8
 8006322:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f838 	bl	800639a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2208      	movs	r2, #8
 800632e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e029      	b.n	8006392 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634c:	d111      	bne.n	8006372 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f81e 	bl	800639a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e00f      	b.n	8006392 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4013      	ands	r3, r2
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	bf0c      	ite	eq
 8006382:	2301      	moveq	r3, #1
 8006384:	2300      	movne	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	429a      	cmp	r2, r3
 800638e:	d0a6      	beq.n	80062de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800639a:	b480      	push	{r7}
 800639c:	b095      	sub	sp, #84	; 0x54
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c0:	643b      	str	r3, [r7, #64]	; 0x40
 80063c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e5      	bne.n	80063d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640c:	2b01      	cmp	r3, #1
 800640e:	d118      	bne.n	8006442 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	60bb      	str	r3, [r7, #8]
   return(result);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f023 0310 	bic.w	r3, r3, #16
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	613b      	str	r3, [r7, #16]
   return(result);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e6      	bne.n	8006410 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006456:	bf00      	nop
 8006458:	3754      	adds	r7, #84	; 0x54
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <arm_cfft_radix8by2_f32>:
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006468:	ed2d 8b08 	vpush	{d8-d11}
 800646c:	4607      	mov	r7, r0
 800646e:	4608      	mov	r0, r1
 8006470:	f8b7 c000 	ldrh.w	ip, [r7]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800647a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800647e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006482:	f000 80b0 	beq.w	80065e6 <arm_cfft_radix8by2_f32+0x182>
 8006486:	008c      	lsls	r4, r1, #2
 8006488:	3410      	adds	r4, #16
 800648a:	f100 0310 	add.w	r3, r0, #16
 800648e:	1906      	adds	r6, r0, r4
 8006490:	3210      	adds	r2, #16
 8006492:	4444      	add	r4, r8
 8006494:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006498:	f108 0510 	add.w	r5, r8, #16
 800649c:	ed15 2a04 	vldr	s4, [r5, #-16]
 80064a0:	ed55 2a03 	vldr	s5, [r5, #-12]
 80064a4:	ed54 4a04 	vldr	s9, [r4, #-16]
 80064a8:	ed14 4a03 	vldr	s8, [r4, #-12]
 80064ac:	ed14 6a02 	vldr	s12, [r4, #-8]
 80064b0:	ed54 5a01 	vldr	s11, [r4, #-4]
 80064b4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80064b8:	ed15 0a02 	vldr	s0, [r5, #-8]
 80064bc:	ed55 0a01 	vldr	s1, [r5, #-4]
 80064c0:	ed56 6a04 	vldr	s13, [r6, #-16]
 80064c4:	ed16 3a03 	vldr	s6, [r6, #-12]
 80064c8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80064cc:	ed13 5a02 	vldr	s10, [r3, #-8]
 80064d0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80064d4:	ed16 1a02 	vldr	s2, [r6, #-8]
 80064d8:	ed56 1a01 	vldr	s3, [r6, #-4]
 80064dc:	ee73 ba82 	vadd.f32	s23, s7, s4
 80064e0:	ee37 ba22 	vadd.f32	s22, s14, s5
 80064e4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80064e8:	ee33 9a04 	vadd.f32	s18, s6, s8
 80064ec:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80064f0:	ee75 aa00 	vadd.f32	s21, s10, s0
 80064f4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80064f8:	ee71 8a06 	vadd.f32	s17, s2, s12
 80064fc:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006500:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006504:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006508:	ed03 aa01 	vstr	s20, [r3, #-4]
 800650c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006510:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006514:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006518:	ed46 8a02 	vstr	s17, [r6, #-8]
 800651c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006520:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006524:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006528:	ed52 6a03 	vldr	s13, [r2, #-12]
 800652c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006530:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006534:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006538:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800653c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006540:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006544:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006548:	ee27 7a03 	vmul.f32	s14, s14, s6
 800654c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006550:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006554:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006558:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800655c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006560:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006564:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006568:	ed05 3a04 	vstr	s6, [r5, #-16]
 800656c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006570:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006574:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006578:	ee76 6a41 	vsub.f32	s13, s12, s2
 800657c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006580:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006584:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006588:	ed52 5a02 	vldr	s11, [r2, #-8]
 800658c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006590:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006594:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006598:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800659c:	ee25 5a07 	vmul.f32	s10, s10, s14
 80065a0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80065a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80065a8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80065ac:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80065b0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80065b4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80065b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80065bc:	3310      	adds	r3, #16
 80065be:	4563      	cmp	r3, ip
 80065c0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80065c4:	f106 0610 	add.w	r6, r6, #16
 80065c8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80065cc:	f102 0210 	add.w	r2, r2, #16
 80065d0:	ed04 6a02 	vstr	s12, [r4, #-8]
 80065d4:	ed04 7a01 	vstr	s14, [r4, #-4]
 80065d8:	f105 0510 	add.w	r5, r5, #16
 80065dc:	f104 0410 	add.w	r4, r4, #16
 80065e0:	f47f af5c 	bne.w	800649c <arm_cfft_radix8by2_f32+0x38>
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	b28c      	uxth	r4, r1
 80065e8:	4621      	mov	r1, r4
 80065ea:	2302      	movs	r3, #2
 80065ec:	f000 fc1c 	bl	8006e28 <arm_radix8_butterfly_f32>
 80065f0:	ecbd 8b08 	vpop	{d8-d11}
 80065f4:	4621      	mov	r1, r4
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4640      	mov	r0, r8
 80065fa:	2302      	movs	r3, #2
 80065fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006600:	f000 bc12 	b.w	8006e28 <arm_radix8_butterfly_f32>

08006604 <arm_cfft_radix8by4_f32>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	ed2d 8b0a 	vpush	{d8-d12}
 800660c:	b08d      	sub	sp, #52	; 0x34
 800660e:	460d      	mov	r5, r1
 8006610:	910b      	str	r1, [sp, #44]	; 0x2c
 8006612:	8801      	ldrh	r1, [r0, #0]
 8006614:	6842      	ldr	r2, [r0, #4]
 8006616:	900a      	str	r0, [sp, #40]	; 0x28
 8006618:	0849      	lsrs	r1, r1, #1
 800661a:	008b      	lsls	r3, r1, #2
 800661c:	18ee      	adds	r6, r5, r3
 800661e:	18f0      	adds	r0, r6, r3
 8006620:	edd0 5a00 	vldr	s11, [r0]
 8006624:	edd5 7a00 	vldr	s15, [r5]
 8006628:	ed96 7a00 	vldr	s14, [r6]
 800662c:	edd0 3a01 	vldr	s7, [r0, #4]
 8006630:	ed96 4a01 	vldr	s8, [r6, #4]
 8006634:	ed95 5a01 	vldr	s10, [r5, #4]
 8006638:	9008      	str	r0, [sp, #32]
 800663a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800663e:	18c7      	adds	r7, r0, r3
 8006640:	edd7 4a00 	vldr	s9, [r7]
 8006644:	ed97 3a01 	vldr	s6, [r7, #4]
 8006648:	9701      	str	r7, [sp, #4]
 800664a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800664e:	462c      	mov	r4, r5
 8006650:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006654:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006658:	ee16 ca90 	vmov	ip, s13
 800665c:	f844 cb08 	str.w	ip, [r4], #8
 8006660:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006664:	edd6 5a01 	vldr	s11, [r6, #4]
 8006668:	edd7 2a01 	vldr	s5, [r7, #4]
 800666c:	9404      	str	r4, [sp, #16]
 800666e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006672:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006676:	ee36 6a47 	vsub.f32	s12, s12, s14
 800667a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800667e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006682:	0849      	lsrs	r1, r1, #1
 8006684:	f102 0e08 	add.w	lr, r2, #8
 8006688:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800668c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006690:	9109      	str	r1, [sp, #36]	; 0x24
 8006692:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006696:	f1a1 0902 	sub.w	r9, r1, #2
 800669a:	f8cd e00c 	str.w	lr, [sp, #12]
 800669e:	4631      	mov	r1, r6
 80066a0:	ee13 ea90 	vmov	lr, s7
 80066a4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80066a8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80066ac:	4604      	mov	r4, r0
 80066ae:	edc5 5a01 	vstr	s11, [r5, #4]
 80066b2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80066b6:	f841 eb08 	str.w	lr, [r1], #8
 80066ba:	ee34 5a24 	vadd.f32	s10, s8, s9
 80066be:	ee16 ea10 	vmov	lr, s12
 80066c2:	ed86 5a01 	vstr	s10, [r6, #4]
 80066c6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80066ca:	f844 eb08 	str.w	lr, [r4], #8
 80066ce:	ee77 7a83 	vadd.f32	s15, s15, s6
 80066d2:	edc0 6a01 	vstr	s13, [r0, #4]
 80066d6:	9405      	str	r4, [sp, #20]
 80066d8:	4604      	mov	r4, r0
 80066da:	ee17 0a90 	vmov	r0, s15
 80066de:	9106      	str	r1, [sp, #24]
 80066e0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80066e4:	f102 0110 	add.w	r1, r2, #16
 80066e8:	46bc      	mov	ip, r7
 80066ea:	9100      	str	r1, [sp, #0]
 80066ec:	f847 0b08 	str.w	r0, [r7], #8
 80066f0:	f102 0118 	add.w	r1, r2, #24
 80066f4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80066f8:	9102      	str	r1, [sp, #8]
 80066fa:	ed8c 7a01 	vstr	s14, [ip, #4]
 80066fe:	9007      	str	r0, [sp, #28]
 8006700:	f000 8134 	beq.w	800696c <arm_cfft_radix8by4_f32+0x368>
 8006704:	f102 0920 	add.w	r9, r2, #32
 8006708:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800670c:	9a01      	ldr	r2, [sp, #4]
 800670e:	f8dd a000 	ldr.w	sl, [sp]
 8006712:	3b0c      	subs	r3, #12
 8006714:	4683      	mov	fp, r0
 8006716:	4463      	add	r3, ip
 8006718:	f105 0e10 	add.w	lr, r5, #16
 800671c:	f1a4 010c 	sub.w	r1, r4, #12
 8006720:	f104 0510 	add.w	r5, r4, #16
 8006724:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006728:	f1a2 040c 	sub.w	r4, r2, #12
 800672c:	f106 0010 	add.w	r0, r6, #16
 8006730:	3210      	adds	r2, #16
 8006732:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006736:	ed55 5a02 	vldr	s11, [r5, #-8]
 800673a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800673e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006742:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006746:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800674a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800674e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006752:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006756:	ee30 6a26 	vadd.f32	s12, s0, s13
 800675a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800675e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006762:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006766:	ee75 5a65 	vsub.f32	s11, s10, s11
 800676a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800676e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006772:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006776:	ee36 7a07 	vadd.f32	s14, s12, s14
 800677a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800677e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006782:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006786:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800678a:	ed94 7a02 	vldr	s14, [r4, #8]
 800678e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006792:	ed91 ba02 	vldr	s22, [r1, #8]
 8006796:	edd3 9a02 	vldr	s19, [r3, #8]
 800679a:	edd4 2a01 	vldr	s5, [r4, #4]
 800679e:	ed9c 9a01 	vldr	s18, [ip, #4]
 80067a2:	ed93 5a01 	vldr	s10, [r3, #4]
 80067a6:	edd1 0a01 	vldr	s1, [r1, #4]
 80067aa:	ee72 6a07 	vadd.f32	s13, s4, s14
 80067ae:	ee32 2a47 	vsub.f32	s4, s4, s14
 80067b2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80067b6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80067ba:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80067be:	ee79 2a62 	vsub.f32	s5, s18, s5
 80067c2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80067c6:	ed91 7a01 	vldr	s14, [r1, #4]
 80067ca:	edd3 8a01 	vldr	s17, [r3, #4]
 80067ce:	ee34 7a87 	vadd.f32	s14, s9, s14
 80067d2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80067d6:	ee37 7a28 	vadd.f32	s14, s14, s17
 80067da:	ee32 9a60 	vsub.f32	s18, s4, s1
 80067de:	ed8c 7a01 	vstr	s14, [ip, #4]
 80067e2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80067e6:	ed1a aa02 	vldr	s20, [sl, #-8]
 80067ea:	ee73 8a22 	vadd.f32	s17, s6, s5
 80067ee:	ee39 9a05 	vadd.f32	s18, s18, s10
 80067f2:	ee7a aac1 	vsub.f32	s21, s21, s2
 80067f6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80067fa:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80067fe:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006802:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006806:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800680a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800680e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006812:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006816:	ee68 8a87 	vmul.f32	s17, s17, s14
 800681a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800681e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006822:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006826:	ee3b aaca 	vsub.f32	s20, s23, s20
 800682a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800682e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006832:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006836:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800683a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800683e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006842:	edc1 8a01 	vstr	s17, [r1, #4]
 8006846:	ed81 aa02 	vstr	s20, [r1, #8]
 800684a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800684e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006852:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006856:	ed59 6a03 	vldr	s13, [r9, #-12]
 800685a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800685e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006862:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006866:	ee66 9a26 	vmul.f32	s19, s12, s13
 800686a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800686e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006872:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006876:	ee27 7a26 	vmul.f32	s14, s14, s13
 800687a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800687e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006882:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006886:	ee37 7a64 	vsub.f32	s14, s14, s9
 800688a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800688e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006892:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006896:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800689a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800689e:	ed45 3a02 	vstr	s7, [r5, #-8]
 80068a2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80068a6:	ed84 7a01 	vstr	s14, [r4, #4]
 80068aa:	ed84 4a02 	vstr	s8, [r4, #8]
 80068ae:	ee35 6a81 	vadd.f32	s12, s11, s2
 80068b2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80068b6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80068ba:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80068be:	ee33 3a62 	vsub.f32	s6, s6, s5
 80068c2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80068c6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80068ca:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80068ce:	ee26 5a25 	vmul.f32	s10, s12, s11
 80068d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80068d6:	ee26 6a26 	vmul.f32	s12, s12, s13
 80068da:	ee27 7a25 	vmul.f32	s14, s14, s11
 80068de:	ee63 6a26 	vmul.f32	s13, s6, s13
 80068e2:	ee23 3a25 	vmul.f32	s6, s6, s11
 80068e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80068ea:	ee75 5a24 	vadd.f32	s11, s10, s9
 80068ee:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80068f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80068f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80068fa:	ed42 5a02 	vstr	s11, [r2, #-8]
 80068fe:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006902:	f10e 0e08 	add.w	lr, lr, #8
 8006906:	ed83 3a02 	vstr	s6, [r3, #8]
 800690a:	ed83 7a01 	vstr	s14, [r3, #4]
 800690e:	f1ac 0c08 	sub.w	ip, ip, #8
 8006912:	f10a 0a08 	add.w	sl, sl, #8
 8006916:	f100 0008 	add.w	r0, r0, #8
 800691a:	f1a1 0108 	sub.w	r1, r1, #8
 800691e:	f109 0910 	add.w	r9, r9, #16
 8006922:	f105 0508 	add.w	r5, r5, #8
 8006926:	f1a4 0408 	sub.w	r4, r4, #8
 800692a:	f108 0818 	add.w	r8, r8, #24
 800692e:	f102 0208 	add.w	r2, r2, #8
 8006932:	f1a3 0308 	sub.w	r3, r3, #8
 8006936:	f47f aefc 	bne.w	8006732 <arm_cfft_radix8by4_f32+0x12e>
 800693a:	9907      	ldr	r1, [sp, #28]
 800693c:	9800      	ldr	r0, [sp, #0]
 800693e:	00cb      	lsls	r3, r1, #3
 8006940:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006944:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006948:	9100      	str	r1, [sp, #0]
 800694a:	9904      	ldr	r1, [sp, #16]
 800694c:	4419      	add	r1, r3
 800694e:	9104      	str	r1, [sp, #16]
 8006950:	9903      	ldr	r1, [sp, #12]
 8006952:	4419      	add	r1, r3
 8006954:	9103      	str	r1, [sp, #12]
 8006956:	9906      	ldr	r1, [sp, #24]
 8006958:	4419      	add	r1, r3
 800695a:	9106      	str	r1, [sp, #24]
 800695c:	9905      	ldr	r1, [sp, #20]
 800695e:	441f      	add	r7, r3
 8006960:	4419      	add	r1, r3
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	9105      	str	r1, [sp, #20]
 8006966:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800696a:	9302      	str	r3, [sp, #8]
 800696c:	9904      	ldr	r1, [sp, #16]
 800696e:	9805      	ldr	r0, [sp, #20]
 8006970:	ed91 4a00 	vldr	s8, [r1]
 8006974:	edd0 6a00 	vldr	s13, [r0]
 8006978:	9b06      	ldr	r3, [sp, #24]
 800697a:	ed97 3a00 	vldr	s6, [r7]
 800697e:	edd3 7a00 	vldr	s15, [r3]
 8006982:	edd0 4a01 	vldr	s9, [r0, #4]
 8006986:	edd1 3a01 	vldr	s7, [r1, #4]
 800698a:	ed97 2a01 	vldr	s4, [r7, #4]
 800698e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006992:	9a03      	ldr	r2, [sp, #12]
 8006994:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8006998:	ee34 6a26 	vadd.f32	s12, s8, s13
 800699c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80069a0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80069a4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80069a8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80069ac:	ee74 6a66 	vsub.f32	s13, s8, s13
 80069b0:	ed81 5a00 	vstr	s10, [r1]
 80069b4:	ed93 5a01 	vldr	s10, [r3, #4]
 80069b8:	edd7 4a01 	vldr	s9, [r7, #4]
 80069bc:	ee35 5a85 	vadd.f32	s10, s11, s10
 80069c0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80069c4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80069c8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80069cc:	ed81 5a01 	vstr	s10, [r1, #4]
 80069d0:	edd2 1a00 	vldr	s3, [r2]
 80069d4:	edd2 2a01 	vldr	s5, [r2, #4]
 80069d8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80069dc:	ee34 4a42 	vsub.f32	s8, s8, s4
 80069e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80069e4:	ee64 4a21 	vmul.f32	s9, s8, s3
 80069e8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80069ec:	ee65 2a22 	vmul.f32	s5, s10, s5
 80069f0:	ee25 5a21 	vmul.f32	s10, s10, s3
 80069f4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80069f8:	ee35 5a44 	vsub.f32	s10, s10, s8
 80069fc:	edc3 2a00 	vstr	s5, [r3]
 8006a00:	ed83 5a01 	vstr	s10, [r3, #4]
 8006a04:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006a08:	9b00      	ldr	r3, [sp, #0]
 8006a0a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006a0e:	ed93 4a01 	vldr	s8, [r3, #4]
 8006a12:	ed93 5a00 	vldr	s10, [r3]
 8006a16:	9b02      	ldr	r3, [sp, #8]
 8006a18:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006a1c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006a20:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006a24:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006a28:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006a2c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006a30:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006a34:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006a38:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006a3c:	ed80 6a01 	vstr	s12, [r0, #4]
 8006a40:	edc0 5a00 	vstr	s11, [r0]
 8006a44:	edd3 5a01 	vldr	s11, [r3, #4]
 8006a48:	edd3 6a00 	vldr	s13, [r3]
 8006a4c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006a50:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006a54:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006a58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006a5c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006a60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006a64:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006a68:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006a6c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006a70:	edc7 7a00 	vstr	s15, [r7]
 8006a74:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8006a78:	4621      	mov	r1, r4
 8006a7a:	686a      	ldr	r2, [r5, #4]
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	f000 f9d3 	bl	8006e28 <arm_radix8_butterfly_f32>
 8006a82:	4630      	mov	r0, r6
 8006a84:	4621      	mov	r1, r4
 8006a86:	686a      	ldr	r2, [r5, #4]
 8006a88:	2304      	movs	r3, #4
 8006a8a:	f000 f9cd 	bl	8006e28 <arm_radix8_butterfly_f32>
 8006a8e:	9808      	ldr	r0, [sp, #32]
 8006a90:	686a      	ldr	r2, [r5, #4]
 8006a92:	4621      	mov	r1, r4
 8006a94:	2304      	movs	r3, #4
 8006a96:	f000 f9c7 	bl	8006e28 <arm_radix8_butterfly_f32>
 8006a9a:	686a      	ldr	r2, [r5, #4]
 8006a9c:	9801      	ldr	r0, [sp, #4]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	b00d      	add	sp, #52	; 0x34
 8006aa4:	ecbd 8b0a 	vpop	{d8-d12}
 8006aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	f000 b9bc 	b.w	8006e28 <arm_radix8_butterfly_f32>

08006ab0 <arm_cfft_f32>:
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab4:	2a01      	cmp	r2, #1
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	4617      	mov	r7, r2
 8006aba:	460c      	mov	r4, r1
 8006abc:	4698      	mov	r8, r3
 8006abe:	8805      	ldrh	r5, [r0, #0]
 8006ac0:	d056      	beq.n	8006b70 <arm_cfft_f32+0xc0>
 8006ac2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006ac6:	d063      	beq.n	8006b90 <arm_cfft_f32+0xe0>
 8006ac8:	d916      	bls.n	8006af8 <arm_cfft_f32+0x48>
 8006aca:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006ace:	d01a      	beq.n	8006b06 <arm_cfft_f32+0x56>
 8006ad0:	d947      	bls.n	8006b62 <arm_cfft_f32+0xb2>
 8006ad2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006ad6:	d05b      	beq.n	8006b90 <arm_cfft_f32+0xe0>
 8006ad8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006adc:	d105      	bne.n	8006aea <arm_cfft_f32+0x3a>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	6872      	ldr	r2, [r6, #4]
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 f99f 	bl	8006e28 <arm_radix8_butterfly_f32>
 8006aea:	f1b8 0f00 	cmp.w	r8, #0
 8006aee:	d111      	bne.n	8006b14 <arm_cfft_f32+0x64>
 8006af0:	2f01      	cmp	r7, #1
 8006af2:	d016      	beq.n	8006b22 <arm_cfft_f32+0x72>
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	2d20      	cmp	r5, #32
 8006afa:	d049      	beq.n	8006b90 <arm_cfft_f32+0xe0>
 8006afc:	d935      	bls.n	8006b6a <arm_cfft_f32+0xba>
 8006afe:	2d40      	cmp	r5, #64	; 0x40
 8006b00:	d0ed      	beq.n	8006ade <arm_cfft_f32+0x2e>
 8006b02:	2d80      	cmp	r5, #128	; 0x80
 8006b04:	d1f1      	bne.n	8006aea <arm_cfft_f32+0x3a>
 8006b06:	4621      	mov	r1, r4
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff fcab 	bl	8006464 <arm_cfft_radix8by2_f32>
 8006b0e:	f1b8 0f00 	cmp.w	r8, #0
 8006b12:	d0ed      	beq.n	8006af0 <arm_cfft_f32+0x40>
 8006b14:	68b2      	ldr	r2, [r6, #8]
 8006b16:	89b1      	ldrh	r1, [r6, #12]
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 f841 	bl	8006ba0 <arm_bitreversal_32>
 8006b1e:	2f01      	cmp	r7, #1
 8006b20:	d1e8      	bne.n	8006af4 <arm_cfft_f32+0x44>
 8006b22:	ee07 5a90 	vmov	s15, r5
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	d0de      	beq.n	8006af4 <arm_cfft_f32+0x44>
 8006b36:	f104 0108 	add.w	r1, r4, #8
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	f101 0108 	add.w	r1, r1, #8
 8006b44:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006b48:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006b4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006b50:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006b54:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006b58:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006b5c:	d1ee      	bne.n	8006b3c <arm_cfft_f32+0x8c>
 8006b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b62:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006b66:	d0ba      	beq.n	8006ade <arm_cfft_f32+0x2e>
 8006b68:	e7bf      	b.n	8006aea <arm_cfft_f32+0x3a>
 8006b6a:	2d10      	cmp	r5, #16
 8006b6c:	d0cb      	beq.n	8006b06 <arm_cfft_f32+0x56>
 8006b6e:	e7bc      	b.n	8006aea <arm_cfft_f32+0x3a>
 8006b70:	b19d      	cbz	r5, 8006b9a <arm_cfft_f32+0xea>
 8006b72:	f101 030c 	add.w	r3, r1, #12
 8006b76:	2200      	movs	r2, #0
 8006b78:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006b7c:	3201      	adds	r2, #1
 8006b7e:	eef1 7a67 	vneg.f32	s15, s15
 8006b82:	4295      	cmp	r5, r2
 8006b84:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006b88:	f103 0308 	add.w	r3, r3, #8
 8006b8c:	d1f4      	bne.n	8006b78 <arm_cfft_f32+0xc8>
 8006b8e:	e798      	b.n	8006ac2 <arm_cfft_f32+0x12>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff fd36 	bl	8006604 <arm_cfft_radix8by4_f32>
 8006b98:	e7a7      	b.n	8006aea <arm_cfft_f32+0x3a>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0aa      	beq.n	8006af4 <arm_cfft_f32+0x44>
 8006b9e:	e7b9      	b.n	8006b14 <arm_cfft_f32+0x64>

08006ba0 <arm_bitreversal_32>:
 8006ba0:	b1e9      	cbz	r1, 8006bde <arm_bitreversal_32+0x3e>
 8006ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba4:	2500      	movs	r5, #0
 8006ba6:	f102 0e02 	add.w	lr, r2, #2
 8006baa:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006bae:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006bb2:	08a4      	lsrs	r4, r4, #2
 8006bb4:	089b      	lsrs	r3, r3, #2
 8006bb6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006bba:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006bbe:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006bc2:	00a6      	lsls	r6, r4, #2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	1d34      	adds	r4, r6, #4
 8006bce:	3502      	adds	r5, #2
 8006bd0:	58c6      	ldr	r6, [r0, r3]
 8006bd2:	5907      	ldr	r7, [r0, r4]
 8006bd4:	50c7      	str	r7, [r0, r3]
 8006bd6:	428d      	cmp	r5, r1
 8006bd8:	5106      	str	r6, [r0, r4]
 8006bda:	d3e6      	bcc.n	8006baa <arm_bitreversal_32+0xa>
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bde:	4770      	bx	lr

08006be0 <arm_cmplx_mag_f32>:
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	ed2d 8b02 	vpush	{d8}
 8006be8:	0897      	lsrs	r7, r2, #2
 8006bea:	b084      	sub	sp, #16
 8006bec:	d077      	beq.n	8006cde <arm_cmplx_mag_f32+0xfe>
 8006bee:	f04f 0800 	mov.w	r8, #0
 8006bf2:	f100 0420 	add.w	r4, r0, #32
 8006bf6:	f101 0510 	add.w	r5, r1, #16
 8006bfa:	463e      	mov	r6, r7
 8006bfc:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8006c00:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8006c04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c18:	f2c0 80c5 	blt.w	8006da6 <arm_cmplx_mag_f32+0x1c6>
 8006c1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c24:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006c28:	f100 80cb 	bmi.w	8006dc2 <arm_cmplx_mag_f32+0x1e2>
 8006c2c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006c30:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8006c34:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006c38:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4c:	f2c0 80a8 	blt.w	8006da0 <arm_cmplx_mag_f32+0x1c0>
 8006c50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c58:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006c5c:	f100 80a8 	bmi.w	8006db0 <arm_cmplx_mag_f32+0x1d0>
 8006c60:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006c64:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006c68:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006c6c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c80:	f2c0 808b 	blt.w	8006d9a <arm_cmplx_mag_f32+0x1ba>
 8006c84:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006c90:	f100 80a9 	bmi.w	8006de6 <arm_cmplx_mag_f32+0x206>
 8006c94:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006c98:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006c9c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006ca0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006ca4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ca8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006cac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb4:	db6e      	blt.n	8006d94 <arm_cmplx_mag_f32+0x1b4>
 8006cb6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cbe:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006cc2:	f100 8087 	bmi.w	8006dd4 <arm_cmplx_mag_f32+0x1f4>
 8006cc6:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006cca:	3e01      	subs	r6, #1
 8006ccc:	f104 0420 	add.w	r4, r4, #32
 8006cd0:	f105 0510 	add.w	r5, r5, #16
 8006cd4:	d192      	bne.n	8006bfc <arm_cmplx_mag_f32+0x1c>
 8006cd6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8006cda:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8006cde:	f012 0203 	ands.w	r2, r2, #3
 8006ce2:	d052      	beq.n	8006d8a <arm_cmplx_mag_f32+0x1aa>
 8006ce4:	ed90 0a00 	vldr	s0, [r0]
 8006ce8:	edd0 7a01 	vldr	s15, [r0, #4]
 8006cec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006cf0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006cfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d02:	bfb8      	it	lt
 8006d04:	600b      	strlt	r3, [r1, #0]
 8006d06:	db08      	blt.n	8006d1a <arm_cmplx_mag_f32+0x13a>
 8006d08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d10:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d14:	d479      	bmi.n	8006e0a <arm_cmplx_mag_f32+0x22a>
 8006d16:	ed81 8a00 	vstr	s16, [r1]
 8006d1a:	3a01      	subs	r2, #1
 8006d1c:	d035      	beq.n	8006d8a <arm_cmplx_mag_f32+0x1aa>
 8006d1e:	ed90 0a02 	vldr	s0, [r0, #8]
 8006d22:	edd0 7a03 	vldr	s15, [r0, #12]
 8006d26:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d2e:	2300      	movs	r3, #0
 8006d30:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006d34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3c:	bfb8      	it	lt
 8006d3e:	604b      	strlt	r3, [r1, #4]
 8006d40:	db08      	blt.n	8006d54 <arm_cmplx_mag_f32+0x174>
 8006d42:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d4e:	d453      	bmi.n	8006df8 <arm_cmplx_mag_f32+0x218>
 8006d50:	ed81 8a01 	vstr	s16, [r1, #4]
 8006d54:	2a01      	cmp	r2, #1
 8006d56:	d018      	beq.n	8006d8a <arm_cmplx_mag_f32+0x1aa>
 8006d58:	ed90 0a04 	vldr	s0, [r0, #16]
 8006d5c:	edd0 7a05 	vldr	s15, [r0, #20]
 8006d60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d68:	2300      	movs	r3, #0
 8006d6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d76:	db19      	blt.n	8006dac <arm_cmplx_mag_f32+0x1cc>
 8006d78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d84:	d44a      	bmi.n	8006e1c <arm_cmplx_mag_f32+0x23c>
 8006d86:	ed81 8a02 	vstr	s16, [r1, #8]
 8006d8a:	b004      	add	sp, #16
 8006d8c:	ecbd 8b02 	vpop	{d8}
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	f845 8c04 	str.w	r8, [r5, #-4]
 8006d98:	e797      	b.n	8006cca <arm_cmplx_mag_f32+0xea>
 8006d9a:	f845 8c08 	str.w	r8, [r5, #-8]
 8006d9e:	e77b      	b.n	8006c98 <arm_cmplx_mag_f32+0xb8>
 8006da0:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006da4:	e75e      	b.n	8006c64 <arm_cmplx_mag_f32+0x84>
 8006da6:	f845 8c10 	str.w	r8, [r5, #-16]
 8006daa:	e741      	b.n	8006c30 <arm_cmplx_mag_f32+0x50>
 8006dac:	608b      	str	r3, [r1, #8]
 8006dae:	e7ec      	b.n	8006d8a <arm_cmplx_mag_f32+0x1aa>
 8006db0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006db4:	9001      	str	r0, [sp, #4]
 8006db6:	f003 f80d 	bl	8009dd4 <sqrtf>
 8006dba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006dbe:	9801      	ldr	r0, [sp, #4]
 8006dc0:	e74e      	b.n	8006c60 <arm_cmplx_mag_f32+0x80>
 8006dc2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006dc6:	9001      	str	r0, [sp, #4]
 8006dc8:	f003 f804 	bl	8009dd4 <sqrtf>
 8006dcc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006dd0:	9801      	ldr	r0, [sp, #4]
 8006dd2:	e72b      	b.n	8006c2c <arm_cmplx_mag_f32+0x4c>
 8006dd4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006dd8:	9001      	str	r0, [sp, #4]
 8006dda:	f002 fffb 	bl	8009dd4 <sqrtf>
 8006dde:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006de2:	9801      	ldr	r0, [sp, #4]
 8006de4:	e76f      	b.n	8006cc6 <arm_cmplx_mag_f32+0xe6>
 8006de6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006dea:	9001      	str	r0, [sp, #4]
 8006dec:	f002 fff2 	bl	8009dd4 <sqrtf>
 8006df0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006df4:	9801      	ldr	r0, [sp, #4]
 8006df6:	e74d      	b.n	8006c94 <arm_cmplx_mag_f32+0xb4>
 8006df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dfc:	9201      	str	r2, [sp, #4]
 8006dfe:	f002 ffe9 	bl	8009dd4 <sqrtf>
 8006e02:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006e06:	9903      	ldr	r1, [sp, #12]
 8006e08:	e7a2      	b.n	8006d50 <arm_cmplx_mag_f32+0x170>
 8006e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e0e:	9201      	str	r2, [sp, #4]
 8006e10:	f002 ffe0 	bl	8009dd4 <sqrtf>
 8006e14:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006e18:	9903      	ldr	r1, [sp, #12]
 8006e1a:	e77c      	b.n	8006d16 <arm_cmplx_mag_f32+0x136>
 8006e1c:	9101      	str	r1, [sp, #4]
 8006e1e:	f002 ffd9 	bl	8009dd4 <sqrtf>
 8006e22:	9901      	ldr	r1, [sp, #4]
 8006e24:	e7af      	b.n	8006d86 <arm_cmplx_mag_f32+0x1a6>
 8006e26:	bf00      	nop

08006e28 <arm_radix8_butterfly_f32>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	ed2d 8b10 	vpush	{d8-d15}
 8006e30:	b095      	sub	sp, #84	; 0x54
 8006e32:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8006e36:	4603      	mov	r3, r0
 8006e38:	3304      	adds	r3, #4
 8006e3a:	ed9f bab9 	vldr	s22, [pc, #740]	; 8007120 <arm_radix8_butterfly_f32+0x2f8>
 8006e3e:	9012      	str	r0, [sp, #72]	; 0x48
 8006e40:	468b      	mov	fp, r1
 8006e42:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e44:	4689      	mov	r9, r1
 8006e46:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006e4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e4c:	960f      	str	r6, [sp, #60]	; 0x3c
 8006e4e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006e52:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006e56:	eb03 0508 	add.w	r5, r3, r8
 8006e5a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006e5e:	eb05 040e 	add.w	r4, r5, lr
 8006e62:	0137      	lsls	r7, r6, #4
 8006e64:	eba6 030a 	sub.w	r3, r6, sl
 8006e68:	eb04 000e 	add.w	r0, r4, lr
 8006e6c:	44b2      	add	sl, r6
 8006e6e:	1d3a      	adds	r2, r7, #4
 8006e70:	9702      	str	r7, [sp, #8]
 8006e72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006e76:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006e7a:	ebae 0c06 	sub.w	ip, lr, r6
 8006e7e:	9703      	str	r7, [sp, #12]
 8006e80:	eb03 0708 	add.w	r7, r3, r8
 8006e84:	9701      	str	r7, [sp, #4]
 8006e86:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006e8a:	9706      	str	r7, [sp, #24]
 8006e8c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006e8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006e92:	f10e 0104 	add.w	r1, lr, #4
 8006e96:	4439      	add	r1, r7
 8006e98:	443a      	add	r2, r7
 8006e9a:	0137      	lsls	r7, r6, #4
 8006e9c:	00f6      	lsls	r6, r6, #3
 8006e9e:	9704      	str	r7, [sp, #16]
 8006ea0:	9605      	str	r6, [sp, #20]
 8006ea2:	9f01      	ldr	r7, [sp, #4]
 8006ea4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006ea6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006eaa:	f04f 0c00 	mov.w	ip, #0
 8006eae:	edd4 6a00 	vldr	s13, [r4]
 8006eb2:	edd7 1a00 	vldr	s3, [r7]
 8006eb6:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006eba:	edd5 5a00 	vldr	s11, [r5]
 8006ebe:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006ec2:	ed90 6a00 	vldr	s12, [r0]
 8006ec6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006eca:	ed93 3a00 	vldr	s6, [r3]
 8006ece:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006ed2:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006ed6:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006eda:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006ede:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006ee2:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006ee6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006eea:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006eee:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006ef2:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006ef6:	ed85 4a00 	vstr	s8, [r5]
 8006efa:	edd1 6a00 	vldr	s13, [r1]
 8006efe:	ed94 9a01 	vldr	s18, [r4, #4]
 8006f02:	edd3 2a01 	vldr	s5, [r3, #4]
 8006f06:	edd7 8a01 	vldr	s17, [r7, #4]
 8006f0a:	edd6 0a00 	vldr	s1, [r6]
 8006f0e:	edd5 3a01 	vldr	s7, [r5, #4]
 8006f12:	ed90 8a01 	vldr	s16, [r0, #4]
 8006f16:	ed92 7a00 	vldr	s14, [r2]
 8006f1a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006f1e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006f22:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006f26:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006f2a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006f2e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006f32:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006f36:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006f3a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006f3e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006f42:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006f46:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006f4a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006f4e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006f52:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006f56:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006f5a:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006f5e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006f62:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006f66:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006f6a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006f6e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006f72:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006f76:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006f7a:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006f7e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006f82:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006f86:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006f8a:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006f8e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006f92:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006f96:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006f9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006f9e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006fa2:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006fa6:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006faa:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006fae:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006fb2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006fb6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006fba:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006fbe:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006fc2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006fc6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006fca:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006fce:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006fd2:	44dc      	add	ip, fp
 8006fd4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006fd8:	45e1      	cmp	r9, ip
 8006fda:	ed86 8a00 	vstr	s16, [r6]
 8006fde:	ed85 2a01 	vstr	s4, [r5, #4]
 8006fe2:	4456      	add	r6, sl
 8006fe4:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006fe8:	4455      	add	r5, sl
 8006fea:	edc0 6a00 	vstr	s13, [r0]
 8006fee:	ed82 1a00 	vstr	s2, [r2]
 8006ff2:	ed80 5a01 	vstr	s10, [r0, #4]
 8006ff6:	4452      	add	r2, sl
 8006ff8:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006ffc:	4450      	add	r0, sl
 8006ffe:	edc7 2a00 	vstr	s5, [r7]
 8007002:	edc4 4a00 	vstr	s9, [r4]
 8007006:	ed83 7a00 	vstr	s14, [r3]
 800700a:	edc1 5a00 	vstr	s11, [r1]
 800700e:	edc7 3a01 	vstr	s7, [r7, #4]
 8007012:	4451      	add	r1, sl
 8007014:	ed84 6a01 	vstr	s12, [r4, #4]
 8007018:	4457      	add	r7, sl
 800701a:	edc3 7a01 	vstr	s15, [r3, #4]
 800701e:	4454      	add	r4, sl
 8007020:	4453      	add	r3, sl
 8007022:	f63f af44 	bhi.w	8006eae <arm_radix8_butterfly_f32+0x86>
 8007026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007028:	2b07      	cmp	r3, #7
 800702a:	f240 81b7 	bls.w	800739c <arm_radix8_butterfly_f32+0x574>
 800702e:	9b06      	ldr	r3, [sp, #24]
 8007030:	9903      	ldr	r1, [sp, #12]
 8007032:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007034:	9e05      	ldr	r6, [sp, #20]
 8007036:	9a04      	ldr	r2, [sp, #16]
 8007038:	f103 0c08 	add.w	ip, r3, #8
 800703c:	9b02      	ldr	r3, [sp, #8]
 800703e:	3108      	adds	r1, #8
 8007040:	f108 0808 	add.w	r8, r8, #8
 8007044:	1841      	adds	r1, r0, r1
 8007046:	3608      	adds	r6, #8
 8007048:	330c      	adds	r3, #12
 800704a:	4604      	mov	r4, r0
 800704c:	4444      	add	r4, r8
 800704e:	18c3      	adds	r3, r0, r3
 8007050:	9109      	str	r1, [sp, #36]	; 0x24
 8007052:	1981      	adds	r1, r0, r6
 8007054:	f10e 0e08 	add.w	lr, lr, #8
 8007058:	3208      	adds	r2, #8
 800705a:	940b      	str	r4, [sp, #44]	; 0x2c
 800705c:	9107      	str	r1, [sp, #28]
 800705e:	4604      	mov	r4, r0
 8007060:	4601      	mov	r1, r0
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	f100 030c 	add.w	r3, r0, #12
 8007068:	4474      	add	r4, lr
 800706a:	f04f 0801 	mov.w	r8, #1
 800706e:	1882      	adds	r2, r0, r2
 8007070:	4461      	add	r1, ip
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	464b      	mov	r3, r9
 8007076:	940a      	str	r4, [sp, #40]	; 0x28
 8007078:	46c1      	mov	r9, r8
 800707a:	9208      	str	r2, [sp, #32]
 800707c:	46d8      	mov	r8, fp
 800707e:	9106      	str	r1, [sp, #24]
 8007080:	f04f 0e00 	mov.w	lr, #0
 8007084:	469b      	mov	fp, r3
 8007086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007088:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800708a:	449e      	add	lr, r3
 800708c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8007090:	441a      	add	r2, r3
 8007092:	920e      	str	r2, [sp, #56]	; 0x38
 8007094:	441a      	add	r2, r3
 8007096:	18d4      	adds	r4, r2, r3
 8007098:	18e5      	adds	r5, r4, r3
 800709a:	18ee      	adds	r6, r5, r3
 800709c:	18f7      	adds	r7, r6, r3
 800709e:	eb07 0c03 	add.w	ip, r7, r3
 80070a2:	920d      	str	r2, [sp, #52]	; 0x34
 80070a4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80070a8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80070ac:	910c      	str	r1, [sp, #48]	; 0x30
 80070ae:	4419      	add	r1, r3
 80070b0:	9103      	str	r1, [sp, #12]
 80070b2:	4419      	add	r1, r3
 80070b4:	18ca      	adds	r2, r1, r3
 80070b6:	9202      	str	r2, [sp, #8]
 80070b8:	441a      	add	r2, r3
 80070ba:	18d0      	adds	r0, r2, r3
 80070bc:	ed92 ea01 	vldr	s28, [r2, #4]
 80070c0:	9a02      	ldr	r2, [sp, #8]
 80070c2:	edd4 7a00 	vldr	s15, [r4]
 80070c6:	edd2 da01 	vldr	s27, [r2, #4]
 80070ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070cc:	ed91 da01 	vldr	s26, [r1, #4]
 80070d0:	ed92 ca01 	vldr	s24, [r2, #4]
 80070d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070d6:	9903      	ldr	r1, [sp, #12]
 80070d8:	edcd 7a03 	vstr	s15, [sp, #12]
 80070dc:	edd2 7a00 	vldr	s15, [r2]
 80070e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070e2:	edcd 7a02 	vstr	s15, [sp, #8]
 80070e6:	edd2 7a00 	vldr	s15, [r2]
 80070ea:	edd0 ea01 	vldr	s29, [r0, #4]
 80070ee:	edd1 ca01 	vldr	s25, [r1, #4]
 80070f2:	eddc ba00 	vldr	s23, [ip]
 80070f6:	edd7 aa00 	vldr	s21, [r7]
 80070fa:	ed96 aa00 	vldr	s20, [r6]
 80070fe:	edd5 9a00 	vldr	s19, [r5]
 8007102:	edcd 7a01 	vstr	s15, [sp, #4]
 8007106:	4403      	add	r3, r0
 8007108:	ed93 fa01 	vldr	s30, [r3, #4]
 800710c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8007110:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8007114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007118:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800711c:	46cc      	mov	ip, r9
 800711e:	e001      	b.n	8007124 <arm_radix8_butterfly_f32+0x2fc>
 8007120:	3f3504f3 	.word	0x3f3504f3
 8007124:	ed91 6a00 	vldr	s12, [r1]
 8007128:	ed93 5a00 	vldr	s10, [r3]
 800712c:	edd0 fa00 	vldr	s31, [r0]
 8007130:	edd4 7a00 	vldr	s15, [r4]
 8007134:	ed95 7a00 	vldr	s14, [r5]
 8007138:	ed56 3a01 	vldr	s7, [r6, #-4]
 800713c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007140:	ed92 2a00 	vldr	s4, [r2]
 8007144:	ed96 0a00 	vldr	s0, [r6]
 8007148:	ee33 8a85 	vadd.f32	s16, s7, s10
 800714c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007150:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007154:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007158:	ee78 1a04 	vadd.f32	s3, s16, s8
 800715c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007160:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007164:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800716c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007170:	edd4 8a01 	vldr	s17, [r4, #4]
 8007174:	ed92 9a01 	vldr	s18, [r2, #4]
 8007178:	edd7 0a00 	vldr	s1, [r7]
 800717c:	edd1 2a01 	vldr	s5, [r1, #4]
 8007180:	ed95 7a01 	vldr	s14, [r5, #4]
 8007184:	ed93 6a01 	vldr	s12, [r3, #4]
 8007188:	edd0 5a01 	vldr	s11, [r0, #4]
 800718c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007190:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007194:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007198:	ee78 fac7 	vsub.f32	s31, s17, s14
 800719c:	ee38 4a44 	vsub.f32	s8, s16, s8
 80071a0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80071a4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80071a8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80071ac:	ee32 9a27 	vadd.f32	s18, s4, s15
 80071b0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80071b4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80071b8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80071bc:	ee71 4a64 	vsub.f32	s9, s2, s9
 80071c0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80071c4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80071c8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80071cc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80071d0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80071d4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80071d8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80071dc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80071e0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80071e4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80071e8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80071ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80071f0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80071f4:	ee74 0a22 	vadd.f32	s1, s8, s5
 80071f8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80071fc:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007200:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007204:	ee32 4a64 	vsub.f32	s8, s4, s9
 8007208:	ee73 8a09 	vadd.f32	s17, s6, s18
 800720c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007210:	ee33 9a49 	vsub.f32	s18, s6, s18
 8007214:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007218:	ee35 3a85 	vadd.f32	s6, s11, s10
 800721c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007220:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007224:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007228:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800722c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007230:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007234:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007238:	ee73 3a82 	vadd.f32	s7, s7, s4
 800723c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007240:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007244:	eddd 1a02 	vldr	s3, [sp, #8]
 8007248:	ee35 5a43 	vsub.f32	s10, s10, s6
 800724c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007250:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007254:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007258:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800725c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007260:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007264:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007268:	ee39 6a06 	vadd.f32	s12, s18, s12
 800726c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007270:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007274:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007278:	ee22 7a07 	vmul.f32	s14, s4, s14
 800727c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007280:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007284:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007288:	ee31 1a09 	vadd.f32	s2, s2, s18
 800728c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007290:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007294:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007298:	ee37 7a48 	vsub.f32	s14, s14, s16
 800729c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80072a0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80072a4:	ee72 1a21 	vadd.f32	s3, s4, s3
 80072a8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80072ac:	ee38 2a89 	vadd.f32	s4, s17, s18
 80072b0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80072b4:	ee38 8a04 	vadd.f32	s16, s16, s8
 80072b8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80072bc:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80072c0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80072c4:	eddd 5a03 	vldr	s11, [sp, #12]
 80072c8:	edc6 fa00 	vstr	s31, [r6]
 80072cc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80072d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80072d4:	ee30 0a45 	vsub.f32	s0, s0, s10
 80072d8:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80072dc:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80072e0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80072e4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80072e8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80072ec:	ee25 6a86 	vmul.f32	s12, s11, s12
 80072f0:	ee74 4a89 	vadd.f32	s9, s9, s18
 80072f4:	ee34 3a43 	vsub.f32	s6, s8, s6
 80072f8:	ee78 8a85 	vadd.f32	s17, s17, s10
 80072fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007300:	44c4      	add	ip, r8
 8007302:	45e3      	cmp	fp, ip
 8007304:	edc3 3a00 	vstr	s7, [r3]
 8007308:	edc3 6a01 	vstr	s13, [r3, #4]
 800730c:	4456      	add	r6, sl
 800730e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8007312:	edc7 0a00 	vstr	s1, [r7]
 8007316:	4453      	add	r3, sl
 8007318:	ed80 2a00 	vstr	s4, [r0]
 800731c:	edc0 2a01 	vstr	s5, [r0, #4]
 8007320:	4457      	add	r7, sl
 8007322:	edc2 1a00 	vstr	s3, [r2]
 8007326:	ed82 7a01 	vstr	s14, [r2, #4]
 800732a:	4450      	add	r0, sl
 800732c:	ed85 8a00 	vstr	s16, [r5]
 8007330:	ed85 0a01 	vstr	s0, [r5, #4]
 8007334:	4452      	add	r2, sl
 8007336:	edc1 4a00 	vstr	s9, [r1]
 800733a:	4455      	add	r5, sl
 800733c:	ed81 3a01 	vstr	s6, [r1, #4]
 8007340:	edc4 8a00 	vstr	s17, [r4]
 8007344:	ed84 6a01 	vstr	s12, [r4, #4]
 8007348:	4451      	add	r1, sl
 800734a:	4454      	add	r4, sl
 800734c:	f63f aeea 	bhi.w	8007124 <arm_radix8_butterfly_f32+0x2fc>
 8007350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007352:	3308      	adds	r3, #8
 8007354:	930b      	str	r3, [sp, #44]	; 0x2c
 8007356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007358:	3308      	adds	r3, #8
 800735a:	930a      	str	r3, [sp, #40]	; 0x28
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	3308      	adds	r3, #8
 8007360:	9309      	str	r3, [sp, #36]	; 0x24
 8007362:	9b08      	ldr	r3, [sp, #32]
 8007364:	3308      	adds	r3, #8
 8007366:	9308      	str	r3, [sp, #32]
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	3308      	adds	r3, #8
 800736c:	9307      	str	r3, [sp, #28]
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	3308      	adds	r3, #8
 8007372:	9306      	str	r3, [sp, #24]
 8007374:	9b05      	ldr	r3, [sp, #20]
 8007376:	3308      	adds	r3, #8
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	9b04      	ldr	r3, [sp, #16]
 800737c:	3308      	adds	r3, #8
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007382:	f109 0901 	add.w	r9, r9, #1
 8007386:	454b      	cmp	r3, r9
 8007388:	f47f ae7d 	bne.w	8007086 <arm_radix8_butterfly_f32+0x25e>
 800738c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	b29b      	uxth	r3, r3
 8007392:	46d9      	mov	r9, fp
 8007394:	9310      	str	r3, [sp, #64]	; 0x40
 8007396:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800739a:	e554      	b.n	8006e46 <arm_radix8_butterfly_f32+0x1e>
 800739c:	b015      	add	sp, #84	; 0x54
 800739e:	ecbd 8b10 	vpop	{d8-d15}
 80073a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a6:	bf00      	nop

080073a8 <malloc>:
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <malloc+0xc>)
 80073aa:	4601      	mov	r1, r0
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f000 b823 	b.w	80073f8 <_malloc_r>
 80073b2:	bf00      	nop
 80073b4:	20000064 	.word	0x20000064

080073b8 <sbrk_aligned>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	4e0e      	ldr	r6, [pc, #56]	; (80073f4 <sbrk_aligned+0x3c>)
 80073bc:	460c      	mov	r4, r1
 80073be:	6831      	ldr	r1, [r6, #0]
 80073c0:	4605      	mov	r5, r0
 80073c2:	b911      	cbnz	r1, 80073ca <sbrk_aligned+0x12>
 80073c4:	f000 fe50 	bl	8008068 <_sbrk_r>
 80073c8:	6030      	str	r0, [r6, #0]
 80073ca:	4621      	mov	r1, r4
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 fe4b 	bl	8008068 <_sbrk_r>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d00a      	beq.n	80073ec <sbrk_aligned+0x34>
 80073d6:	1cc4      	adds	r4, r0, #3
 80073d8:	f024 0403 	bic.w	r4, r4, #3
 80073dc:	42a0      	cmp	r0, r4
 80073de:	d007      	beq.n	80073f0 <sbrk_aligned+0x38>
 80073e0:	1a21      	subs	r1, r4, r0
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 fe40 	bl	8008068 <_sbrk_r>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d101      	bne.n	80073f0 <sbrk_aligned+0x38>
 80073ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80073f0:	4620      	mov	r0, r4
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	2000038c 	.word	0x2000038c

080073f8 <_malloc_r>:
 80073f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073fc:	1ccd      	adds	r5, r1, #3
 80073fe:	f025 0503 	bic.w	r5, r5, #3
 8007402:	3508      	adds	r5, #8
 8007404:	2d0c      	cmp	r5, #12
 8007406:	bf38      	it	cc
 8007408:	250c      	movcc	r5, #12
 800740a:	2d00      	cmp	r5, #0
 800740c:	4607      	mov	r7, r0
 800740e:	db01      	blt.n	8007414 <_malloc_r+0x1c>
 8007410:	42a9      	cmp	r1, r5
 8007412:	d905      	bls.n	8007420 <_malloc_r+0x28>
 8007414:	230c      	movs	r3, #12
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	2600      	movs	r6, #0
 800741a:	4630      	mov	r0, r6
 800741c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007420:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074f4 <_malloc_r+0xfc>
 8007424:	f000 f868 	bl	80074f8 <__malloc_lock>
 8007428:	f8d8 3000 	ldr.w	r3, [r8]
 800742c:	461c      	mov	r4, r3
 800742e:	bb5c      	cbnz	r4, 8007488 <_malloc_r+0x90>
 8007430:	4629      	mov	r1, r5
 8007432:	4638      	mov	r0, r7
 8007434:	f7ff ffc0 	bl	80073b8 <sbrk_aligned>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	4604      	mov	r4, r0
 800743c:	d155      	bne.n	80074ea <_malloc_r+0xf2>
 800743e:	f8d8 4000 	ldr.w	r4, [r8]
 8007442:	4626      	mov	r6, r4
 8007444:	2e00      	cmp	r6, #0
 8007446:	d145      	bne.n	80074d4 <_malloc_r+0xdc>
 8007448:	2c00      	cmp	r4, #0
 800744a:	d048      	beq.n	80074de <_malloc_r+0xe6>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	4631      	mov	r1, r6
 8007450:	4638      	mov	r0, r7
 8007452:	eb04 0903 	add.w	r9, r4, r3
 8007456:	f000 fe07 	bl	8008068 <_sbrk_r>
 800745a:	4581      	cmp	r9, r0
 800745c:	d13f      	bne.n	80074de <_malloc_r+0xe6>
 800745e:	6821      	ldr	r1, [r4, #0]
 8007460:	1a6d      	subs	r5, r5, r1
 8007462:	4629      	mov	r1, r5
 8007464:	4638      	mov	r0, r7
 8007466:	f7ff ffa7 	bl	80073b8 <sbrk_aligned>
 800746a:	3001      	adds	r0, #1
 800746c:	d037      	beq.n	80074de <_malloc_r+0xe6>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	442b      	add	r3, r5
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	f8d8 3000 	ldr.w	r3, [r8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d038      	beq.n	80074ee <_malloc_r+0xf6>
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	42a2      	cmp	r2, r4
 8007480:	d12b      	bne.n	80074da <_malloc_r+0xe2>
 8007482:	2200      	movs	r2, #0
 8007484:	605a      	str	r2, [r3, #4]
 8007486:	e00f      	b.n	80074a8 <_malloc_r+0xb0>
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	1b52      	subs	r2, r2, r5
 800748c:	d41f      	bmi.n	80074ce <_malloc_r+0xd6>
 800748e:	2a0b      	cmp	r2, #11
 8007490:	d917      	bls.n	80074c2 <_malloc_r+0xca>
 8007492:	1961      	adds	r1, r4, r5
 8007494:	42a3      	cmp	r3, r4
 8007496:	6025      	str	r5, [r4, #0]
 8007498:	bf18      	it	ne
 800749a:	6059      	strne	r1, [r3, #4]
 800749c:	6863      	ldr	r3, [r4, #4]
 800749e:	bf08      	it	eq
 80074a0:	f8c8 1000 	streq.w	r1, [r8]
 80074a4:	5162      	str	r2, [r4, r5]
 80074a6:	604b      	str	r3, [r1, #4]
 80074a8:	4638      	mov	r0, r7
 80074aa:	f104 060b 	add.w	r6, r4, #11
 80074ae:	f000 f829 	bl	8007504 <__malloc_unlock>
 80074b2:	f026 0607 	bic.w	r6, r6, #7
 80074b6:	1d23      	adds	r3, r4, #4
 80074b8:	1af2      	subs	r2, r6, r3
 80074ba:	d0ae      	beq.n	800741a <_malloc_r+0x22>
 80074bc:	1b9b      	subs	r3, r3, r6
 80074be:	50a3      	str	r3, [r4, r2]
 80074c0:	e7ab      	b.n	800741a <_malloc_r+0x22>
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	6862      	ldr	r2, [r4, #4]
 80074c6:	d1dd      	bne.n	8007484 <_malloc_r+0x8c>
 80074c8:	f8c8 2000 	str.w	r2, [r8]
 80074cc:	e7ec      	b.n	80074a8 <_malloc_r+0xb0>
 80074ce:	4623      	mov	r3, r4
 80074d0:	6864      	ldr	r4, [r4, #4]
 80074d2:	e7ac      	b.n	800742e <_malloc_r+0x36>
 80074d4:	4634      	mov	r4, r6
 80074d6:	6876      	ldr	r6, [r6, #4]
 80074d8:	e7b4      	b.n	8007444 <_malloc_r+0x4c>
 80074da:	4613      	mov	r3, r2
 80074dc:	e7cc      	b.n	8007478 <_malloc_r+0x80>
 80074de:	230c      	movs	r3, #12
 80074e0:	603b      	str	r3, [r7, #0]
 80074e2:	4638      	mov	r0, r7
 80074e4:	f000 f80e 	bl	8007504 <__malloc_unlock>
 80074e8:	e797      	b.n	800741a <_malloc_r+0x22>
 80074ea:	6025      	str	r5, [r4, #0]
 80074ec:	e7dc      	b.n	80074a8 <_malloc_r+0xb0>
 80074ee:	605b      	str	r3, [r3, #4]
 80074f0:	deff      	udf	#255	; 0xff
 80074f2:	bf00      	nop
 80074f4:	20000388 	.word	0x20000388

080074f8 <__malloc_lock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_lock+0x8>)
 80074fa:	f000 be01 	b.w	8008100 <__retarget_lock_acquire_recursive>
 80074fe:	bf00      	nop
 8007500:	200004d0 	.word	0x200004d0

08007504 <__malloc_unlock>:
 8007504:	4801      	ldr	r0, [pc, #4]	; (800750c <__malloc_unlock+0x8>)
 8007506:	f000 bdfc 	b.w	8008102 <__retarget_lock_release_recursive>
 800750a:	bf00      	nop
 800750c:	200004d0 	.word	0x200004d0

08007510 <__cvt>:
 8007510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	ec55 4b10 	vmov	r4, r5, d0
 8007518:	2d00      	cmp	r5, #0
 800751a:	460e      	mov	r6, r1
 800751c:	4619      	mov	r1, r3
 800751e:	462b      	mov	r3, r5
 8007520:	bfbb      	ittet	lt
 8007522:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007526:	461d      	movlt	r5, r3
 8007528:	2300      	movge	r3, #0
 800752a:	232d      	movlt	r3, #45	; 0x2d
 800752c:	700b      	strb	r3, [r1, #0]
 800752e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007530:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007534:	4691      	mov	r9, r2
 8007536:	f023 0820 	bic.w	r8, r3, #32
 800753a:	bfbc      	itt	lt
 800753c:	4622      	movlt	r2, r4
 800753e:	4614      	movlt	r4, r2
 8007540:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007544:	d005      	beq.n	8007552 <__cvt+0x42>
 8007546:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800754a:	d100      	bne.n	800754e <__cvt+0x3e>
 800754c:	3601      	adds	r6, #1
 800754e:	2102      	movs	r1, #2
 8007550:	e000      	b.n	8007554 <__cvt+0x44>
 8007552:	2103      	movs	r1, #3
 8007554:	ab03      	add	r3, sp, #12
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	ab02      	add	r3, sp, #8
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	ec45 4b10 	vmov	d0, r4, r5
 8007560:	4653      	mov	r3, sl
 8007562:	4632      	mov	r2, r6
 8007564:	f000 fe58 	bl	8008218 <_dtoa_r>
 8007568:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800756c:	4607      	mov	r7, r0
 800756e:	d102      	bne.n	8007576 <__cvt+0x66>
 8007570:	f019 0f01 	tst.w	r9, #1
 8007574:	d022      	beq.n	80075bc <__cvt+0xac>
 8007576:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800757a:	eb07 0906 	add.w	r9, r7, r6
 800757e:	d110      	bne.n	80075a2 <__cvt+0x92>
 8007580:	783b      	ldrb	r3, [r7, #0]
 8007582:	2b30      	cmp	r3, #48	; 0x30
 8007584:	d10a      	bne.n	800759c <__cvt+0x8c>
 8007586:	2200      	movs	r2, #0
 8007588:	2300      	movs	r3, #0
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f7f9 fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007592:	b918      	cbnz	r0, 800759c <__cvt+0x8c>
 8007594:	f1c6 0601 	rsb	r6, r6, #1
 8007598:	f8ca 6000 	str.w	r6, [sl]
 800759c:	f8da 3000 	ldr.w	r3, [sl]
 80075a0:	4499      	add	r9, r3
 80075a2:	2200      	movs	r2, #0
 80075a4:	2300      	movs	r3, #0
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f9 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ae:	b108      	cbz	r0, 80075b4 <__cvt+0xa4>
 80075b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80075b4:	2230      	movs	r2, #48	; 0x30
 80075b6:	9b03      	ldr	r3, [sp, #12]
 80075b8:	454b      	cmp	r3, r9
 80075ba:	d307      	bcc.n	80075cc <__cvt+0xbc>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c0:	1bdb      	subs	r3, r3, r7
 80075c2:	4638      	mov	r0, r7
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	b004      	add	sp, #16
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	1c59      	adds	r1, r3, #1
 80075ce:	9103      	str	r1, [sp, #12]
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e7f0      	b.n	80075b6 <__cvt+0xa6>

080075d4 <__exponent>:
 80075d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075d6:	4603      	mov	r3, r0
 80075d8:	2900      	cmp	r1, #0
 80075da:	bfb8      	it	lt
 80075dc:	4249      	neglt	r1, r1
 80075de:	f803 2b02 	strb.w	r2, [r3], #2
 80075e2:	bfb4      	ite	lt
 80075e4:	222d      	movlt	r2, #45	; 0x2d
 80075e6:	222b      	movge	r2, #43	; 0x2b
 80075e8:	2909      	cmp	r1, #9
 80075ea:	7042      	strb	r2, [r0, #1]
 80075ec:	dd2a      	ble.n	8007644 <__exponent+0x70>
 80075ee:	f10d 0207 	add.w	r2, sp, #7
 80075f2:	4617      	mov	r7, r2
 80075f4:	260a      	movs	r6, #10
 80075f6:	4694      	mov	ip, r2
 80075f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80075fc:	fb06 1415 	mls	r4, r6, r5, r1
 8007600:	3430      	adds	r4, #48	; 0x30
 8007602:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007606:	460c      	mov	r4, r1
 8007608:	2c63      	cmp	r4, #99	; 0x63
 800760a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800760e:	4629      	mov	r1, r5
 8007610:	dcf1      	bgt.n	80075f6 <__exponent+0x22>
 8007612:	3130      	adds	r1, #48	; 0x30
 8007614:	f1ac 0402 	sub.w	r4, ip, #2
 8007618:	f802 1c01 	strb.w	r1, [r2, #-1]
 800761c:	1c41      	adds	r1, r0, #1
 800761e:	4622      	mov	r2, r4
 8007620:	42ba      	cmp	r2, r7
 8007622:	d30a      	bcc.n	800763a <__exponent+0x66>
 8007624:	f10d 0209 	add.w	r2, sp, #9
 8007628:	eba2 020c 	sub.w	r2, r2, ip
 800762c:	42bc      	cmp	r4, r7
 800762e:	bf88      	it	hi
 8007630:	2200      	movhi	r2, #0
 8007632:	4413      	add	r3, r2
 8007634:	1a18      	subs	r0, r3, r0
 8007636:	b003      	add	sp, #12
 8007638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800763e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007642:	e7ed      	b.n	8007620 <__exponent+0x4c>
 8007644:	2330      	movs	r3, #48	; 0x30
 8007646:	3130      	adds	r1, #48	; 0x30
 8007648:	7083      	strb	r3, [r0, #2]
 800764a:	70c1      	strb	r1, [r0, #3]
 800764c:	1d03      	adds	r3, r0, #4
 800764e:	e7f1      	b.n	8007634 <__exponent+0x60>

08007650 <_printf_float>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	ed2d 8b02 	vpush	{d8}
 8007658:	b08d      	sub	sp, #52	; 0x34
 800765a:	460c      	mov	r4, r1
 800765c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007660:	4616      	mov	r6, r2
 8007662:	461f      	mov	r7, r3
 8007664:	4605      	mov	r5, r0
 8007666:	f000 fcc7 	bl	8007ff8 <_localeconv_r>
 800766a:	f8d0 a000 	ldr.w	sl, [r0]
 800766e:	4650      	mov	r0, sl
 8007670:	f7f8 fdfe 	bl	8000270 <strlen>
 8007674:	2300      	movs	r3, #0
 8007676:	930a      	str	r3, [sp, #40]	; 0x28
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	f8d8 3000 	ldr.w	r3, [r8]
 8007680:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007684:	3307      	adds	r3, #7
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	f103 0208 	add.w	r2, r3, #8
 800768e:	f8c8 2000 	str.w	r2, [r8]
 8007692:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f8cd 8018 	str.w	r8, [sp, #24]
 80076a0:	ee08 0a10 	vmov	s16, r0
 80076a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80076a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ac:	4b9e      	ldr	r3, [pc, #632]	; (8007928 <_printf_float+0x2d8>)
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b2:	f7f9 fa3b 	bl	8000b2c <__aeabi_dcmpun>
 80076b6:	bb88      	cbnz	r0, 800771c <_printf_float+0xcc>
 80076b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076bc:	4b9a      	ldr	r3, [pc, #616]	; (8007928 <_printf_float+0x2d8>)
 80076be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076c2:	f7f9 fa15 	bl	8000af0 <__aeabi_dcmple>
 80076c6:	bb48      	cbnz	r0, 800771c <_printf_float+0xcc>
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 fa04 	bl	8000adc <__aeabi_dcmplt>
 80076d4:	b110      	cbz	r0, 80076dc <_printf_float+0x8c>
 80076d6:	232d      	movs	r3, #45	; 0x2d
 80076d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076dc:	4a93      	ldr	r2, [pc, #588]	; (800792c <_printf_float+0x2dc>)
 80076de:	4b94      	ldr	r3, [pc, #592]	; (8007930 <_printf_float+0x2e0>)
 80076e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076e4:	bf94      	ite	ls
 80076e6:	4690      	movls	r8, r2
 80076e8:	4698      	movhi	r8, r3
 80076ea:	2303      	movs	r3, #3
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	9b05      	ldr	r3, [sp, #20]
 80076f0:	f023 0304 	bic.w	r3, r3, #4
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	f04f 0900 	mov.w	r9, #0
 80076fa:	9700      	str	r7, [sp, #0]
 80076fc:	4633      	mov	r3, r6
 80076fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007700:	4621      	mov	r1, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f000 f9da 	bl	8007abc <_printf_common>
 8007708:	3001      	adds	r0, #1
 800770a:	f040 8090 	bne.w	800782e <_printf_float+0x1de>
 800770e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007712:	b00d      	add	sp, #52	; 0x34
 8007714:	ecbd 8b02 	vpop	{d8}
 8007718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	4640      	mov	r0, r8
 8007722:	4649      	mov	r1, r9
 8007724:	f7f9 fa02 	bl	8000b2c <__aeabi_dcmpun>
 8007728:	b140      	cbz	r0, 800773c <_printf_float+0xec>
 800772a:	464b      	mov	r3, r9
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfbc      	itt	lt
 8007730:	232d      	movlt	r3, #45	; 0x2d
 8007732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007736:	4a7f      	ldr	r2, [pc, #508]	; (8007934 <_printf_float+0x2e4>)
 8007738:	4b7f      	ldr	r3, [pc, #508]	; (8007938 <_printf_float+0x2e8>)
 800773a:	e7d1      	b.n	80076e0 <_printf_float+0x90>
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007742:	9206      	str	r2, [sp, #24]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	d13f      	bne.n	80077c8 <_printf_float+0x178>
 8007748:	2306      	movs	r3, #6
 800774a:	6063      	str	r3, [r4, #4]
 800774c:	9b05      	ldr	r3, [sp, #20]
 800774e:	6861      	ldr	r1, [r4, #4]
 8007750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007754:	2300      	movs	r3, #0
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	ab0a      	add	r3, sp, #40	; 0x28
 800775a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800775e:	ab09      	add	r3, sp, #36	; 0x24
 8007760:	ec49 8b10 	vmov	d0, r8, r9
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	6022      	str	r2, [r4, #0]
 8007768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800776c:	4628      	mov	r0, r5
 800776e:	f7ff fecf 	bl	8007510 <__cvt>
 8007772:	9b06      	ldr	r3, [sp, #24]
 8007774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007776:	2b47      	cmp	r3, #71	; 0x47
 8007778:	4680      	mov	r8, r0
 800777a:	d108      	bne.n	800778e <_printf_float+0x13e>
 800777c:	1cc8      	adds	r0, r1, #3
 800777e:	db02      	blt.n	8007786 <_printf_float+0x136>
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	4299      	cmp	r1, r3
 8007784:	dd41      	ble.n	800780a <_printf_float+0x1ba>
 8007786:	f1ab 0302 	sub.w	r3, fp, #2
 800778a:	fa5f fb83 	uxtb.w	fp, r3
 800778e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007792:	d820      	bhi.n	80077d6 <_printf_float+0x186>
 8007794:	3901      	subs	r1, #1
 8007796:	465a      	mov	r2, fp
 8007798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800779c:	9109      	str	r1, [sp, #36]	; 0x24
 800779e:	f7ff ff19 	bl	80075d4 <__exponent>
 80077a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077a4:	1813      	adds	r3, r2, r0
 80077a6:	2a01      	cmp	r2, #1
 80077a8:	4681      	mov	r9, r0
 80077aa:	6123      	str	r3, [r4, #16]
 80077ac:	dc02      	bgt.n	80077b4 <_printf_float+0x164>
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	07d2      	lsls	r2, r2, #31
 80077b2:	d501      	bpl.n	80077b8 <_printf_float+0x168>
 80077b4:	3301      	adds	r3, #1
 80077b6:	6123      	str	r3, [r4, #16]
 80077b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d09c      	beq.n	80076fa <_printf_float+0xaa>
 80077c0:	232d      	movs	r3, #45	; 0x2d
 80077c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c6:	e798      	b.n	80076fa <_printf_float+0xaa>
 80077c8:	9a06      	ldr	r2, [sp, #24]
 80077ca:	2a47      	cmp	r2, #71	; 0x47
 80077cc:	d1be      	bne.n	800774c <_printf_float+0xfc>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1bc      	bne.n	800774c <_printf_float+0xfc>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e7b9      	b.n	800774a <_printf_float+0xfa>
 80077d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077da:	d118      	bne.n	800780e <_printf_float+0x1be>
 80077dc:	2900      	cmp	r1, #0
 80077de:	6863      	ldr	r3, [r4, #4]
 80077e0:	dd0b      	ble.n	80077fa <_printf_float+0x1aa>
 80077e2:	6121      	str	r1, [r4, #16]
 80077e4:	b913      	cbnz	r3, 80077ec <_printf_float+0x19c>
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	07d0      	lsls	r0, r2, #31
 80077ea:	d502      	bpl.n	80077f2 <_printf_float+0x1a2>
 80077ec:	3301      	adds	r3, #1
 80077ee:	440b      	add	r3, r1
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80077f4:	f04f 0900 	mov.w	r9, #0
 80077f8:	e7de      	b.n	80077b8 <_printf_float+0x168>
 80077fa:	b913      	cbnz	r3, 8007802 <_printf_float+0x1b2>
 80077fc:	6822      	ldr	r2, [r4, #0]
 80077fe:	07d2      	lsls	r2, r2, #31
 8007800:	d501      	bpl.n	8007806 <_printf_float+0x1b6>
 8007802:	3302      	adds	r3, #2
 8007804:	e7f4      	b.n	80077f0 <_printf_float+0x1a0>
 8007806:	2301      	movs	r3, #1
 8007808:	e7f2      	b.n	80077f0 <_printf_float+0x1a0>
 800780a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800780e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007810:	4299      	cmp	r1, r3
 8007812:	db05      	blt.n	8007820 <_printf_float+0x1d0>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	6121      	str	r1, [r4, #16]
 8007818:	07d8      	lsls	r0, r3, #31
 800781a:	d5ea      	bpl.n	80077f2 <_printf_float+0x1a2>
 800781c:	1c4b      	adds	r3, r1, #1
 800781e:	e7e7      	b.n	80077f0 <_printf_float+0x1a0>
 8007820:	2900      	cmp	r1, #0
 8007822:	bfd4      	ite	le
 8007824:	f1c1 0202 	rsble	r2, r1, #2
 8007828:	2201      	movgt	r2, #1
 800782a:	4413      	add	r3, r2
 800782c:	e7e0      	b.n	80077f0 <_printf_float+0x1a0>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	055a      	lsls	r2, r3, #21
 8007832:	d407      	bmi.n	8007844 <_printf_float+0x1f4>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	4642      	mov	r2, r8
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	d12c      	bne.n	800789c <_printf_float+0x24c>
 8007842:	e764      	b.n	800770e <_printf_float+0xbe>
 8007844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007848:	f240 80e0 	bls.w	8007a0c <_printf_float+0x3bc>
 800784c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007850:	2200      	movs	r2, #0
 8007852:	2300      	movs	r3, #0
 8007854:	f7f9 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 8007858:	2800      	cmp	r0, #0
 800785a:	d034      	beq.n	80078c6 <_printf_float+0x276>
 800785c:	4a37      	ldr	r2, [pc, #220]	; (800793c <_printf_float+0x2ec>)
 800785e:	2301      	movs	r3, #1
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f af51 	beq.w	800770e <_printf_float+0xbe>
 800786c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007870:	429a      	cmp	r2, r3
 8007872:	db02      	blt.n	800787a <_printf_float+0x22a>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	07d8      	lsls	r0, r3, #31
 8007878:	d510      	bpl.n	800789c <_printf_float+0x24c>
 800787a:	ee18 3a10 	vmov	r3, s16
 800787e:	4652      	mov	r2, sl
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f af41 	beq.w	800770e <_printf_float+0xbe>
 800788c:	f04f 0800 	mov.w	r8, #0
 8007890:	f104 091a 	add.w	r9, r4, #26
 8007894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007896:	3b01      	subs	r3, #1
 8007898:	4543      	cmp	r3, r8
 800789a:	dc09      	bgt.n	80078b0 <_printf_float+0x260>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	079b      	lsls	r3, r3, #30
 80078a0:	f100 8107 	bmi.w	8007ab2 <_printf_float+0x462>
 80078a4:	68e0      	ldr	r0, [r4, #12]
 80078a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a8:	4298      	cmp	r0, r3
 80078aa:	bfb8      	it	lt
 80078ac:	4618      	movlt	r0, r3
 80078ae:	e730      	b.n	8007712 <_printf_float+0xc2>
 80078b0:	2301      	movs	r3, #1
 80078b2:	464a      	mov	r2, r9
 80078b4:	4631      	mov	r1, r6
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	f43f af27 	beq.w	800770e <_printf_float+0xbe>
 80078c0:	f108 0801 	add.w	r8, r8, #1
 80078c4:	e7e6      	b.n	8007894 <_printf_float+0x244>
 80078c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dc39      	bgt.n	8007940 <_printf_float+0x2f0>
 80078cc:	4a1b      	ldr	r2, [pc, #108]	; (800793c <_printf_float+0x2ec>)
 80078ce:	2301      	movs	r3, #1
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	f43f af19 	beq.w	800770e <_printf_float+0xbe>
 80078dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078e0:	4313      	orrs	r3, r2
 80078e2:	d102      	bne.n	80078ea <_printf_float+0x29a>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	07d9      	lsls	r1, r3, #31
 80078e8:	d5d8      	bpl.n	800789c <_printf_float+0x24c>
 80078ea:	ee18 3a10 	vmov	r3, s16
 80078ee:	4652      	mov	r2, sl
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f af09 	beq.w	800770e <_printf_float+0xbe>
 80078fc:	f04f 0900 	mov.w	r9, #0
 8007900:	f104 0a1a 	add.w	sl, r4, #26
 8007904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007906:	425b      	negs	r3, r3
 8007908:	454b      	cmp	r3, r9
 800790a:	dc01      	bgt.n	8007910 <_printf_float+0x2c0>
 800790c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790e:	e792      	b.n	8007836 <_printf_float+0x1e6>
 8007910:	2301      	movs	r3, #1
 8007912:	4652      	mov	r2, sl
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f aef7 	beq.w	800770e <_printf_float+0xbe>
 8007920:	f109 0901 	add.w	r9, r9, #1
 8007924:	e7ee      	b.n	8007904 <_printf_float+0x2b4>
 8007926:	bf00      	nop
 8007928:	7fefffff 	.word	0x7fefffff
 800792c:	0800b9ec 	.word	0x0800b9ec
 8007930:	0800b9f0 	.word	0x0800b9f0
 8007934:	0800b9f4 	.word	0x0800b9f4
 8007938:	0800b9f8 	.word	0x0800b9f8
 800793c:	0800b9fc 	.word	0x0800b9fc
 8007940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007944:	429a      	cmp	r2, r3
 8007946:	bfa8      	it	ge
 8007948:	461a      	movge	r2, r3
 800794a:	2a00      	cmp	r2, #0
 800794c:	4691      	mov	r9, r2
 800794e:	dc37      	bgt.n	80079c0 <_printf_float+0x370>
 8007950:	f04f 0b00 	mov.w	fp, #0
 8007954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007958:	f104 021a 	add.w	r2, r4, #26
 800795c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800795e:	9305      	str	r3, [sp, #20]
 8007960:	eba3 0309 	sub.w	r3, r3, r9
 8007964:	455b      	cmp	r3, fp
 8007966:	dc33      	bgt.n	80079d0 <_printf_float+0x380>
 8007968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800796c:	429a      	cmp	r2, r3
 800796e:	db3b      	blt.n	80079e8 <_printf_float+0x398>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	07da      	lsls	r2, r3, #31
 8007974:	d438      	bmi.n	80079e8 <_printf_float+0x398>
 8007976:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800797a:	eba2 0903 	sub.w	r9, r2, r3
 800797e:	9b05      	ldr	r3, [sp, #20]
 8007980:	1ad2      	subs	r2, r2, r3
 8007982:	4591      	cmp	r9, r2
 8007984:	bfa8      	it	ge
 8007986:	4691      	movge	r9, r2
 8007988:	f1b9 0f00 	cmp.w	r9, #0
 800798c:	dc35      	bgt.n	80079fa <_printf_float+0x3aa>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007996:	f104 0a1a 	add.w	sl, r4, #26
 800799a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	eba3 0309 	sub.w	r3, r3, r9
 80079a4:	4543      	cmp	r3, r8
 80079a6:	f77f af79 	ble.w	800789c <_printf_float+0x24c>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4652      	mov	r2, sl
 80079ae:	4631      	mov	r1, r6
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b8      	blx	r7
 80079b4:	3001      	adds	r0, #1
 80079b6:	f43f aeaa 	beq.w	800770e <_printf_float+0xbe>
 80079ba:	f108 0801 	add.w	r8, r8, #1
 80079be:	e7ec      	b.n	800799a <_printf_float+0x34a>
 80079c0:	4613      	mov	r3, r2
 80079c2:	4631      	mov	r1, r6
 80079c4:	4642      	mov	r2, r8
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	d1c0      	bne.n	8007950 <_printf_float+0x300>
 80079ce:	e69e      	b.n	800770e <_printf_float+0xbe>
 80079d0:	2301      	movs	r3, #1
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	9205      	str	r2, [sp, #20]
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	f43f ae97 	beq.w	800770e <_printf_float+0xbe>
 80079e0:	9a05      	ldr	r2, [sp, #20]
 80079e2:	f10b 0b01 	add.w	fp, fp, #1
 80079e6:	e7b9      	b.n	800795c <_printf_float+0x30c>
 80079e8:	ee18 3a10 	vmov	r3, s16
 80079ec:	4652      	mov	r2, sl
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	d1be      	bne.n	8007976 <_printf_float+0x326>
 80079f8:	e689      	b.n	800770e <_printf_float+0xbe>
 80079fa:	9a05      	ldr	r2, [sp, #20]
 80079fc:	464b      	mov	r3, r9
 80079fe:	4442      	add	r2, r8
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	d1c1      	bne.n	800798e <_printf_float+0x33e>
 8007a0a:	e680      	b.n	800770e <_printf_float+0xbe>
 8007a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0e:	2a01      	cmp	r2, #1
 8007a10:	dc01      	bgt.n	8007a16 <_printf_float+0x3c6>
 8007a12:	07db      	lsls	r3, r3, #31
 8007a14:	d53a      	bpl.n	8007a8c <_printf_float+0x43c>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4642      	mov	r2, r8
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	f43f ae74 	beq.w	800770e <_printf_float+0xbe>
 8007a26:	ee18 3a10 	vmov	r3, s16
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	f43f ae6b 	beq.w	800770e <_printf_float+0xbe>
 8007a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007a44:	f7f9 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a48:	b9d8      	cbnz	r0, 8007a82 <_printf_float+0x432>
 8007a4a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007a4e:	f108 0201 	add.w	r2, r8, #1
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d10e      	bne.n	8007a7a <_printf_float+0x42a>
 8007a5c:	e657      	b.n	800770e <_printf_float+0xbe>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	4631      	mov	r1, r6
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b8      	blx	r7
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f43f ae50 	beq.w	800770e <_printf_float+0xbe>
 8007a6e:	f108 0801 	add.w	r8, r8, #1
 8007a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a74:	3b01      	subs	r3, #1
 8007a76:	4543      	cmp	r3, r8
 8007a78:	dcf1      	bgt.n	8007a5e <_printf_float+0x40e>
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a80:	e6da      	b.n	8007838 <_printf_float+0x1e8>
 8007a82:	f04f 0800 	mov.w	r8, #0
 8007a86:	f104 0a1a 	add.w	sl, r4, #26
 8007a8a:	e7f2      	b.n	8007a72 <_printf_float+0x422>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4642      	mov	r2, r8
 8007a90:	e7df      	b.n	8007a52 <_printf_float+0x402>
 8007a92:	2301      	movs	r3, #1
 8007a94:	464a      	mov	r2, r9
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f43f ae36 	beq.w	800770e <_printf_float+0xbe>
 8007aa2:	f108 0801 	add.w	r8, r8, #1
 8007aa6:	68e3      	ldr	r3, [r4, #12]
 8007aa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007aaa:	1a5b      	subs	r3, r3, r1
 8007aac:	4543      	cmp	r3, r8
 8007aae:	dcf0      	bgt.n	8007a92 <_printf_float+0x442>
 8007ab0:	e6f8      	b.n	80078a4 <_printf_float+0x254>
 8007ab2:	f04f 0800 	mov.w	r8, #0
 8007ab6:	f104 0919 	add.w	r9, r4, #25
 8007aba:	e7f4      	b.n	8007aa6 <_printf_float+0x456>

08007abc <_printf_common>:
 8007abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	4699      	mov	r9, r3
 8007ac4:	688a      	ldr	r2, [r1, #8]
 8007ac6:	690b      	ldr	r3, [r1, #16]
 8007ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	bfb8      	it	lt
 8007ad0:	4613      	movlt	r3, r2
 8007ad2:	6033      	str	r3, [r6, #0]
 8007ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ad8:	4607      	mov	r7, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	b10a      	cbz	r2, 8007ae2 <_printf_common+0x26>
 8007ade:	3301      	adds	r3, #1
 8007ae0:	6033      	str	r3, [r6, #0]
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	0699      	lsls	r1, r3, #26
 8007ae6:	bf42      	ittt	mi
 8007ae8:	6833      	ldrmi	r3, [r6, #0]
 8007aea:	3302      	addmi	r3, #2
 8007aec:	6033      	strmi	r3, [r6, #0]
 8007aee:	6825      	ldr	r5, [r4, #0]
 8007af0:	f015 0506 	ands.w	r5, r5, #6
 8007af4:	d106      	bne.n	8007b04 <_printf_common+0x48>
 8007af6:	f104 0a19 	add.w	sl, r4, #25
 8007afa:	68e3      	ldr	r3, [r4, #12]
 8007afc:	6832      	ldr	r2, [r6, #0]
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	dc26      	bgt.n	8007b52 <_printf_common+0x96>
 8007b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b08:	1e13      	subs	r3, r2, #0
 8007b0a:	6822      	ldr	r2, [r4, #0]
 8007b0c:	bf18      	it	ne
 8007b0e:	2301      	movne	r3, #1
 8007b10:	0692      	lsls	r2, r2, #26
 8007b12:	d42b      	bmi.n	8007b6c <_printf_common+0xb0>
 8007b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	47c0      	blx	r8
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d01e      	beq.n	8007b60 <_printf_common+0xa4>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	6922      	ldr	r2, [r4, #16]
 8007b26:	f003 0306 	and.w	r3, r3, #6
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	bf02      	ittt	eq
 8007b2e:	68e5      	ldreq	r5, [r4, #12]
 8007b30:	6833      	ldreq	r3, [r6, #0]
 8007b32:	1aed      	subeq	r5, r5, r3
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	bf0c      	ite	eq
 8007b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b3c:	2500      	movne	r5, #0
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	bfc4      	itt	gt
 8007b42:	1a9b      	subgt	r3, r3, r2
 8007b44:	18ed      	addgt	r5, r5, r3
 8007b46:	2600      	movs	r6, #0
 8007b48:	341a      	adds	r4, #26
 8007b4a:	42b5      	cmp	r5, r6
 8007b4c:	d11a      	bne.n	8007b84 <_printf_common+0xc8>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	e008      	b.n	8007b64 <_printf_common+0xa8>
 8007b52:	2301      	movs	r3, #1
 8007b54:	4652      	mov	r2, sl
 8007b56:	4649      	mov	r1, r9
 8007b58:	4638      	mov	r0, r7
 8007b5a:	47c0      	blx	r8
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d103      	bne.n	8007b68 <_printf_common+0xac>
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b68:	3501      	adds	r5, #1
 8007b6a:	e7c6      	b.n	8007afa <_printf_common+0x3e>
 8007b6c:	18e1      	adds	r1, r4, r3
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	2030      	movs	r0, #48	; 0x30
 8007b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b76:	4422      	add	r2, r4
 8007b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b80:	3302      	adds	r3, #2
 8007b82:	e7c7      	b.n	8007b14 <_printf_common+0x58>
 8007b84:	2301      	movs	r3, #1
 8007b86:	4622      	mov	r2, r4
 8007b88:	4649      	mov	r1, r9
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	47c0      	blx	r8
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d0e6      	beq.n	8007b60 <_printf_common+0xa4>
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7d9      	b.n	8007b4a <_printf_common+0x8e>
	...

08007b98 <_printf_i>:
 8007b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	7e0f      	ldrb	r7, [r1, #24]
 8007b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ba0:	2f78      	cmp	r7, #120	; 0x78
 8007ba2:	4691      	mov	r9, r2
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	469a      	mov	sl, r3
 8007baa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bae:	d807      	bhi.n	8007bc0 <_printf_i+0x28>
 8007bb0:	2f62      	cmp	r7, #98	; 0x62
 8007bb2:	d80a      	bhi.n	8007bca <_printf_i+0x32>
 8007bb4:	2f00      	cmp	r7, #0
 8007bb6:	f000 80d4 	beq.w	8007d62 <_printf_i+0x1ca>
 8007bba:	2f58      	cmp	r7, #88	; 0x58
 8007bbc:	f000 80c0 	beq.w	8007d40 <_printf_i+0x1a8>
 8007bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bc8:	e03a      	b.n	8007c40 <_printf_i+0xa8>
 8007bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bce:	2b15      	cmp	r3, #21
 8007bd0:	d8f6      	bhi.n	8007bc0 <_printf_i+0x28>
 8007bd2:	a101      	add	r1, pc, #4	; (adr r1, 8007bd8 <_printf_i+0x40>)
 8007bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd8:	08007c31 	.word	0x08007c31
 8007bdc:	08007c45 	.word	0x08007c45
 8007be0:	08007bc1 	.word	0x08007bc1
 8007be4:	08007bc1 	.word	0x08007bc1
 8007be8:	08007bc1 	.word	0x08007bc1
 8007bec:	08007bc1 	.word	0x08007bc1
 8007bf0:	08007c45 	.word	0x08007c45
 8007bf4:	08007bc1 	.word	0x08007bc1
 8007bf8:	08007bc1 	.word	0x08007bc1
 8007bfc:	08007bc1 	.word	0x08007bc1
 8007c00:	08007bc1 	.word	0x08007bc1
 8007c04:	08007d49 	.word	0x08007d49
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007d03 	.word	0x08007d03
 8007c10:	08007bc1 	.word	0x08007bc1
 8007c14:	08007bc1 	.word	0x08007bc1
 8007c18:	08007d6b 	.word	0x08007d6b
 8007c1c:	08007bc1 	.word	0x08007bc1
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007bc1 	.word	0x08007bc1
 8007c28:	08007bc1 	.word	0x08007bc1
 8007c2c:	08007d0b 	.word	0x08007d0b
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	1d1a      	adds	r2, r3, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	602a      	str	r2, [r5, #0]
 8007c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c40:	2301      	movs	r3, #1
 8007c42:	e09f      	b.n	8007d84 <_printf_i+0x1ec>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	0607      	lsls	r7, r0, #24
 8007c4a:	f103 0104 	add.w	r1, r3, #4
 8007c4e:	6029      	str	r1, [r5, #0]
 8007c50:	d501      	bpl.n	8007c56 <_printf_i+0xbe>
 8007c52:	681e      	ldr	r6, [r3, #0]
 8007c54:	e003      	b.n	8007c5e <_printf_i+0xc6>
 8007c56:	0646      	lsls	r6, r0, #25
 8007c58:	d5fb      	bpl.n	8007c52 <_printf_i+0xba>
 8007c5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	da03      	bge.n	8007c6a <_printf_i+0xd2>
 8007c62:	232d      	movs	r3, #45	; 0x2d
 8007c64:	4276      	negs	r6, r6
 8007c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6a:	485a      	ldr	r0, [pc, #360]	; (8007dd4 <_printf_i+0x23c>)
 8007c6c:	230a      	movs	r3, #10
 8007c6e:	e012      	b.n	8007c96 <_printf_i+0xfe>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	6820      	ldr	r0, [r4, #0]
 8007c74:	1d19      	adds	r1, r3, #4
 8007c76:	6029      	str	r1, [r5, #0]
 8007c78:	0605      	lsls	r5, r0, #24
 8007c7a:	d501      	bpl.n	8007c80 <_printf_i+0xe8>
 8007c7c:	681e      	ldr	r6, [r3, #0]
 8007c7e:	e002      	b.n	8007c86 <_printf_i+0xee>
 8007c80:	0641      	lsls	r1, r0, #25
 8007c82:	d5fb      	bpl.n	8007c7c <_printf_i+0xe4>
 8007c84:	881e      	ldrh	r6, [r3, #0]
 8007c86:	4853      	ldr	r0, [pc, #332]	; (8007dd4 <_printf_i+0x23c>)
 8007c88:	2f6f      	cmp	r7, #111	; 0x6f
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2308      	moveq	r3, #8
 8007c8e:	230a      	movne	r3, #10
 8007c90:	2100      	movs	r1, #0
 8007c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c96:	6865      	ldr	r5, [r4, #4]
 8007c98:	60a5      	str	r5, [r4, #8]
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	bfa2      	ittt	ge
 8007c9e:	6821      	ldrge	r1, [r4, #0]
 8007ca0:	f021 0104 	bicge.w	r1, r1, #4
 8007ca4:	6021      	strge	r1, [r4, #0]
 8007ca6:	b90e      	cbnz	r6, 8007cac <_printf_i+0x114>
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	d04b      	beq.n	8007d44 <_printf_i+0x1ac>
 8007cac:	4615      	mov	r5, r2
 8007cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8007cb6:	5dc7      	ldrb	r7, [r0, r7]
 8007cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cbc:	4637      	mov	r7, r6
 8007cbe:	42bb      	cmp	r3, r7
 8007cc0:	460e      	mov	r6, r1
 8007cc2:	d9f4      	bls.n	8007cae <_printf_i+0x116>
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d10b      	bne.n	8007ce0 <_printf_i+0x148>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	07de      	lsls	r6, r3, #31
 8007ccc:	d508      	bpl.n	8007ce0 <_printf_i+0x148>
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	6861      	ldr	r1, [r4, #4]
 8007cd2:	4299      	cmp	r1, r3
 8007cd4:	bfde      	ittt	le
 8007cd6:	2330      	movle	r3, #48	; 0x30
 8007cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cdc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ce0:	1b52      	subs	r2, r2, r5
 8007ce2:	6122      	str	r2, [r4, #16]
 8007ce4:	f8cd a000 	str.w	sl, [sp]
 8007ce8:	464b      	mov	r3, r9
 8007cea:	aa03      	add	r2, sp, #12
 8007cec:	4621      	mov	r1, r4
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7ff fee4 	bl	8007abc <_printf_common>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d14a      	bne.n	8007d8e <_printf_i+0x1f6>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cfc:	b004      	add	sp, #16
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f043 0320 	orr.w	r3, r3, #32
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	4833      	ldr	r0, [pc, #204]	; (8007dd8 <_printf_i+0x240>)
 8007d0c:	2778      	movs	r7, #120	; 0x78
 8007d0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	6829      	ldr	r1, [r5, #0]
 8007d16:	061f      	lsls	r7, r3, #24
 8007d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d1c:	d402      	bmi.n	8007d24 <_printf_i+0x18c>
 8007d1e:	065f      	lsls	r7, r3, #25
 8007d20:	bf48      	it	mi
 8007d22:	b2b6      	uxthmi	r6, r6
 8007d24:	07df      	lsls	r7, r3, #31
 8007d26:	bf48      	it	mi
 8007d28:	f043 0320 	orrmi.w	r3, r3, #32
 8007d2c:	6029      	str	r1, [r5, #0]
 8007d2e:	bf48      	it	mi
 8007d30:	6023      	strmi	r3, [r4, #0]
 8007d32:	b91e      	cbnz	r6, 8007d3c <_printf_i+0x1a4>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	f023 0320 	bic.w	r3, r3, #32
 8007d3a:	6023      	str	r3, [r4, #0]
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	e7a7      	b.n	8007c90 <_printf_i+0xf8>
 8007d40:	4824      	ldr	r0, [pc, #144]	; (8007dd4 <_printf_i+0x23c>)
 8007d42:	e7e4      	b.n	8007d0e <_printf_i+0x176>
 8007d44:	4615      	mov	r5, r2
 8007d46:	e7bd      	b.n	8007cc4 <_printf_i+0x12c>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	6826      	ldr	r6, [r4, #0]
 8007d4c:	6961      	ldr	r1, [r4, #20]
 8007d4e:	1d18      	adds	r0, r3, #4
 8007d50:	6028      	str	r0, [r5, #0]
 8007d52:	0635      	lsls	r5, r6, #24
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	d501      	bpl.n	8007d5c <_printf_i+0x1c4>
 8007d58:	6019      	str	r1, [r3, #0]
 8007d5a:	e002      	b.n	8007d62 <_printf_i+0x1ca>
 8007d5c:	0670      	lsls	r0, r6, #25
 8007d5e:	d5fb      	bpl.n	8007d58 <_printf_i+0x1c0>
 8007d60:	8019      	strh	r1, [r3, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	4615      	mov	r5, r2
 8007d68:	e7bc      	b.n	8007ce4 <_printf_i+0x14c>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	1d1a      	adds	r2, r3, #4
 8007d6e:	602a      	str	r2, [r5, #0]
 8007d70:	681d      	ldr	r5, [r3, #0]
 8007d72:	6862      	ldr	r2, [r4, #4]
 8007d74:	2100      	movs	r1, #0
 8007d76:	4628      	mov	r0, r5
 8007d78:	f7f8 fa2a 	bl	80001d0 <memchr>
 8007d7c:	b108      	cbz	r0, 8007d82 <_printf_i+0x1ea>
 8007d7e:	1b40      	subs	r0, r0, r5
 8007d80:	6060      	str	r0, [r4, #4]
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	2300      	movs	r3, #0
 8007d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8c:	e7aa      	b.n	8007ce4 <_printf_i+0x14c>
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	462a      	mov	r2, r5
 8007d92:	4649      	mov	r1, r9
 8007d94:	4640      	mov	r0, r8
 8007d96:	47d0      	blx	sl
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d0ad      	beq.n	8007cf8 <_printf_i+0x160>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	079b      	lsls	r3, r3, #30
 8007da0:	d413      	bmi.n	8007dca <_printf_i+0x232>
 8007da2:	68e0      	ldr	r0, [r4, #12]
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	4298      	cmp	r0, r3
 8007da8:	bfb8      	it	lt
 8007daa:	4618      	movlt	r0, r3
 8007dac:	e7a6      	b.n	8007cfc <_printf_i+0x164>
 8007dae:	2301      	movs	r3, #1
 8007db0:	4632      	mov	r2, r6
 8007db2:	4649      	mov	r1, r9
 8007db4:	4640      	mov	r0, r8
 8007db6:	47d0      	blx	sl
 8007db8:	3001      	adds	r0, #1
 8007dba:	d09d      	beq.n	8007cf8 <_printf_i+0x160>
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	9903      	ldr	r1, [sp, #12]
 8007dc2:	1a5b      	subs	r3, r3, r1
 8007dc4:	42ab      	cmp	r3, r5
 8007dc6:	dcf2      	bgt.n	8007dae <_printf_i+0x216>
 8007dc8:	e7eb      	b.n	8007da2 <_printf_i+0x20a>
 8007dca:	2500      	movs	r5, #0
 8007dcc:	f104 0619 	add.w	r6, r4, #25
 8007dd0:	e7f5      	b.n	8007dbe <_printf_i+0x226>
 8007dd2:	bf00      	nop
 8007dd4:	0800b9fe 	.word	0x0800b9fe
 8007dd8:	0800ba0f 	.word	0x0800ba0f

08007ddc <std>:
 8007ddc:	2300      	movs	r3, #0
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	e9c0 3300 	strd	r3, r3, [r0]
 8007de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dea:	6083      	str	r3, [r0, #8]
 8007dec:	8181      	strh	r1, [r0, #12]
 8007dee:	6643      	str	r3, [r0, #100]	; 0x64
 8007df0:	81c2      	strh	r2, [r0, #14]
 8007df2:	6183      	str	r3, [r0, #24]
 8007df4:	4619      	mov	r1, r3
 8007df6:	2208      	movs	r2, #8
 8007df8:	305c      	adds	r0, #92	; 0x5c
 8007dfa:	f000 f8f4 	bl	8007fe6 <memset>
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <std+0x38>)
 8007e00:	6263      	str	r3, [r4, #36]	; 0x24
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x3c>)
 8007e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <std+0x40>)
 8007e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <std+0x44>)
 8007e0c:	6224      	str	r4, [r4, #32]
 8007e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	bf00      	nop
 8007e14:	08007f61 	.word	0x08007f61
 8007e18:	08007f83 	.word	0x08007f83
 8007e1c:	08007fbb 	.word	0x08007fbb
 8007e20:	08007fdf 	.word	0x08007fdf

08007e24 <stdio_exit_handler>:
 8007e24:	4a02      	ldr	r2, [pc, #8]	; (8007e30 <stdio_exit_handler+0xc>)
 8007e26:	4903      	ldr	r1, [pc, #12]	; (8007e34 <stdio_exit_handler+0x10>)
 8007e28:	4803      	ldr	r0, [pc, #12]	; (8007e38 <stdio_exit_handler+0x14>)
 8007e2a:	f000 b869 	b.w	8007f00 <_fwalk_sglue>
 8007e2e:	bf00      	nop
 8007e30:	2000000c 	.word	0x2000000c
 8007e34:	08009921 	.word	0x08009921
 8007e38:	20000018 	.word	0x20000018

08007e3c <cleanup_stdio>:
 8007e3c:	6841      	ldr	r1, [r0, #4]
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <cleanup_stdio+0x34>)
 8007e40:	4299      	cmp	r1, r3
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	d001      	beq.n	8007e4c <cleanup_stdio+0x10>
 8007e48:	f001 fd6a 	bl	8009920 <_fflush_r>
 8007e4c:	68a1      	ldr	r1, [r4, #8]
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <cleanup_stdio+0x38>)
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <cleanup_stdio+0x1e>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f001 fd63 	bl	8009920 <_fflush_r>
 8007e5a:	68e1      	ldr	r1, [r4, #12]
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <cleanup_stdio+0x3c>)
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	d004      	beq.n	8007e6c <cleanup_stdio+0x30>
 8007e62:	4620      	mov	r0, r4
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f001 bd5a 	b.w	8009920 <_fflush_r>
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000390 	.word	0x20000390
 8007e74:	200003f8 	.word	0x200003f8
 8007e78:	20000460 	.word	0x20000460

08007e7c <global_stdio_init.part.0>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <global_stdio_init.part.0+0x30>)
 8007e80:	4c0b      	ldr	r4, [pc, #44]	; (8007eb0 <global_stdio_init.part.0+0x34>)
 8007e82:	4a0c      	ldr	r2, [pc, #48]	; (8007eb4 <global_stdio_init.part.0+0x38>)
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	4620      	mov	r0, r4
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2104      	movs	r1, #4
 8007e8c:	f7ff ffa6 	bl	8007ddc <std>
 8007e90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e94:	2201      	movs	r2, #1
 8007e96:	2109      	movs	r1, #9
 8007e98:	f7ff ffa0 	bl	8007ddc <std>
 8007e9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea6:	2112      	movs	r1, #18
 8007ea8:	f7ff bf98 	b.w	8007ddc <std>
 8007eac:	200004c8 	.word	0x200004c8
 8007eb0:	20000390 	.word	0x20000390
 8007eb4:	08007e25 	.word	0x08007e25

08007eb8 <__sfp_lock_acquire>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__sfp_lock_acquire+0x8>)
 8007eba:	f000 b921 	b.w	8008100 <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	200004d1 	.word	0x200004d1

08007ec4 <__sfp_lock_release>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__sfp_lock_release+0x8>)
 8007ec6:	f000 b91c 	b.w	8008102 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	200004d1 	.word	0x200004d1

08007ed0 <__sinit>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	f7ff fff0 	bl	8007eb8 <__sfp_lock_acquire>
 8007ed8:	6a23      	ldr	r3, [r4, #32]
 8007eda:	b11b      	cbz	r3, 8007ee4 <__sinit+0x14>
 8007edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee0:	f7ff bff0 	b.w	8007ec4 <__sfp_lock_release>
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <__sinit+0x28>)
 8007ee6:	6223      	str	r3, [r4, #32]
 8007ee8:	4b04      	ldr	r3, [pc, #16]	; (8007efc <__sinit+0x2c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f5      	bne.n	8007edc <__sinit+0xc>
 8007ef0:	f7ff ffc4 	bl	8007e7c <global_stdio_init.part.0>
 8007ef4:	e7f2      	b.n	8007edc <__sinit+0xc>
 8007ef6:	bf00      	nop
 8007ef8:	08007e3d 	.word	0x08007e3d
 8007efc:	200004c8 	.word	0x200004c8

08007f00 <_fwalk_sglue>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4607      	mov	r7, r0
 8007f06:	4688      	mov	r8, r1
 8007f08:	4614      	mov	r4, r2
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f10:	f1b9 0901 	subs.w	r9, r9, #1
 8007f14:	d505      	bpl.n	8007f22 <_fwalk_sglue+0x22>
 8007f16:	6824      	ldr	r4, [r4, #0]
 8007f18:	2c00      	cmp	r4, #0
 8007f1a:	d1f7      	bne.n	8007f0c <_fwalk_sglue+0xc>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d907      	bls.n	8007f38 <_fwalk_sglue+0x38>
 8007f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	d003      	beq.n	8007f38 <_fwalk_sglue+0x38>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	4306      	orrs	r6, r0
 8007f38:	3568      	adds	r5, #104	; 0x68
 8007f3a:	e7e9      	b.n	8007f10 <_fwalk_sglue+0x10>

08007f3c <iprintf>:
 8007f3c:	b40f      	push	{r0, r1, r2, r3}
 8007f3e:	b507      	push	{r0, r1, r2, lr}
 8007f40:	4906      	ldr	r1, [pc, #24]	; (8007f5c <iprintf+0x20>)
 8007f42:	ab04      	add	r3, sp, #16
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4a:	6881      	ldr	r1, [r0, #8]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	f001 fb47 	bl	80095e0 <_vfiprintf_r>
 8007f52:	b003      	add	sp, #12
 8007f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f58:	b004      	add	sp, #16
 8007f5a:	4770      	bx	lr
 8007f5c:	20000064 	.word	0x20000064

08007f60 <__sread>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	460c      	mov	r4, r1
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	f000 f86c 	bl	8008044 <_read_r>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	bfab      	itete	ge
 8007f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f72:	89a3      	ldrhlt	r3, [r4, #12]
 8007f74:	181b      	addge	r3, r3, r0
 8007f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f7a:	bfac      	ite	ge
 8007f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f7e:	81a3      	strhlt	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__swrite>:
 8007f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	461f      	mov	r7, r3
 8007f88:	898b      	ldrh	r3, [r1, #12]
 8007f8a:	05db      	lsls	r3, r3, #23
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	4616      	mov	r6, r2
 8007f92:	d505      	bpl.n	8007fa0 <__swrite+0x1e>
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f000 f840 	bl	8008020 <_lseek_r>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	4632      	mov	r2, r6
 8007fae:	463b      	mov	r3, r7
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	f000 b867 	b.w	8008088 <_write_r>

08007fba <__sseek>:
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc2:	f000 f82d 	bl	8008020 <_lseek_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	bf15      	itete	ne
 8007fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fd6:	81a3      	strheq	r3, [r4, #12]
 8007fd8:	bf18      	it	ne
 8007fda:	81a3      	strhne	r3, [r4, #12]
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <__sclose>:
 8007fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe2:	f000 b80d 	b.w	8008000 <_close_r>

08007fe6 <memset>:
 8007fe6:	4402      	add	r2, r0
 8007fe8:	4603      	mov	r3, r0
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d100      	bne.n	8007ff0 <memset+0xa>
 8007fee:	4770      	bx	lr
 8007ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff4:	e7f9      	b.n	8007fea <memset+0x4>
	...

08007ff8 <_localeconv_r>:
 8007ff8:	4800      	ldr	r0, [pc, #0]	; (8007ffc <_localeconv_r+0x4>)
 8007ffa:	4770      	bx	lr
 8007ffc:	20000158 	.word	0x20000158

08008000 <_close_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d06      	ldr	r5, [pc, #24]	; (800801c <_close_r+0x1c>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f7f9 ff55 	bl	8001eba <_close>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_close_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_close_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	200004cc 	.word	0x200004cc

08008020 <_lseek_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d07      	ldr	r5, [pc, #28]	; (8008040 <_lseek_r+0x20>)
 8008024:	4604      	mov	r4, r0
 8008026:	4608      	mov	r0, r1
 8008028:	4611      	mov	r1, r2
 800802a:	2200      	movs	r2, #0
 800802c:	602a      	str	r2, [r5, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f7f9 ff6a 	bl	8001f08 <_lseek>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_lseek_r+0x1e>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_lseek_r+0x1e>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	200004cc 	.word	0x200004cc

08008044 <_read_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d07      	ldr	r5, [pc, #28]	; (8008064 <_read_r+0x20>)
 8008048:	4604      	mov	r4, r0
 800804a:	4608      	mov	r0, r1
 800804c:	4611      	mov	r1, r2
 800804e:	2200      	movs	r2, #0
 8008050:	602a      	str	r2, [r5, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	f7f9 fef8 	bl	8001e48 <_read>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_read_r+0x1e>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_read_r+0x1e>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	200004cc 	.word	0x200004cc

08008068 <_sbrk_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d06      	ldr	r5, [pc, #24]	; (8008084 <_sbrk_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	f7f9 ff56 	bl	8001f24 <_sbrk>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_sbrk_r+0x1a>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_sbrk_r+0x1a>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	200004cc 	.word	0x200004cc

08008088 <_write_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d07      	ldr	r5, [pc, #28]	; (80080a8 <_write_r+0x20>)
 800808c:	4604      	mov	r4, r0
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f7f9 fef3 	bl	8001e82 <_write>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_write_r+0x1e>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_write_r+0x1e>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200004cc 	.word	0x200004cc

080080ac <__errno>:
 80080ac:	4b01      	ldr	r3, [pc, #4]	; (80080b4 <__errno+0x8>)
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000064 	.word	0x20000064

080080b8 <__libc_init_array>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	4d0d      	ldr	r5, [pc, #52]	; (80080f0 <__libc_init_array+0x38>)
 80080bc:	4c0d      	ldr	r4, [pc, #52]	; (80080f4 <__libc_init_array+0x3c>)
 80080be:	1b64      	subs	r4, r4, r5
 80080c0:	10a4      	asrs	r4, r4, #2
 80080c2:	2600      	movs	r6, #0
 80080c4:	42a6      	cmp	r6, r4
 80080c6:	d109      	bne.n	80080dc <__libc_init_array+0x24>
 80080c8:	4d0b      	ldr	r5, [pc, #44]	; (80080f8 <__libc_init_array+0x40>)
 80080ca:	4c0c      	ldr	r4, [pc, #48]	; (80080fc <__libc_init_array+0x44>)
 80080cc:	f002 fa52 	bl	800a574 <_init>
 80080d0:	1b64      	subs	r4, r4, r5
 80080d2:	10a4      	asrs	r4, r4, #2
 80080d4:	2600      	movs	r6, #0
 80080d6:	42a6      	cmp	r6, r4
 80080d8:	d105      	bne.n	80080e6 <__libc_init_array+0x2e>
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e0:	4798      	blx	r3
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7ee      	b.n	80080c4 <__libc_init_array+0xc>
 80080e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ea:	4798      	blx	r3
 80080ec:	3601      	adds	r6, #1
 80080ee:	e7f2      	b.n	80080d6 <__libc_init_array+0x1e>
 80080f0:	0800bd7c 	.word	0x0800bd7c
 80080f4:	0800bd7c 	.word	0x0800bd7c
 80080f8:	0800bd7c 	.word	0x0800bd7c
 80080fc:	0800bd80 	.word	0x0800bd80

08008100 <__retarget_lock_acquire_recursive>:
 8008100:	4770      	bx	lr

08008102 <__retarget_lock_release_recursive>:
 8008102:	4770      	bx	lr

08008104 <quorem>:
 8008104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	6903      	ldr	r3, [r0, #16]
 800810a:	690c      	ldr	r4, [r1, #16]
 800810c:	42a3      	cmp	r3, r4
 800810e:	4607      	mov	r7, r0
 8008110:	db7e      	blt.n	8008210 <quorem+0x10c>
 8008112:	3c01      	subs	r4, #1
 8008114:	f101 0814 	add.w	r8, r1, #20
 8008118:	f100 0514 	add.w	r5, r0, #20
 800811c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800812a:	3301      	adds	r3, #1
 800812c:	429a      	cmp	r2, r3
 800812e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008132:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008136:	fbb2 f6f3 	udiv	r6, r2, r3
 800813a:	d331      	bcc.n	80081a0 <quorem+0x9c>
 800813c:	f04f 0e00 	mov.w	lr, #0
 8008140:	4640      	mov	r0, r8
 8008142:	46ac      	mov	ip, r5
 8008144:	46f2      	mov	sl, lr
 8008146:	f850 2b04 	ldr.w	r2, [r0], #4
 800814a:	b293      	uxth	r3, r2
 800814c:	fb06 e303 	mla	r3, r6, r3, lr
 8008150:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008154:	0c1a      	lsrs	r2, r3, #16
 8008156:	b29b      	uxth	r3, r3
 8008158:	ebaa 0303 	sub.w	r3, sl, r3
 800815c:	f8dc a000 	ldr.w	sl, [ip]
 8008160:	fa13 f38a 	uxtah	r3, r3, sl
 8008164:	fb06 220e 	mla	r2, r6, lr, r2
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008170:	b292      	uxth	r2, r2
 8008172:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008176:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800817a:	f8bd 3000 	ldrh.w	r3, [sp]
 800817e:	4581      	cmp	r9, r0
 8008180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008184:	f84c 3b04 	str.w	r3, [ip], #4
 8008188:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800818c:	d2db      	bcs.n	8008146 <quorem+0x42>
 800818e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008192:	b92b      	cbnz	r3, 80081a0 <quorem+0x9c>
 8008194:	9b01      	ldr	r3, [sp, #4]
 8008196:	3b04      	subs	r3, #4
 8008198:	429d      	cmp	r5, r3
 800819a:	461a      	mov	r2, r3
 800819c:	d32c      	bcc.n	80081f8 <quorem+0xf4>
 800819e:	613c      	str	r4, [r7, #16]
 80081a0:	4638      	mov	r0, r7
 80081a2:	f001 f8f3 	bl	800938c <__mcmp>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	db22      	blt.n	80081f0 <quorem+0xec>
 80081aa:	3601      	adds	r6, #1
 80081ac:	4629      	mov	r1, r5
 80081ae:	2000      	movs	r0, #0
 80081b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80081b4:	f8d1 c000 	ldr.w	ip, [r1]
 80081b8:	b293      	uxth	r3, r2
 80081ba:	1ac3      	subs	r3, r0, r3
 80081bc:	0c12      	lsrs	r2, r2, #16
 80081be:	fa13 f38c 	uxtah	r3, r3, ip
 80081c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80081c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d0:	45c1      	cmp	r9, r8
 80081d2:	f841 3b04 	str.w	r3, [r1], #4
 80081d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081da:	d2e9      	bcs.n	80081b0 <quorem+0xac>
 80081dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081e4:	b922      	cbnz	r2, 80081f0 <quorem+0xec>
 80081e6:	3b04      	subs	r3, #4
 80081e8:	429d      	cmp	r5, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	d30a      	bcc.n	8008204 <quorem+0x100>
 80081ee:	613c      	str	r4, [r7, #16]
 80081f0:	4630      	mov	r0, r6
 80081f2:	b003      	add	sp, #12
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	3b04      	subs	r3, #4
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	d1ce      	bne.n	800819e <quorem+0x9a>
 8008200:	3c01      	subs	r4, #1
 8008202:	e7c9      	b.n	8008198 <quorem+0x94>
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	3b04      	subs	r3, #4
 8008208:	2a00      	cmp	r2, #0
 800820a:	d1f0      	bne.n	80081ee <quorem+0xea>
 800820c:	3c01      	subs	r4, #1
 800820e:	e7eb      	b.n	80081e8 <quorem+0xe4>
 8008210:	2000      	movs	r0, #0
 8008212:	e7ee      	b.n	80081f2 <quorem+0xee>
 8008214:	0000      	movs	r0, r0
	...

08008218 <_dtoa_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ed2d 8b04 	vpush	{d8-d9}
 8008220:	69c5      	ldr	r5, [r0, #28]
 8008222:	b093      	sub	sp, #76	; 0x4c
 8008224:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008228:	ec57 6b10 	vmov	r6, r7, d0
 800822c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008230:	9107      	str	r1, [sp, #28]
 8008232:	4604      	mov	r4, r0
 8008234:	920a      	str	r2, [sp, #40]	; 0x28
 8008236:	930d      	str	r3, [sp, #52]	; 0x34
 8008238:	b975      	cbnz	r5, 8008258 <_dtoa_r+0x40>
 800823a:	2010      	movs	r0, #16
 800823c:	f7ff f8b4 	bl	80073a8 <malloc>
 8008240:	4602      	mov	r2, r0
 8008242:	61e0      	str	r0, [r4, #28]
 8008244:	b920      	cbnz	r0, 8008250 <_dtoa_r+0x38>
 8008246:	4bae      	ldr	r3, [pc, #696]	; (8008500 <_dtoa_r+0x2e8>)
 8008248:	21ef      	movs	r1, #239	; 0xef
 800824a:	48ae      	ldr	r0, [pc, #696]	; (8008504 <_dtoa_r+0x2ec>)
 800824c:	f001 fc34 	bl	8009ab8 <__assert_func>
 8008250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008254:	6005      	str	r5, [r0, #0]
 8008256:	60c5      	str	r5, [r0, #12]
 8008258:	69e3      	ldr	r3, [r4, #28]
 800825a:	6819      	ldr	r1, [r3, #0]
 800825c:	b151      	cbz	r1, 8008274 <_dtoa_r+0x5c>
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	604a      	str	r2, [r1, #4]
 8008262:	2301      	movs	r3, #1
 8008264:	4093      	lsls	r3, r2
 8008266:	608b      	str	r3, [r1, #8]
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fe53 	bl	8008f14 <_Bfree>
 800826e:	69e3      	ldr	r3, [r4, #28]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	1e3b      	subs	r3, r7, #0
 8008276:	bfbb      	ittet	lt
 8008278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800827c:	9303      	strlt	r3, [sp, #12]
 800827e:	2300      	movge	r3, #0
 8008280:	2201      	movlt	r2, #1
 8008282:	bfac      	ite	ge
 8008284:	f8c8 3000 	strge.w	r3, [r8]
 8008288:	f8c8 2000 	strlt.w	r2, [r8]
 800828c:	4b9e      	ldr	r3, [pc, #632]	; (8008508 <_dtoa_r+0x2f0>)
 800828e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008292:	ea33 0308 	bics.w	r3, r3, r8
 8008296:	d11b      	bne.n	80082d0 <_dtoa_r+0xb8>
 8008298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800829a:	f242 730f 	movw	r3, #9999	; 0x270f
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80082a4:	4333      	orrs	r3, r6
 80082a6:	f000 8593 	beq.w	8008dd0 <_dtoa_r+0xbb8>
 80082aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ac:	b963      	cbnz	r3, 80082c8 <_dtoa_r+0xb0>
 80082ae:	4b97      	ldr	r3, [pc, #604]	; (800850c <_dtoa_r+0x2f4>)
 80082b0:	e027      	b.n	8008302 <_dtoa_r+0xea>
 80082b2:	4b97      	ldr	r3, [pc, #604]	; (8008510 <_dtoa_r+0x2f8>)
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	9800      	ldr	r0, [sp, #0]
 80082be:	b013      	add	sp, #76	; 0x4c
 80082c0:	ecbd 8b04 	vpop	{d8-d9}
 80082c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c8:	4b90      	ldr	r3, [pc, #576]	; (800850c <_dtoa_r+0x2f4>)
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	3303      	adds	r3, #3
 80082ce:	e7f3      	b.n	80082b8 <_dtoa_r+0xa0>
 80082d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082d4:	2200      	movs	r2, #0
 80082d6:	ec51 0b17 	vmov	r0, r1, d7
 80082da:	eeb0 8a47 	vmov.f32	s16, s14
 80082de:	eef0 8a67 	vmov.f32	s17, s15
 80082e2:	2300      	movs	r3, #0
 80082e4:	f7f8 fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80082e8:	4681      	mov	r9, r0
 80082ea:	b160      	cbz	r0, 8008306 <_dtoa_r+0xee>
 80082ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ee:	2301      	movs	r3, #1
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8568 	beq.w	8008dca <_dtoa_r+0xbb2>
 80082fa:	4b86      	ldr	r3, [pc, #536]	; (8008514 <_dtoa_r+0x2fc>)
 80082fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	3b01      	subs	r3, #1
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	e7da      	b.n	80082bc <_dtoa_r+0xa4>
 8008306:	aa10      	add	r2, sp, #64	; 0x40
 8008308:	a911      	add	r1, sp, #68	; 0x44
 800830a:	4620      	mov	r0, r4
 800830c:	eeb0 0a48 	vmov.f32	s0, s16
 8008310:	eef0 0a68 	vmov.f32	s1, s17
 8008314:	f001 f8e0 	bl	80094d8 <__d2b>
 8008318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800831c:	4682      	mov	sl, r0
 800831e:	2d00      	cmp	r5, #0
 8008320:	d07f      	beq.n	8008422 <_dtoa_r+0x20a>
 8008322:	ee18 3a90 	vmov	r3, s17
 8008326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800832a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800832e:	ec51 0b18 	vmov	r0, r1, d8
 8008332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800833a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800833e:	4619      	mov	r1, r3
 8008340:	2200      	movs	r2, #0
 8008342:	4b75      	ldr	r3, [pc, #468]	; (8008518 <_dtoa_r+0x300>)
 8008344:	f7f7 ffa0 	bl	8000288 <__aeabi_dsub>
 8008348:	a367      	add	r3, pc, #412	; (adr r3, 80084e8 <_dtoa_r+0x2d0>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 f953 	bl	80005f8 <__aeabi_dmul>
 8008352:	a367      	add	r3, pc, #412	; (adr r3, 80084f0 <_dtoa_r+0x2d8>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f7f7 ff98 	bl	800028c <__adddf3>
 800835c:	4606      	mov	r6, r0
 800835e:	4628      	mov	r0, r5
 8008360:	460f      	mov	r7, r1
 8008362:	f7f8 f8df 	bl	8000524 <__aeabi_i2d>
 8008366:	a364      	add	r3, pc, #400	; (adr r3, 80084f8 <_dtoa_r+0x2e0>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f8 f944 	bl	80005f8 <__aeabi_dmul>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f7f7 ff88 	bl	800028c <__adddf3>
 800837c:	4606      	mov	r6, r0
 800837e:	460f      	mov	r7, r1
 8008380:	f7f8 fbea 	bl	8000b58 <__aeabi_d2iz>
 8008384:	2200      	movs	r2, #0
 8008386:	4683      	mov	fp, r0
 8008388:	2300      	movs	r3, #0
 800838a:	4630      	mov	r0, r6
 800838c:	4639      	mov	r1, r7
 800838e:	f7f8 fba5 	bl	8000adc <__aeabi_dcmplt>
 8008392:	b148      	cbz	r0, 80083a8 <_dtoa_r+0x190>
 8008394:	4658      	mov	r0, fp
 8008396:	f7f8 f8c5 	bl	8000524 <__aeabi_i2d>
 800839a:	4632      	mov	r2, r6
 800839c:	463b      	mov	r3, r7
 800839e:	f7f8 fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a2:	b908      	cbnz	r0, 80083a8 <_dtoa_r+0x190>
 80083a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80083a8:	f1bb 0f16 	cmp.w	fp, #22
 80083ac:	d857      	bhi.n	800845e <_dtoa_r+0x246>
 80083ae:	4b5b      	ldr	r3, [pc, #364]	; (800851c <_dtoa_r+0x304>)
 80083b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	ec51 0b18 	vmov	r0, r1, d8
 80083bc:	f7f8 fb8e 	bl	8000adc <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d04e      	beq.n	8008462 <_dtoa_r+0x24a>
 80083c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80083c8:	2300      	movs	r3, #0
 80083ca:	930c      	str	r3, [sp, #48]	; 0x30
 80083cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ce:	1b5b      	subs	r3, r3, r5
 80083d0:	1e5a      	subs	r2, r3, #1
 80083d2:	bf45      	ittet	mi
 80083d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80083d8:	9305      	strmi	r3, [sp, #20]
 80083da:	2300      	movpl	r3, #0
 80083dc:	2300      	movmi	r3, #0
 80083de:	9206      	str	r2, [sp, #24]
 80083e0:	bf54      	ite	pl
 80083e2:	9305      	strpl	r3, [sp, #20]
 80083e4:	9306      	strmi	r3, [sp, #24]
 80083e6:	f1bb 0f00 	cmp.w	fp, #0
 80083ea:	db3c      	blt.n	8008466 <_dtoa_r+0x24e>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80083f2:	445b      	add	r3, fp
 80083f4:	9306      	str	r3, [sp, #24]
 80083f6:	2300      	movs	r3, #0
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	2b09      	cmp	r3, #9
 80083fe:	d868      	bhi.n	80084d2 <_dtoa_r+0x2ba>
 8008400:	2b05      	cmp	r3, #5
 8008402:	bfc4      	itt	gt
 8008404:	3b04      	subgt	r3, #4
 8008406:	9307      	strgt	r3, [sp, #28]
 8008408:	9b07      	ldr	r3, [sp, #28]
 800840a:	f1a3 0302 	sub.w	r3, r3, #2
 800840e:	bfcc      	ite	gt
 8008410:	2500      	movgt	r5, #0
 8008412:	2501      	movle	r5, #1
 8008414:	2b03      	cmp	r3, #3
 8008416:	f200 8085 	bhi.w	8008524 <_dtoa_r+0x30c>
 800841a:	e8df f003 	tbb	[pc, r3]
 800841e:	3b2e      	.short	0x3b2e
 8008420:	5839      	.short	0x5839
 8008422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008426:	441d      	add	r5, r3
 8008428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800842c:	2b20      	cmp	r3, #32
 800842e:	bfc1      	itttt	gt
 8008430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008434:	fa08 f803 	lslgt.w	r8, r8, r3
 8008438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800843c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008440:	bfd6      	itet	le
 8008442:	f1c3 0320 	rsble	r3, r3, #32
 8008446:	ea48 0003 	orrgt.w	r0, r8, r3
 800844a:	fa06 f003 	lslle.w	r0, r6, r3
 800844e:	f7f8 f859 	bl	8000504 <__aeabi_ui2d>
 8008452:	2201      	movs	r2, #1
 8008454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008458:	3d01      	subs	r5, #1
 800845a:	920e      	str	r2, [sp, #56]	; 0x38
 800845c:	e76f      	b.n	800833e <_dtoa_r+0x126>
 800845e:	2301      	movs	r3, #1
 8008460:	e7b3      	b.n	80083ca <_dtoa_r+0x1b2>
 8008462:	900c      	str	r0, [sp, #48]	; 0x30
 8008464:	e7b2      	b.n	80083cc <_dtoa_r+0x1b4>
 8008466:	9b05      	ldr	r3, [sp, #20]
 8008468:	eba3 030b 	sub.w	r3, r3, fp
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	f1cb 0300 	rsb	r3, fp, #0
 8008472:	9308      	str	r3, [sp, #32]
 8008474:	2300      	movs	r3, #0
 8008476:	930b      	str	r3, [sp, #44]	; 0x2c
 8008478:	e7bf      	b.n	80083fa <_dtoa_r+0x1e2>
 800847a:	2300      	movs	r3, #0
 800847c:	9309      	str	r3, [sp, #36]	; 0x24
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc52      	bgt.n	800852a <_dtoa_r+0x312>
 8008484:	2301      	movs	r3, #1
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	461a      	mov	r2, r3
 800848c:	920a      	str	r2, [sp, #40]	; 0x28
 800848e:	e00b      	b.n	80084a8 <_dtoa_r+0x290>
 8008490:	2301      	movs	r3, #1
 8008492:	e7f3      	b.n	800847c <_dtoa_r+0x264>
 8008494:	2300      	movs	r3, #0
 8008496:	9309      	str	r3, [sp, #36]	; 0x24
 8008498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849a:	445b      	add	r3, fp
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	3301      	adds	r3, #1
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	bfb8      	it	lt
 80084a6:	2301      	movlt	r3, #1
 80084a8:	69e0      	ldr	r0, [r4, #28]
 80084aa:	2100      	movs	r1, #0
 80084ac:	2204      	movs	r2, #4
 80084ae:	f102 0614 	add.w	r6, r2, #20
 80084b2:	429e      	cmp	r6, r3
 80084b4:	d93d      	bls.n	8008532 <_dtoa_r+0x31a>
 80084b6:	6041      	str	r1, [r0, #4]
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fceb 	bl	8008e94 <_Balloc>
 80084be:	9000      	str	r0, [sp, #0]
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d139      	bne.n	8008538 <_dtoa_r+0x320>
 80084c4:	4b16      	ldr	r3, [pc, #88]	; (8008520 <_dtoa_r+0x308>)
 80084c6:	4602      	mov	r2, r0
 80084c8:	f240 11af 	movw	r1, #431	; 0x1af
 80084cc:	e6bd      	b.n	800824a <_dtoa_r+0x32>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e7e1      	b.n	8008496 <_dtoa_r+0x27e>
 80084d2:	2501      	movs	r5, #1
 80084d4:	2300      	movs	r3, #0
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	9509      	str	r5, [sp, #36]	; 0x24
 80084da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	9304      	str	r3, [sp, #16]
 80084e2:	2200      	movs	r2, #0
 80084e4:	2312      	movs	r3, #18
 80084e6:	e7d1      	b.n	800848c <_dtoa_r+0x274>
 80084e8:	636f4361 	.word	0x636f4361
 80084ec:	3fd287a7 	.word	0x3fd287a7
 80084f0:	8b60c8b3 	.word	0x8b60c8b3
 80084f4:	3fc68a28 	.word	0x3fc68a28
 80084f8:	509f79fb 	.word	0x509f79fb
 80084fc:	3fd34413 	.word	0x3fd34413
 8008500:	0800ba2d 	.word	0x0800ba2d
 8008504:	0800ba44 	.word	0x0800ba44
 8008508:	7ff00000 	.word	0x7ff00000
 800850c:	0800ba29 	.word	0x0800ba29
 8008510:	0800ba20 	.word	0x0800ba20
 8008514:	0800b9fd 	.word	0x0800b9fd
 8008518:	3ff80000 	.word	0x3ff80000
 800851c:	0800bb30 	.word	0x0800bb30
 8008520:	0800ba9c 	.word	0x0800ba9c
 8008524:	2301      	movs	r3, #1
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	e7d7      	b.n	80084da <_dtoa_r+0x2c2>
 800852a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	e7ba      	b.n	80084a8 <_dtoa_r+0x290>
 8008532:	3101      	adds	r1, #1
 8008534:	0052      	lsls	r2, r2, #1
 8008536:	e7ba      	b.n	80084ae <_dtoa_r+0x296>
 8008538:	69e3      	ldr	r3, [r4, #28]
 800853a:	9a00      	ldr	r2, [sp, #0]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	2b0e      	cmp	r3, #14
 8008542:	f200 80a8 	bhi.w	8008696 <_dtoa_r+0x47e>
 8008546:	2d00      	cmp	r5, #0
 8008548:	f000 80a5 	beq.w	8008696 <_dtoa_r+0x47e>
 800854c:	f1bb 0f00 	cmp.w	fp, #0
 8008550:	dd38      	ble.n	80085c4 <_dtoa_r+0x3ac>
 8008552:	4bc0      	ldr	r3, [pc, #768]	; (8008854 <_dtoa_r+0x63c>)
 8008554:	f00b 020f 	and.w	r2, fp, #15
 8008558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800855c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008560:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008564:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008568:	d019      	beq.n	800859e <_dtoa_r+0x386>
 800856a:	4bbb      	ldr	r3, [pc, #748]	; (8008858 <_dtoa_r+0x640>)
 800856c:	ec51 0b18 	vmov	r0, r1, d8
 8008570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008574:	f7f8 f96a 	bl	800084c <__aeabi_ddiv>
 8008578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800857c:	f008 080f 	and.w	r8, r8, #15
 8008580:	2503      	movs	r5, #3
 8008582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008858 <_dtoa_r+0x640>
 8008586:	f1b8 0f00 	cmp.w	r8, #0
 800858a:	d10a      	bne.n	80085a2 <_dtoa_r+0x38a>
 800858c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008590:	4632      	mov	r2, r6
 8008592:	463b      	mov	r3, r7
 8008594:	f7f8 f95a 	bl	800084c <__aeabi_ddiv>
 8008598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800859c:	e02b      	b.n	80085f6 <_dtoa_r+0x3de>
 800859e:	2502      	movs	r5, #2
 80085a0:	e7ef      	b.n	8008582 <_dtoa_r+0x36a>
 80085a2:	f018 0f01 	tst.w	r8, #1
 80085a6:	d008      	beq.n	80085ba <_dtoa_r+0x3a2>
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085b0:	f7f8 f822 	bl	80005f8 <__aeabi_dmul>
 80085b4:	3501      	adds	r5, #1
 80085b6:	4606      	mov	r6, r0
 80085b8:	460f      	mov	r7, r1
 80085ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085be:	f109 0908 	add.w	r9, r9, #8
 80085c2:	e7e0      	b.n	8008586 <_dtoa_r+0x36e>
 80085c4:	f000 809f 	beq.w	8008706 <_dtoa_r+0x4ee>
 80085c8:	f1cb 0600 	rsb	r6, fp, #0
 80085cc:	4ba1      	ldr	r3, [pc, #644]	; (8008854 <_dtoa_r+0x63c>)
 80085ce:	4fa2      	ldr	r7, [pc, #648]	; (8008858 <_dtoa_r+0x640>)
 80085d0:	f006 020f 	and.w	r2, r6, #15
 80085d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	ec51 0b18 	vmov	r0, r1, d8
 80085e0:	f7f8 f80a 	bl	80005f8 <__aeabi_dmul>
 80085e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e8:	1136      	asrs	r6, r6, #4
 80085ea:	2300      	movs	r3, #0
 80085ec:	2502      	movs	r5, #2
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	d17e      	bne.n	80086f0 <_dtoa_r+0x4d8>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1d0      	bne.n	8008598 <_dtoa_r+0x380>
 80085f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8084 	beq.w	800870a <_dtoa_r+0x4f2>
 8008602:	4b96      	ldr	r3, [pc, #600]	; (800885c <_dtoa_r+0x644>)
 8008604:	2200      	movs	r2, #0
 8008606:	4640      	mov	r0, r8
 8008608:	4649      	mov	r1, r9
 800860a:	f7f8 fa67 	bl	8000adc <__aeabi_dcmplt>
 800860e:	2800      	cmp	r0, #0
 8008610:	d07b      	beq.n	800870a <_dtoa_r+0x4f2>
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d078      	beq.n	800870a <_dtoa_r+0x4f2>
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dd39      	ble.n	8008692 <_dtoa_r+0x47a>
 800861e:	4b90      	ldr	r3, [pc, #576]	; (8008860 <_dtoa_r+0x648>)
 8008620:	2200      	movs	r2, #0
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f7f7 ffe7 	bl	80005f8 <__aeabi_dmul>
 800862a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800862e:	9e01      	ldr	r6, [sp, #4]
 8008630:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008634:	3501      	adds	r5, #1
 8008636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800863a:	4628      	mov	r0, r5
 800863c:	f7f7 ff72 	bl	8000524 <__aeabi_i2d>
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	f7f7 ffd8 	bl	80005f8 <__aeabi_dmul>
 8008648:	4b86      	ldr	r3, [pc, #536]	; (8008864 <_dtoa_r+0x64c>)
 800864a:	2200      	movs	r2, #0
 800864c:	f7f7 fe1e 	bl	800028c <__adddf3>
 8008650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	2e00      	cmp	r6, #0
 800865c:	d158      	bne.n	8008710 <_dtoa_r+0x4f8>
 800865e:	4b82      	ldr	r3, [pc, #520]	; (8008868 <_dtoa_r+0x650>)
 8008660:	2200      	movs	r2, #0
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f7f7 fe0f 	bl	8000288 <__aeabi_dsub>
 800866a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	f7f8 fa51 	bl	8000b18 <__aeabi_dcmpgt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f040 8296 	bne.w	8008ba8 <_dtoa_r+0x990>
 800867c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008680:	4640      	mov	r0, r8
 8008682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008686:	4649      	mov	r1, r9
 8008688:	f7f8 fa28 	bl	8000adc <__aeabi_dcmplt>
 800868c:	2800      	cmp	r0, #0
 800868e:	f040 8289 	bne.w	8008ba4 <_dtoa_r+0x98c>
 8008692:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008698:	2b00      	cmp	r3, #0
 800869a:	f2c0 814e 	blt.w	800893a <_dtoa_r+0x722>
 800869e:	f1bb 0f0e 	cmp.w	fp, #14
 80086a2:	f300 814a 	bgt.w	800893a <_dtoa_r+0x722>
 80086a6:	4b6b      	ldr	r3, [pc, #428]	; (8008854 <_dtoa_r+0x63c>)
 80086a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f280 80dc 	bge.w	8008870 <_dtoa_r+0x658>
 80086b8:	9b04      	ldr	r3, [sp, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f300 80d8 	bgt.w	8008870 <_dtoa_r+0x658>
 80086c0:	f040 826f 	bne.w	8008ba2 <_dtoa_r+0x98a>
 80086c4:	4b68      	ldr	r3, [pc, #416]	; (8008868 <_dtoa_r+0x650>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f7 ff94 	bl	80005f8 <__aeabi_dmul>
 80086d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d4:	f7f8 fa16 	bl	8000b04 <__aeabi_dcmpge>
 80086d8:	9e04      	ldr	r6, [sp, #16]
 80086da:	4637      	mov	r7, r6
 80086dc:	2800      	cmp	r0, #0
 80086de:	f040 8245 	bne.w	8008b6c <_dtoa_r+0x954>
 80086e2:	9d00      	ldr	r5, [sp, #0]
 80086e4:	2331      	movs	r3, #49	; 0x31
 80086e6:	f805 3b01 	strb.w	r3, [r5], #1
 80086ea:	f10b 0b01 	add.w	fp, fp, #1
 80086ee:	e241      	b.n	8008b74 <_dtoa_r+0x95c>
 80086f0:	07f2      	lsls	r2, r6, #31
 80086f2:	d505      	bpl.n	8008700 <_dtoa_r+0x4e8>
 80086f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	3501      	adds	r5, #1
 80086fe:	2301      	movs	r3, #1
 8008700:	1076      	asrs	r6, r6, #1
 8008702:	3708      	adds	r7, #8
 8008704:	e773      	b.n	80085ee <_dtoa_r+0x3d6>
 8008706:	2502      	movs	r5, #2
 8008708:	e775      	b.n	80085f6 <_dtoa_r+0x3de>
 800870a:	9e04      	ldr	r6, [sp, #16]
 800870c:	465f      	mov	r7, fp
 800870e:	e792      	b.n	8008636 <_dtoa_r+0x41e>
 8008710:	9900      	ldr	r1, [sp, #0]
 8008712:	4b50      	ldr	r3, [pc, #320]	; (8008854 <_dtoa_r+0x63c>)
 8008714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008718:	4431      	add	r1, r6
 800871a:	9102      	str	r1, [sp, #8]
 800871c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800871e:	eeb0 9a47 	vmov.f32	s18, s14
 8008722:	eef0 9a67 	vmov.f32	s19, s15
 8008726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800872a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800872e:	2900      	cmp	r1, #0
 8008730:	d044      	beq.n	80087bc <_dtoa_r+0x5a4>
 8008732:	494e      	ldr	r1, [pc, #312]	; (800886c <_dtoa_r+0x654>)
 8008734:	2000      	movs	r0, #0
 8008736:	f7f8 f889 	bl	800084c <__aeabi_ddiv>
 800873a:	ec53 2b19 	vmov	r2, r3, d9
 800873e:	f7f7 fda3 	bl	8000288 <__aeabi_dsub>
 8008742:	9d00      	ldr	r5, [sp, #0]
 8008744:	ec41 0b19 	vmov	d9, r0, r1
 8008748:	4649      	mov	r1, r9
 800874a:	4640      	mov	r0, r8
 800874c:	f7f8 fa04 	bl	8000b58 <__aeabi_d2iz>
 8008750:	4606      	mov	r6, r0
 8008752:	f7f7 fee7 	bl	8000524 <__aeabi_i2d>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f7 fd93 	bl	8000288 <__aeabi_dsub>
 8008762:	3630      	adds	r6, #48	; 0x30
 8008764:	f805 6b01 	strb.w	r6, [r5], #1
 8008768:	ec53 2b19 	vmov	r2, r3, d9
 800876c:	4680      	mov	r8, r0
 800876e:	4689      	mov	r9, r1
 8008770:	f7f8 f9b4 	bl	8000adc <__aeabi_dcmplt>
 8008774:	2800      	cmp	r0, #0
 8008776:	d164      	bne.n	8008842 <_dtoa_r+0x62a>
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	4937      	ldr	r1, [pc, #220]	; (800885c <_dtoa_r+0x644>)
 800877e:	2000      	movs	r0, #0
 8008780:	f7f7 fd82 	bl	8000288 <__aeabi_dsub>
 8008784:	ec53 2b19 	vmov	r2, r3, d9
 8008788:	f7f8 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800878c:	2800      	cmp	r0, #0
 800878e:	f040 80b6 	bne.w	80088fe <_dtoa_r+0x6e6>
 8008792:	9b02      	ldr	r3, [sp, #8]
 8008794:	429d      	cmp	r5, r3
 8008796:	f43f af7c 	beq.w	8008692 <_dtoa_r+0x47a>
 800879a:	4b31      	ldr	r3, [pc, #196]	; (8008860 <_dtoa_r+0x648>)
 800879c:	ec51 0b19 	vmov	r0, r1, d9
 80087a0:	2200      	movs	r2, #0
 80087a2:	f7f7 ff29 	bl	80005f8 <__aeabi_dmul>
 80087a6:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <_dtoa_r+0x648>)
 80087a8:	ec41 0b19 	vmov	d9, r0, r1
 80087ac:	2200      	movs	r2, #0
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f7 ff21 	bl	80005f8 <__aeabi_dmul>
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	e7c5      	b.n	8008748 <_dtoa_r+0x530>
 80087bc:	ec51 0b17 	vmov	r0, r1, d7
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	9d00      	ldr	r5, [sp, #0]
 80087c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80087ca:	ec41 0b19 	vmov	d9, r0, r1
 80087ce:	4649      	mov	r1, r9
 80087d0:	4640      	mov	r0, r8
 80087d2:	f7f8 f9c1 	bl	8000b58 <__aeabi_d2iz>
 80087d6:	4606      	mov	r6, r0
 80087d8:	f7f7 fea4 	bl	8000524 <__aeabi_i2d>
 80087dc:	3630      	adds	r6, #48	; 0x30
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f7 fd4f 	bl	8000288 <__aeabi_dsub>
 80087ea:	f805 6b01 	strb.w	r6, [r5], #1
 80087ee:	9b02      	ldr	r3, [sp, #8]
 80087f0:	429d      	cmp	r5, r3
 80087f2:	4680      	mov	r8, r0
 80087f4:	4689      	mov	r9, r1
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	d124      	bne.n	8008846 <_dtoa_r+0x62e>
 80087fc:	4b1b      	ldr	r3, [pc, #108]	; (800886c <_dtoa_r+0x654>)
 80087fe:	ec51 0b19 	vmov	r0, r1, d9
 8008802:	f7f7 fd43 	bl	800028c <__adddf3>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	f7f8 f983 	bl	8000b18 <__aeabi_dcmpgt>
 8008812:	2800      	cmp	r0, #0
 8008814:	d173      	bne.n	80088fe <_dtoa_r+0x6e6>
 8008816:	ec53 2b19 	vmov	r2, r3, d9
 800881a:	4914      	ldr	r1, [pc, #80]	; (800886c <_dtoa_r+0x654>)
 800881c:	2000      	movs	r0, #0
 800881e:	f7f7 fd33 	bl	8000288 <__aeabi_dsub>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4640      	mov	r0, r8
 8008828:	4649      	mov	r1, r9
 800882a:	f7f8 f957 	bl	8000adc <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f af2f 	beq.w	8008692 <_dtoa_r+0x47a>
 8008834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008836:	1e6b      	subs	r3, r5, #1
 8008838:	930f      	str	r3, [sp, #60]	; 0x3c
 800883a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800883e:	2b30      	cmp	r3, #48	; 0x30
 8008840:	d0f8      	beq.n	8008834 <_dtoa_r+0x61c>
 8008842:	46bb      	mov	fp, r7
 8008844:	e04a      	b.n	80088dc <_dtoa_r+0x6c4>
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <_dtoa_r+0x648>)
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	4680      	mov	r8, r0
 800884e:	4689      	mov	r9, r1
 8008850:	e7bd      	b.n	80087ce <_dtoa_r+0x5b6>
 8008852:	bf00      	nop
 8008854:	0800bb30 	.word	0x0800bb30
 8008858:	0800bb08 	.word	0x0800bb08
 800885c:	3ff00000 	.word	0x3ff00000
 8008860:	40240000 	.word	0x40240000
 8008864:	401c0000 	.word	0x401c0000
 8008868:	40140000 	.word	0x40140000
 800886c:	3fe00000 	.word	0x3fe00000
 8008870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008874:	9d00      	ldr	r5, [sp, #0]
 8008876:	4642      	mov	r2, r8
 8008878:	464b      	mov	r3, r9
 800887a:	4630      	mov	r0, r6
 800887c:	4639      	mov	r1, r7
 800887e:	f7f7 ffe5 	bl	800084c <__aeabi_ddiv>
 8008882:	f7f8 f969 	bl	8000b58 <__aeabi_d2iz>
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	f7f7 fe4c 	bl	8000524 <__aeabi_i2d>
 800888c:	4642      	mov	r2, r8
 800888e:	464b      	mov	r3, r9
 8008890:	f7f7 feb2 	bl	80005f8 <__aeabi_dmul>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	f7f7 fcf4 	bl	8000288 <__aeabi_dsub>
 80088a0:	9e01      	ldr	r6, [sp, #4]
 80088a2:	9f04      	ldr	r7, [sp, #16]
 80088a4:	3630      	adds	r6, #48	; 0x30
 80088a6:	f805 6b01 	strb.w	r6, [r5], #1
 80088aa:	9e00      	ldr	r6, [sp, #0]
 80088ac:	1bae      	subs	r6, r5, r6
 80088ae:	42b7      	cmp	r7, r6
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	d134      	bne.n	8008920 <_dtoa_r+0x708>
 80088b6:	f7f7 fce9 	bl	800028c <__adddf3>
 80088ba:	4642      	mov	r2, r8
 80088bc:	464b      	mov	r3, r9
 80088be:	4606      	mov	r6, r0
 80088c0:	460f      	mov	r7, r1
 80088c2:	f7f8 f929 	bl	8000b18 <__aeabi_dcmpgt>
 80088c6:	b9c8      	cbnz	r0, 80088fc <_dtoa_r+0x6e4>
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	4630      	mov	r0, r6
 80088ce:	4639      	mov	r1, r7
 80088d0:	f7f8 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d4:	b110      	cbz	r0, 80088dc <_dtoa_r+0x6c4>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	07db      	lsls	r3, r3, #31
 80088da:	d40f      	bmi.n	80088fc <_dtoa_r+0x6e4>
 80088dc:	4651      	mov	r1, sl
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 fb18 	bl	8008f14 <_Bfree>
 80088e4:	2300      	movs	r3, #0
 80088e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088e8:	702b      	strb	r3, [r5, #0]
 80088ea:	f10b 0301 	add.w	r3, fp, #1
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f43f ace2 	beq.w	80082bc <_dtoa_r+0xa4>
 80088f8:	601d      	str	r5, [r3, #0]
 80088fa:	e4df      	b.n	80082bc <_dtoa_r+0xa4>
 80088fc:	465f      	mov	r7, fp
 80088fe:	462b      	mov	r3, r5
 8008900:	461d      	mov	r5, r3
 8008902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008906:	2a39      	cmp	r2, #57	; 0x39
 8008908:	d106      	bne.n	8008918 <_dtoa_r+0x700>
 800890a:	9a00      	ldr	r2, [sp, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d1f7      	bne.n	8008900 <_dtoa_r+0x6e8>
 8008910:	9900      	ldr	r1, [sp, #0]
 8008912:	2230      	movs	r2, #48	; 0x30
 8008914:	3701      	adds	r7, #1
 8008916:	700a      	strb	r2, [r1, #0]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	3201      	adds	r2, #1
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	e790      	b.n	8008842 <_dtoa_r+0x62a>
 8008920:	4ba3      	ldr	r3, [pc, #652]	; (8008bb0 <_dtoa_r+0x998>)
 8008922:	2200      	movs	r2, #0
 8008924:	f7f7 fe68 	bl	80005f8 <__aeabi_dmul>
 8008928:	2200      	movs	r2, #0
 800892a:	2300      	movs	r3, #0
 800892c:	4606      	mov	r6, r0
 800892e:	460f      	mov	r7, r1
 8008930:	f7f8 f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008934:	2800      	cmp	r0, #0
 8008936:	d09e      	beq.n	8008876 <_dtoa_r+0x65e>
 8008938:	e7d0      	b.n	80088dc <_dtoa_r+0x6c4>
 800893a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800893c:	2a00      	cmp	r2, #0
 800893e:	f000 80ca 	beq.w	8008ad6 <_dtoa_r+0x8be>
 8008942:	9a07      	ldr	r2, [sp, #28]
 8008944:	2a01      	cmp	r2, #1
 8008946:	f300 80ad 	bgt.w	8008aa4 <_dtoa_r+0x88c>
 800894a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800894c:	2a00      	cmp	r2, #0
 800894e:	f000 80a5 	beq.w	8008a9c <_dtoa_r+0x884>
 8008952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008956:	9e08      	ldr	r6, [sp, #32]
 8008958:	9d05      	ldr	r5, [sp, #20]
 800895a:	9a05      	ldr	r2, [sp, #20]
 800895c:	441a      	add	r2, r3
 800895e:	9205      	str	r2, [sp, #20]
 8008960:	9a06      	ldr	r2, [sp, #24]
 8008962:	2101      	movs	r1, #1
 8008964:	441a      	add	r2, r3
 8008966:	4620      	mov	r0, r4
 8008968:	9206      	str	r2, [sp, #24]
 800896a:	f000 fb89 	bl	8009080 <__i2b>
 800896e:	4607      	mov	r7, r0
 8008970:	b165      	cbz	r5, 800898c <_dtoa_r+0x774>
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	dd09      	ble.n	800898c <_dtoa_r+0x774>
 8008978:	42ab      	cmp	r3, r5
 800897a:	9a05      	ldr	r2, [sp, #20]
 800897c:	bfa8      	it	ge
 800897e:	462b      	movge	r3, r5
 8008980:	1ad2      	subs	r2, r2, r3
 8008982:	9205      	str	r2, [sp, #20]
 8008984:	9a06      	ldr	r2, [sp, #24]
 8008986:	1aed      	subs	r5, r5, r3
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	9306      	str	r3, [sp, #24]
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	b1f3      	cbz	r3, 80089ce <_dtoa_r+0x7b6>
 8008990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80a3 	beq.w	8008ade <_dtoa_r+0x8c6>
 8008998:	2e00      	cmp	r6, #0
 800899a:	dd10      	ble.n	80089be <_dtoa_r+0x7a6>
 800899c:	4639      	mov	r1, r7
 800899e:	4632      	mov	r2, r6
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fc2d 	bl	8009200 <__pow5mult>
 80089a6:	4652      	mov	r2, sl
 80089a8:	4601      	mov	r1, r0
 80089aa:	4607      	mov	r7, r0
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fb7d 	bl	80090ac <__multiply>
 80089b2:	4651      	mov	r1, sl
 80089b4:	4680      	mov	r8, r0
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 faac 	bl	8008f14 <_Bfree>
 80089bc:	46c2      	mov	sl, r8
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	1b9a      	subs	r2, r3, r6
 80089c2:	d004      	beq.n	80089ce <_dtoa_r+0x7b6>
 80089c4:	4651      	mov	r1, sl
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fc1a 	bl	8009200 <__pow5mult>
 80089cc:	4682      	mov	sl, r0
 80089ce:	2101      	movs	r1, #1
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 fb55 	bl	8009080 <__i2b>
 80089d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	4606      	mov	r6, r0
 80089dc:	f340 8081 	ble.w	8008ae2 <_dtoa_r+0x8ca>
 80089e0:	461a      	mov	r2, r3
 80089e2:	4601      	mov	r1, r0
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fc0b 	bl	8009200 <__pow5mult>
 80089ea:	9b07      	ldr	r3, [sp, #28]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	4606      	mov	r6, r0
 80089f0:	dd7a      	ble.n	8008ae8 <_dtoa_r+0x8d0>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	6933      	ldr	r3, [r6, #16]
 80089f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089fc:	6918      	ldr	r0, [r3, #16]
 80089fe:	f000 faf1 	bl	8008fe4 <__hi0bits>
 8008a02:	f1c0 0020 	rsb	r0, r0, #32
 8008a06:	9b06      	ldr	r3, [sp, #24]
 8008a08:	4418      	add	r0, r3
 8008a0a:	f010 001f 	ands.w	r0, r0, #31
 8008a0e:	f000 8094 	beq.w	8008b3a <_dtoa_r+0x922>
 8008a12:	f1c0 0320 	rsb	r3, r0, #32
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	f340 8085 	ble.w	8008b26 <_dtoa_r+0x90e>
 8008a1c:	9b05      	ldr	r3, [sp, #20]
 8008a1e:	f1c0 001c 	rsb	r0, r0, #28
 8008a22:	4403      	add	r3, r0
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	9b06      	ldr	r3, [sp, #24]
 8008a28:	4403      	add	r3, r0
 8008a2a:	4405      	add	r5, r0
 8008a2c:	9306      	str	r3, [sp, #24]
 8008a2e:	9b05      	ldr	r3, [sp, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd05      	ble.n	8008a40 <_dtoa_r+0x828>
 8008a34:	4651      	mov	r1, sl
 8008a36:	461a      	mov	r2, r3
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fc3b 	bl	80092b4 <__lshift>
 8008a3e:	4682      	mov	sl, r0
 8008a40:	9b06      	ldr	r3, [sp, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dd05      	ble.n	8008a52 <_dtoa_r+0x83a>
 8008a46:	4631      	mov	r1, r6
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fc32 	bl	80092b4 <__lshift>
 8008a50:	4606      	mov	r6, r0
 8008a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d072      	beq.n	8008b3e <_dtoa_r+0x926>
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4650      	mov	r0, sl
 8008a5c:	f000 fc96 	bl	800938c <__mcmp>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	da6c      	bge.n	8008b3e <_dtoa_r+0x926>
 8008a64:	2300      	movs	r3, #0
 8008a66:	4651      	mov	r1, sl
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fa74 	bl	8008f58 <__multadd>
 8008a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008a76:	4682      	mov	sl, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 81b0 	beq.w	8008dde <_dtoa_r+0xbc6>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4639      	mov	r1, r7
 8008a82:	220a      	movs	r2, #10
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fa67 	bl	8008f58 <__multadd>
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	4607      	mov	r7, r0
 8008a90:	f300 8096 	bgt.w	8008bc0 <_dtoa_r+0x9a8>
 8008a94:	9b07      	ldr	r3, [sp, #28]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	dc59      	bgt.n	8008b4e <_dtoa_r+0x936>
 8008a9a:	e091      	b.n	8008bc0 <_dtoa_r+0x9a8>
 8008a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008aa2:	e758      	b.n	8008956 <_dtoa_r+0x73e>
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	1e5e      	subs	r6, r3, #1
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	42b3      	cmp	r3, r6
 8008aac:	bfbf      	itttt	lt
 8008aae:	9b08      	ldrlt	r3, [sp, #32]
 8008ab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008ab2:	9608      	strlt	r6, [sp, #32]
 8008ab4:	1af3      	sublt	r3, r6, r3
 8008ab6:	bfb4      	ite	lt
 8008ab8:	18d2      	addlt	r2, r2, r3
 8008aba:	1b9e      	subge	r6, r3, r6
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	bfbc      	itt	lt
 8008ac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008ac2:	2600      	movlt	r6, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfb7      	itett	lt
 8008ac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008acc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ad0:	1a9d      	sublt	r5, r3, r2
 8008ad2:	2300      	movlt	r3, #0
 8008ad4:	e741      	b.n	800895a <_dtoa_r+0x742>
 8008ad6:	9e08      	ldr	r6, [sp, #32]
 8008ad8:	9d05      	ldr	r5, [sp, #20]
 8008ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008adc:	e748      	b.n	8008970 <_dtoa_r+0x758>
 8008ade:	9a08      	ldr	r2, [sp, #32]
 8008ae0:	e770      	b.n	80089c4 <_dtoa_r+0x7ac>
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	dc19      	bgt.n	8008b1c <_dtoa_r+0x904>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	b9bb      	cbnz	r3, 8008b1c <_dtoa_r+0x904>
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af2:	b99b      	cbnz	r3, 8008b1c <_dtoa_r+0x904>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008afa:	0d1b      	lsrs	r3, r3, #20
 8008afc:	051b      	lsls	r3, r3, #20
 8008afe:	b183      	cbz	r3, 8008b22 <_dtoa_r+0x90a>
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	3301      	adds	r3, #1
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	9306      	str	r3, [sp, #24]
 8008b0c:	f04f 0801 	mov.w	r8, #1
 8008b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f47f af6f 	bne.w	80089f6 <_dtoa_r+0x7de>
 8008b18:	2001      	movs	r0, #1
 8008b1a:	e774      	b.n	8008a06 <_dtoa_r+0x7ee>
 8008b1c:	f04f 0800 	mov.w	r8, #0
 8008b20:	e7f6      	b.n	8008b10 <_dtoa_r+0x8f8>
 8008b22:	4698      	mov	r8, r3
 8008b24:	e7f4      	b.n	8008b10 <_dtoa_r+0x8f8>
 8008b26:	d082      	beq.n	8008a2e <_dtoa_r+0x816>
 8008b28:	9a05      	ldr	r2, [sp, #20]
 8008b2a:	331c      	adds	r3, #28
 8008b2c:	441a      	add	r2, r3
 8008b2e:	9205      	str	r2, [sp, #20]
 8008b30:	9a06      	ldr	r2, [sp, #24]
 8008b32:	441a      	add	r2, r3
 8008b34:	441d      	add	r5, r3
 8008b36:	9206      	str	r2, [sp, #24]
 8008b38:	e779      	b.n	8008a2e <_dtoa_r+0x816>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	e7f4      	b.n	8008b28 <_dtoa_r+0x910>
 8008b3e:	9b04      	ldr	r3, [sp, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	dc37      	bgt.n	8008bb4 <_dtoa_r+0x99c>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dd34      	ble.n	8008bb4 <_dtoa_r+0x99c>
 8008b4a:	9b04      	ldr	r3, [sp, #16]
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	9b01      	ldr	r3, [sp, #4]
 8008b50:	b963      	cbnz	r3, 8008b6c <_dtoa_r+0x954>
 8008b52:	4631      	mov	r1, r6
 8008b54:	2205      	movs	r2, #5
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 f9fe 	bl	8008f58 <__multadd>
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	4606      	mov	r6, r0
 8008b60:	4650      	mov	r0, sl
 8008b62:	f000 fc13 	bl	800938c <__mcmp>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f73f adbb 	bgt.w	80086e2 <_dtoa_r+0x4ca>
 8008b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6e:	9d00      	ldr	r5, [sp, #0]
 8008b70:	ea6f 0b03 	mvn.w	fp, r3
 8008b74:	f04f 0800 	mov.w	r8, #0
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 f9ca 	bl	8008f14 <_Bfree>
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	f43f aeab 	beq.w	80088dc <_dtoa_r+0x6c4>
 8008b86:	f1b8 0f00 	cmp.w	r8, #0
 8008b8a:	d005      	beq.n	8008b98 <_dtoa_r+0x980>
 8008b8c:	45b8      	cmp	r8, r7
 8008b8e:	d003      	beq.n	8008b98 <_dtoa_r+0x980>
 8008b90:	4641      	mov	r1, r8
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f9be 	bl	8008f14 <_Bfree>
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 f9ba 	bl	8008f14 <_Bfree>
 8008ba0:	e69c      	b.n	80088dc <_dtoa_r+0x6c4>
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	4637      	mov	r7, r6
 8008ba6:	e7e1      	b.n	8008b6c <_dtoa_r+0x954>
 8008ba8:	46bb      	mov	fp, r7
 8008baa:	4637      	mov	r7, r6
 8008bac:	e599      	b.n	80086e2 <_dtoa_r+0x4ca>
 8008bae:	bf00      	nop
 8008bb0:	40240000 	.word	0x40240000
 8008bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80c8 	beq.w	8008d4c <_dtoa_r+0xb34>
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	dd05      	ble.n	8008bd0 <_dtoa_r+0x9b8>
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fb73 	bl	80092b4 <__lshift>
 8008bce:	4607      	mov	r7, r0
 8008bd0:	f1b8 0f00 	cmp.w	r8, #0
 8008bd4:	d05b      	beq.n	8008c8e <_dtoa_r+0xa76>
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 f95b 	bl	8008e94 <_Balloc>
 8008bde:	4605      	mov	r5, r0
 8008be0:	b928      	cbnz	r0, 8008bee <_dtoa_r+0x9d6>
 8008be2:	4b83      	ldr	r3, [pc, #524]	; (8008df0 <_dtoa_r+0xbd8>)
 8008be4:	4602      	mov	r2, r0
 8008be6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008bea:	f7ff bb2e 	b.w	800824a <_dtoa_r+0x32>
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	3202      	adds	r2, #2
 8008bf2:	0092      	lsls	r2, r2, #2
 8008bf4:	f107 010c 	add.w	r1, r7, #12
 8008bf8:	300c      	adds	r0, #12
 8008bfa:	f000 ff4f 	bl	8009a9c <memcpy>
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4629      	mov	r1, r5
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 fb56 	bl	80092b4 <__lshift>
 8008c08:	9b00      	ldr	r3, [sp, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c12:	4413      	add	r3, r2
 8008c14:	9308      	str	r3, [sp, #32]
 8008c16:	9b02      	ldr	r3, [sp, #8]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	46b8      	mov	r8, r7
 8008c1e:	9306      	str	r3, [sp, #24]
 8008c20:	4607      	mov	r7, r0
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	4631      	mov	r1, r6
 8008c26:	3b01      	subs	r3, #1
 8008c28:	4650      	mov	r0, sl
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	f7ff fa6a 	bl	8008104 <quorem>
 8008c30:	4641      	mov	r1, r8
 8008c32:	9002      	str	r0, [sp, #8]
 8008c34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c38:	4650      	mov	r0, sl
 8008c3a:	f000 fba7 	bl	800938c <__mcmp>
 8008c3e:	463a      	mov	r2, r7
 8008c40:	9005      	str	r0, [sp, #20]
 8008c42:	4631      	mov	r1, r6
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fbbd 	bl	80093c4 <__mdiff>
 8008c4a:	68c2      	ldr	r2, [r0, #12]
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	bb02      	cbnz	r2, 8008c92 <_dtoa_r+0xa7a>
 8008c50:	4601      	mov	r1, r0
 8008c52:	4650      	mov	r0, sl
 8008c54:	f000 fb9a 	bl	800938c <__mcmp>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c60:	f000 f958 	bl	8008f14 <_Bfree>
 8008c64:	9b07      	ldr	r3, [sp, #28]
 8008c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c68:	9d04      	ldr	r5, [sp, #16]
 8008c6a:	ea43 0102 	orr.w	r1, r3, r2
 8008c6e:	9b06      	ldr	r3, [sp, #24]
 8008c70:	4319      	orrs	r1, r3
 8008c72:	d110      	bne.n	8008c96 <_dtoa_r+0xa7e>
 8008c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c78:	d029      	beq.n	8008cce <_dtoa_r+0xab6>
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dd02      	ble.n	8008c86 <_dtoa_r+0xa6e>
 8008c80:	9b02      	ldr	r3, [sp, #8]
 8008c82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	f883 9000 	strb.w	r9, [r3]
 8008c8c:	e774      	b.n	8008b78 <_dtoa_r+0x960>
 8008c8e:	4638      	mov	r0, r7
 8008c90:	e7ba      	b.n	8008c08 <_dtoa_r+0x9f0>
 8008c92:	2201      	movs	r2, #1
 8008c94:	e7e1      	b.n	8008c5a <_dtoa_r+0xa42>
 8008c96:	9b05      	ldr	r3, [sp, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	db04      	blt.n	8008ca6 <_dtoa_r+0xa8e>
 8008c9c:	9907      	ldr	r1, [sp, #28]
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	9906      	ldr	r1, [sp, #24]
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	d120      	bne.n	8008ce8 <_dtoa_r+0xad0>
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	dded      	ble.n	8008c86 <_dtoa_r+0xa6e>
 8008caa:	4651      	mov	r1, sl
 8008cac:	2201      	movs	r2, #1
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fb00 	bl	80092b4 <__lshift>
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4682      	mov	sl, r0
 8008cb8:	f000 fb68 	bl	800938c <__mcmp>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	dc03      	bgt.n	8008cc8 <_dtoa_r+0xab0>
 8008cc0:	d1e1      	bne.n	8008c86 <_dtoa_r+0xa6e>
 8008cc2:	f019 0f01 	tst.w	r9, #1
 8008cc6:	d0de      	beq.n	8008c86 <_dtoa_r+0xa6e>
 8008cc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ccc:	d1d8      	bne.n	8008c80 <_dtoa_r+0xa68>
 8008cce:	9a01      	ldr	r2, [sp, #4]
 8008cd0:	2339      	movs	r3, #57	; 0x39
 8008cd2:	7013      	strb	r3, [r2, #0]
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cde:	2a39      	cmp	r2, #57	; 0x39
 8008ce0:	d06c      	beq.n	8008dbc <_dtoa_r+0xba4>
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e747      	b.n	8008b78 <_dtoa_r+0x960>
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	dd07      	ble.n	8008cfc <_dtoa_r+0xae4>
 8008cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cf0:	d0ed      	beq.n	8008cce <_dtoa_r+0xab6>
 8008cf2:	9a01      	ldr	r2, [sp, #4]
 8008cf4:	f109 0301 	add.w	r3, r9, #1
 8008cf8:	7013      	strb	r3, [r2, #0]
 8008cfa:	e73d      	b.n	8008b78 <_dtoa_r+0x960>
 8008cfc:	9b04      	ldr	r3, [sp, #16]
 8008cfe:	9a08      	ldr	r2, [sp, #32]
 8008d00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d043      	beq.n	8008d90 <_dtoa_r+0xb78>
 8008d08:	4651      	mov	r1, sl
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 f922 	bl	8008f58 <__multadd>
 8008d14:	45b8      	cmp	r8, r7
 8008d16:	4682      	mov	sl, r0
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	f04f 020a 	mov.w	r2, #10
 8008d20:	4641      	mov	r1, r8
 8008d22:	4620      	mov	r0, r4
 8008d24:	d107      	bne.n	8008d36 <_dtoa_r+0xb1e>
 8008d26:	f000 f917 	bl	8008f58 <__multadd>
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	3301      	adds	r3, #1
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	e775      	b.n	8008c22 <_dtoa_r+0xa0a>
 8008d36:	f000 f90f 	bl	8008f58 <__multadd>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	2300      	movs	r3, #0
 8008d40:	220a      	movs	r2, #10
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 f908 	bl	8008f58 <__multadd>
 8008d48:	4607      	mov	r7, r0
 8008d4a:	e7f0      	b.n	8008d2e <_dtoa_r+0xb16>
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	9d00      	ldr	r5, [sp, #0]
 8008d52:	4631      	mov	r1, r6
 8008d54:	4650      	mov	r0, sl
 8008d56:	f7ff f9d5 	bl	8008104 <quorem>
 8008d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	f805 9b01 	strb.w	r9, [r5], #1
 8008d64:	1aea      	subs	r2, r5, r3
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	dd07      	ble.n	8008d7c <_dtoa_r+0xb64>
 8008d6c:	4651      	mov	r1, sl
 8008d6e:	2300      	movs	r3, #0
 8008d70:	220a      	movs	r2, #10
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 f8f0 	bl	8008f58 <__multadd>
 8008d78:	4682      	mov	sl, r0
 8008d7a:	e7ea      	b.n	8008d52 <_dtoa_r+0xb3a>
 8008d7c:	9b01      	ldr	r3, [sp, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfc8      	it	gt
 8008d82:	461d      	movgt	r5, r3
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	bfd8      	it	le
 8008d88:	2501      	movle	r5, #1
 8008d8a:	441d      	add	r5, r3
 8008d8c:	f04f 0800 	mov.w	r8, #0
 8008d90:	4651      	mov	r1, sl
 8008d92:	2201      	movs	r2, #1
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 fa8d 	bl	80092b4 <__lshift>
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4682      	mov	sl, r0
 8008d9e:	f000 faf5 	bl	800938c <__mcmp>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	dc96      	bgt.n	8008cd4 <_dtoa_r+0xabc>
 8008da6:	d102      	bne.n	8008dae <_dtoa_r+0xb96>
 8008da8:	f019 0f01 	tst.w	r9, #1
 8008dac:	d192      	bne.n	8008cd4 <_dtoa_r+0xabc>
 8008dae:	462b      	mov	r3, r5
 8008db0:	461d      	mov	r5, r3
 8008db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008db6:	2a30      	cmp	r2, #48	; 0x30
 8008db8:	d0fa      	beq.n	8008db0 <_dtoa_r+0xb98>
 8008dba:	e6dd      	b.n	8008b78 <_dtoa_r+0x960>
 8008dbc:	9a00      	ldr	r2, [sp, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d189      	bne.n	8008cd6 <_dtoa_r+0xabe>
 8008dc2:	f10b 0b01 	add.w	fp, fp, #1
 8008dc6:	2331      	movs	r3, #49	; 0x31
 8008dc8:	e796      	b.n	8008cf8 <_dtoa_r+0xae0>
 8008dca:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <_dtoa_r+0xbdc>)
 8008dcc:	f7ff ba99 	b.w	8008302 <_dtoa_r+0xea>
 8008dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f47f aa6d 	bne.w	80082b2 <_dtoa_r+0x9a>
 8008dd8:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <_dtoa_r+0xbe0>)
 8008dda:	f7ff ba92 	b.w	8008302 <_dtoa_r+0xea>
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dcb5      	bgt.n	8008d50 <_dtoa_r+0xb38>
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	f73f aeb1 	bgt.w	8008b4e <_dtoa_r+0x936>
 8008dec:	e7b0      	b.n	8008d50 <_dtoa_r+0xb38>
 8008dee:	bf00      	nop
 8008df0:	0800ba9c 	.word	0x0800ba9c
 8008df4:	0800b9fc 	.word	0x0800b9fc
 8008df8:	0800ba20 	.word	0x0800ba20

08008dfc <_free_r>:
 8008dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d044      	beq.n	8008e8c <_free_r+0x90>
 8008e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e06:	9001      	str	r0, [sp, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e0e:	bfb8      	it	lt
 8008e10:	18e4      	addlt	r4, r4, r3
 8008e12:	f7fe fb71 	bl	80074f8 <__malloc_lock>
 8008e16:	4a1e      	ldr	r2, [pc, #120]	; (8008e90 <_free_r+0x94>)
 8008e18:	9801      	ldr	r0, [sp, #4]
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	b933      	cbnz	r3, 8008e2c <_free_r+0x30>
 8008e1e:	6063      	str	r3, [r4, #4]
 8008e20:	6014      	str	r4, [r2, #0]
 8008e22:	b003      	add	sp, #12
 8008e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e28:	f7fe bb6c 	b.w	8007504 <__malloc_unlock>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d908      	bls.n	8008e42 <_free_r+0x46>
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf01      	itttt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	1949      	addeq	r1, r1, r5
 8008e3e:	6021      	streq	r1, [r4, #0]
 8008e40:	e7ed      	b.n	8008e1e <_free_r+0x22>
 8008e42:	461a      	mov	r2, r3
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b10b      	cbz	r3, 8008e4c <_free_r+0x50>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d9fa      	bls.n	8008e42 <_free_r+0x46>
 8008e4c:	6811      	ldr	r1, [r2, #0]
 8008e4e:	1855      	adds	r5, r2, r1
 8008e50:	42a5      	cmp	r5, r4
 8008e52:	d10b      	bne.n	8008e6c <_free_r+0x70>
 8008e54:	6824      	ldr	r4, [r4, #0]
 8008e56:	4421      	add	r1, r4
 8008e58:	1854      	adds	r4, r2, r1
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	d1e0      	bne.n	8008e22 <_free_r+0x26>
 8008e60:	681c      	ldr	r4, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	6053      	str	r3, [r2, #4]
 8008e66:	440c      	add	r4, r1
 8008e68:	6014      	str	r4, [r2, #0]
 8008e6a:	e7da      	b.n	8008e22 <_free_r+0x26>
 8008e6c:	d902      	bls.n	8008e74 <_free_r+0x78>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	e7d6      	b.n	8008e22 <_free_r+0x26>
 8008e74:	6825      	ldr	r5, [r4, #0]
 8008e76:	1961      	adds	r1, r4, r5
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf04      	itt	eq
 8008e7c:	6819      	ldreq	r1, [r3, #0]
 8008e7e:	685b      	ldreq	r3, [r3, #4]
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	bf04      	itt	eq
 8008e84:	1949      	addeq	r1, r1, r5
 8008e86:	6021      	streq	r1, [r4, #0]
 8008e88:	6054      	str	r4, [r2, #4]
 8008e8a:	e7ca      	b.n	8008e22 <_free_r+0x26>
 8008e8c:	b003      	add	sp, #12
 8008e8e:	bd30      	pop	{r4, r5, pc}
 8008e90:	20000388 	.word	0x20000388

08008e94 <_Balloc>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	69c6      	ldr	r6, [r0, #28]
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	b976      	cbnz	r6, 8008ebc <_Balloc+0x28>
 8008e9e:	2010      	movs	r0, #16
 8008ea0:	f7fe fa82 	bl	80073a8 <malloc>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	61e0      	str	r0, [r4, #28]
 8008ea8:	b920      	cbnz	r0, 8008eb4 <_Balloc+0x20>
 8008eaa:	4b18      	ldr	r3, [pc, #96]	; (8008f0c <_Balloc+0x78>)
 8008eac:	4818      	ldr	r0, [pc, #96]	; (8008f10 <_Balloc+0x7c>)
 8008eae:	216b      	movs	r1, #107	; 0x6b
 8008eb0:	f000 fe02 	bl	8009ab8 <__assert_func>
 8008eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eb8:	6006      	str	r6, [r0, #0]
 8008eba:	60c6      	str	r6, [r0, #12]
 8008ebc:	69e6      	ldr	r6, [r4, #28]
 8008ebe:	68f3      	ldr	r3, [r6, #12]
 8008ec0:	b183      	cbz	r3, 8008ee4 <_Balloc+0x50>
 8008ec2:	69e3      	ldr	r3, [r4, #28]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008eca:	b9b8      	cbnz	r0, 8008efc <_Balloc+0x68>
 8008ecc:	2101      	movs	r1, #1
 8008ece:	fa01 f605 	lsl.w	r6, r1, r5
 8008ed2:	1d72      	adds	r2, r6, #5
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 fe0c 	bl	8009af4 <_calloc_r>
 8008edc:	b160      	cbz	r0, 8008ef8 <_Balloc+0x64>
 8008ede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ee2:	e00e      	b.n	8008f02 <_Balloc+0x6e>
 8008ee4:	2221      	movs	r2, #33	; 0x21
 8008ee6:	2104      	movs	r1, #4
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 fe03 	bl	8009af4 <_calloc_r>
 8008eee:	69e3      	ldr	r3, [r4, #28]
 8008ef0:	60f0      	str	r0, [r6, #12]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e4      	bne.n	8008ec2 <_Balloc+0x2e>
 8008ef8:	2000      	movs	r0, #0
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	6802      	ldr	r2, [r0, #0]
 8008efe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f02:	2300      	movs	r3, #0
 8008f04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f08:	e7f7      	b.n	8008efa <_Balloc+0x66>
 8008f0a:	bf00      	nop
 8008f0c:	0800ba2d 	.word	0x0800ba2d
 8008f10:	0800baad 	.word	0x0800baad

08008f14 <_Bfree>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	69c6      	ldr	r6, [r0, #28]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b976      	cbnz	r6, 8008f3c <_Bfree+0x28>
 8008f1e:	2010      	movs	r0, #16
 8008f20:	f7fe fa42 	bl	80073a8 <malloc>
 8008f24:	4602      	mov	r2, r0
 8008f26:	61e8      	str	r0, [r5, #28]
 8008f28:	b920      	cbnz	r0, 8008f34 <_Bfree+0x20>
 8008f2a:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <_Bfree+0x3c>)
 8008f2c:	4809      	ldr	r0, [pc, #36]	; (8008f54 <_Bfree+0x40>)
 8008f2e:	218f      	movs	r1, #143	; 0x8f
 8008f30:	f000 fdc2 	bl	8009ab8 <__assert_func>
 8008f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f38:	6006      	str	r6, [r0, #0]
 8008f3a:	60c6      	str	r6, [r0, #12]
 8008f3c:	b13c      	cbz	r4, 8008f4e <_Bfree+0x3a>
 8008f3e:	69eb      	ldr	r3, [r5, #28]
 8008f40:	6862      	ldr	r2, [r4, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f48:	6021      	str	r1, [r4, #0]
 8008f4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	0800ba2d 	.word	0x0800ba2d
 8008f54:	0800baad 	.word	0x0800baad

08008f58 <__multadd>:
 8008f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5c:	690d      	ldr	r5, [r1, #16]
 8008f5e:	4607      	mov	r7, r0
 8008f60:	460c      	mov	r4, r1
 8008f62:	461e      	mov	r6, r3
 8008f64:	f101 0c14 	add.w	ip, r1, #20
 8008f68:	2000      	movs	r0, #0
 8008f6a:	f8dc 3000 	ldr.w	r3, [ip]
 8008f6e:	b299      	uxth	r1, r3
 8008f70:	fb02 6101 	mla	r1, r2, r1, r6
 8008f74:	0c1e      	lsrs	r6, r3, #16
 8008f76:	0c0b      	lsrs	r3, r1, #16
 8008f78:	fb02 3306 	mla	r3, r2, r6, r3
 8008f7c:	b289      	uxth	r1, r1
 8008f7e:	3001      	adds	r0, #1
 8008f80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f84:	4285      	cmp	r5, r0
 8008f86:	f84c 1b04 	str.w	r1, [ip], #4
 8008f8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f8e:	dcec      	bgt.n	8008f6a <__multadd+0x12>
 8008f90:	b30e      	cbz	r6, 8008fd6 <__multadd+0x7e>
 8008f92:	68a3      	ldr	r3, [r4, #8]
 8008f94:	42ab      	cmp	r3, r5
 8008f96:	dc19      	bgt.n	8008fcc <__multadd+0x74>
 8008f98:	6861      	ldr	r1, [r4, #4]
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	3101      	adds	r1, #1
 8008f9e:	f7ff ff79 	bl	8008e94 <_Balloc>
 8008fa2:	4680      	mov	r8, r0
 8008fa4:	b928      	cbnz	r0, 8008fb2 <__multadd+0x5a>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <__multadd+0x84>)
 8008faa:	480d      	ldr	r0, [pc, #52]	; (8008fe0 <__multadd+0x88>)
 8008fac:	21ba      	movs	r1, #186	; 0xba
 8008fae:	f000 fd83 	bl	8009ab8 <__assert_func>
 8008fb2:	6922      	ldr	r2, [r4, #16]
 8008fb4:	3202      	adds	r2, #2
 8008fb6:	f104 010c 	add.w	r1, r4, #12
 8008fba:	0092      	lsls	r2, r2, #2
 8008fbc:	300c      	adds	r0, #12
 8008fbe:	f000 fd6d 	bl	8009a9c <memcpy>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	f7ff ffa5 	bl	8008f14 <_Bfree>
 8008fca:	4644      	mov	r4, r8
 8008fcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	615e      	str	r6, [r3, #20]
 8008fd4:	6125      	str	r5, [r4, #16]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fdc:	0800ba9c 	.word	0x0800ba9c
 8008fe0:	0800baad 	.word	0x0800baad

08008fe4 <__hi0bits>:
 8008fe4:	0c03      	lsrs	r3, r0, #16
 8008fe6:	041b      	lsls	r3, r3, #16
 8008fe8:	b9d3      	cbnz	r3, 8009020 <__hi0bits+0x3c>
 8008fea:	0400      	lsls	r0, r0, #16
 8008fec:	2310      	movs	r3, #16
 8008fee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ff2:	bf04      	itt	eq
 8008ff4:	0200      	lsleq	r0, r0, #8
 8008ff6:	3308      	addeq	r3, #8
 8008ff8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ffc:	bf04      	itt	eq
 8008ffe:	0100      	lsleq	r0, r0, #4
 8009000:	3304      	addeq	r3, #4
 8009002:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009006:	bf04      	itt	eq
 8009008:	0080      	lsleq	r0, r0, #2
 800900a:	3302      	addeq	r3, #2
 800900c:	2800      	cmp	r0, #0
 800900e:	db05      	blt.n	800901c <__hi0bits+0x38>
 8009010:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009014:	f103 0301 	add.w	r3, r3, #1
 8009018:	bf08      	it	eq
 800901a:	2320      	moveq	r3, #32
 800901c:	4618      	mov	r0, r3
 800901e:	4770      	bx	lr
 8009020:	2300      	movs	r3, #0
 8009022:	e7e4      	b.n	8008fee <__hi0bits+0xa>

08009024 <__lo0bits>:
 8009024:	6803      	ldr	r3, [r0, #0]
 8009026:	f013 0207 	ands.w	r2, r3, #7
 800902a:	d00c      	beq.n	8009046 <__lo0bits+0x22>
 800902c:	07d9      	lsls	r1, r3, #31
 800902e:	d422      	bmi.n	8009076 <__lo0bits+0x52>
 8009030:	079a      	lsls	r2, r3, #30
 8009032:	bf49      	itett	mi
 8009034:	085b      	lsrmi	r3, r3, #1
 8009036:	089b      	lsrpl	r3, r3, #2
 8009038:	6003      	strmi	r3, [r0, #0]
 800903a:	2201      	movmi	r2, #1
 800903c:	bf5c      	itt	pl
 800903e:	6003      	strpl	r3, [r0, #0]
 8009040:	2202      	movpl	r2, #2
 8009042:	4610      	mov	r0, r2
 8009044:	4770      	bx	lr
 8009046:	b299      	uxth	r1, r3
 8009048:	b909      	cbnz	r1, 800904e <__lo0bits+0x2a>
 800904a:	0c1b      	lsrs	r3, r3, #16
 800904c:	2210      	movs	r2, #16
 800904e:	b2d9      	uxtb	r1, r3
 8009050:	b909      	cbnz	r1, 8009056 <__lo0bits+0x32>
 8009052:	3208      	adds	r2, #8
 8009054:	0a1b      	lsrs	r3, r3, #8
 8009056:	0719      	lsls	r1, r3, #28
 8009058:	bf04      	itt	eq
 800905a:	091b      	lsreq	r3, r3, #4
 800905c:	3204      	addeq	r2, #4
 800905e:	0799      	lsls	r1, r3, #30
 8009060:	bf04      	itt	eq
 8009062:	089b      	lsreq	r3, r3, #2
 8009064:	3202      	addeq	r2, #2
 8009066:	07d9      	lsls	r1, r3, #31
 8009068:	d403      	bmi.n	8009072 <__lo0bits+0x4e>
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	f102 0201 	add.w	r2, r2, #1
 8009070:	d003      	beq.n	800907a <__lo0bits+0x56>
 8009072:	6003      	str	r3, [r0, #0]
 8009074:	e7e5      	b.n	8009042 <__lo0bits+0x1e>
 8009076:	2200      	movs	r2, #0
 8009078:	e7e3      	b.n	8009042 <__lo0bits+0x1e>
 800907a:	2220      	movs	r2, #32
 800907c:	e7e1      	b.n	8009042 <__lo0bits+0x1e>
	...

08009080 <__i2b>:
 8009080:	b510      	push	{r4, lr}
 8009082:	460c      	mov	r4, r1
 8009084:	2101      	movs	r1, #1
 8009086:	f7ff ff05 	bl	8008e94 <_Balloc>
 800908a:	4602      	mov	r2, r0
 800908c:	b928      	cbnz	r0, 800909a <__i2b+0x1a>
 800908e:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <__i2b+0x24>)
 8009090:	4805      	ldr	r0, [pc, #20]	; (80090a8 <__i2b+0x28>)
 8009092:	f240 1145 	movw	r1, #325	; 0x145
 8009096:	f000 fd0f 	bl	8009ab8 <__assert_func>
 800909a:	2301      	movs	r3, #1
 800909c:	6144      	str	r4, [r0, #20]
 800909e:	6103      	str	r3, [r0, #16]
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	bf00      	nop
 80090a4:	0800ba9c 	.word	0x0800ba9c
 80090a8:	0800baad 	.word	0x0800baad

080090ac <__multiply>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	4691      	mov	r9, r2
 80090b2:	690a      	ldr	r2, [r1, #16]
 80090b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	bfb8      	it	lt
 80090bc:	460b      	movlt	r3, r1
 80090be:	460c      	mov	r4, r1
 80090c0:	bfbc      	itt	lt
 80090c2:	464c      	movlt	r4, r9
 80090c4:	4699      	movlt	r9, r3
 80090c6:	6927      	ldr	r7, [r4, #16]
 80090c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090cc:	68a3      	ldr	r3, [r4, #8]
 80090ce:	6861      	ldr	r1, [r4, #4]
 80090d0:	eb07 060a 	add.w	r6, r7, sl
 80090d4:	42b3      	cmp	r3, r6
 80090d6:	b085      	sub	sp, #20
 80090d8:	bfb8      	it	lt
 80090da:	3101      	addlt	r1, #1
 80090dc:	f7ff feda 	bl	8008e94 <_Balloc>
 80090e0:	b930      	cbnz	r0, 80090f0 <__multiply+0x44>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4b44      	ldr	r3, [pc, #272]	; (80091f8 <__multiply+0x14c>)
 80090e6:	4845      	ldr	r0, [pc, #276]	; (80091fc <__multiply+0x150>)
 80090e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80090ec:	f000 fce4 	bl	8009ab8 <__assert_func>
 80090f0:	f100 0514 	add.w	r5, r0, #20
 80090f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090f8:	462b      	mov	r3, r5
 80090fa:	2200      	movs	r2, #0
 80090fc:	4543      	cmp	r3, r8
 80090fe:	d321      	bcc.n	8009144 <__multiply+0x98>
 8009100:	f104 0314 	add.w	r3, r4, #20
 8009104:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009108:	f109 0314 	add.w	r3, r9, #20
 800910c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009110:	9202      	str	r2, [sp, #8]
 8009112:	1b3a      	subs	r2, r7, r4
 8009114:	3a15      	subs	r2, #21
 8009116:	f022 0203 	bic.w	r2, r2, #3
 800911a:	3204      	adds	r2, #4
 800911c:	f104 0115 	add.w	r1, r4, #21
 8009120:	428f      	cmp	r7, r1
 8009122:	bf38      	it	cc
 8009124:	2204      	movcc	r2, #4
 8009126:	9201      	str	r2, [sp, #4]
 8009128:	9a02      	ldr	r2, [sp, #8]
 800912a:	9303      	str	r3, [sp, #12]
 800912c:	429a      	cmp	r2, r3
 800912e:	d80c      	bhi.n	800914a <__multiply+0x9e>
 8009130:	2e00      	cmp	r6, #0
 8009132:	dd03      	ble.n	800913c <__multiply+0x90>
 8009134:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009138:	2b00      	cmp	r3, #0
 800913a:	d05b      	beq.n	80091f4 <__multiply+0x148>
 800913c:	6106      	str	r6, [r0, #16]
 800913e:	b005      	add	sp, #20
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	f843 2b04 	str.w	r2, [r3], #4
 8009148:	e7d8      	b.n	80090fc <__multiply+0x50>
 800914a:	f8b3 a000 	ldrh.w	sl, [r3]
 800914e:	f1ba 0f00 	cmp.w	sl, #0
 8009152:	d024      	beq.n	800919e <__multiply+0xf2>
 8009154:	f104 0e14 	add.w	lr, r4, #20
 8009158:	46a9      	mov	r9, r5
 800915a:	f04f 0c00 	mov.w	ip, #0
 800915e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009162:	f8d9 1000 	ldr.w	r1, [r9]
 8009166:	fa1f fb82 	uxth.w	fp, r2
 800916a:	b289      	uxth	r1, r1
 800916c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009170:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009174:	f8d9 2000 	ldr.w	r2, [r9]
 8009178:	4461      	add	r1, ip
 800917a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800917e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009182:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009186:	b289      	uxth	r1, r1
 8009188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800918c:	4577      	cmp	r7, lr
 800918e:	f849 1b04 	str.w	r1, [r9], #4
 8009192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009196:	d8e2      	bhi.n	800915e <__multiply+0xb2>
 8009198:	9a01      	ldr	r2, [sp, #4]
 800919a:	f845 c002 	str.w	ip, [r5, r2]
 800919e:	9a03      	ldr	r2, [sp, #12]
 80091a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091a4:	3304      	adds	r3, #4
 80091a6:	f1b9 0f00 	cmp.w	r9, #0
 80091aa:	d021      	beq.n	80091f0 <__multiply+0x144>
 80091ac:	6829      	ldr	r1, [r5, #0]
 80091ae:	f104 0c14 	add.w	ip, r4, #20
 80091b2:	46ae      	mov	lr, r5
 80091b4:	f04f 0a00 	mov.w	sl, #0
 80091b8:	f8bc b000 	ldrh.w	fp, [ip]
 80091bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091c0:	fb09 220b 	mla	r2, r9, fp, r2
 80091c4:	4452      	add	r2, sl
 80091c6:	b289      	uxth	r1, r1
 80091c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091cc:	f84e 1b04 	str.w	r1, [lr], #4
 80091d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80091d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091d8:	f8be 1000 	ldrh.w	r1, [lr]
 80091dc:	fb09 110a 	mla	r1, r9, sl, r1
 80091e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80091e4:	4567      	cmp	r7, ip
 80091e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091ea:	d8e5      	bhi.n	80091b8 <__multiply+0x10c>
 80091ec:	9a01      	ldr	r2, [sp, #4]
 80091ee:	50a9      	str	r1, [r5, r2]
 80091f0:	3504      	adds	r5, #4
 80091f2:	e799      	b.n	8009128 <__multiply+0x7c>
 80091f4:	3e01      	subs	r6, #1
 80091f6:	e79b      	b.n	8009130 <__multiply+0x84>
 80091f8:	0800ba9c 	.word	0x0800ba9c
 80091fc:	0800baad 	.word	0x0800baad

08009200 <__pow5mult>:
 8009200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009204:	4615      	mov	r5, r2
 8009206:	f012 0203 	ands.w	r2, r2, #3
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	d007      	beq.n	8009220 <__pow5mult+0x20>
 8009210:	4c25      	ldr	r4, [pc, #148]	; (80092a8 <__pow5mult+0xa8>)
 8009212:	3a01      	subs	r2, #1
 8009214:	2300      	movs	r3, #0
 8009216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800921a:	f7ff fe9d 	bl	8008f58 <__multadd>
 800921e:	4607      	mov	r7, r0
 8009220:	10ad      	asrs	r5, r5, #2
 8009222:	d03d      	beq.n	80092a0 <__pow5mult+0xa0>
 8009224:	69f4      	ldr	r4, [r6, #28]
 8009226:	b97c      	cbnz	r4, 8009248 <__pow5mult+0x48>
 8009228:	2010      	movs	r0, #16
 800922a:	f7fe f8bd 	bl	80073a8 <malloc>
 800922e:	4602      	mov	r2, r0
 8009230:	61f0      	str	r0, [r6, #28]
 8009232:	b928      	cbnz	r0, 8009240 <__pow5mult+0x40>
 8009234:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <__pow5mult+0xac>)
 8009236:	481e      	ldr	r0, [pc, #120]	; (80092b0 <__pow5mult+0xb0>)
 8009238:	f240 11b3 	movw	r1, #435	; 0x1b3
 800923c:	f000 fc3c 	bl	8009ab8 <__assert_func>
 8009240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009244:	6004      	str	r4, [r0, #0]
 8009246:	60c4      	str	r4, [r0, #12]
 8009248:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800924c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009250:	b94c      	cbnz	r4, 8009266 <__pow5mult+0x66>
 8009252:	f240 2171 	movw	r1, #625	; 0x271
 8009256:	4630      	mov	r0, r6
 8009258:	f7ff ff12 	bl	8009080 <__i2b>
 800925c:	2300      	movs	r3, #0
 800925e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009262:	4604      	mov	r4, r0
 8009264:	6003      	str	r3, [r0, #0]
 8009266:	f04f 0900 	mov.w	r9, #0
 800926a:	07eb      	lsls	r3, r5, #31
 800926c:	d50a      	bpl.n	8009284 <__pow5mult+0x84>
 800926e:	4639      	mov	r1, r7
 8009270:	4622      	mov	r2, r4
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff ff1a 	bl	80090ac <__multiply>
 8009278:	4639      	mov	r1, r7
 800927a:	4680      	mov	r8, r0
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff fe49 	bl	8008f14 <_Bfree>
 8009282:	4647      	mov	r7, r8
 8009284:	106d      	asrs	r5, r5, #1
 8009286:	d00b      	beq.n	80092a0 <__pow5mult+0xa0>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	b938      	cbnz	r0, 800929c <__pow5mult+0x9c>
 800928c:	4622      	mov	r2, r4
 800928e:	4621      	mov	r1, r4
 8009290:	4630      	mov	r0, r6
 8009292:	f7ff ff0b 	bl	80090ac <__multiply>
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	f8c0 9000 	str.w	r9, [r0]
 800929c:	4604      	mov	r4, r0
 800929e:	e7e4      	b.n	800926a <__pow5mult+0x6a>
 80092a0:	4638      	mov	r0, r7
 80092a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a6:	bf00      	nop
 80092a8:	0800bbf8 	.word	0x0800bbf8
 80092ac:	0800ba2d 	.word	0x0800ba2d
 80092b0:	0800baad 	.word	0x0800baad

080092b4 <__lshift>:
 80092b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	460c      	mov	r4, r1
 80092ba:	6849      	ldr	r1, [r1, #4]
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092c2:	68a3      	ldr	r3, [r4, #8]
 80092c4:	4607      	mov	r7, r0
 80092c6:	4691      	mov	r9, r2
 80092c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092cc:	f108 0601 	add.w	r6, r8, #1
 80092d0:	42b3      	cmp	r3, r6
 80092d2:	db0b      	blt.n	80092ec <__lshift+0x38>
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff fddd 	bl	8008e94 <_Balloc>
 80092da:	4605      	mov	r5, r0
 80092dc:	b948      	cbnz	r0, 80092f2 <__lshift+0x3e>
 80092de:	4602      	mov	r2, r0
 80092e0:	4b28      	ldr	r3, [pc, #160]	; (8009384 <__lshift+0xd0>)
 80092e2:	4829      	ldr	r0, [pc, #164]	; (8009388 <__lshift+0xd4>)
 80092e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80092e8:	f000 fbe6 	bl	8009ab8 <__assert_func>
 80092ec:	3101      	adds	r1, #1
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	e7ee      	b.n	80092d0 <__lshift+0x1c>
 80092f2:	2300      	movs	r3, #0
 80092f4:	f100 0114 	add.w	r1, r0, #20
 80092f8:	f100 0210 	add.w	r2, r0, #16
 80092fc:	4618      	mov	r0, r3
 80092fe:	4553      	cmp	r3, sl
 8009300:	db33      	blt.n	800936a <__lshift+0xb6>
 8009302:	6920      	ldr	r0, [r4, #16]
 8009304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009308:	f104 0314 	add.w	r3, r4, #20
 800930c:	f019 091f 	ands.w	r9, r9, #31
 8009310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009314:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009318:	d02b      	beq.n	8009372 <__lshift+0xbe>
 800931a:	f1c9 0e20 	rsb	lr, r9, #32
 800931e:	468a      	mov	sl, r1
 8009320:	2200      	movs	r2, #0
 8009322:	6818      	ldr	r0, [r3, #0]
 8009324:	fa00 f009 	lsl.w	r0, r0, r9
 8009328:	4310      	orrs	r0, r2
 800932a:	f84a 0b04 	str.w	r0, [sl], #4
 800932e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009332:	459c      	cmp	ip, r3
 8009334:	fa22 f20e 	lsr.w	r2, r2, lr
 8009338:	d8f3      	bhi.n	8009322 <__lshift+0x6e>
 800933a:	ebac 0304 	sub.w	r3, ip, r4
 800933e:	3b15      	subs	r3, #21
 8009340:	f023 0303 	bic.w	r3, r3, #3
 8009344:	3304      	adds	r3, #4
 8009346:	f104 0015 	add.w	r0, r4, #21
 800934a:	4584      	cmp	ip, r0
 800934c:	bf38      	it	cc
 800934e:	2304      	movcc	r3, #4
 8009350:	50ca      	str	r2, [r1, r3]
 8009352:	b10a      	cbz	r2, 8009358 <__lshift+0xa4>
 8009354:	f108 0602 	add.w	r6, r8, #2
 8009358:	3e01      	subs	r6, #1
 800935a:	4638      	mov	r0, r7
 800935c:	612e      	str	r6, [r5, #16]
 800935e:	4621      	mov	r1, r4
 8009360:	f7ff fdd8 	bl	8008f14 <_Bfree>
 8009364:	4628      	mov	r0, r5
 8009366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936a:	f842 0f04 	str.w	r0, [r2, #4]!
 800936e:	3301      	adds	r3, #1
 8009370:	e7c5      	b.n	80092fe <__lshift+0x4a>
 8009372:	3904      	subs	r1, #4
 8009374:	f853 2b04 	ldr.w	r2, [r3], #4
 8009378:	f841 2f04 	str.w	r2, [r1, #4]!
 800937c:	459c      	cmp	ip, r3
 800937e:	d8f9      	bhi.n	8009374 <__lshift+0xc0>
 8009380:	e7ea      	b.n	8009358 <__lshift+0xa4>
 8009382:	bf00      	nop
 8009384:	0800ba9c 	.word	0x0800ba9c
 8009388:	0800baad 	.word	0x0800baad

0800938c <__mcmp>:
 800938c:	b530      	push	{r4, r5, lr}
 800938e:	6902      	ldr	r2, [r0, #16]
 8009390:	690c      	ldr	r4, [r1, #16]
 8009392:	1b12      	subs	r2, r2, r4
 8009394:	d10e      	bne.n	80093b4 <__mcmp+0x28>
 8009396:	f100 0314 	add.w	r3, r0, #20
 800939a:	3114      	adds	r1, #20
 800939c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093ac:	42a5      	cmp	r5, r4
 80093ae:	d003      	beq.n	80093b8 <__mcmp+0x2c>
 80093b0:	d305      	bcc.n	80093be <__mcmp+0x32>
 80093b2:	2201      	movs	r2, #1
 80093b4:	4610      	mov	r0, r2
 80093b6:	bd30      	pop	{r4, r5, pc}
 80093b8:	4283      	cmp	r3, r0
 80093ba:	d3f3      	bcc.n	80093a4 <__mcmp+0x18>
 80093bc:	e7fa      	b.n	80093b4 <__mcmp+0x28>
 80093be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093c2:	e7f7      	b.n	80093b4 <__mcmp+0x28>

080093c4 <__mdiff>:
 80093c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c8:	460c      	mov	r4, r1
 80093ca:	4606      	mov	r6, r0
 80093cc:	4611      	mov	r1, r2
 80093ce:	4620      	mov	r0, r4
 80093d0:	4690      	mov	r8, r2
 80093d2:	f7ff ffdb 	bl	800938c <__mcmp>
 80093d6:	1e05      	subs	r5, r0, #0
 80093d8:	d110      	bne.n	80093fc <__mdiff+0x38>
 80093da:	4629      	mov	r1, r5
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff fd59 	bl	8008e94 <_Balloc>
 80093e2:	b930      	cbnz	r0, 80093f2 <__mdiff+0x2e>
 80093e4:	4b3a      	ldr	r3, [pc, #232]	; (80094d0 <__mdiff+0x10c>)
 80093e6:	4602      	mov	r2, r0
 80093e8:	f240 2137 	movw	r1, #567	; 0x237
 80093ec:	4839      	ldr	r0, [pc, #228]	; (80094d4 <__mdiff+0x110>)
 80093ee:	f000 fb63 	bl	8009ab8 <__assert_func>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	bfa4      	itt	ge
 80093fe:	4643      	movge	r3, r8
 8009400:	46a0      	movge	r8, r4
 8009402:	4630      	mov	r0, r6
 8009404:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009408:	bfa6      	itte	ge
 800940a:	461c      	movge	r4, r3
 800940c:	2500      	movge	r5, #0
 800940e:	2501      	movlt	r5, #1
 8009410:	f7ff fd40 	bl	8008e94 <_Balloc>
 8009414:	b920      	cbnz	r0, 8009420 <__mdiff+0x5c>
 8009416:	4b2e      	ldr	r3, [pc, #184]	; (80094d0 <__mdiff+0x10c>)
 8009418:	4602      	mov	r2, r0
 800941a:	f240 2145 	movw	r1, #581	; 0x245
 800941e:	e7e5      	b.n	80093ec <__mdiff+0x28>
 8009420:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009424:	6926      	ldr	r6, [r4, #16]
 8009426:	60c5      	str	r5, [r0, #12]
 8009428:	f104 0914 	add.w	r9, r4, #20
 800942c:	f108 0514 	add.w	r5, r8, #20
 8009430:	f100 0e14 	add.w	lr, r0, #20
 8009434:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800943c:	f108 0210 	add.w	r2, r8, #16
 8009440:	46f2      	mov	sl, lr
 8009442:	2100      	movs	r1, #0
 8009444:	f859 3b04 	ldr.w	r3, [r9], #4
 8009448:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800944c:	fa11 f88b 	uxtah	r8, r1, fp
 8009450:	b299      	uxth	r1, r3
 8009452:	0c1b      	lsrs	r3, r3, #16
 8009454:	eba8 0801 	sub.w	r8, r8, r1
 8009458:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800945c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009460:	fa1f f888 	uxth.w	r8, r8
 8009464:	1419      	asrs	r1, r3, #16
 8009466:	454e      	cmp	r6, r9
 8009468:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800946c:	f84a 3b04 	str.w	r3, [sl], #4
 8009470:	d8e8      	bhi.n	8009444 <__mdiff+0x80>
 8009472:	1b33      	subs	r3, r6, r4
 8009474:	3b15      	subs	r3, #21
 8009476:	f023 0303 	bic.w	r3, r3, #3
 800947a:	3304      	adds	r3, #4
 800947c:	3415      	adds	r4, #21
 800947e:	42a6      	cmp	r6, r4
 8009480:	bf38      	it	cc
 8009482:	2304      	movcc	r3, #4
 8009484:	441d      	add	r5, r3
 8009486:	4473      	add	r3, lr
 8009488:	469e      	mov	lr, r3
 800948a:	462e      	mov	r6, r5
 800948c:	4566      	cmp	r6, ip
 800948e:	d30e      	bcc.n	80094ae <__mdiff+0xea>
 8009490:	f10c 0203 	add.w	r2, ip, #3
 8009494:	1b52      	subs	r2, r2, r5
 8009496:	f022 0203 	bic.w	r2, r2, #3
 800949a:	3d03      	subs	r5, #3
 800949c:	45ac      	cmp	ip, r5
 800949e:	bf38      	it	cc
 80094a0:	2200      	movcc	r2, #0
 80094a2:	4413      	add	r3, r2
 80094a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80094a8:	b17a      	cbz	r2, 80094ca <__mdiff+0x106>
 80094aa:	6107      	str	r7, [r0, #16]
 80094ac:	e7a4      	b.n	80093f8 <__mdiff+0x34>
 80094ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80094b2:	fa11 f288 	uxtah	r2, r1, r8
 80094b6:	1414      	asrs	r4, r2, #16
 80094b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094bc:	b292      	uxth	r2, r2
 80094be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094c2:	f84e 2b04 	str.w	r2, [lr], #4
 80094c6:	1421      	asrs	r1, r4, #16
 80094c8:	e7e0      	b.n	800948c <__mdiff+0xc8>
 80094ca:	3f01      	subs	r7, #1
 80094cc:	e7ea      	b.n	80094a4 <__mdiff+0xe0>
 80094ce:	bf00      	nop
 80094d0:	0800ba9c 	.word	0x0800ba9c
 80094d4:	0800baad 	.word	0x0800baad

080094d8 <__d2b>:
 80094d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	460f      	mov	r7, r1
 80094de:	2101      	movs	r1, #1
 80094e0:	ec59 8b10 	vmov	r8, r9, d0
 80094e4:	4616      	mov	r6, r2
 80094e6:	f7ff fcd5 	bl	8008e94 <_Balloc>
 80094ea:	4604      	mov	r4, r0
 80094ec:	b930      	cbnz	r0, 80094fc <__d2b+0x24>
 80094ee:	4602      	mov	r2, r0
 80094f0:	4b24      	ldr	r3, [pc, #144]	; (8009584 <__d2b+0xac>)
 80094f2:	4825      	ldr	r0, [pc, #148]	; (8009588 <__d2b+0xb0>)
 80094f4:	f240 310f 	movw	r1, #783	; 0x30f
 80094f8:	f000 fade 	bl	8009ab8 <__assert_func>
 80094fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009504:	bb2d      	cbnz	r5, 8009552 <__d2b+0x7a>
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	f1b8 0300 	subs.w	r3, r8, #0
 800950c:	d026      	beq.n	800955c <__d2b+0x84>
 800950e:	4668      	mov	r0, sp
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	f7ff fd87 	bl	8009024 <__lo0bits>
 8009516:	e9dd 1200 	ldrd	r1, r2, [sp]
 800951a:	b1e8      	cbz	r0, 8009558 <__d2b+0x80>
 800951c:	f1c0 0320 	rsb	r3, r0, #32
 8009520:	fa02 f303 	lsl.w	r3, r2, r3
 8009524:	430b      	orrs	r3, r1
 8009526:	40c2      	lsrs	r2, r0
 8009528:	6163      	str	r3, [r4, #20]
 800952a:	9201      	str	r2, [sp, #4]
 800952c:	9b01      	ldr	r3, [sp, #4]
 800952e:	61a3      	str	r3, [r4, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	bf14      	ite	ne
 8009534:	2202      	movne	r2, #2
 8009536:	2201      	moveq	r2, #1
 8009538:	6122      	str	r2, [r4, #16]
 800953a:	b1bd      	cbz	r5, 800956c <__d2b+0x94>
 800953c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009540:	4405      	add	r5, r0
 8009542:	603d      	str	r5, [r7, #0]
 8009544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009548:	6030      	str	r0, [r6, #0]
 800954a:	4620      	mov	r0, r4
 800954c:	b003      	add	sp, #12
 800954e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009556:	e7d6      	b.n	8009506 <__d2b+0x2e>
 8009558:	6161      	str	r1, [r4, #20]
 800955a:	e7e7      	b.n	800952c <__d2b+0x54>
 800955c:	a801      	add	r0, sp, #4
 800955e:	f7ff fd61 	bl	8009024 <__lo0bits>
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	6163      	str	r3, [r4, #20]
 8009566:	3020      	adds	r0, #32
 8009568:	2201      	movs	r2, #1
 800956a:	e7e5      	b.n	8009538 <__d2b+0x60>
 800956c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009570:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009574:	6038      	str	r0, [r7, #0]
 8009576:	6918      	ldr	r0, [r3, #16]
 8009578:	f7ff fd34 	bl	8008fe4 <__hi0bits>
 800957c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009580:	e7e2      	b.n	8009548 <__d2b+0x70>
 8009582:	bf00      	nop
 8009584:	0800ba9c 	.word	0x0800ba9c
 8009588:	0800baad 	.word	0x0800baad

0800958c <__sfputc_r>:
 800958c:	6893      	ldr	r3, [r2, #8]
 800958e:	3b01      	subs	r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	b410      	push	{r4}
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	da08      	bge.n	80095aa <__sfputc_r+0x1e>
 8009598:	6994      	ldr	r4, [r2, #24]
 800959a:	42a3      	cmp	r3, r4
 800959c:	db01      	blt.n	80095a2 <__sfputc_r+0x16>
 800959e:	290a      	cmp	r1, #10
 80095a0:	d103      	bne.n	80095aa <__sfputc_r+0x1e>
 80095a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a6:	f000 b9e3 	b.w	8009970 <__swbuf_r>
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	1c58      	adds	r0, r3, #1
 80095ae:	6010      	str	r0, [r2, #0]
 80095b0:	7019      	strb	r1, [r3, #0]
 80095b2:	4608      	mov	r0, r1
 80095b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <__sfputs_r>:
 80095ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	18d5      	adds	r5, r2, r3
 80095c4:	42ac      	cmp	r4, r5
 80095c6:	d101      	bne.n	80095cc <__sfputs_r+0x12>
 80095c8:	2000      	movs	r0, #0
 80095ca:	e007      	b.n	80095dc <__sfputs_r+0x22>
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	463a      	mov	r2, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffda 	bl	800958c <__sfputc_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d1f3      	bne.n	80095c4 <__sfputs_r+0xa>
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095e0 <_vfiprintf_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	4614      	mov	r4, r2
 80095ea:	4698      	mov	r8, r3
 80095ec:	4606      	mov	r6, r0
 80095ee:	b118      	cbz	r0, 80095f8 <_vfiprintf_r+0x18>
 80095f0:	6a03      	ldr	r3, [r0, #32]
 80095f2:	b90b      	cbnz	r3, 80095f8 <_vfiprintf_r+0x18>
 80095f4:	f7fe fc6c 	bl	8007ed0 <__sinit>
 80095f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095fa:	07d9      	lsls	r1, r3, #31
 80095fc:	d405      	bmi.n	800960a <_vfiprintf_r+0x2a>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	059a      	lsls	r2, r3, #22
 8009602:	d402      	bmi.n	800960a <_vfiprintf_r+0x2a>
 8009604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009606:	f7fe fd7b 	bl	8008100 <__retarget_lock_acquire_recursive>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	071b      	lsls	r3, r3, #28
 800960e:	d501      	bpl.n	8009614 <_vfiprintf_r+0x34>
 8009610:	692b      	ldr	r3, [r5, #16]
 8009612:	b99b      	cbnz	r3, 800963c <_vfiprintf_r+0x5c>
 8009614:	4629      	mov	r1, r5
 8009616:	4630      	mov	r0, r6
 8009618:	f000 f9e8 	bl	80099ec <__swsetup_r>
 800961c:	b170      	cbz	r0, 800963c <_vfiprintf_r+0x5c>
 800961e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009620:	07dc      	lsls	r4, r3, #31
 8009622:	d504      	bpl.n	800962e <_vfiprintf_r+0x4e>
 8009624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009628:	b01d      	add	sp, #116	; 0x74
 800962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962e:	89ab      	ldrh	r3, [r5, #12]
 8009630:	0598      	lsls	r0, r3, #22
 8009632:	d4f7      	bmi.n	8009624 <_vfiprintf_r+0x44>
 8009634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009636:	f7fe fd64 	bl	8008102 <__retarget_lock_release_recursive>
 800963a:	e7f3      	b.n	8009624 <_vfiprintf_r+0x44>
 800963c:	2300      	movs	r3, #0
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	2320      	movs	r3, #32
 8009642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009646:	f8cd 800c 	str.w	r8, [sp, #12]
 800964a:	2330      	movs	r3, #48	; 0x30
 800964c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009800 <_vfiprintf_r+0x220>
 8009650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009654:	f04f 0901 	mov.w	r9, #1
 8009658:	4623      	mov	r3, r4
 800965a:	469a      	mov	sl, r3
 800965c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009660:	b10a      	cbz	r2, 8009666 <_vfiprintf_r+0x86>
 8009662:	2a25      	cmp	r2, #37	; 0x25
 8009664:	d1f9      	bne.n	800965a <_vfiprintf_r+0x7a>
 8009666:	ebba 0b04 	subs.w	fp, sl, r4
 800966a:	d00b      	beq.n	8009684 <_vfiprintf_r+0xa4>
 800966c:	465b      	mov	r3, fp
 800966e:	4622      	mov	r2, r4
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ffa1 	bl	80095ba <__sfputs_r>
 8009678:	3001      	adds	r0, #1
 800967a:	f000 80a9 	beq.w	80097d0 <_vfiprintf_r+0x1f0>
 800967e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009680:	445a      	add	r2, fp
 8009682:	9209      	str	r2, [sp, #36]	; 0x24
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80a1 	beq.w	80097d0 <_vfiprintf_r+0x1f0>
 800968e:	2300      	movs	r3, #0
 8009690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a4:	931a      	str	r3, [sp, #104]	; 0x68
 80096a6:	4654      	mov	r4, sl
 80096a8:	2205      	movs	r2, #5
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4854      	ldr	r0, [pc, #336]	; (8009800 <_vfiprintf_r+0x220>)
 80096b0:	f7f6 fd8e 	bl	80001d0 <memchr>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	b9d8      	cbnz	r0, 80096f0 <_vfiprintf_r+0x110>
 80096b8:	06d1      	lsls	r1, r2, #27
 80096ba:	bf44      	itt	mi
 80096bc:	2320      	movmi	r3, #32
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	0713      	lsls	r3, r2, #28
 80096c4:	bf44      	itt	mi
 80096c6:	232b      	movmi	r3, #43	; 0x2b
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b2a      	cmp	r3, #42	; 0x2a
 80096d2:	d015      	beq.n	8009700 <_vfiprintf_r+0x120>
 80096d4:	9a07      	ldr	r2, [sp, #28]
 80096d6:	4654      	mov	r4, sl
 80096d8:	2000      	movs	r0, #0
 80096da:	f04f 0c0a 	mov.w	ip, #10
 80096de:	4621      	mov	r1, r4
 80096e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e4:	3b30      	subs	r3, #48	; 0x30
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d94d      	bls.n	8009786 <_vfiprintf_r+0x1a6>
 80096ea:	b1b0      	cbz	r0, 800971a <_vfiprintf_r+0x13a>
 80096ec:	9207      	str	r2, [sp, #28]
 80096ee:	e014      	b.n	800971a <_vfiprintf_r+0x13a>
 80096f0:	eba0 0308 	sub.w	r3, r0, r8
 80096f4:	fa09 f303 	lsl.w	r3, r9, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	46a2      	mov	sl, r4
 80096fe:	e7d2      	b.n	80096a6 <_vfiprintf_r+0xc6>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	1d19      	adds	r1, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	9103      	str	r1, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbb      	ittet	lt
 800970c:	425b      	neglt	r3, r3
 800970e:	f042 0202 	orrlt.w	r2, r2, #2
 8009712:	9307      	strge	r3, [sp, #28]
 8009714:	9307      	strlt	r3, [sp, #28]
 8009716:	bfb8      	it	lt
 8009718:	9204      	strlt	r2, [sp, #16]
 800971a:	7823      	ldrb	r3, [r4, #0]
 800971c:	2b2e      	cmp	r3, #46	; 0x2e
 800971e:	d10c      	bne.n	800973a <_vfiprintf_r+0x15a>
 8009720:	7863      	ldrb	r3, [r4, #1]
 8009722:	2b2a      	cmp	r3, #42	; 0x2a
 8009724:	d134      	bne.n	8009790 <_vfiprintf_r+0x1b0>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	9203      	str	r2, [sp, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfb8      	it	lt
 8009732:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009736:	3402      	adds	r4, #2
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009810 <_vfiprintf_r+0x230>
 800973e:	7821      	ldrb	r1, [r4, #0]
 8009740:	2203      	movs	r2, #3
 8009742:	4650      	mov	r0, sl
 8009744:	f7f6 fd44 	bl	80001d0 <memchr>
 8009748:	b138      	cbz	r0, 800975a <_vfiprintf_r+0x17a>
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	eba0 000a 	sub.w	r0, r0, sl
 8009750:	2240      	movs	r2, #64	; 0x40
 8009752:	4082      	lsls	r2, r0
 8009754:	4313      	orrs	r3, r2
 8009756:	3401      	adds	r4, #1
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	4829      	ldr	r0, [pc, #164]	; (8009804 <_vfiprintf_r+0x224>)
 8009760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009764:	2206      	movs	r2, #6
 8009766:	f7f6 fd33 	bl	80001d0 <memchr>
 800976a:	2800      	cmp	r0, #0
 800976c:	d03f      	beq.n	80097ee <_vfiprintf_r+0x20e>
 800976e:	4b26      	ldr	r3, [pc, #152]	; (8009808 <_vfiprintf_r+0x228>)
 8009770:	bb1b      	cbnz	r3, 80097ba <_vfiprintf_r+0x1da>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	3307      	adds	r3, #7
 8009776:	f023 0307 	bic.w	r3, r3, #7
 800977a:	3308      	adds	r3, #8
 800977c:	9303      	str	r3, [sp, #12]
 800977e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009780:	443b      	add	r3, r7
 8009782:	9309      	str	r3, [sp, #36]	; 0x24
 8009784:	e768      	b.n	8009658 <_vfiprintf_r+0x78>
 8009786:	fb0c 3202 	mla	r2, ip, r2, r3
 800978a:	460c      	mov	r4, r1
 800978c:	2001      	movs	r0, #1
 800978e:	e7a6      	b.n	80096de <_vfiprintf_r+0xfe>
 8009790:	2300      	movs	r3, #0
 8009792:	3401      	adds	r4, #1
 8009794:	9305      	str	r3, [sp, #20]
 8009796:	4619      	mov	r1, r3
 8009798:	f04f 0c0a 	mov.w	ip, #10
 800979c:	4620      	mov	r0, r4
 800979e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a2:	3a30      	subs	r2, #48	; 0x30
 80097a4:	2a09      	cmp	r2, #9
 80097a6:	d903      	bls.n	80097b0 <_vfiprintf_r+0x1d0>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0c6      	beq.n	800973a <_vfiprintf_r+0x15a>
 80097ac:	9105      	str	r1, [sp, #20]
 80097ae:	e7c4      	b.n	800973a <_vfiprintf_r+0x15a>
 80097b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b4:	4604      	mov	r4, r0
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7f0      	b.n	800979c <_vfiprintf_r+0x1bc>
 80097ba:	ab03      	add	r3, sp, #12
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	462a      	mov	r2, r5
 80097c0:	4b12      	ldr	r3, [pc, #72]	; (800980c <_vfiprintf_r+0x22c>)
 80097c2:	a904      	add	r1, sp, #16
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7fd ff43 	bl	8007650 <_printf_float>
 80097ca:	4607      	mov	r7, r0
 80097cc:	1c78      	adds	r0, r7, #1
 80097ce:	d1d6      	bne.n	800977e <_vfiprintf_r+0x19e>
 80097d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_vfiprintf_r+0x202>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_vfiprintf_r+0x202>
 80097dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097de:	f7fe fc90 	bl	8008102 <__retarget_lock_release_recursive>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	065b      	lsls	r3, r3, #25
 80097e6:	f53f af1d 	bmi.w	8009624 <_vfiprintf_r+0x44>
 80097ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ec:	e71c      	b.n	8009628 <_vfiprintf_r+0x48>
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	462a      	mov	r2, r5
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <_vfiprintf_r+0x22c>)
 80097f6:	a904      	add	r1, sp, #16
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7fe f9cd 	bl	8007b98 <_printf_i>
 80097fe:	e7e4      	b.n	80097ca <_vfiprintf_r+0x1ea>
 8009800:	0800bc04 	.word	0x0800bc04
 8009804:	0800bc0e 	.word	0x0800bc0e
 8009808:	08007651 	.word	0x08007651
 800980c:	080095bb 	.word	0x080095bb
 8009810:	0800bc0a 	.word	0x0800bc0a

08009814 <__sflush_r>:
 8009814:	898a      	ldrh	r2, [r1, #12]
 8009816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	4605      	mov	r5, r0
 800981c:	0710      	lsls	r0, r2, #28
 800981e:	460c      	mov	r4, r1
 8009820:	d458      	bmi.n	80098d4 <__sflush_r+0xc0>
 8009822:	684b      	ldr	r3, [r1, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dc05      	bgt.n	8009834 <__sflush_r+0x20>
 8009828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	dc02      	bgt.n	8009834 <__sflush_r+0x20>
 800982e:	2000      	movs	r0, #0
 8009830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009836:	2e00      	cmp	r6, #0
 8009838:	d0f9      	beq.n	800982e <__sflush_r+0x1a>
 800983a:	2300      	movs	r3, #0
 800983c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009840:	682f      	ldr	r7, [r5, #0]
 8009842:	6a21      	ldr	r1, [r4, #32]
 8009844:	602b      	str	r3, [r5, #0]
 8009846:	d032      	beq.n	80098ae <__sflush_r+0x9a>
 8009848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	075a      	lsls	r2, r3, #29
 800984e:	d505      	bpl.n	800985c <__sflush_r+0x48>
 8009850:	6863      	ldr	r3, [r4, #4]
 8009852:	1ac0      	subs	r0, r0, r3
 8009854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009856:	b10b      	cbz	r3, 800985c <__sflush_r+0x48>
 8009858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800985a:	1ac0      	subs	r0, r0, r3
 800985c:	2300      	movs	r3, #0
 800985e:	4602      	mov	r2, r0
 8009860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009862:	6a21      	ldr	r1, [r4, #32]
 8009864:	4628      	mov	r0, r5
 8009866:	47b0      	blx	r6
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	d106      	bne.n	800987c <__sflush_r+0x68>
 800986e:	6829      	ldr	r1, [r5, #0]
 8009870:	291d      	cmp	r1, #29
 8009872:	d82b      	bhi.n	80098cc <__sflush_r+0xb8>
 8009874:	4a29      	ldr	r2, [pc, #164]	; (800991c <__sflush_r+0x108>)
 8009876:	410a      	asrs	r2, r1
 8009878:	07d6      	lsls	r6, r2, #31
 800987a:	d427      	bmi.n	80098cc <__sflush_r+0xb8>
 800987c:	2200      	movs	r2, #0
 800987e:	6062      	str	r2, [r4, #4]
 8009880:	04d9      	lsls	r1, r3, #19
 8009882:	6922      	ldr	r2, [r4, #16]
 8009884:	6022      	str	r2, [r4, #0]
 8009886:	d504      	bpl.n	8009892 <__sflush_r+0x7e>
 8009888:	1c42      	adds	r2, r0, #1
 800988a:	d101      	bne.n	8009890 <__sflush_r+0x7c>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b903      	cbnz	r3, 8009892 <__sflush_r+0x7e>
 8009890:	6560      	str	r0, [r4, #84]	; 0x54
 8009892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009894:	602f      	str	r7, [r5, #0]
 8009896:	2900      	cmp	r1, #0
 8009898:	d0c9      	beq.n	800982e <__sflush_r+0x1a>
 800989a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800989e:	4299      	cmp	r1, r3
 80098a0:	d002      	beq.n	80098a8 <__sflush_r+0x94>
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7ff faaa 	bl	8008dfc <_free_r>
 80098a8:	2000      	movs	r0, #0
 80098aa:	6360      	str	r0, [r4, #52]	; 0x34
 80098ac:	e7c0      	b.n	8009830 <__sflush_r+0x1c>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b0      	blx	r6
 80098b4:	1c41      	adds	r1, r0, #1
 80098b6:	d1c8      	bne.n	800984a <__sflush_r+0x36>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c5      	beq.n	800984a <__sflush_r+0x36>
 80098be:	2b1d      	cmp	r3, #29
 80098c0:	d001      	beq.n	80098c6 <__sflush_r+0xb2>
 80098c2:	2b16      	cmp	r3, #22
 80098c4:	d101      	bne.n	80098ca <__sflush_r+0xb6>
 80098c6:	602f      	str	r7, [r5, #0]
 80098c8:	e7b1      	b.n	800982e <__sflush_r+0x1a>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	e7ad      	b.n	8009830 <__sflush_r+0x1c>
 80098d4:	690f      	ldr	r7, [r1, #16]
 80098d6:	2f00      	cmp	r7, #0
 80098d8:	d0a9      	beq.n	800982e <__sflush_r+0x1a>
 80098da:	0793      	lsls	r3, r2, #30
 80098dc:	680e      	ldr	r6, [r1, #0]
 80098de:	bf08      	it	eq
 80098e0:	694b      	ldreq	r3, [r1, #20]
 80098e2:	600f      	str	r7, [r1, #0]
 80098e4:	bf18      	it	ne
 80098e6:	2300      	movne	r3, #0
 80098e8:	eba6 0807 	sub.w	r8, r6, r7
 80098ec:	608b      	str	r3, [r1, #8]
 80098ee:	f1b8 0f00 	cmp.w	r8, #0
 80098f2:	dd9c      	ble.n	800982e <__sflush_r+0x1a>
 80098f4:	6a21      	ldr	r1, [r4, #32]
 80098f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098f8:	4643      	mov	r3, r8
 80098fa:	463a      	mov	r2, r7
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b0      	blx	r6
 8009900:	2800      	cmp	r0, #0
 8009902:	dc06      	bgt.n	8009912 <__sflush_r+0xfe>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009910:	e78e      	b.n	8009830 <__sflush_r+0x1c>
 8009912:	4407      	add	r7, r0
 8009914:	eba8 0800 	sub.w	r8, r8, r0
 8009918:	e7e9      	b.n	80098ee <__sflush_r+0xda>
 800991a:	bf00      	nop
 800991c:	dfbffffe 	.word	0xdfbffffe

08009920 <_fflush_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	4605      	mov	r5, r0
 8009926:	460c      	mov	r4, r1
 8009928:	b913      	cbnz	r3, 8009930 <_fflush_r+0x10>
 800992a:	2500      	movs	r5, #0
 800992c:	4628      	mov	r0, r5
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	b118      	cbz	r0, 800993a <_fflush_r+0x1a>
 8009932:	6a03      	ldr	r3, [r0, #32]
 8009934:	b90b      	cbnz	r3, 800993a <_fflush_r+0x1a>
 8009936:	f7fe facb 	bl	8007ed0 <__sinit>
 800993a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0f3      	beq.n	800992a <_fflush_r+0xa>
 8009942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009944:	07d0      	lsls	r0, r2, #31
 8009946:	d404      	bmi.n	8009952 <_fflush_r+0x32>
 8009948:	0599      	lsls	r1, r3, #22
 800994a:	d402      	bmi.n	8009952 <_fflush_r+0x32>
 800994c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994e:	f7fe fbd7 	bl	8008100 <__retarget_lock_acquire_recursive>
 8009952:	4628      	mov	r0, r5
 8009954:	4621      	mov	r1, r4
 8009956:	f7ff ff5d 	bl	8009814 <__sflush_r>
 800995a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800995c:	07da      	lsls	r2, r3, #31
 800995e:	4605      	mov	r5, r0
 8009960:	d4e4      	bmi.n	800992c <_fflush_r+0xc>
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	059b      	lsls	r3, r3, #22
 8009966:	d4e1      	bmi.n	800992c <_fflush_r+0xc>
 8009968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800996a:	f7fe fbca 	bl	8008102 <__retarget_lock_release_recursive>
 800996e:	e7dd      	b.n	800992c <_fflush_r+0xc>

08009970 <__swbuf_r>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	460e      	mov	r6, r1
 8009974:	4614      	mov	r4, r2
 8009976:	4605      	mov	r5, r0
 8009978:	b118      	cbz	r0, 8009982 <__swbuf_r+0x12>
 800997a:	6a03      	ldr	r3, [r0, #32]
 800997c:	b90b      	cbnz	r3, 8009982 <__swbuf_r+0x12>
 800997e:	f7fe faa7 	bl	8007ed0 <__sinit>
 8009982:	69a3      	ldr	r3, [r4, #24]
 8009984:	60a3      	str	r3, [r4, #8]
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	071a      	lsls	r2, r3, #28
 800998a:	d525      	bpl.n	80099d8 <__swbuf_r+0x68>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	b31b      	cbz	r3, 80099d8 <__swbuf_r+0x68>
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	6922      	ldr	r2, [r4, #16]
 8009994:	1a98      	subs	r0, r3, r2
 8009996:	6963      	ldr	r3, [r4, #20]
 8009998:	b2f6      	uxtb	r6, r6
 800999a:	4283      	cmp	r3, r0
 800999c:	4637      	mov	r7, r6
 800999e:	dc04      	bgt.n	80099aa <__swbuf_r+0x3a>
 80099a0:	4621      	mov	r1, r4
 80099a2:	4628      	mov	r0, r5
 80099a4:	f7ff ffbc 	bl	8009920 <_fflush_r>
 80099a8:	b9e0      	cbnz	r0, 80099e4 <__swbuf_r+0x74>
 80099aa:	68a3      	ldr	r3, [r4, #8]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	60a3      	str	r3, [r4, #8]
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	6022      	str	r2, [r4, #0]
 80099b6:	701e      	strb	r6, [r3, #0]
 80099b8:	6962      	ldr	r2, [r4, #20]
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	429a      	cmp	r2, r3
 80099be:	d004      	beq.n	80099ca <__swbuf_r+0x5a>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	07db      	lsls	r3, r3, #31
 80099c4:	d506      	bpl.n	80099d4 <__swbuf_r+0x64>
 80099c6:	2e0a      	cmp	r6, #10
 80099c8:	d104      	bne.n	80099d4 <__swbuf_r+0x64>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4628      	mov	r0, r5
 80099ce:	f7ff ffa7 	bl	8009920 <_fflush_r>
 80099d2:	b938      	cbnz	r0, 80099e4 <__swbuf_r+0x74>
 80099d4:	4638      	mov	r0, r7
 80099d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d8:	4621      	mov	r1, r4
 80099da:	4628      	mov	r0, r5
 80099dc:	f000 f806 	bl	80099ec <__swsetup_r>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d0d5      	beq.n	8009990 <__swbuf_r+0x20>
 80099e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80099e8:	e7f4      	b.n	80099d4 <__swbuf_r+0x64>
	...

080099ec <__swsetup_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <__swsetup_r+0xac>)
 80099f0:	4605      	mov	r5, r0
 80099f2:	6818      	ldr	r0, [r3, #0]
 80099f4:	460c      	mov	r4, r1
 80099f6:	b118      	cbz	r0, 8009a00 <__swsetup_r+0x14>
 80099f8:	6a03      	ldr	r3, [r0, #32]
 80099fa:	b90b      	cbnz	r3, 8009a00 <__swsetup_r+0x14>
 80099fc:	f7fe fa68 	bl	8007ed0 <__sinit>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a06:	0718      	lsls	r0, r3, #28
 8009a08:	d422      	bmi.n	8009a50 <__swsetup_r+0x64>
 8009a0a:	06d9      	lsls	r1, r3, #27
 8009a0c:	d407      	bmi.n	8009a1e <__swsetup_r+0x32>
 8009a0e:	2309      	movs	r3, #9
 8009a10:	602b      	str	r3, [r5, #0]
 8009a12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a16:	81a3      	strh	r3, [r4, #12]
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a1c:	e034      	b.n	8009a88 <__swsetup_r+0x9c>
 8009a1e:	0758      	lsls	r0, r3, #29
 8009a20:	d512      	bpl.n	8009a48 <__swsetup_r+0x5c>
 8009a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a24:	b141      	cbz	r1, 8009a38 <__swsetup_r+0x4c>
 8009a26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a2a:	4299      	cmp	r1, r3
 8009a2c:	d002      	beq.n	8009a34 <__swsetup_r+0x48>
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f7ff f9e4 	bl	8008dfc <_free_r>
 8009a34:	2300      	movs	r3, #0
 8009a36:	6363      	str	r3, [r4, #52]	; 0x34
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	2300      	movs	r3, #0
 8009a42:	6063      	str	r3, [r4, #4]
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	f043 0308 	orr.w	r3, r3, #8
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	b94b      	cbnz	r3, 8009a68 <__swsetup_r+0x7c>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a5e:	d003      	beq.n	8009a68 <__swsetup_r+0x7c>
 8009a60:	4621      	mov	r1, r4
 8009a62:	4628      	mov	r0, r5
 8009a64:	f000 f8b4 	bl	8009bd0 <__smakebuf_r>
 8009a68:	89a0      	ldrh	r0, [r4, #12]
 8009a6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a6e:	f010 0301 	ands.w	r3, r0, #1
 8009a72:	d00a      	beq.n	8009a8a <__swsetup_r+0x9e>
 8009a74:	2300      	movs	r3, #0
 8009a76:	60a3      	str	r3, [r4, #8]
 8009a78:	6963      	ldr	r3, [r4, #20]
 8009a7a:	425b      	negs	r3, r3
 8009a7c:	61a3      	str	r3, [r4, #24]
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	b943      	cbnz	r3, 8009a94 <__swsetup_r+0xa8>
 8009a82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a86:	d1c4      	bne.n	8009a12 <__swsetup_r+0x26>
 8009a88:	bd38      	pop	{r3, r4, r5, pc}
 8009a8a:	0781      	lsls	r1, r0, #30
 8009a8c:	bf58      	it	pl
 8009a8e:	6963      	ldrpl	r3, [r4, #20]
 8009a90:	60a3      	str	r3, [r4, #8]
 8009a92:	e7f4      	b.n	8009a7e <__swsetup_r+0x92>
 8009a94:	2000      	movs	r0, #0
 8009a96:	e7f7      	b.n	8009a88 <__swsetup_r+0x9c>
 8009a98:	20000064 	.word	0x20000064

08009a9c <memcpy>:
 8009a9c:	440a      	add	r2, r1
 8009a9e:	4291      	cmp	r1, r2
 8009aa0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009aa4:	d100      	bne.n	8009aa8 <memcpy+0xc>
 8009aa6:	4770      	bx	lr
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ab2:	4291      	cmp	r1, r2
 8009ab4:	d1f9      	bne.n	8009aaa <memcpy+0xe>
 8009ab6:	bd10      	pop	{r4, pc}

08009ab8 <__assert_func>:
 8009ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aba:	4614      	mov	r4, r2
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <__assert_func+0x2c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	68d8      	ldr	r0, [r3, #12]
 8009ac6:	b14c      	cbz	r4, 8009adc <__assert_func+0x24>
 8009ac8:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <__assert_func+0x30>)
 8009aca:	9100      	str	r1, [sp, #0]
 8009acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ad0:	4906      	ldr	r1, [pc, #24]	; (8009aec <__assert_func+0x34>)
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	f000 f844 	bl	8009b60 <fiprintf>
 8009ad8:	f000 f8d8 	bl	8009c8c <abort>
 8009adc:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <__assert_func+0x38>)
 8009ade:	461c      	mov	r4, r3
 8009ae0:	e7f3      	b.n	8009aca <__assert_func+0x12>
 8009ae2:	bf00      	nop
 8009ae4:	20000064 	.word	0x20000064
 8009ae8:	0800bc1f 	.word	0x0800bc1f
 8009aec:	0800bc2c 	.word	0x0800bc2c
 8009af0:	0800bc5a 	.word	0x0800bc5a

08009af4 <_calloc_r>:
 8009af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009af6:	fba1 2402 	umull	r2, r4, r1, r2
 8009afa:	b94c      	cbnz	r4, 8009b10 <_calloc_r+0x1c>
 8009afc:	4611      	mov	r1, r2
 8009afe:	9201      	str	r2, [sp, #4]
 8009b00:	f7fd fc7a 	bl	80073f8 <_malloc_r>
 8009b04:	9a01      	ldr	r2, [sp, #4]
 8009b06:	4605      	mov	r5, r0
 8009b08:	b930      	cbnz	r0, 8009b18 <_calloc_r+0x24>
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	b003      	add	sp, #12
 8009b0e:	bd30      	pop	{r4, r5, pc}
 8009b10:	220c      	movs	r2, #12
 8009b12:	6002      	str	r2, [r0, #0]
 8009b14:	2500      	movs	r5, #0
 8009b16:	e7f8      	b.n	8009b0a <_calloc_r+0x16>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	f7fe fa64 	bl	8007fe6 <memset>
 8009b1e:	e7f4      	b.n	8009b0a <_calloc_r+0x16>

08009b20 <__ascii_mbtowc>:
 8009b20:	b082      	sub	sp, #8
 8009b22:	b901      	cbnz	r1, 8009b26 <__ascii_mbtowc+0x6>
 8009b24:	a901      	add	r1, sp, #4
 8009b26:	b142      	cbz	r2, 8009b3a <__ascii_mbtowc+0x1a>
 8009b28:	b14b      	cbz	r3, 8009b3e <__ascii_mbtowc+0x1e>
 8009b2a:	7813      	ldrb	r3, [r2, #0]
 8009b2c:	600b      	str	r3, [r1, #0]
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	1e10      	subs	r0, r2, #0
 8009b32:	bf18      	it	ne
 8009b34:	2001      	movne	r0, #1
 8009b36:	b002      	add	sp, #8
 8009b38:	4770      	bx	lr
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	e7fb      	b.n	8009b36 <__ascii_mbtowc+0x16>
 8009b3e:	f06f 0001 	mvn.w	r0, #1
 8009b42:	e7f8      	b.n	8009b36 <__ascii_mbtowc+0x16>

08009b44 <__ascii_wctomb>:
 8009b44:	b149      	cbz	r1, 8009b5a <__ascii_wctomb+0x16>
 8009b46:	2aff      	cmp	r2, #255	; 0xff
 8009b48:	bf85      	ittet	hi
 8009b4a:	238a      	movhi	r3, #138	; 0x8a
 8009b4c:	6003      	strhi	r3, [r0, #0]
 8009b4e:	700a      	strbls	r2, [r1, #0]
 8009b50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009b54:	bf98      	it	ls
 8009b56:	2001      	movls	r0, #1
 8009b58:	4770      	bx	lr
 8009b5a:	4608      	mov	r0, r1
 8009b5c:	4770      	bx	lr
	...

08009b60 <fiprintf>:
 8009b60:	b40e      	push	{r1, r2, r3}
 8009b62:	b503      	push	{r0, r1, lr}
 8009b64:	4601      	mov	r1, r0
 8009b66:	ab03      	add	r3, sp, #12
 8009b68:	4805      	ldr	r0, [pc, #20]	; (8009b80 <fiprintf+0x20>)
 8009b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	f7ff fd35 	bl	80095e0 <_vfiprintf_r>
 8009b76:	b002      	add	sp, #8
 8009b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b7c:	b003      	add	sp, #12
 8009b7e:	4770      	bx	lr
 8009b80:	20000064 	.word	0x20000064

08009b84 <__swhatbuf_r>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	460c      	mov	r4, r1
 8009b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	b096      	sub	sp, #88	; 0x58
 8009b90:	4615      	mov	r5, r2
 8009b92:	461e      	mov	r6, r3
 8009b94:	da0d      	bge.n	8009bb2 <__swhatbuf_r+0x2e>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b9c:	f04f 0100 	mov.w	r1, #0
 8009ba0:	bf0c      	ite	eq
 8009ba2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ba6:	2340      	movne	r3, #64	; 0x40
 8009ba8:	2000      	movs	r0, #0
 8009baa:	6031      	str	r1, [r6, #0]
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	b016      	add	sp, #88	; 0x58
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
 8009bb2:	466a      	mov	r2, sp
 8009bb4:	f000 f848 	bl	8009c48 <_fstat_r>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	dbec      	blt.n	8009b96 <__swhatbuf_r+0x12>
 8009bbc:	9901      	ldr	r1, [sp, #4]
 8009bbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009bc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009bc6:	4259      	negs	r1, r3
 8009bc8:	4159      	adcs	r1, r3
 8009bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bce:	e7eb      	b.n	8009ba8 <__swhatbuf_r+0x24>

08009bd0 <__smakebuf_r>:
 8009bd0:	898b      	ldrh	r3, [r1, #12]
 8009bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bd4:	079d      	lsls	r5, r3, #30
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	d507      	bpl.n	8009bec <__smakebuf_r+0x1c>
 8009bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	2301      	movs	r3, #1
 8009be6:	6163      	str	r3, [r4, #20]
 8009be8:	b002      	add	sp, #8
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	ab01      	add	r3, sp, #4
 8009bee:	466a      	mov	r2, sp
 8009bf0:	f7ff ffc8 	bl	8009b84 <__swhatbuf_r>
 8009bf4:	9900      	ldr	r1, [sp, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7fd fbfd 	bl	80073f8 <_malloc_r>
 8009bfe:	b948      	cbnz	r0, 8009c14 <__smakebuf_r+0x44>
 8009c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c04:	059a      	lsls	r2, r3, #22
 8009c06:	d4ef      	bmi.n	8009be8 <__smakebuf_r+0x18>
 8009c08:	f023 0303 	bic.w	r3, r3, #3
 8009c0c:	f043 0302 	orr.w	r3, r3, #2
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	e7e3      	b.n	8009bdc <__smakebuf_r+0xc>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	6020      	str	r0, [r4, #0]
 8009c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	6163      	str	r3, [r4, #20]
 8009c22:	9b01      	ldr	r3, [sp, #4]
 8009c24:	6120      	str	r0, [r4, #16]
 8009c26:	b15b      	cbz	r3, 8009c40 <__smakebuf_r+0x70>
 8009c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f000 f81d 	bl	8009c6c <_isatty_r>
 8009c32:	b128      	cbz	r0, 8009c40 <__smakebuf_r+0x70>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f023 0303 	bic.w	r3, r3, #3
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	431d      	orrs	r5, r3
 8009c44:	81a5      	strh	r5, [r4, #12]
 8009c46:	e7cf      	b.n	8009be8 <__smakebuf_r+0x18>

08009c48 <_fstat_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	; (8009c68 <_fstat_r+0x20>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	4611      	mov	r1, r2
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	f7f8 f93c 	bl	8001ed2 <_fstat>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d102      	bne.n	8009c64 <_fstat_r+0x1c>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	b103      	cbz	r3, 8009c64 <_fstat_r+0x1c>
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	bf00      	nop
 8009c68:	200004cc 	.word	0x200004cc

08009c6c <_isatty_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d06      	ldr	r5, [pc, #24]	; (8009c88 <_isatty_r+0x1c>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f8 f93b 	bl	8001ef2 <_isatty>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_isatty_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_isatty_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	200004cc 	.word	0x200004cc

08009c8c <abort>:
 8009c8c:	b508      	push	{r3, lr}
 8009c8e:	2006      	movs	r0, #6
 8009c90:	f000 f82c 	bl	8009cec <raise>
 8009c94:	2001      	movs	r0, #1
 8009c96:	f7f8 f8cd 	bl	8001e34 <_exit>

08009c9a <_raise_r>:
 8009c9a:	291f      	cmp	r1, #31
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	d904      	bls.n	8009cae <_raise_r+0x14>
 8009ca4:	2316      	movs	r3, #22
 8009ca6:	6003      	str	r3, [r0, #0]
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009cb0:	b112      	cbz	r2, 8009cb8 <_raise_r+0x1e>
 8009cb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cb6:	b94b      	cbnz	r3, 8009ccc <_raise_r+0x32>
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 f831 	bl	8009d20 <_getpid_r>
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	4601      	mov	r1, r0
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cc8:	f000 b818 	b.w	8009cfc <_kill_r>
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d00a      	beq.n	8009ce6 <_raise_r+0x4c>
 8009cd0:	1c59      	adds	r1, r3, #1
 8009cd2:	d103      	bne.n	8009cdc <_raise_r+0x42>
 8009cd4:	2316      	movs	r3, #22
 8009cd6:	6003      	str	r3, [r0, #0]
 8009cd8:	2001      	movs	r0, #1
 8009cda:	e7e7      	b.n	8009cac <_raise_r+0x12>
 8009cdc:	2400      	movs	r4, #0
 8009cde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	4798      	blx	r3
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	e7e0      	b.n	8009cac <_raise_r+0x12>
	...

08009cec <raise>:
 8009cec:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <raise+0xc>)
 8009cee:	4601      	mov	r1, r0
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	f7ff bfd2 	b.w	8009c9a <_raise_r>
 8009cf6:	bf00      	nop
 8009cf8:	20000064 	.word	0x20000064

08009cfc <_kill_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d07      	ldr	r5, [pc, #28]	; (8009d1c <_kill_r+0x20>)
 8009d00:	2300      	movs	r3, #0
 8009d02:	4604      	mov	r4, r0
 8009d04:	4608      	mov	r0, r1
 8009d06:	4611      	mov	r1, r2
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	f7f8 f883 	bl	8001e14 <_kill>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d102      	bne.n	8009d18 <_kill_r+0x1c>
 8009d12:	682b      	ldr	r3, [r5, #0]
 8009d14:	b103      	cbz	r3, 8009d18 <_kill_r+0x1c>
 8009d16:	6023      	str	r3, [r4, #0]
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	bf00      	nop
 8009d1c:	200004cc 	.word	0x200004cc

08009d20 <_getpid_r>:
 8009d20:	f7f8 b870 	b.w	8001e04 <_getpid>

08009d24 <powf>:
 8009d24:	b508      	push	{r3, lr}
 8009d26:	ed2d 8b04 	vpush	{d8-d9}
 8009d2a:	eeb0 8a60 	vmov.f32	s16, s1
 8009d2e:	eeb0 9a40 	vmov.f32	s18, s0
 8009d32:	f000 f8c5 	bl	8009ec0 <__ieee754_powf>
 8009d36:	eeb4 8a48 	vcmp.f32	s16, s16
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	eef0 8a40 	vmov.f32	s17, s0
 8009d42:	d63e      	bvs.n	8009dc2 <powf+0x9e>
 8009d44:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4c:	d112      	bne.n	8009d74 <powf+0x50>
 8009d4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d56:	d039      	beq.n	8009dcc <powf+0xa8>
 8009d58:	eeb0 0a48 	vmov.f32	s0, s16
 8009d5c:	f000 f858 	bl	8009e10 <finitef>
 8009d60:	b378      	cbz	r0, 8009dc2 <powf+0x9e>
 8009d62:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6a:	d52a      	bpl.n	8009dc2 <powf+0x9e>
 8009d6c:	f7fe f99e 	bl	80080ac <__errno>
 8009d70:	2322      	movs	r3, #34	; 0x22
 8009d72:	e014      	b.n	8009d9e <powf+0x7a>
 8009d74:	f000 f84c 	bl	8009e10 <finitef>
 8009d78:	b998      	cbnz	r0, 8009da2 <powf+0x7e>
 8009d7a:	eeb0 0a49 	vmov.f32	s0, s18
 8009d7e:	f000 f847 	bl	8009e10 <finitef>
 8009d82:	b170      	cbz	r0, 8009da2 <powf+0x7e>
 8009d84:	eeb0 0a48 	vmov.f32	s0, s16
 8009d88:	f000 f842 	bl	8009e10 <finitef>
 8009d8c:	b148      	cbz	r0, 8009da2 <powf+0x7e>
 8009d8e:	eef4 8a68 	vcmp.f32	s17, s17
 8009d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d96:	d7e9      	bvc.n	8009d6c <powf+0x48>
 8009d98:	f7fe f988 	bl	80080ac <__errno>
 8009d9c:	2321      	movs	r3, #33	; 0x21
 8009d9e:	6003      	str	r3, [r0, #0]
 8009da0:	e00f      	b.n	8009dc2 <powf+0x9e>
 8009da2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009daa:	d10a      	bne.n	8009dc2 <powf+0x9e>
 8009dac:	eeb0 0a49 	vmov.f32	s0, s18
 8009db0:	f000 f82e 	bl	8009e10 <finitef>
 8009db4:	b128      	cbz	r0, 8009dc2 <powf+0x9e>
 8009db6:	eeb0 0a48 	vmov.f32	s0, s16
 8009dba:	f000 f829 	bl	8009e10 <finitef>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d1d4      	bne.n	8009d6c <powf+0x48>
 8009dc2:	eeb0 0a68 	vmov.f32	s0, s17
 8009dc6:	ecbd 8b04 	vpop	{d8-d9}
 8009dca:	bd08      	pop	{r3, pc}
 8009dcc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009dd0:	e7f7      	b.n	8009dc2 <powf+0x9e>
	...

08009dd4 <sqrtf>:
 8009dd4:	b508      	push	{r3, lr}
 8009dd6:	ed2d 8b02 	vpush	{d8}
 8009dda:	eeb0 8a40 	vmov.f32	s16, s0
 8009dde:	f000 f824 	bl	8009e2a <__ieee754_sqrtf>
 8009de2:	eeb4 8a48 	vcmp.f32	s16, s16
 8009de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dea:	d60c      	bvs.n	8009e06 <sqrtf+0x32>
 8009dec:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009e0c <sqrtf+0x38>
 8009df0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df8:	d505      	bpl.n	8009e06 <sqrtf+0x32>
 8009dfa:	f7fe f957 	bl	80080ac <__errno>
 8009dfe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009e02:	2321      	movs	r3, #33	; 0x21
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	ecbd 8b02 	vpop	{d8}
 8009e0a:	bd08      	pop	{r3, pc}
 8009e0c:	00000000 	.word	0x00000000

08009e10 <finitef>:
 8009e10:	b082      	sub	sp, #8
 8009e12:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009e16:	9801      	ldr	r0, [sp, #4]
 8009e18:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009e1c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009e20:	bfac      	ite	ge
 8009e22:	2000      	movge	r0, #0
 8009e24:	2001      	movlt	r0, #1
 8009e26:	b002      	add	sp, #8
 8009e28:	4770      	bx	lr

08009e2a <__ieee754_sqrtf>:
 8009e2a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009e2e:	4770      	bx	lr

08009e30 <round>:
 8009e30:	ec53 2b10 	vmov	r2, r3, d0
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8009e3a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8009e3e:	2813      	cmp	r0, #19
 8009e40:	ee10 5a10 	vmov	r5, s0
 8009e44:	4619      	mov	r1, r3
 8009e46:	dc18      	bgt.n	8009e7a <round+0x4a>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	da09      	bge.n	8009e60 <round+0x30>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8009e52:	d103      	bne.n	8009e5c <round+0x2c>
 8009e54:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009e58:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e02a      	b.n	8009eb6 <round+0x86>
 8009e60:	4c16      	ldr	r4, [pc, #88]	; (8009ebc <round+0x8c>)
 8009e62:	4104      	asrs	r4, r0
 8009e64:	ea03 0604 	and.w	r6, r3, r4
 8009e68:	4316      	orrs	r6, r2
 8009e6a:	d011      	beq.n	8009e90 <round+0x60>
 8009e6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e70:	4103      	asrs	r3, r0
 8009e72:	440b      	add	r3, r1
 8009e74:	ea23 0104 	bic.w	r1, r3, r4
 8009e78:	e7f0      	b.n	8009e5c <round+0x2c>
 8009e7a:	2833      	cmp	r0, #51	; 0x33
 8009e7c:	dd0b      	ble.n	8009e96 <round+0x66>
 8009e7e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009e82:	d105      	bne.n	8009e90 <round+0x60>
 8009e84:	ee10 0a10 	vmov	r0, s0
 8009e88:	f7f6 fa00 	bl	800028c <__adddf3>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	ec43 2b10 	vmov	d0, r2, r3
 8009e94:	bd70      	pop	{r4, r5, r6, pc}
 8009e96:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8009e9a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009e9e:	40f4      	lsrs	r4, r6
 8009ea0:	4214      	tst	r4, r2
 8009ea2:	d0f5      	beq.n	8009e90 <round+0x60>
 8009ea4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	4083      	lsls	r3, r0
 8009eac:	195b      	adds	r3, r3, r5
 8009eae:	bf28      	it	cs
 8009eb0:	3101      	addcs	r1, #1
 8009eb2:	ea23 0304 	bic.w	r3, r3, r4
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	460b      	mov	r3, r1
 8009eba:	e7e9      	b.n	8009e90 <round+0x60>
 8009ebc:	000fffff 	.word	0x000fffff

08009ec0 <__ieee754_powf>:
 8009ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec4:	ee10 4a90 	vmov	r4, s1
 8009ec8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8009ecc:	ed2d 8b02 	vpush	{d8}
 8009ed0:	ee10 7a10 	vmov	r7, s0
 8009ed4:	eeb0 8a40 	vmov.f32	s16, s0
 8009ed8:	eef0 8a60 	vmov.f32	s17, s1
 8009edc:	d10c      	bne.n	8009ef8 <__ieee754_powf+0x38>
 8009ede:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8009ee2:	007f      	lsls	r7, r7, #1
 8009ee4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8009ee8:	f240 8292 	bls.w	800a410 <__ieee754_powf+0x550>
 8009eec:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009ef0:	ecbd 8b02 	vpop	{d8}
 8009ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef8:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8009efc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009f00:	dcf4      	bgt.n	8009eec <__ieee754_powf+0x2c>
 8009f02:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009f06:	dd08      	ble.n	8009f1a <__ieee754_powf+0x5a>
 8009f08:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8009f0c:	d1ee      	bne.n	8009eec <__ieee754_powf+0x2c>
 8009f0e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8009f12:	0064      	lsls	r4, r4, #1
 8009f14:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8009f18:	e7e6      	b.n	8009ee8 <__ieee754_powf+0x28>
 8009f1a:	2f00      	cmp	r7, #0
 8009f1c:	da20      	bge.n	8009f60 <__ieee754_powf+0xa0>
 8009f1e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8009f22:	da2d      	bge.n	8009f80 <__ieee754_powf+0xc0>
 8009f24:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009f28:	f2c0 827b 	blt.w	800a422 <__ieee754_powf+0x562>
 8009f2c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8009f30:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8009f34:	fa48 f603 	asr.w	r6, r8, r3
 8009f38:	fa06 f303 	lsl.w	r3, r6, r3
 8009f3c:	4543      	cmp	r3, r8
 8009f3e:	f040 8270 	bne.w	800a422 <__ieee754_powf+0x562>
 8009f42:	f006 0601 	and.w	r6, r6, #1
 8009f46:	f1c6 0602 	rsb	r6, r6, #2
 8009f4a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8009f4e:	d11f      	bne.n	8009f90 <__ieee754_powf+0xd0>
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	f280 8263 	bge.w	800a41c <__ieee754_powf+0x55c>
 8009f56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009f5a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009f5e:	e7c7      	b.n	8009ef0 <__ieee754_powf+0x30>
 8009f60:	2600      	movs	r6, #0
 8009f62:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8009f66:	d1f0      	bne.n	8009f4a <__ieee754_powf+0x8a>
 8009f68:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8009f6c:	f000 8250 	beq.w	800a410 <__ieee754_powf+0x550>
 8009f70:	dd08      	ble.n	8009f84 <__ieee754_powf+0xc4>
 8009f72:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800a278 <__ieee754_powf+0x3b8>
 8009f76:	2c00      	cmp	r4, #0
 8009f78:	bfa8      	it	ge
 8009f7a:	eeb0 0a68 	vmovge.f32	s0, s17
 8009f7e:	e7b7      	b.n	8009ef0 <__ieee754_powf+0x30>
 8009f80:	2602      	movs	r6, #2
 8009f82:	e7ee      	b.n	8009f62 <__ieee754_powf+0xa2>
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	f280 8246 	bge.w	800a416 <__ieee754_powf+0x556>
 8009f8a:	eeb1 0a68 	vneg.f32	s0, s17
 8009f8e:	e7af      	b.n	8009ef0 <__ieee754_powf+0x30>
 8009f90:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009f94:	d102      	bne.n	8009f9c <__ieee754_powf+0xdc>
 8009f96:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009f9a:	e7a9      	b.n	8009ef0 <__ieee754_powf+0x30>
 8009f9c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa4:	d107      	bne.n	8009fb6 <__ieee754_powf+0xf6>
 8009fa6:	2f00      	cmp	r7, #0
 8009fa8:	db05      	blt.n	8009fb6 <__ieee754_powf+0xf6>
 8009faa:	ecbd 8b02 	vpop	{d8}
 8009fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb2:	f7ff bf3a 	b.w	8009e2a <__ieee754_sqrtf>
 8009fb6:	f000 fa4d 	bl	800a454 <fabsf>
 8009fba:	b125      	cbz	r5, 8009fc6 <__ieee754_powf+0x106>
 8009fbc:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8009fc0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009fc4:	d115      	bne.n	8009ff2 <__ieee754_powf+0x132>
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	bfbc      	itt	lt
 8009fca:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009fce:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009fd2:	2f00      	cmp	r7, #0
 8009fd4:	da8c      	bge.n	8009ef0 <__ieee754_powf+0x30>
 8009fd6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8009fda:	4335      	orrs	r5, r6
 8009fdc:	d104      	bne.n	8009fe8 <__ieee754_powf+0x128>
 8009fde:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009fe2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009fe6:	e783      	b.n	8009ef0 <__ieee754_powf+0x30>
 8009fe8:	2e01      	cmp	r6, #1
 8009fea:	d181      	bne.n	8009ef0 <__ieee754_powf+0x30>
 8009fec:	eeb1 0a40 	vneg.f32	s0, s0
 8009ff0:	e77e      	b.n	8009ef0 <__ieee754_powf+0x30>
 8009ff2:	0ff8      	lsrs	r0, r7, #31
 8009ff4:	3801      	subs	r0, #1
 8009ff6:	ea56 0300 	orrs.w	r3, r6, r0
 8009ffa:	d104      	bne.n	800a006 <__ieee754_powf+0x146>
 8009ffc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a000:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a004:	e774      	b.n	8009ef0 <__ieee754_powf+0x30>
 800a006:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800a00a:	dd73      	ble.n	800a0f4 <__ieee754_powf+0x234>
 800a00c:	4b9b      	ldr	r3, [pc, #620]	; (800a27c <__ieee754_powf+0x3bc>)
 800a00e:	429d      	cmp	r5, r3
 800a010:	dc08      	bgt.n	800a024 <__ieee754_powf+0x164>
 800a012:	2c00      	cmp	r4, #0
 800a014:	da0b      	bge.n	800a02e <__ieee754_powf+0x16e>
 800a016:	2000      	movs	r0, #0
 800a018:	ecbd 8b02 	vpop	{d8}
 800a01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a020:	f000 baa2 	b.w	800a568 <__math_oflowf>
 800a024:	4b96      	ldr	r3, [pc, #600]	; (800a280 <__ieee754_powf+0x3c0>)
 800a026:	429d      	cmp	r5, r3
 800a028:	dd08      	ble.n	800a03c <__ieee754_powf+0x17c>
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	dcf3      	bgt.n	800a016 <__ieee754_powf+0x156>
 800a02e:	2000      	movs	r0, #0
 800a030:	ecbd 8b02 	vpop	{d8}
 800a034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a038:	f000 ba90 	b.w	800a55c <__math_uflowf>
 800a03c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a040:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a044:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800a284 <__ieee754_powf+0x3c4>
 800a048:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a04c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a050:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a054:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a058:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a05c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a060:	eddf 7a89 	vldr	s15, [pc, #548]	; 800a288 <__ieee754_powf+0x3c8>
 800a064:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a068:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a28c <__ieee754_powf+0x3cc>
 800a06c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a070:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800a290 <__ieee754_powf+0x3d0>
 800a074:	eef0 6a67 	vmov.f32	s13, s15
 800a078:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a07c:	ee16 3a90 	vmov	r3, s13
 800a080:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a084:	f023 030f 	bic.w	r3, r3, #15
 800a088:	ee06 3a90 	vmov	s13, r3
 800a08c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a090:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a094:	3e01      	subs	r6, #1
 800a096:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a09a:	4306      	orrs	r6, r0
 800a09c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a0a0:	f024 040f 	bic.w	r4, r4, #15
 800a0a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a0a8:	bf08      	it	eq
 800a0aa:	eeb0 8a47 	vmoveq.f32	s16, s14
 800a0ae:	ee07 4a10 	vmov	s14, r4
 800a0b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a0b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a0c2:	ee07 4a10 	vmov	s14, r4
 800a0c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0ca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a0ce:	ee17 1a10 	vmov	r1, s14
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0d8:	f340 817c 	ble.w	800a3d4 <__ieee754_powf+0x514>
 800a0dc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a0e0:	f340 80f8 	ble.w	800a2d4 <__ieee754_powf+0x414>
 800a0e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ec:	bf4c      	ite	mi
 800a0ee:	2001      	movmi	r0, #1
 800a0f0:	2000      	movpl	r0, #0
 800a0f2:	e791      	b.n	800a018 <__ieee754_powf+0x158>
 800a0f4:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800a0f8:	bf01      	itttt	eq
 800a0fa:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800a294 <__ieee754_powf+0x3d4>
 800a0fe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a102:	f06f 0317 	mvneq.w	r3, #23
 800a106:	ee17 5a90 	vmoveq	r5, s15
 800a10a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800a10e:	bf18      	it	ne
 800a110:	2300      	movne	r3, #0
 800a112:	3a7f      	subs	r2, #127	; 0x7f
 800a114:	441a      	add	r2, r3
 800a116:	4b60      	ldr	r3, [pc, #384]	; (800a298 <__ieee754_powf+0x3d8>)
 800a118:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800a11c:	429d      	cmp	r5, r3
 800a11e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800a122:	dd06      	ble.n	800a132 <__ieee754_powf+0x272>
 800a124:	4b5d      	ldr	r3, [pc, #372]	; (800a29c <__ieee754_powf+0x3dc>)
 800a126:	429d      	cmp	r5, r3
 800a128:	f340 80a4 	ble.w	800a274 <__ieee754_powf+0x3b4>
 800a12c:	3201      	adds	r2, #1
 800a12e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a132:	2500      	movs	r5, #0
 800a134:	4b5a      	ldr	r3, [pc, #360]	; (800a2a0 <__ieee754_powf+0x3e0>)
 800a136:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a13a:	ee07 1a10 	vmov	s14, r1
 800a13e:	edd3 5a00 	vldr	s11, [r3]
 800a142:	4b58      	ldr	r3, [pc, #352]	; (800a2a4 <__ieee754_powf+0x3e4>)
 800a144:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a14c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a150:	1049      	asrs	r1, r1, #1
 800a152:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a156:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a15a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800a15e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a162:	ee07 1a90 	vmov	s15, r1
 800a166:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a16a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a16e:	ee15 7a10 	vmov	r7, s10
 800a172:	401f      	ands	r7, r3
 800a174:	ee06 7a90 	vmov	s13, r7
 800a178:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a17c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a180:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a184:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a188:	eddf 5a47 	vldr	s11, [pc, #284]	; 800a2a8 <__ieee754_powf+0x3e8>
 800a18c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a2ac <__ieee754_powf+0x3ec>
 800a190:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a194:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a2b0 <__ieee754_powf+0x3f0>
 800a198:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a19c:	eddf 5a39 	vldr	s11, [pc, #228]	; 800a284 <__ieee754_powf+0x3c4>
 800a1a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a1a4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800a2b4 <__ieee754_powf+0x3f4>
 800a1a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a1ac:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a2b8 <__ieee754_powf+0x3f8>
 800a1b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a1b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a1b8:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a1bc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a1c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a1c4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800a1c8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a1cc:	eef0 5a67 	vmov.f32	s11, s15
 800a1d0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a1d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a1d8:	ee15 1a90 	vmov	r1, s11
 800a1dc:	4019      	ands	r1, r3
 800a1de:	ee05 1a90 	vmov	s11, r1
 800a1e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a1e6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a1ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a1f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a1f6:	eeb0 6a67 	vmov.f32	s12, s15
 800a1fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a1fe:	ee16 1a10 	vmov	r1, s12
 800a202:	4019      	ands	r1, r3
 800a204:	ee07 1a10 	vmov	s14, r1
 800a208:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a20c:	ee06 1a10 	vmov	s12, r1
 800a210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a214:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a2bc <__ieee754_powf+0x3fc>
 800a218:	4929      	ldr	r1, [pc, #164]	; (800a2c0 <__ieee754_powf+0x400>)
 800a21a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800a2c4 <__ieee754_powf+0x404>
 800a21e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a222:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a2c8 <__ieee754_powf+0x408>
 800a226:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a22a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a22e:	ed91 7a00 	vldr	s14, [r1]
 800a232:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a236:	ee07 2a10 	vmov	s14, r2
 800a23a:	eef0 6a67 	vmov.f32	s13, s15
 800a23e:	4a23      	ldr	r2, [pc, #140]	; (800a2cc <__ieee754_powf+0x40c>)
 800a240:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a244:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a248:	ed92 5a00 	vldr	s10, [r2]
 800a24c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a250:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a254:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a258:	ee16 2a90 	vmov	r2, s13
 800a25c:	4013      	ands	r3, r2
 800a25e:	ee06 3a90 	vmov	s13, r3
 800a262:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a266:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a26a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a26e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a272:	e70f      	b.n	800a094 <__ieee754_powf+0x1d4>
 800a274:	2501      	movs	r5, #1
 800a276:	e75d      	b.n	800a134 <__ieee754_powf+0x274>
 800a278:	00000000 	.word	0x00000000
 800a27c:	3f7ffff3 	.word	0x3f7ffff3
 800a280:	3f800007 	.word	0x3f800007
 800a284:	3eaaaaab 	.word	0x3eaaaaab
 800a288:	3fb8aa3b 	.word	0x3fb8aa3b
 800a28c:	36eca570 	.word	0x36eca570
 800a290:	3fb8aa00 	.word	0x3fb8aa00
 800a294:	4b800000 	.word	0x4b800000
 800a298:	001cc471 	.word	0x001cc471
 800a29c:	005db3d6 	.word	0x005db3d6
 800a2a0:	0800bd5c 	.word	0x0800bd5c
 800a2a4:	fffff000 	.word	0xfffff000
 800a2a8:	3e6c3255 	.word	0x3e6c3255
 800a2ac:	3e53f142 	.word	0x3e53f142
 800a2b0:	3e8ba305 	.word	0x3e8ba305
 800a2b4:	3edb6db7 	.word	0x3edb6db7
 800a2b8:	3f19999a 	.word	0x3f19999a
 800a2bc:	3f76384f 	.word	0x3f76384f
 800a2c0:	0800bd6c 	.word	0x0800bd6c
 800a2c4:	3f763800 	.word	0x3f763800
 800a2c8:	369dc3a0 	.word	0x369dc3a0
 800a2cc:	0800bd64 	.word	0x0800bd64
 800a2d0:	3338aa3c 	.word	0x3338aa3c
 800a2d4:	f040 8093 	bne.w	800a3fe <__ieee754_powf+0x53e>
 800a2d8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a2d0 <__ieee754_powf+0x410>
 800a2dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2e0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a2e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ec:	f73f aefa 	bgt.w	800a0e4 <__ieee754_powf+0x224>
 800a2f0:	15db      	asrs	r3, r3, #23
 800a2f2:	3b7e      	subs	r3, #126	; 0x7e
 800a2f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a2f8:	4118      	asrs	r0, r3
 800a2fa:	4408      	add	r0, r1
 800a2fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a300:	4a49      	ldr	r2, [pc, #292]	; (800a428 <__ieee754_powf+0x568>)
 800a302:	3b7f      	subs	r3, #127	; 0x7f
 800a304:	411a      	asrs	r2, r3
 800a306:	4002      	ands	r2, r0
 800a308:	ee07 2a10 	vmov	s14, r2
 800a30c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a310:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a314:	f1c3 0317 	rsb	r3, r3, #23
 800a318:	4118      	asrs	r0, r3
 800a31a:	2900      	cmp	r1, #0
 800a31c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a320:	bfb8      	it	lt
 800a322:	4240      	neglt	r0, r0
 800a324:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a328:	eddf 6a40 	vldr	s13, [pc, #256]	; 800a42c <__ieee754_powf+0x56c>
 800a32c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800a430 <__ieee754_powf+0x570>
 800a330:	ee17 3a10 	vmov	r3, s14
 800a334:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a338:	f023 030f 	bic.w	r3, r3, #15
 800a33c:	ee07 3a10 	vmov	s14, r3
 800a340:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a344:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a348:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a34c:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a434 <__ieee754_powf+0x574>
 800a350:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a354:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a358:	eef0 6a67 	vmov.f32	s13, s15
 800a35c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a360:	eef0 5a66 	vmov.f32	s11, s13
 800a364:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a368:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a36c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a370:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a438 <__ieee754_powf+0x578>
 800a374:	eddf 5a31 	vldr	s11, [pc, #196]	; 800a43c <__ieee754_powf+0x57c>
 800a378:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a37c:	eddf 5a30 	vldr	s11, [pc, #192]	; 800a440 <__ieee754_powf+0x580>
 800a380:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a384:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a444 <__ieee754_powf+0x584>
 800a388:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a38c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a448 <__ieee754_powf+0x588>
 800a390:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a394:	eeb0 6a66 	vmov.f32	s12, s13
 800a398:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a39c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a3a0:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a3a4:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a3a8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a3ac:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a3b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a3bc:	ee10 3a10 	vmov	r3, s0
 800a3c0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a3c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3c8:	da1f      	bge.n	800a40a <__ieee754_powf+0x54a>
 800a3ca:	f000 f84b 	bl	800a464 <scalbnf>
 800a3ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a3d2:	e58d      	b.n	8009ef0 <__ieee754_powf+0x30>
 800a3d4:	4a1d      	ldr	r2, [pc, #116]	; (800a44c <__ieee754_powf+0x58c>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	dd07      	ble.n	800a3ea <__ieee754_powf+0x52a>
 800a3da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e2:	bf4c      	ite	mi
 800a3e4:	2001      	movmi	r0, #1
 800a3e6:	2000      	movpl	r0, #0
 800a3e8:	e622      	b.n	800a030 <__ieee754_powf+0x170>
 800a3ea:	d108      	bne.n	800a3fe <__ieee754_powf+0x53e>
 800a3ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3f0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f8:	f6ff af7a 	blt.w	800a2f0 <__ieee754_powf+0x430>
 800a3fc:	e7ed      	b.n	800a3da <__ieee754_powf+0x51a>
 800a3fe:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a402:	f73f af75 	bgt.w	800a2f0 <__ieee754_powf+0x430>
 800a406:	2000      	movs	r0, #0
 800a408:	e78c      	b.n	800a324 <__ieee754_powf+0x464>
 800a40a:	ee00 3a10 	vmov	s0, r3
 800a40e:	e7de      	b.n	800a3ce <__ieee754_powf+0x50e>
 800a410:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a414:	e56c      	b.n	8009ef0 <__ieee754_powf+0x30>
 800a416:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a450 <__ieee754_powf+0x590>
 800a41a:	e569      	b.n	8009ef0 <__ieee754_powf+0x30>
 800a41c:	eeb0 0a48 	vmov.f32	s0, s16
 800a420:	e566      	b.n	8009ef0 <__ieee754_powf+0x30>
 800a422:	2600      	movs	r6, #0
 800a424:	e591      	b.n	8009f4a <__ieee754_powf+0x8a>
 800a426:	bf00      	nop
 800a428:	ff800000 	.word	0xff800000
 800a42c:	3f317218 	.word	0x3f317218
 800a430:	3f317200 	.word	0x3f317200
 800a434:	35bfbe8c 	.word	0x35bfbe8c
 800a438:	b5ddea0e 	.word	0xb5ddea0e
 800a43c:	3331bb4c 	.word	0x3331bb4c
 800a440:	388ab355 	.word	0x388ab355
 800a444:	bb360b61 	.word	0xbb360b61
 800a448:	3e2aaaab 	.word	0x3e2aaaab
 800a44c:	43160000 	.word	0x43160000
 800a450:	00000000 	.word	0x00000000

0800a454 <fabsf>:
 800a454:	ee10 3a10 	vmov	r3, s0
 800a458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a45c:	ee00 3a10 	vmov	s0, r3
 800a460:	4770      	bx	lr
	...

0800a464 <scalbnf>:
 800a464:	ee10 3a10 	vmov	r3, s0
 800a468:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a46c:	d02b      	beq.n	800a4c6 <scalbnf+0x62>
 800a46e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a472:	d302      	bcc.n	800a47a <scalbnf+0x16>
 800a474:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a478:	4770      	bx	lr
 800a47a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a47e:	d123      	bne.n	800a4c8 <scalbnf+0x64>
 800a480:	4b24      	ldr	r3, [pc, #144]	; (800a514 <scalbnf+0xb0>)
 800a482:	eddf 7a25 	vldr	s15, [pc, #148]	; 800a518 <scalbnf+0xb4>
 800a486:	4298      	cmp	r0, r3
 800a488:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a48c:	db17      	blt.n	800a4be <scalbnf+0x5a>
 800a48e:	ee10 3a10 	vmov	r3, s0
 800a492:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a496:	3a19      	subs	r2, #25
 800a498:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a49c:	4288      	cmp	r0, r1
 800a49e:	dd15      	ble.n	800a4cc <scalbnf+0x68>
 800a4a0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a51c <scalbnf+0xb8>
 800a4a4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a520 <scalbnf+0xbc>
 800a4a8:	ee10 3a10 	vmov	r3, s0
 800a4ac:	eeb0 7a67 	vmov.f32	s14, s15
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfb8      	it	lt
 800a4b4:	eef0 7a66 	vmovlt.f32	s15, s13
 800a4b8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a4bc:	4770      	bx	lr
 800a4be:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a524 <scalbnf+0xc0>
 800a4c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a4c6:	4770      	bx	lr
 800a4c8:	0dd2      	lsrs	r2, r2, #23
 800a4ca:	e7e5      	b.n	800a498 <scalbnf+0x34>
 800a4cc:	4410      	add	r0, r2
 800a4ce:	28fe      	cmp	r0, #254	; 0xfe
 800a4d0:	dce6      	bgt.n	800a4a0 <scalbnf+0x3c>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	dd06      	ble.n	800a4e4 <scalbnf+0x80>
 800a4d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a4de:	ee00 3a10 	vmov	s0, r3
 800a4e2:	4770      	bx	lr
 800a4e4:	f110 0f16 	cmn.w	r0, #22
 800a4e8:	da09      	bge.n	800a4fe <scalbnf+0x9a>
 800a4ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a524 <scalbnf+0xc0>
 800a4ee:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a528 <scalbnf+0xc4>
 800a4f2:	ee10 3a10 	vmov	r3, s0
 800a4f6:	eeb0 7a67 	vmov.f32	s14, s15
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	e7d9      	b.n	800a4b2 <scalbnf+0x4e>
 800a4fe:	3019      	adds	r0, #25
 800a500:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a504:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a508:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a52c <scalbnf+0xc8>
 800a50c:	ee07 3a90 	vmov	s15, r3
 800a510:	e7d7      	b.n	800a4c2 <scalbnf+0x5e>
 800a512:	bf00      	nop
 800a514:	ffff3cb0 	.word	0xffff3cb0
 800a518:	4c000000 	.word	0x4c000000
 800a51c:	7149f2ca 	.word	0x7149f2ca
 800a520:	f149f2ca 	.word	0xf149f2ca
 800a524:	0da24260 	.word	0x0da24260
 800a528:	8da24260 	.word	0x8da24260
 800a52c:	33000000 	.word	0x33000000

0800a530 <with_errnof>:
 800a530:	b513      	push	{r0, r1, r4, lr}
 800a532:	4604      	mov	r4, r0
 800a534:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a538:	f7fd fdb8 	bl	80080ac <__errno>
 800a53c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a540:	6004      	str	r4, [r0, #0]
 800a542:	b002      	add	sp, #8
 800a544:	bd10      	pop	{r4, pc}

0800a546 <xflowf>:
 800a546:	b130      	cbz	r0, 800a556 <xflowf+0x10>
 800a548:	eef1 7a40 	vneg.f32	s15, s0
 800a54c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a550:	2022      	movs	r0, #34	; 0x22
 800a552:	f7ff bfed 	b.w	800a530 <with_errnof>
 800a556:	eef0 7a40 	vmov.f32	s15, s0
 800a55a:	e7f7      	b.n	800a54c <xflowf+0x6>

0800a55c <__math_uflowf>:
 800a55c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a564 <__math_uflowf+0x8>
 800a560:	f7ff bff1 	b.w	800a546 <xflowf>
 800a564:	10000000 	.word	0x10000000

0800a568 <__math_oflowf>:
 800a568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a570 <__math_oflowf+0x8>
 800a56c:	f7ff bfeb 	b.w	800a546 <xflowf>
 800a570:	70000000 	.word	0x70000000

0800a574 <_init>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	bf00      	nop
 800a578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57a:	bc08      	pop	{r3}
 800a57c:	469e      	mov	lr, r3
 800a57e:	4770      	bx	lr

0800a580 <_fini>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	bf00      	nop
 800a584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a586:	bc08      	pop	{r3}
 800a588:	469e      	mov	lr, r3
 800a58a:	4770      	bx	lr
