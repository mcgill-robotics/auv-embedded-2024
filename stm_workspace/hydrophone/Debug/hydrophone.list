
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001afc  0800d538  0800d538  0001d538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f034  0800f034  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f034  0800f034  0001f034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f03c  0800f03c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f03c  0800f03c  0001f03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f044  0800f044  0001f044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800f048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d40  200001d4  0800f21c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0800f21c  00020f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022bd3  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004241  00000000  00000000  00042e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  000470d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001132  00000000  00000000  00048790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f43  00000000  00000000  000498c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b285  00000000  00000000  00070805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efab6  00000000  00000000  0008ba8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007444  00000000  00000000  0017b540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00182984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000284c  00000000  00000000  00182a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  0018524d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d520 	.word	0x0800d520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d520 	.word	0x0800d520

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	0800d8c0 	.word	0x0800d8c0

08000f28 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
      data()
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffe8 	bl	8000f08 <_ZN3ros3MsgC1Ev>
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3304      	adds	r3, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ffce 	bl	8000ee4 <_ZN3ros4TimeC1Ev>
    {
    }
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	0800d8a8 	.word	0x0800d8a8

08000f58 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6859      	ldr	r1, [r3, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2ca      	uxtb	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	0a19      	lsrs	r1, r3, #8
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	0c19      	lsrs	r1, r3, #16
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3302      	adds	r3, #2
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	b2ca      	uxtb	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	0e19      	lsrs	r1, r3, #24
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b2ca      	uxtb	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3304      	adds	r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6899      	ldr	r1, [r3, #8]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	b2ca      	uxtb	r2, r1
 8000fbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	0a19      	lsrs	r1, r3, #8
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b2ca      	uxtb	r2, r1
 8000fce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	0c19      	lsrs	r1, r3, #16
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	0e19      	lsrs	r1, r3, #24
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3303      	adds	r3, #3
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2ca      	uxtb	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    }
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	440b      	add	r3, r1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3302      	adds	r3, #2
 8001042:	6839      	ldr	r1, [r7, #0]
 8001044:	440b      	add	r3, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3303      	adds	r3, #3
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	440b      	add	r3, r1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	061b      	lsls	r3, r3, #24
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3304      	adds	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	6839      	ldr	r1, [r7, #0]
 8001084:	440b      	add	r3, r1
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3302      	adds	r3, #2
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	440b      	add	r3, r1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3303      	adds	r3, #3
 80010ae:	6839      	ldr	r1, [r7, #0]
 80010b0:	440b      	add	r3, r1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3304      	adds	r3, #4
 80010c0:	60fb      	str	r3, [r7, #12]
     return offset;
 80010c2:	68fb      	ldr	r3, [r7, #12]
    }
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	0800d538 	.word	0x0800d538

080010ec <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	0800d548 	.word	0x0800d548

08001108 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fef8 	bl	8000f08 <_ZN3ros3MsgC1Ev>
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001128:	609a      	str	r2, [r3, #8]
      message_type(""),
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800112e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a06      	ldr	r2, [pc, #24]	; (800114c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001134:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
    {
    }
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800d890 	.word	0x0800d890
 800114c:	0800d56c 	.word	0x0800d56c

08001150 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	8899      	ldrh	r1, [r3, #4]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	b2ca      	uxtb	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	889b      	ldrh	r3, [r3, #4]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b299      	uxth	r1, r3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3301      	adds	r3, #1
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	b2ca      	uxtb	r2, r1
 800117e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	3302      	adds	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f870 	bl	8000270 <strlen>
 8001190:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	4618      	mov	r0, r3
 800119c:	f001 ff83 	bl	80030a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3304      	adds	r3, #4
 80011a4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	18d0      	adds	r0, r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4619      	mov	r1, r3
 80011b4:	f00a fada 	bl	800b76c <memcpy>
      offset += length_topic_name;
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4413      	add	r3, r2
 80011be:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f853 	bl	8000270 <strlen>
 80011ca:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	6979      	ldr	r1, [r7, #20]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 ff66 	bl	80030a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	18d0      	adds	r0, r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f00a fabd 	bl	800b76c <memcpy>
      offset += length_message_type;
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f836 	bl	8000270 <strlen>
 8001204:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 ff49 	bl	80030a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	3304      	adds	r3, #4
 8001218:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	18d0      	adds	r0, r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4619      	mov	r1, r3
 8001228:	f00a faa0 	bl	800b76c <memcpy>
      offset += length_md5sum;
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4413      	add	r3, r2
 8001232:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	0a19      	lsrs	r1, r3, #8
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	0c19      	lsrs	r1, r3, #16
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3302      	adds	r3, #2
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	0e19      	lsrs	r1, r3, #24
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3303      	adds	r3, #3
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	61fb      	str	r3, [r7, #28]
      return offset;
 800127c:	69fb      	ldr	r3, [r7, #28]
    }
 800127e:	4618      	mov	r0, r3
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001286:	b580      	push	{r7, lr}
 8001288:	b08a      	sub	sp, #40	; 0x28
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	3301      	adds	r3, #1
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	440b      	add	r3, r1
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	3302      	adds	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	441a      	add	r2, r3
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 ff06 	bl	80030e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	3304      	adds	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	e00b      	b.n	80012fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	441a      	add	r2, r3
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	3b01      	subs	r3, #1
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	440b      	add	r3, r1
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	3301      	adds	r3, #1
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	4413      	add	r3, r2
 8001302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001304:	429a      	cmp	r2, r3
 8001306:	d3ed      	bcc.n	80012e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	3b01      	subs	r3, #1
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4413      	add	r3, r2
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	3b01      	subs	r3, #1
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	441a      	add	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4413      	add	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	441a      	add	r2, r3
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fed3 	bl	80030e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	3304      	adds	r3, #4
 8001342:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	623b      	str	r3, [r7, #32]
 8001348:	e00b      	b.n	8001362 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	441a      	add	r2, r3
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	3b01      	subs	r3, #1
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	440b      	add	r3, r1
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	3301      	adds	r3, #1
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4413      	add	r3, r2
 8001368:	6a3a      	ldr	r2, [r7, #32]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3ed      	bcc.n	800134a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4413      	add	r3, r2
 8001374:	3b01      	subs	r3, #1
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	3b01      	subs	r3, #1
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	441a      	add	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	441a      	add	r2, r3
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fea0 	bl	80030e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	3304      	adds	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e00b      	b.n	80013c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	441a      	add	r2, r3
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	440b      	add	r3, r1
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3ed      	bcc.n	80013b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3b01      	subs	r3, #1
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	441a      	add	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4413      	add	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	440a      	add	r2, r1
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4313      	orrs	r3, r2
 8001408:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	3301      	adds	r3, #1
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	440b      	add	r3, r1
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4313      	orrs	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	3302      	adds	r3, #2
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	440b      	add	r3, r1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	4313      	orrs	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	3303      	adds	r3, #3
 8001434:	6839      	ldr	r1, [r7, #0]
 8001436:	440b      	add	r3, r1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	4313      	orrs	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	3304      	adds	r3, #4
 800144a:	61bb      	str	r3, [r7, #24]
     return offset;
 800144c:	69bb      	ldr	r3, [r7, #24]
    }
 800144e:	4618      	mov	r0, r3
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	0800d570 	.word	0x0800d570

08001474 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	0800d58c 	.word	0x0800d58c

08001490 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fd34 	bl	8000f08 <_ZN3ros3MsgC1Ev>
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
      level(0),
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	711a      	strb	r2, [r3, #4]
      msg("")
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80014b0:	609a      	str	r2, [r3, #8]
    {
    }
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800d878 	.word	0x0800d878
 80014c0:	0800d56c 	.word	0x0800d56c

080014c4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	7912      	ldrb	r2, [r2, #4]
 80014dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fec1 	bl	8000270 <strlen>
 80014ee:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 fdd4 	bl	80030a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3304      	adds	r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	18d0      	adds	r0, r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4619      	mov	r1, r3
 8001512:	f00a f92b 	bl	800b76c <memcpy>
      offset += length_msg;
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
      return offset;
 800151e:	68fb      	ldr	r3, [r7, #12]
    }
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	4413      	add	r3, r2
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	3301      	adds	r3, #1
 8001546:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	441a      	add	r2, r3
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fdc5 	bl	80030e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	3304      	adds	r3, #4
 800155e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e00b      	b.n	800157e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	441a      	add	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3b01      	subs	r3, #1
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	440b      	add	r3, r1
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3ed      	bcc.n	8001566 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	3b01      	subs	r3, #1
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	3b01      	subs	r3, #1
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	441a      	add	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
     return offset;
 80015ae:	693b      	ldr	r3, [r7, #16]
    }
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	0800d5b0 	.word	0x0800d5b0

080015d4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	0800d5c4 	.word	0x0800d5c4

080015f0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fc84 	bl	8000f08 <_ZN3ros3MsgC1Ev>
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	0800d860 	.word	0x0800d860

0800164c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	4413      	add	r3, r2
 8001664:	b2ca      	uxtb	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0a19      	lsrs	r1, r3, #8
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	0c19      	lsrs	r1, r3, #16
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	3302      	adds	r3, #2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	0e19      	lsrs	r1, r3, #24
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3303      	adds	r3, #3
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4413      	add	r3, r2
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3304      	adds	r3, #4
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	e02a      	b.n	8001700 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	0a19      	lsrs	r1, r3, #8
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	0c19      	lsrs	r1, r3, #16
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3302      	adds	r3, #2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	0e19      	lsrs	r1, r3, #24
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3303      	adds	r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	3304      	adds	r3, #4
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	3301      	adds	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	429a      	cmp	r2, r3
 8001708:	d3cf      	bcc.n	80016aa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6919      	ldr	r1, [r3, #16]
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	b2ca      	uxtb	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	0a19      	lsrs	r1, r3, #8
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	0c19      	lsrs	r1, r3, #16
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3302      	adds	r3, #2
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	0e19      	lsrs	r1, r3, #24
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3303      	adds	r3, #3
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	b2ca      	uxtb	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	3304      	adds	r3, #4
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	e02a      	b.n	80017b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	0a19      	lsrs	r1, r3, #8
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3301      	adds	r3, #1
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0c19      	lsrs	r1, r3, #16
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3302      	adds	r3, #2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4413      	add	r3, r2
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	0e19      	lsrs	r1, r3, #24
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	3303      	adds	r3, #3
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	b2ca      	uxtb	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3304      	adds	r3, #4
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3cf      	bcc.n	800175a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69d9      	ldr	r1, [r3, #28]
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	b2ca      	uxtb	r2, r1
 80017c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	0a19      	lsrs	r1, r3, #8
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	3301      	adds	r3, #1
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	0c19      	lsrs	r1, r3, #16
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	3302      	adds	r3, #2
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	b2ca      	uxtb	r2, r1
 80017ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	0e19      	lsrs	r1, r3, #24
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	3303      	adds	r3, #3
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	4413      	add	r3, r2
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	3304      	adds	r3, #4
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	e027      	b.n	800185a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd2a 	bl	8000270 <strlen>
 800181c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	6979      	ldr	r1, [r7, #20]
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fc3d 	bl	80030a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3304      	adds	r3, #4
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	18d0      	adds	r0, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4619      	mov	r1, r3
 8001848:	f009 ff90 	bl	800b76c <memcpy>
      offset += length_stringsi;
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4413      	add	r3, r2
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	3301      	adds	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3d2      	bcc.n	800180a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001866:	4618      	mov	r0, r3
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800186e:	b580      	push	{r7, lr}
 8001870:	b08e      	sub	sp, #56	; 0x38
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800187c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	3301      	adds	r3, #1
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	6a3a      	ldr	r2, [r7, #32]
 8001894:	4313      	orrs	r3, r2
 8001896:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	3302      	adds	r3, #2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	041b      	lsls	r3, r3, #16
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	3303      	adds	r3, #3
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	6a3a      	ldr	r2, [r7, #32]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	3304      	adds	r3, #4
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	6a3a      	ldr	r2, [r7, #32]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d90a      	bls.n	80018e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f009 f926 	bl	800ab28 <realloc>
 80018dc:	4602      	mov	r2, r0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
 80018ec:	e035      	b.n	800195a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	440a      	add	r2, r1
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001904:	3301      	adds	r3, #1
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	440b      	add	r3, r1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	4313      	orrs	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001916:	3302      	adds	r3, #2
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	440b      	add	r3, r1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	041b      	lsls	r3, r3, #16
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001928:	3303      	adds	r3, #3
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	440b      	add	r3, r1
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	3304      	adds	r3, #4
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	3301      	adds	r3, #1
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001960:	429a      	cmp	r2, r3
 8001962:	d3c4      	bcc.n	80018ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001970:	3301      	adds	r3, #1
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	4313      	orrs	r3, r2
 800197e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	3302      	adds	r3, #2
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	4313      	orrs	r3, r2
 8001990:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001994:	3303      	adds	r3, #3
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80019a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a6:	3304      	adds	r3, #4
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d90a      	bls.n	80019ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f009 f8b2 	bl	800ab28 <realloc>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d4:	e035      	b.n	8001a42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	440a      	add	r2, r1
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	3301      	adds	r3, #1
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	440b      	add	r3, r1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	3302      	adds	r3, #2
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	440b      	add	r3, r1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a10:	3303      	adds	r3, #3
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	440b      	add	r3, r1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	3304      	adds	r3, #4
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	3214      	adds	r2, #20
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	3301      	adds	r3, #1
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3c4      	bcc.n	80019d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3301      	adds	r3, #1
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	3304      	adds	r3, #4
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d90a      	bls.n	8001ab2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f009 f83e 	bl	800ab28 <realloc>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abc:	e03e      	b.n	8001b3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fb0a 	bl	80030e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	e00b      	b.n	8001af4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	441a      	add	r2, r3
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	440b      	add	r3, r1
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	3301      	adds	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d3ed      	bcc.n	8001adc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	3b01      	subs	r3, #1
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	3b01      	subs	r3, #1
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	441a      	add	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	3220      	adds	r2, #32
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	3301      	adds	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d3bb      	bcc.n	8001abe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3738      	adds	r7, #56	; 0x38
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	0800d7fc 	.word	0x0800d7fc

08001b6c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	0800d5e8 	.word	0x0800d5e8

08001b88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68d8      	ldr	r0, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6891      	ldr	r1, [r2, #8]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4798      	blx	r3
 8001bd4:	4603      	mov	r3, r0
  };
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
  }
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <_ZN13STM32HardwareC1Ev+0x34>)
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	200002ec 	.word	0x200002ec

08001c54 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f804 	bl	8001c6a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f006 f958 	bl	8007f34 <HAL_UART_Receive_DMA>
    }
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_ZN13STM32Hardware4readEv>:

    int read(){
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c98:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffa8 	bl	8001bf6 <_ZN13STM32Hardware10getRdmaIndEv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	429c      	cmp	r4, r3
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d012      	beq.n	8001cdc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cbc:	1c59      	adds	r1, r3, #1
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	791b      	ldrb	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    }
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd90      	pop	{r4, r7, pc}
	...

08001ce8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d108      	bne.n	8001d0c <_ZN13STM32Hardware5flushEv+0x24>
 8001cfa:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <_ZN13STM32Hardware5flushEv+0x24>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <_ZN13STM32Hardware5flushEv+0x26>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d055      	beq.n	8001dbe <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d047      	beq.n	8001db8 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d217      	bcs.n	8001d6c <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	89fa      	ldrh	r2, [r7, #14]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f006 f869 	bl	8007e3c <HAL_UART_Transmit_DMA>
 8001d6a:	e01f      	b.n	8001dac <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d78:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	89fa      	ldrh	r2, [r7, #14]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f006 f854 	bl	8007e3c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	f006 f848 	bl	8007e3c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
      }
    }
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200001f0 	.word	0x200001f0

08001dcc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
      int n = length;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de2:	bfa8      	it	ge
 8001de4:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001de8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001df0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4293      	cmp	r3, r2
 8001df8:	bf28      	it	cs
 8001dfa:	4613      	movcs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 fcab 	bl	800b76c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d00b      	beq.n	8001e4a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	18d1      	adds	r1, r2, r3
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	f009 fc91 	bl	800b76c <memcpy>
      }

      flush();
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff ff4c 	bl	8001ce8 <_ZN13STM32Hardware5flushEv>
    }
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	f002 face 	bl	8004400 <HAL_GetTick>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <_ZN8auv_msgs17HydrophonePayloadC1Ev>:
      typedef uint32_t _frequency_type;
      _frequency_type frequency;
      typedef uint32_t _time_type;
      _time_type time;

    HydrophonePayload():
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
      hydrophone(0),
      frequency(0),
      time(0)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f844 	bl	8000f08 <_ZN3ros3MsgC1Ev>
 8001e80:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <_ZN8auv_msgs17HydrophonePayloadC1Ev+0x34>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]
      hydrophone(0),
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	711a      	strb	r2, [r3, #4]
      frequency(0),
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
      time(0)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
    {
    }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800d834 	.word	0x0800d834

08001ea8 <_ZNK8auv_msgs17HydrophonePayload9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->hydrophone >> (8 * 0)) & 0xFF;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	7912      	ldrb	r2, [r2, #4]
 8001ec0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->hydrophone);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->frequency >> (8 * 0)) & 0xFF;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->frequency >> (8 * 1)) & 0xFF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a19      	lsrs	r1, r3, #8
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->frequency >> (8 * 2)) & 0xFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	0c19      	lsrs	r1, r3, #16
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2ca      	uxtb	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->frequency >> (8 * 3)) & 0xFF;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0e19      	lsrs	r1, r3, #24
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3303      	adds	r3, #3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	b2ca      	uxtb	r2, r1
 8001f0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->frequency);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->time >> (8 * 0)) & 0xFF;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68d9      	ldr	r1, [r3, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b2ca      	uxtb	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->time >> (8 * 1)) & 0xFF;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a19      	lsrs	r1, r3, #8
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->time >> (8 * 2)) & 0xFF;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	0c19      	lsrs	r1, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->time >> (8 * 3)) & 0xFF;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0e19      	lsrs	r1, r3, #24
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->time);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    }
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_ZN8auv_msgs17HydrophonePayload11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
      this->hydrophone =  ((uint8_t) (*(inbuffer + offset)));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->hydrophone);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3301      	adds	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
      this->frequency =  ((uint32_t) (*(inbuffer + offset)));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	6839      	ldr	r1, [r7, #0]
 8001fa2:	440b      	add	r3, r1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	440b      	add	r3, r1
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3303      	adds	r3, #3
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	440b      	add	r3, r1
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	061b      	lsls	r3, r3, #24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->frequency);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
      this->time =  ((uint32_t) (*(inbuffer + offset)));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	6839      	ldr	r1, [r7, #0]
 8001ff8:	440b      	add	r3, r1
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3302      	adds	r3, #2
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	440b      	add	r3, r1
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3303      	adds	r3, #3
 8002022:	6839      	ldr	r1, [r7, #0]
 8002024:	440b      	add	r3, r1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->time);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
     return offset;
 8002036:	68fb      	ldr	r3, [r7, #12]
    }
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_ZN8auv_msgs17HydrophonePayload7getTypeEv>:

    virtual const char * getType() override { return "auv_msgs/HydrophonePayload"; };
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <_ZN8auv_msgs17HydrophonePayload7getTypeEv+0x18>)
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	0800d60c 	.word	0x0800d60c

08002060 <_ZN8auv_msgs17HydrophonePayload6getMD5Ev>:
    virtual const char * getMD5() override { return "b1876360f6462dc4928877125c2982d9"; };
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <_ZN8auv_msgs17HydrophonePayload6getMD5Ev+0x18>)
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	0800d628 	.word	0x0800d628

0800207c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	0800d84c 	.word	0x0800d84c

0800209c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ffe8 	bl	800207c <_ZN3ros15NodeHandleBase_C1Ev>
 80020ac:	4a36      	ldr	r2, [pc, #216]	; (8002188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fdb0 	bl	8001c1c <_ZN13STM32HardwareC1Ev>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80020e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 fac0 	bl	800b66e <memset>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80020f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f009 fab7 	bl	800b66e <memset>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002106:	2264      	movs	r2, #100	; 0x64
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f009 faaf 	bl	800b66e <memset>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002116:	2264      	movs	r2, #100	; 0x64
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f009 faa7 	bl	800b66e <memset>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fa3a 	bl	80015f0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	0800d820 	.word	0x0800d820

0800218c <HAL_UART_TxCpltCallback>:
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
	*pSum = 0;
	*pSumSquares = 0;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <HAL_UART_TxCpltCallback+0x20>)
 8002196:	f000 ffcb 	bl	8003130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800219a:	4603      	mov	r3, r0
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fda3 	bl	8001ce8 <_ZN13STM32Hardware5flushEv>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000404 	.word	0x20000404

080021b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <HAL_UART_RxCpltCallback+0x20>)
 80021ba:	f000 ffb9 	bl	8003130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80021be:	4603      	mov	r3, r0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fd52 	bl	8001c6a <_ZN13STM32Hardware10reset_rbufEv>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000404 	.word	0x20000404
 80021d4:	00000000 	.word	0x00000000

080021d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	ed2d 8b02 	vpush	{d8}
 80021de:	f5ad 5d42 	sub.w	sp, sp, #12416	; 0x3080
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e6:	f002 f89b 	bl	8004320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ea:	f000 fce3 	bl	8002bb4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ee:	f000 fead 	bl	8002f4c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80021f2:	f000 fe7d 	bl	8002ef0 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 80021f6:	f000 fdeb 	bl	8002dd0 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 80021fa:	f000 fe45 	bl	8002e88 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80021fe:	f000 fd39 	bl	8002c74 <_ZL12MX_ADC1_Initv>
  float32_t hydrophone1[1024];
  float32_t hydrophone2[1024];
  float32_t hydrophone3[1024];
  float32_t V1, V2, V3;
  float32_t v1Variance;
  float32_t v1Sum = 0;
 8002202:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002206:	461a      	mov	r2, r3
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	f842 3c74 	str.w	r3, [r2, #-116]
  float32_t v1SumSquares = 0;
 8002210:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002214:	461a      	mov	r2, r3
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f842 3c78 	str.w	r3, [r2, #-120]
  float32_t v2Variance;
  float32_t v2Sum = 0;
 800221e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002222:	461a      	mov	r2, r3
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	f842 3c80 	str.w	r3, [r2, #-128]
  float32_t v2SumSquares = 0;
 800222c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002230:	461a      	mov	r2, r3
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f842 3c84 	str.w	r3, [r2, #-132]
  float32_t v3Variance;
  float32_t v3Sum = 0;
 800223a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800223e:	461a      	mov	r2, r3
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	f842 3c8c 	str.w	r3, [r2, #-140]
  float32_t v3SumSquares = 0;
 8002248:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800224c:	461a      	mov	r2, r3
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f842 3c90 	str.w	r3, [r2, #-144]
  uint32_t index = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 800225c:	f102 020c 	add.w	r2, r2, #12
 8002260:	6013      	str	r3, [r2, #0]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002262:	217f      	movs	r1, #127	; 0x7f
 8002264:	48a6      	ldr	r0, [pc, #664]	; (8002500 <main+0x328>)
 8002266:	f003 fa27 	bl	80056b8 <HAL_ADCEx_Calibration_Start>
  for (int i = 0; i < 512; i++) {
 800226a:	2300      	movs	r3, #0
 800226c:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 8002270:	f102 0208 	add.w	r2, r2, #8
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e03b      	b.n	80022f0 <main+0x118>
	  hydrophone1[2*i + 1] = 0;
 8002278:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 800227c:	f103 0308 	add.w	r3, r3, #8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	3301      	adds	r3, #1
 8002286:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800228a:	f102 0210 	add.w	r2, r2, #16
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3b60      	subs	r3, #96	; 0x60
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
	  hydrophone2[2*i + 1] = 0;
 800229a:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 800229e:	f103 0308 	add.w	r3, r3, #8
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	3301      	adds	r3, #1
 80022a8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80022ac:	f102 0210 	add.w	r2, r2, #16
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	3b60      	subs	r3, #96	; 0x60
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
	  hydrophone3[2*i + 1] = 0;
 80022bc:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80022c0:	f103 0308 	add.w	r3, r3, #8
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	3301      	adds	r3, #1
 80022ca:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b60      	subs	r3, #96	; 0x60
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 512; i++) {
 80022da:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80022de:	f103 0308 	add.w	r3, r3, #8
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 80022ea:	f102 0208 	add.w	r2, r2, #8
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80022f4:	f103 0308 	add.w	r3, r3, #8
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022fe:	dbbb      	blt.n	8002278 <main+0xa0>
  }
  hmsg1.hydrophone = 1;
 8002300:	4b80      	ldr	r3, [pc, #512]	; (8002504 <main+0x32c>)
 8002302:	2201      	movs	r2, #1
 8002304:	711a      	strb	r2, [r3, #4]
  hmsg2.hydrophone = 2;
 8002306:	4b80      	ldr	r3, [pc, #512]	; (8002508 <main+0x330>)
 8002308:	2202      	movs	r2, #2
 800230a:	711a      	strb	r2, [r3, #4]
  hmsg3.hydrophone = 3;
 800230c:	4b7f      	ldr	r3, [pc, #508]	; (800250c <main+0x334>)
 800230e:	2203      	movs	r2, #3
 8002310:	711a      	strb	r2, [r3, #4]
  nh.initNode();
 8002312:	487f      	ldr	r0, [pc, #508]	; (8002510 <main+0x338>)
 8002314:	f000 ff18 	bl	8003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(hpub1);
 8002318:	497e      	ldr	r1, [pc, #504]	; (8002514 <main+0x33c>)
 800231a:	487d      	ldr	r0, [pc, #500]	; (8002510 <main+0x338>)
 800231c:	f000 ff31 	bl	8003182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(hpub2);
 8002320:	497d      	ldr	r1, [pc, #500]	; (8002518 <main+0x340>)
 8002322:	487b      	ldr	r0, [pc, #492]	; (8002510 <main+0x338>)
 8002324:	f000 ff2d 	bl	8003182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(hpub3);
 8002328:	497c      	ldr	r1, [pc, #496]	; (800251c <main+0x344>)
 800232a:	4879      	ldr	r0, [pc, #484]	; (8002510 <main+0x338>)
 800232c:	f000 ff29 	bl	8003182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  HAL_TIM_Base_Start_IT(&htim2);
 8002330:	487b      	ldr	r0, [pc, #492]	; (8002520 <main+0x348>)
 8002332:	f005 f96b 	bl	800760c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8002336:	487a      	ldr	r0, [pc, #488]	; (8002520 <main+0x348>)
 8002338:	f005 f968 	bl	800760c <HAL_TIM_Base_Start_IT>
  //printf("HI!\n\r");
  while (1)
  {
    index = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 8002342:	f102 020c 	add.w	r2, r2, #12
 8002346:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 8002348:	2300      	movs	r3, #0
 800234a:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 800234e:	f102 0204 	add.w	r2, r2, #4
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	e243      	b.n	80027de <main+0x606>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 8002356:	2204      	movs	r2, #4
 8002358:	4972      	ldr	r1, [pc, #456]	; (8002524 <main+0x34c>)
 800235a:	4869      	ldr	r0, [pc, #420]	; (8002500 <main+0x328>)
 800235c:	f002 fb8c 	bl	8004a78 <HAL_ADC_Start_DMA>
		  while (conversionComplete == 0) {
 8002360:	e000      	b.n	8002364 <main+0x18c>
			  continue;
 8002362:	bf00      	nop
		  while (conversionComplete == 0) {
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <main+0x350>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f5      	bne.n	8002362 <main+0x18a>
		  }
		  conversionComplete = 0;
 8002376:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <main+0x350>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
      if (i == 0)
 800237c:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 8002380:	f103 0304 	add.w	r3, r3, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <main+0x1ba>
        hmsg1.time = usecs_elapsed;
 800238a:	4b68      	ldr	r3, [pc, #416]	; (800252c <main+0x354>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <main+0x32c>)
 8002390:	60d3      	str	r3, [r2, #12]
      if (i == 1)
 8002392:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 8002396:	f103 0304 	add.w	r3, r3, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d103      	bne.n	80023a8 <main+0x1d0>
        hmsg2.time = usecs_elapsed;
 80023a0:	4b62      	ldr	r3, [pc, #392]	; (800252c <main+0x354>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <main+0x330>)
 80023a6:	60d3      	str	r3, [r2, #12]
      if (i == 3)
 80023a8:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80023ac:	f103 0304 	add.w	r3, r3, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d103      	bne.n	80023be <main+0x1e6>
        hmsg3.time = usecs_elapsed;
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <main+0x354>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a54      	ldr	r2, [pc, #336]	; (800250c <main+0x334>)
 80023bc:	60d3      	str	r3, [r2, #12]
      switch (curPhone) {
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <main+0x358>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	f200 81e4 	bhi.w	8002792 <main+0x5ba>
 80023ca:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <main+0x1f8>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	08002793 	.word	0x08002793
 80023d4:	080023e1 	.word	0x080023e1
 80023d8:	0800253d 	.word	0x0800253d
 80023dc:	08002671 	.word	0x08002671
      	case INIT:
      		break;
      	case HYDROPHONE1:
      		calculateVoltage(adcChannels[0], adcChannels[1], &V1);
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <main+0x34c>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b4f      	ldr	r3, [pc, #316]	; (8002524 <main+0x34c>)
 80023e8:	885b      	ldrh	r3, [r3, #2]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f507 5142 	add.w	r1, r7, #12416	; 0x3080
 80023f0:	f101 0102 	add.w	r1, r1, #2
 80023f4:	800a      	strh	r2, [r1, #0]
 80023f6:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 80023fa:	8013      	strh	r3, [r2, #0]
 80023fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002400:	3b24      	subs	r3, #36	; 0x24
 8002402:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002406:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800240a:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 800240c:	4b49      	ldr	r3, [pc, #292]	; (8002534 <main+0x35c>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002418:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800241c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002420:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002424:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 8002428:	f103 0302 	add.w	r3, r3, #2
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002436:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800243a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800243e:	edd3 6a00 	vldr	s13, [r3]
 8002442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002446:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800244a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244e:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002452:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002456:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 800245a:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800245e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002538 <main+0x360>
 800246a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800246e:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002484:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	edc3 7a00 	vstr	s15, [r3]
}
 800248e:	bf00      	nop
      		v1Sum += V1;
 8002490:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002494:	ed13 7a1d 	vldr	s14, [r3, #-116]	; 0xffffff8c
 8002498:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800249c:	ed53 7a19 	vldr	s15, [r3, #-100]	; 0xffffff9c
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024a8:	ed43 7a1d 	vstr	s15, [r3, #-116]	; 0xffffff8c
      		v1SumSquares += powf(V1, 2);
 80024ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024b0:	ed53 7a19 	vldr	s15, [r3, #-100]	; 0xffffff9c
 80024b4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80024b8:	eeb0 0a67 	vmov.f32	s0, s15
 80024bc:	f007 ff0c 	bl	800a2d8 <powf>
 80024c0:	eeb0 7a40 	vmov.f32	s14, s0
 80024c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024c8:	ed53 7a1e 	vldr	s15, [r3, #-120]	; 0xffffff88
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024d4:	ed43 7a1e 	vstr	s15, [r3, #-120]	; 0xffffff88
      		hydrophone1[2*index] = V1;
 80024d8:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80024dc:	f103 030c 	add.w	r3, r3, #12
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80024e8:	f852 2c64 	ldr.w	r2, [r2, #-100]
 80024ec:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 80024f0:	f101 0110 	add.w	r1, r1, #16
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3b60      	subs	r3, #96	; 0x60
 80024fa:	601a      	str	r2, [r3, #0]
      		break;
 80024fc:	e149      	b.n	8002792 <main+0x5ba>
 80024fe:	bf00      	nop
 8002500:	200001f4 	.word	0x200001f4
 8002504:	20000d40 	.word	0x20000d40
 8002508:	20000d50 	.word	0x20000d50
 800250c:	20000d60 	.word	0x20000d60
 8002510:	20000404 	.word	0x20000404
 8002514:	20000d70 	.word	0x20000d70
 8002518:	20000d84 	.word	0x20000d84
 800251c:	20000d98 	.word	0x20000d98
 8002520:	200002a0 	.word	0x200002a0
 8002524:	20000db0 	.word	0x20000db0
 8002528:	20000db8 	.word	0x20000db8
 800252c:	20000dac 	.word	0x20000dac
 8002530:	20000dbc 	.word	0x20000dbc
 8002534:	1fff75aa 	.word	0x1fff75aa
 8002538:	457ff000 	.word	0x457ff000
        case HYDROPHONE2:
        	calculateVoltage(adcChannels[0], adcChannels[2], &V2);
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <main+0x48c>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b48      	ldr	r3, [pc, #288]	; (8002664 <main+0x48c>)
 8002544:	889b      	ldrh	r3, [r3, #4]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f507 5141 	add.w	r1, r7, #12352	; 0x3040
 800254c:	f101 0132 	add.w	r1, r1, #50	; 0x32
 8002550:	800a      	strh	r2, [r1, #0]
 8002552:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002556:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800255a:	8013      	strh	r3, [r2, #0]
 800255c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002560:	3b28      	subs	r3, #40	; 0x28
 8002562:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002566:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800256a:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 800256c:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <main+0x490>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	ee07 3a90 	vmov	s15, r3
 8002574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002578:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800257c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002580:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002584:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002588:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002596:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800259a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800259e:	edd3 6a00 	vldr	s13, [r3]
 80025a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80025aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ae:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025b2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80025b6:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80025ba:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025be:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800266c <main+0x494>
 80025ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025ce:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025d2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e4:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025e8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	edc3 7a00 	vstr	s15, [r3]
}
 80025f2:	bf00      	nop
      		v2Sum += V2;
 80025f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025f8:	ed13 7a20 	vldr	s14, [r3, #-128]	; 0xffffff80
 80025fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002600:	ed53 7a1a 	vldr	s15, [r3, #-104]	; 0xffffff98
 8002604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002608:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800260c:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
      		v2SumSquares += powf(V2, 2);
 8002610:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002614:	ed53 7a1a 	vldr	s15, [r3, #-104]	; 0xffffff98
 8002618:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800261c:	eeb0 0a67 	vmov.f32	s0, s15
 8002620:	f007 fe5a 	bl	800a2d8 <powf>
 8002624:	eeb0 7a40 	vmov.f32	s14, s0
 8002628:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800262c:	ed53 7a21 	vldr	s15, [r3, #-132]	; 0xffffff7c
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002638:	ed43 7a21 	vstr	s15, [r3, #-132]	; 0xffffff7c
        	hydrophone2[2*index] = V2;
 800263c:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 8002640:	f103 030c 	add.w	r3, r3, #12
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800264c:	f852 2c68 	ldr.w	r2, [r2, #-104]
 8002650:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8002654:	f101 0110 	add.w	r1, r1, #16
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3b60      	subs	r3, #96	; 0x60
 800265e:	601a      	str	r2, [r3, #0]
        	break;
 8002660:	e097      	b.n	8002792 <main+0x5ba>
 8002662:	bf00      	nop
 8002664:	20000db0 	.word	0x20000db0
 8002668:	1fff75aa 	.word	0x1fff75aa
 800266c:	457ff000 	.word	0x457ff000
        case HYDROPHONE3:
        	calculateVoltage(adcChannels[0], adcChannels[3], &V3);
 8002670:	4be0      	ldr	r3, [pc, #896]	; (80029f4 <main+0x81c>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29a      	uxth	r2, r3
 8002676:	4bdf      	ldr	r3, [pc, #892]	; (80029f4 <main+0x81c>)
 8002678:	88db      	ldrh	r3, [r3, #6]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f507 5141 	add.w	r1, r7, #12352	; 0x3040
 8002680:	f101 0122 	add.w	r1, r1, #34	; 0x22
 8002684:	800a      	strh	r2, [r1, #0]
 8002686:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 800268a:	f102 0220 	add.w	r2, r2, #32
 800268e:	8013      	strh	r3, [r2, #0]
 8002690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002694:	3b2c      	subs	r3, #44	; 0x2c
 8002696:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 800269a:	f102 021c 	add.w	r2, r2, #28
 800269e:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 80026a0:	4bd5      	ldr	r3, [pc, #852]	; (80029f8 <main+0x820>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026b0:	f103 0318 	add.w	r3, r3, #24
 80026b4:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 80026b8:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026bc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ca:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026ce:	f103 0318 	add.w	r3, r3, #24
 80026d2:	edd3 6a00 	vldr	s13, [r3]
 80026d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80026de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e2:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026e6:	f103 0314 	add.w	r3, r3, #20
 80026ea:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80026ee:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026f2:	f103 0314 	add.w	r3, r3, #20
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eddf 6ac0 	vldr	s13, [pc, #768]	; 80029fc <main+0x824>
 80026fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002702:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002706:	f103 0320 	add.w	r3, r3, #32
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800271c:	f103 031c 	add.w	r3, r3, #28
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	edc3 7a00 	vstr	s15, [r3]
}
 8002726:	bf00      	nop
        	hydrophone3[2*index] = V3;
 8002728:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 800272c:	f103 030c 	add.w	r3, r3, #12
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002738:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 800273c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	3b60      	subs	r3, #96	; 0x60
 8002746:	601a      	str	r2, [r3, #0]
      		v3Sum += V3;
 8002748:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800274c:	ed13 7a23 	vldr	s14, [r3, #-140]	; 0xffffff74
 8002750:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002754:	ed53 7a1b 	vldr	s15, [r3, #-108]	; 0xffffff94
 8002758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002760:	ed43 7a23 	vstr	s15, [r3, #-140]	; 0xffffff74
      		v3SumSquares += powf(V3, 2);
 8002764:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002768:	ed53 7a1b 	vldr	s15, [r3, #-108]	; 0xffffff94
 800276c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002770:	eeb0 0a67 	vmov.f32	s0, s15
 8002774:	f007 fdb0 	bl	800a2d8 <powf>
 8002778:	eeb0 7a40 	vmov.f32	s14, s0
 800277c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002780:	ed53 7a24 	vldr	s15, [r3, #-144]	; 0xffffff70
 8002784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002788:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800278c:	ed43 7a24 	vstr	s15, [r3, #-144]	; 0xffffff70
        	break;
 8002790:	bf00      	nop
      }
      if (i % 3 == 2) {
 8002792:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 8002796:	f103 0304 	add.w	r3, r3, #4
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	4b98      	ldr	r3, [pc, #608]	; (8002a00 <main+0x828>)
 800279e:	fb83 3201 	smull	r3, r2, r3, r1
 80027a2:	17cb      	asrs	r3, r1, #31
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	1aca      	subs	r2, r1, r3
 80027ae:	2a02      	cmp	r2, #2
 80027b0:	d10a      	bne.n	80027c8 <main+0x5f0>
    	  index++;
 80027b2:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80027b6:	f103 030c 	add.w	r3, r3, #12
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 80027c2:	f102 020c 	add.w	r2, r2, #12
 80027c6:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 80027c8:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80027cc:	f103 0304 	add.w	r3, r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	f507 5242 	add.w	r2, r7, #12416	; 0x3080
 80027d8:	f102 0204 	add.w	r2, r2, #4
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 80027e2:	f103 0304 	add.w	r3, r3, #4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027ec:	f6ff adb3 	blt.w	8002356 <main+0x17e>
 80027f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027f4:	3b34      	subs	r3, #52	; 0x34
 80027f6:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80027fa:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002804:	3b38      	subs	r3, #56	; 0x38
 8002806:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800280a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002814:	3b30      	subs	r3, #48	; 0x30
 8002816:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 800281a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800281e:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 8002820:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002824:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	ed93 8a00 	vldr	s16, [r3]
 800282e:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002832:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002840:	eeb0 0a67 	vmov.f32	s0, s15
 8002844:	f007 fd48 	bl	800a2d8 <powf>
 8002848:	eeb0 7a40 	vmov.f32	s14, s0
 800284c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8002a04 <main+0x82c>
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002858:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002a08 <main+0x830>
 800285c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002860:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002864:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 800286e:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002872:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 800287e:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002882:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002898:	f102 0204 	add.w	r2, r2, #4
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	3b04      	subs	r3, #4
 80028a4:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028ae:	3b3c      	subs	r3, #60	; 0x3c
 80028b0:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80028b4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80028b8:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 80028ba:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	ed93 8a00 	vldr	s16, [r3]
 80028c4:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80028c8:	f103 0304 	add.w	r3, r3, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	f007 fcfd 	bl	800a2d8 <powf>
 80028de:	eeb0 7a40 	vmov.f32	s14, s0
 80028e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002a04 <main+0x82c>
 80028e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028ea:	ee38 7a67 	vsub.f32	s14, s16, s15
 80028ee:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002a08 <main+0x830>
 80028f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f6:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80028fa:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 8002904:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002908:	f103 0304 	add.w	r3, r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 8002914:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	3b0c      	subs	r3, #12
 8002928:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 800292c:	f102 0210 	add.w	r2, r2, #16
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	3b10      	subs	r3, #16
 8002938:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 800293c:	f102 020c 	add.w	r2, r2, #12
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	3b08      	subs	r3, #8
 8002948:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 800294c:	f102 0208 	add.w	r2, r2, #8
 8002950:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 8002952:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002956:	f103 030c 	add.w	r3, r3, #12
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	ed93 8a00 	vldr	s16, [r3]
 8002960:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002964:	f103 0310 	add.w	r3, r3, #16
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002972:	eeb0 0a67 	vmov.f32	s0, s15
 8002976:	f007 fcaf 	bl	800a2d8 <powf>
 800297a:	eeb0 7a40 	vmov.f32	s14, s0
 800297e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002a04 <main+0x82c>
 8002982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002986:	ee38 7a67 	vsub.f32	s14, s16, s15
 800298a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002a08 <main+0x830>
 800298e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002992:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002996:	f103 0308 	add.w	r3, r3, #8
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 80029a0:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80029a4:	f103 0310 	add.w	r3, r3, #16
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 80029b0:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80029b4:	f103 030c 	add.w	r3, r3, #12
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	bf00      	nop
      }
	 }
    calculateVariance(&v1Sum, &v1SumSquares, &v1Variance);
    calculateVariance(&v2Sum, &v2SumSquares, &v2Variance);
    calculateVariance(&v3Sum, &v3SumSquares, &v3Variance);
    hmsg1.frequency = get_frequency(hydrophone1, 1024, 4705882.3529);
 80029c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80029c6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80029ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002a0c <main+0x834>
 80029ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f880 	bl	8003ad8 <get_frequency>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <main+0x838>)
 80029dc:	6093      	str	r3, [r2, #8]
    hmsg2.frequency = get_frequency(hydrophone2, 1024, 4705882.3529);
 80029de:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80029e2:	f103 0310 	add.w	r3, r3, #16
 80029e6:	3b20      	subs	r3, #32
 80029e8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002a0c <main+0x834>
 80029ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029f0:	e010      	b.n	8002a14 <main+0x83c>
 80029f2:	bf00      	nop
 80029f4:	20000db0 	.word	0x20000db0
 80029f8:	1fff75aa 	.word	0x1fff75aa
 80029fc:	457ff000 	.word	0x457ff000
 8002a00:	55555556 	.word	0x55555556
 8002a04:	44000000 	.word	0x44000000
 8002a08:	43ff8000 	.word	0x43ff8000
 8002a0c:	4a8f9cb5 	.word	0x4a8f9cb5
 8002a10:	20000d40 	.word	0x20000d40
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f85f 	bl	8003ad8 <get_frequency>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a54      	ldr	r2, [pc, #336]	; (8002b70 <main+0x998>)
 8002a1e:	6093      	str	r3, [r2, #8]
    hmsg3.frequency = get_frequency(hydrophone3, 1024, 4705882.3529);
 8002a20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a24:	3b20      	subs	r3, #32
 8002a26:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002b74 <main+0x99c>
 8002a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 f852 	bl	8003ad8 <get_frequency>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <main+0x9a0>)
 8002a38:	6093      	str	r3, [r2, #8]
	  v2Sum = 0;
 8002a3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f842 3c80 	str.w	r3, [r2, #-128]
	  v2SumSquares = 0;
 8002a48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f842 3c84 	str.w	r3, [r2, #-132]
    if (v1Variance > 0.001) {
 8002a56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a5a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fd72 	bl	8000548 <__aeabi_f2d>
 8002a64:	a340      	add	r3, pc, #256	; (adr r3, 8002b68 <main+0x990>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f7fe f855 	bl	8000b18 <__aeabi_dcmpgt>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <main+0x8d4>
    	printf("variance of hydrophone 1: %f\r\n", v1Variance);
 8002a74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a78:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd63 	bl	8000548 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	483d      	ldr	r0, [pc, #244]	; (8002b7c <main+0x9a4>)
 8002a88:	f008 fd9c 	bl	800b5c4 <iprintf>
		  printf("frequency from hydrophone 1: %lu\r\n", hmsg1.frequency);
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <main+0x9a8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4619      	mov	r1, r3
 8002a92:	483c      	ldr	r0, [pc, #240]	; (8002b84 <main+0x9ac>)
 8002a94:	f008 fd96 	bl	800b5c4 <iprintf>
		  printf("time from hydrophone 1: %lu\r\n", hmsg1.time);
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <main+0x9a8>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	483a      	ldr	r0, [pc, #232]	; (8002b88 <main+0x9b0>)
 8002aa0:	f008 fd90 	bl	800b5c4 <iprintf>
      hpub1.publish(&hmsg1);
 8002aa4:	4936      	ldr	r1, [pc, #216]	; (8002b80 <main+0x9a8>)
 8002aa6:	4839      	ldr	r0, [pc, #228]	; (8002b8c <main+0x9b4>)
 8002aa8:	f7ff f885 	bl	8001bb6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    }
    if (v2Variance > 0.001) {
 8002aac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ab0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd47 	bl	8000548 <__aeabi_f2d>
 8002aba:	a32b      	add	r3, pc, #172	; (adr r3, 8002b68 <main+0x990>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fe f82a 	bl	8000b18 <__aeabi_dcmpgt>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01b      	beq.n	8002b02 <main+0x92a>
    	printf("variance of hydrophone 2: %f\r\n", v2Variance);
 8002aca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ace:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fd38 	bl	8000548 <__aeabi_f2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	482c      	ldr	r0, [pc, #176]	; (8002b90 <main+0x9b8>)
 8002ade:	f008 fd71 	bl	800b5c4 <iprintf>
		  printf("frequency from hydrophone 2: %lu\r\n", hmsg2.frequency);
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <main+0x998>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	482a      	ldr	r0, [pc, #168]	; (8002b94 <main+0x9bc>)
 8002aea:	f008 fd6b 	bl	800b5c4 <iprintf>
		  printf("time from hydrophone 2: %lu\r\n", hmsg2.time);
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <main+0x998>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4619      	mov	r1, r3
 8002af4:	4828      	ldr	r0, [pc, #160]	; (8002b98 <main+0x9c0>)
 8002af6:	f008 fd65 	bl	800b5c4 <iprintf>
      hpub2.publish(&hmsg2);
 8002afa:	491d      	ldr	r1, [pc, #116]	; (8002b70 <main+0x998>)
 8002afc:	4827      	ldr	r0, [pc, #156]	; (8002b9c <main+0x9c4>)
 8002afe:	f7ff f85a 	bl	8001bb6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    }
    if (v3Variance > 0.001) {
 8002b02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b06:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fd1c 	bl	8000548 <__aeabi_f2d>
 8002b10:	a315      	add	r3, pc, #84	; (adr r3, 8002b68 <main+0x990>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd ffff 	bl	8000b18 <__aeabi_dcmpgt>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <main+0x980>
    	printf("variance of hydrophone 3: %f\r\n", v3Variance);
 8002b20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b24:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd0d 	bl	8000548 <__aeabi_f2d>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	481b      	ldr	r0, [pc, #108]	; (8002ba0 <main+0x9c8>)
 8002b34:	f008 fd46 	bl	800b5c4 <iprintf>
		  printf("frequency from hydrophone 3: %lu\r\n", hmsg3.frequency);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <main+0x9a0>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4819      	ldr	r0, [pc, #100]	; (8002ba4 <main+0x9cc>)
 8002b40:	f008 fd40 	bl	800b5c4 <iprintf>
		  printf("time from hydrophone 3: %lu\r\n", hmsg3.time);
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <main+0x9a0>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4817      	ldr	r0, [pc, #92]	; (8002ba8 <main+0x9d0>)
 8002b4c:	f008 fd3a 	bl	800b5c4 <iprintf>
      hpub3.publish(&hmsg3);
 8002b50:	4909      	ldr	r1, [pc, #36]	; (8002b78 <main+0x9a0>)
 8002b52:	4816      	ldr	r0, [pc, #88]	; (8002bac <main+0x9d4>)
 8002b54:	f7ff f82f 	bl	8001bb6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    }
	  nh.spinOnce();
 8002b58:	4815      	ldr	r0, [pc, #84]	; (8002bb0 <main+0x9d8>)
 8002b5a:	f000 fb42 	bl	80031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002b5e:	f7ff bbed 	b.w	800233c <main+0x164>
 8002b62:	bf00      	nop
 8002b64:	f3af 8000 	nop.w
 8002b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b6c:	3f50624d 	.word	0x3f50624d
 8002b70:	20000d50 	.word	0x20000d50
 8002b74:	4a8f9cb5 	.word	0x4a8f9cb5
 8002b78:	20000d60 	.word	0x20000d60
 8002b7c:	0800d64c 	.word	0x0800d64c
 8002b80:	20000d40 	.word	0x20000d40
 8002b84:	0800d66c 	.word	0x0800d66c
 8002b88:	0800d690 	.word	0x0800d690
 8002b8c:	20000d70 	.word	0x20000d70
 8002b90:	0800d6b0 	.word	0x0800d6b0
 8002b94:	0800d6d0 	.word	0x0800d6d0
 8002b98:	0800d6f4 	.word	0x0800d6f4
 8002b9c:	20000d84 	.word	0x20000d84
 8002ba0:	0800d714 	.word	0x0800d714
 8002ba4:	0800d734 	.word	0x0800d734
 8002ba8:	0800d758 	.word	0x0800d758
 8002bac:	20000d98 	.word	0x20000d98
 8002bb0:	20000404 	.word	0x20000404

08002bb4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b096      	sub	sp, #88	; 0x58
 8002bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	2244      	movs	r2, #68	; 0x44
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f008 fd53 	bl	800b66e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002bd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002bda:	f003 faf5 	bl	80061c8 <HAL_PWREx_ControlVoltageScaling>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002bee:	f000 fa55 	bl	800309c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c00:	2302      	movs	r3, #2
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c04:	2302      	movs	r3, #2
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002c0c:	230a      	movs	r3, #10
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c10:	2307      	movs	r3, #7
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c14:	2302      	movs	r3, #2
 8002c16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fb27 	bl	8006274 <HAL_RCC_OscConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002c36:	f000 fa31 	bl	800309c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c3a:	230f      	movs	r3, #15
 8002c3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	2104      	movs	r1, #4
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 ff22 	bl	8006a9c <HAL_RCC_ClockConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002c68:	f000 fa18 	bl	800309c <Error_Handler>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3758      	adds	r7, #88	; 0x58
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c8a:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	; (8002dbc <_ZL12MX_ADC1_Initv+0x148>)
 8002c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c96:	4b48      	ldr	r3, [pc, #288]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ca2:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002caa:	2204      	movs	r2, #4
 8002cac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cae:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cb4:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cce:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002cdc:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cec:	4832      	ldr	r0, [pc, #200]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cee:	f001 fd81 	bl	80047f4 <HAL_ADC_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <_ZL12MX_ADC1_Initv+0x92>
  {
    Error_Handler();
 8002d02:	f000 f9cb 	bl	800309c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <_ZL12MX_ADC1_Initv+0x14c>)
 8002d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d12:	237f      	movs	r3, #127	; 0x7f
 8002d14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d16:	2304      	movs	r3, #4
 8002d18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d1e:	463b      	mov	r3, r7
 8002d20:	4619      	mov	r1, r3
 8002d22:	4825      	ldr	r0, [pc, #148]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002d24:	f001 ff40 	bl	8004ba8 <HAL_ADC_ConfigChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 8002d38:	f000 f9b0 	bl	800309c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <_ZL12MX_ADC1_Initv+0x150>)
 8002d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d40:	230c      	movs	r3, #12
 8002d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d44:	463b      	mov	r3, r7
 8002d46:	4619      	mov	r1, r3
 8002d48:	481b      	ldr	r0, [pc, #108]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002d4a:	f001 ff2d 	bl	8004ba8 <HAL_ADC_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <_ZL12MX_ADC1_Initv+0xee>
  {
    Error_Handler();
 8002d5e:	f000 f99d 	bl	800309c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <_ZL12MX_ADC1_Initv+0x154>)
 8002d64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d66:	2312      	movs	r3, #18
 8002d68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4812      	ldr	r0, [pc, #72]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002d70:	f001 ff1a 	bl	8004ba8 <HAL_ADC_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <_ZL12MX_ADC1_Initv+0x114>
  {
    Error_Handler();
 8002d84:	f000 f98a 	bl	800309c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_ZL12MX_ADC1_Initv+0x158>)
 8002d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d8c:	2318      	movs	r3, #24
 8002d8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d90:	463b      	mov	r3, r7
 8002d92:	4619      	mov	r1, r3
 8002d94:	4808      	ldr	r0, [pc, #32]	; (8002db8 <_ZL12MX_ADC1_Initv+0x144>)
 8002d96:	f001 ff07 	bl	8004ba8 <HAL_ADC_ConfigChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8002daa:	f000 f977 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200001f4 	.word	0x200001f4
 8002dbc:	50040000 	.word	0x50040000
 8002dc0:	80000001 	.word	0x80000001
 8002dc4:	43210000 	.word	0x43210000
 8002dc8:	2e300800 	.word	0x2e300800
 8002dcc:	25b00200 	.word	0x25b00200

08002dd0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd6:	f107 0310 	add.w	r3, r7, #16
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002df4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e16:	481b      	ldr	r0, [pc, #108]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e18:	f004 fba0 	bl	800755c <HAL_TIM_Base_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002e2c:	f000 f936 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e36:	f107 0310 	add.w	r3, r7, #16
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4811      	ldr	r0, [pc, #68]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e3e:	f004 fd3b 	bl	80078b8 <HAL_TIM_ConfigClockSource>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8002e52:	f000 f923 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4808      	ldr	r0, [pc, #32]	; (8002e84 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e64:	f004 ff18 	bl	8007c98 <HAL_TIMEx_MasterConfigSynchronization>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002e78:	f000 f910 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200002a0 	.word	0x200002a0

08002e88 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <_ZL19MX_USART2_UART_Initv+0x64>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eca:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002ecc:	f004 ff68 	bl	8007da0 <HAL_UART_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8002ee0:	f000 f8dc 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200002ec 	.word	0x200002ec
 8002eec:	40004400 	.word	0x40004400

08002ef0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <_ZL11MX_DMA_Initv+0x58>)
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <_ZL11MX_DMA_Initv+0x58>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6493      	str	r3, [r2, #72]	; 0x48
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <_ZL11MX_DMA_Initv+0x58>)
 8002f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	200b      	movs	r0, #11
 8002f14:	f002 fd0b 	bl	800592e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f18:	200b      	movs	r0, #11
 8002f1a:	f002 fd24 	bl	8005966 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	2010      	movs	r0, #16
 8002f24:	f002 fd03 	bl	800592e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002f28:	2010      	movs	r0, #16
 8002f2a:	f002 fd1c 	bl	8005966 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	2011      	movs	r0, #17
 8002f34:	f002 fcfb 	bl	800592e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002f38:	2011      	movs	r0, #17
 8002f3a:	f002 fd14 	bl	8005966 <HAL_NVIC_EnableIRQ>

}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f7a:	4b25      	ldr	r3, [pc, #148]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	4a18      	ldr	r2, [pc, #96]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <_ZL12MX_GPIO_Initv+0xc4>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	21a0      	movs	r1, #160	; 0xa0
 8002fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fca:	f003 f8d7 	bl	800617c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <_ZL12MX_GPIO_Initv+0xc8>)
 8002fe6:	f002 ff4f 	bl	8005e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 8002fea:	23a0      	movs	r3, #160	; 0xa0
 8002fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003004:	f002 ff40 	bl	8005e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	48000800 	.word	0x48000800

08003018 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	usecs_elapsed += 10;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330a      	adds	r3, #10
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003028:	6013      	str	r3, [r2, #0]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000dac 	.word	0x20000dac

0800303c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	switch (curPhone) {
 8003044:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_ADC_ConvCpltCallback+0x58>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b03      	cmp	r3, #3
 800304c:	d819      	bhi.n	8003082 <HAL_ADC_ConvCpltCallback+0x46>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <HAL_ADC_ConvCpltCallback+0x18>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003065 	.word	0x08003065
 8003058:	0800306d 	.word	0x0800306d
 800305c:	08003075 	.word	0x08003075
 8003060:	0800307d 	.word	0x0800307d
	case INIT:
		curPhone = HYDROPHONE1;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_ADC_ConvCpltCallback+0x58>)
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
		break;
 800306a:	e00a      	b.n	8003082 <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE1:
		curPhone = HYDROPHONE2;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_ADC_ConvCpltCallback+0x58>)
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
		break;
 8003072:	e006      	b.n	8003082 <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE2:
		curPhone = HYDROPHONE3;
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_ADC_ConvCpltCallback+0x58>)
 8003076:	2203      	movs	r2, #3
 8003078:	701a      	strb	r2, [r3, #0]
		break;
 800307a:	e002      	b.n	8003082 <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE3:
		curPhone = HYDROPHONE1;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_ADC_ConvCpltCallback+0x58>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
  }
  conversionComplete = 1;
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_ADC_ConvCpltCallback+0x5c>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	20000dbc 	.word	0x20000dbc
 8003098:	20000db8 	.word	0x20000db8

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <Error_Handler+0x8>

080030a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e00c      	b.n	80030d0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	fa22 f103 	lsr.w	r1, r2, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	b2ca      	uxtb	r2, r1
 80030c8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d9ef      	bls.n	80030b6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e010      	b.n	800311c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	440a      	add	r2, r1
 8003104:	7812      	ldrb	r2, [r2, #0]
 8003106:	4611      	mov	r1, r2
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	00d2      	lsls	r2, r2, #3
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3301      	adds	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d9eb      	bls.n	80030fa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
  }
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fd7d 	bl	8001c54 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e01d      	b.n	80031ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	60da      	str	r2, [r3, #12]
        return true;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e006      	b.n	80031d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b18      	cmp	r3, #24
 80031d2:	ddde      	ble.n	8003192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80031d4:	2300      	movs	r3, #0
  }
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fe32 	bl	8001e58 <_ZN13STM32Hardware4timeEv>
 80031f4:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003204:	4293      	cmp	r3, r2
 8003206:	d903      	bls.n	8003210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	429a      	cmp	r2, r3
 8003224:	d903      	bls.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003234:	2b00      	cmp	r3, #0
 8003236:	d014      	beq.n	8003262 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fe0b 	bl	8001e58 <_ZN13STM32Hardware4timeEv>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800324e:	429a      	cmp	r2, r3
 8003250:	bf8c      	ite	hi
 8003252:	2301      	movhi	r3, #1
 8003254:	2300      	movls	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800325c:	f06f 0301 	mvn.w	r3, #1
 8003260:	e194      	b.n	800358c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fd10 	bl	8001c8c <_ZN13STM32Hardware4readEv>
 800326c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f2c0 8174 	blt.w	800355e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	441a      	add	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800328c:	2b07      	cmp	r3, #7
 800328e:	d11e      	bne.n	80032ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	b2d1      	uxtb	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	460a      	mov	r2, r1
 80032a8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1b4      	bne.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2208      	movs	r2, #8
 80032c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032cc:	e7af      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d128      	bne.n	800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2bff      	cmp	r3, #255	; 0xff
 80032dc:	d10d      	bne.n	80032fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f103 0214 	add.w	r2, r3, #20
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80032f8:	e799      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fdaa 	bl	8001e58 <_ZN13STM32Hardware4timeEv>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	bf8c      	ite	hi
 8003312:	2301      	movhi	r3, #1
 8003314:	2300      	movls	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d088      	beq.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003324:	f06f 0301 	mvn.w	r3, #1
 8003328:	e130      	b.n	800358c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003330:	2b01      	cmp	r3, #1
 8003332:	d118      	bne.n	8003366 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2bfe      	cmp	r3, #254	; 0xfe
 8003338:	d107      	bne.n	800334a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003348:	e771      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003358:	2b00      	cmp	r3, #0
 800335a:	f47f af68 	bne.w	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f918 	bl	8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003364:	e763      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800336c:	2b02      	cmp	r3, #2
 800336e:	d113      	bne.n	8003398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003396:	e74a      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d110      	bne.n	80033c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80033c2:	e734      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d116      	bne.n	80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80033d4:	425a      	negs	r2, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	bf58      	it	pl
 80033dc:	4253      	negpl	r3, r2
 80033de:	2bff      	cmp	r3, #255	; 0xff
 80033e0:	d107      	bne.n	80033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80033f0:	e71d      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80033fa:	e718      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003402:	2b05      	cmp	r3, #5
 8003404:	d10f      	bne.n	8003426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003424:	e703      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800342c:	2b06      	cmp	r3, #6
 800342e:	d117      	bne.n	8003460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2207      	movs	r2, #7
 8003446:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003450:	2b00      	cmp	r3, #0
 8003452:	f47f aeec 	bne.w	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2208      	movs	r2, #8
 800345a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800345e:	e6e6      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003466:	2b08      	cmp	r3, #8
 8003468:	f47f aee1 	bne.w	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800347a:	425a      	negs	r2, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	bf58      	it	pl
 8003482:	4253      	negpl	r3, r2
 8003484:	2bff      	cmp	r3, #255	; 0xff
 8003486:	f47f aed2 	bne.w	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d110      	bne.n	80034b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f87d 	bl	8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f898 	bl	80035d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034b4:	e06a      	b.n	800358c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80034bc:	2b0a      	cmp	r3, #10
 80034be:	d107      	bne.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80034c6:	4619      	mov	r1, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f961 	bl	8003790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80034ce:	e6ae      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d10e      	bne.n	80034f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f7fe f9c0 	bl	800186e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80034f6:	e69a      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80034fe:	2b0b      	cmp	r3, #11
 8003500:	d104      	bne.n	800350c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800350a:	e690      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003512:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f202 2222 	addw	r2, r2, #546	; 0x222
 800351c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f43f ae84 	beq.w	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800352c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003536:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003540:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f202 2222 	addw	r2, r2, #546	; 0x222
 800354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003558:	4611      	mov	r1, r2
 800355a:	4798      	blx	r3
    while (true)
 800355c:	e667      	b.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800355e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00f      	beq.n	800358a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003578:	4293      	cmp	r3, r2
 800357a:	d906      	bls.n	800358a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f809 	bl	8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800358a:	2300      	movs	r3, #0
  }
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fcc1 	bl	8000f28 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f107 020c 	add.w	r2, r7, #12
 80035b0:	210a      	movs	r1, #10
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
    rt_time = hardware_.time();
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fc4c 	bl	8001e58 <_ZN13STM32Hardware4timeEv>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fd93 	bl	8001108 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	e062      	b.n	80036ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d056      	beq.n	80036a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	b29b      	uxth	r3, r3
 800360c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3308      	adds	r3, #8
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4608      	mov	r0, r1
 8003648:	4798      	blx	r3
 800364a:	4603      	mov	r3, r0
 800364c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4608      	mov	r0, r1
 8003676:	4798      	blx	r3
 8003678:	4603      	mov	r3, r0
 800367a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800367c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003680:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681c      	ldr	r4, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe faa1 	bl	8001bde <_ZN3ros9Publisher15getEndpointTypeEv>
 800369c:	4601      	mov	r1, r0
 800369e:	f107 030c 	add.w	r3, r7, #12
 80036a2:	461a      	mov	r2, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	3301      	adds	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	2b18      	cmp	r3, #24
 80036b2:	dd99      	ble.n	80035e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
 80036b8:	e05e      	b.n	8003778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d053      	beq.n	8003772 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3308      	adds	r3, #8
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4608      	mov	r0, r1
 800370c:	4798      	blx	r3
 800370e:	4603      	mov	r3, r0
 8003710:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003716:	f202 2222 	addw	r2, r2, #546	; 0x222
 800371a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4608      	mov	r0, r1
 8003732:	4798      	blx	r3
 8003734:	4603      	mov	r3, r0
 8003736:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800373c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	f202 2222 	addw	r2, r2, #546	; 0x222
 800374c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3304      	adds	r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4608      	mov	r0, r1
 8003764:	4798      	blx	r3
 8003766:	4601      	mov	r1, r0
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	461a      	mov	r2, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	3301      	adds	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	2b18      	cmp	r3, #24
 800377c:	dd9d      	ble.n	80036ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003786:	bf00      	nop
 8003788:	372c      	adds	r7, #44	; 0x2c
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
	...

08003790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fbc2 	bl	8000f28 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe fb55 	bl	8001e58 <_ZN13STM32Hardware4timeEv>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80037ba:	f107 0308 	add.w	r3, r7, #8
 80037be:	6839      	ldr	r1, [r7, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fc21 	bl	8001008 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	4915      	ldr	r1, [pc, #84]	; (8003820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80037cc:	fba1 1303 	umull	r1, r3, r1, r3
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80037d6:	6939      	ldr	r1, [r7, #16]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80037dc:	fba3 0302 	umull	r0, r3, r3, r2
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	440b      	add	r3, r1
 80037f4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8a6 	bl	8003950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fb25 	bl	8001e58 <_ZN13STM32Hardware4timeEv>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	10624dd3 	.word	0x10624dd3
 8003824:	000f4240 	.word	0x000f4240

08003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b63      	cmp	r3, #99	; 0x63
 8003838:	dd09      	ble.n	800384e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003840:	f083 0301 	eor.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800384a:	2300      	movs	r3, #0
 800384c:	e079      	b.n	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800385a:	3207      	adds	r2, #7
 800385c:	4611      	mov	r1, r2
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	22ff      	movs	r2, #255	; 0xff
 8003868:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	22fe      	movs	r2, #254	; 0xfe
 8003870:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	b29b      	uxth	r3, r3
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	b29b      	uxth	r3, r3
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800389a:	4413      	add	r3, r2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	121b      	asrs	r3, r3, #8
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80038c6:	2305      	movs	r3, #5
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e00c      	b.n	80038e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	3301      	adds	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3306      	adds	r3, #6
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dded      	ble.n	80038cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3307      	adds	r3, #7
 80038f4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	425a      	negs	r2, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	bf58      	it	pl
 8003900:	4253      	negpl	r3, r2
 8003902:	b2da      	uxtb	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	1c59      	adds	r1, r3, #1
 8003908:	6179      	str	r1, [r7, #20]
 800390a:	43d2      	mvns	r2, r2
 800390c:	b2d1      	uxtb	r1, r2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	460a      	mov	r2, r1
 8003914:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391e:	dc0a      	bgt.n	8003936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1d18      	adds	r0, r3, #4
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4619      	mov	r1, r3
 800392e:	f7fe fa4d 	bl	8001dcc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	e005      	b.n	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003936:	4905      	ldr	r1, [pc, #20]	; (800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f849 	bl	80039d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	0800d778 	.word	0x0800d778

08003950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fa7a 	bl	8001e58 <_ZN13STM32Hardware4timeEv>
 8003964:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4915      	ldr	r1, [pc, #84]	; (80039c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800396e:	fba1 1303 	umull	r1, r3, r1, r3
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	1e5a      	subs	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003986:	fba3 0302 	umull	r0, r3, r3, r2
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003990:	fb00 f303 	mul.w	r3, r0, r3
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	1aca      	subs	r2, r1, r3
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80039a0:	4413      	add	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f000 fc5c 	bl	8004274 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	10624dd3 	.word	0x10624dd3
 80039c8:	000f4240 	.word	0x000f4240
 80039cc:	3b9aca00 	.word	0x3b9aca00

080039d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	2103      	movs	r1, #3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f804 	bl	80039ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	460b      	mov	r3, r1
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fd46 	bl	8001490 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f107 0214 	add.w	r2, r7, #20
 8003a16:	2107      	movs	r1, #7
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	4798      	blx	r3
  }
 8003a1c:	bf00      	nop
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d122      	bne.n	8003a7a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d11d      	bne.n	8003a7a <_Z41__static_initialization_and_destruction_0ii+0x56>
ros::NodeHandle nh;
 8003a3e:	4811      	ldr	r0, [pc, #68]	; (8003a84 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003a40:	f7fe fb2c 	bl	800209c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
auv_msgs::HydrophonePayload hmsg1, hmsg2, hmsg3;
 8003a44:	4810      	ldr	r0, [pc, #64]	; (8003a88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003a46:	f7fe fa13 	bl	8001e70 <_ZN8auv_msgs17HydrophonePayloadC1Ev>
 8003a4a:	4810      	ldr	r0, [pc, #64]	; (8003a8c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003a4c:	f7fe fa10 	bl	8001e70 <_ZN8auv_msgs17HydrophonePayloadC1Ev>
 8003a50:	480f      	ldr	r0, [pc, #60]	; (8003a90 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003a52:	f7fe fa0d 	bl	8001e70 <_ZN8auv_msgs17HydrophonePayloadC1Ev>
ros::Publisher hpub1("hydrophone_1", &hmsg1);
 8003a56:	2300      	movs	r3, #0
 8003a58:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003a5a:	490e      	ldr	r1, [pc, #56]	; (8003a94 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003a5c:	480e      	ldr	r0, [pc, #56]	; (8003a98 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003a5e:	f7fe f893 	bl	8001b88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher hpub2("hydrophone_2", &hmsg2);
 8003a62:	2300      	movs	r3, #0
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003a66:	490d      	ldr	r1, [pc, #52]	; (8003a9c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003a6a:	f7fe f88d 	bl	8001b88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher hpub3("hydrophone_3", &hmsg3);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003a72:	490c      	ldr	r1, [pc, #48]	; (8003aa4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003a74:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003a76:	f7fe f887 	bl	8001b88 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000404 	.word	0x20000404
 8003a88:	20000d40 	.word	0x20000d40
 8003a8c:	20000d50 	.word	0x20000d50
 8003a90:	20000d60 	.word	0x20000d60
 8003a94:	0800d7b4 	.word	0x0800d7b4
 8003a98:	20000d70 	.word	0x20000d70
 8003a9c:	0800d7c4 	.word	0x0800d7c4
 8003aa0:	20000d84 	.word	0x20000d84
 8003aa4:	0800d7d4 	.word	0x0800d7d4
 8003aa8:	20000d98 	.word	0x20000d98

08003aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
    return configured_;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <_GLOBAL__sub_I_hadc1>:
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f7ff ffa8 	bl	8003a24 <_Z41__static_initialization_and_destruction_0ii>
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <get_frequency>:
    return freq[target_bin] / sum;
}


uint32_t get_frequency(float32_t* buff, uint32_t size, float32_t fs)
{
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	b095      	sub	sp, #84	; 0x54
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6178      	str	r0, [r7, #20]
 8003ae2:	6139      	str	r1, [r7, #16]
 8003ae4:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ae8:	466b      	mov	r3, sp
 8003aea:	60bb      	str	r3, [r7, #8]
    uint32_t target_frequencies[] = {25000, 30000, 35000, 40000};
 8003aec:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <get_frequency+0x1c8>)
 8003aee:	f107 061c 	add.w	r6, r7, #28
 8003af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    float32_t temp_buff[size];
 8003af8:	6939      	ldr	r1, [r7, #16]
 8003afa:	460b      	mov	r3, r1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b00:	2300      	movs	r3, #0
 8003b02:	6039      	str	r1, [r7, #0]
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	0143      	lsls	r3, r0, #5
 8003b12:	6838      	ldr	r0, [r7, #0]
 8003b14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	0142      	lsls	r2, r0, #5
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	468a      	mov	sl, r1
 8003b20:	469b      	mov	fp, r3
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8003b2e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003b32:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003b36:	008b      	lsls	r3, r1, #2
 8003b38:	3307      	adds	r3, #7
 8003b3a:	08db      	lsrs	r3, r3, #3
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	ebad 0d03 	sub.w	sp, sp, r3
 8003b42:	466b      	mov	r3, sp
 8003b44:	3303      	adds	r3, #3
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38

    for (int i = 0; i < size; i++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	e00c      	b.n	8003b6c <get_frequency+0x94>
    {
        temp_buff[i] = buff[i];
 8003b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4413      	add	r3, r2
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8003b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b68:	3301      	adds	r3, #1
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d8ee      	bhi.n	8003b52 <get_frequency+0x7a>
    }

    arm_cfft_f32(&instance, temp_buff, 0, 0);
 8003b74:	2300      	movs	r3, #0
 8003b76:	2200      	movs	r2, #0
 8003b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b7a:	484a      	ldr	r0, [pc, #296]	; (8003ca4 <get_frequency+0x1cc>)
 8003b7c:	f005 ff30 	bl	80099e0 <arm_cfft_f32>

    float32_t freq[size / 2];
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	0859      	lsrs	r1, r3, #1
 8003b84:	460b      	mov	r3, r1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	4688      	mov	r8, r1
 8003b8e:	4699      	mov	r9, r3
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003b9c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003ba0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	461d      	mov	r5, r3
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	016b      	lsls	r3, r5, #5
 8003bb4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003bb8:	0162      	lsls	r2, r4, #5
 8003bba:	008b      	lsls	r3, r1, #2
 8003bbc:	3307      	adds	r3, #7
 8003bbe:	08db      	lsrs	r3, r3, #3
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	ebad 0d03 	sub.w	sp, sp, r3
 8003bc6:	466b      	mov	r3, sp
 8003bc8:	3303      	adds	r3, #3
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30
    arm_cmplx_mag_f32(temp_buff, freq, size / 2);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bda:	f005 ff99 	bl	8009b10 <arm_cmplx_mag_f32>

    uint32_t max = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t frequency = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t target_bin = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (int i = 0; i < 4; i++) {
 8003bea:	2300      	movs	r3, #0
 8003bec:	643b      	str	r3, [r7, #64]	; 0x40
 8003bee:	e04b      	b.n	8003c88 <get_frequency+0x1b0>
        target_bin = (uint32_t) round(target_frequencies[i] * size / fs);
 8003bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	3348      	adds	r3, #72	; 0x48
 8003bf6:	f107 0208 	add.w	r2, r7, #8
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c16:	ee16 0a90 	vmov	r0, s13
 8003c1a:	f7fc fc95 	bl	8000548 <__aeabi_f2d>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	ec43 2b10 	vmov	d0, r2, r3
 8003c26:	f006 fbdd 	bl	800a3e4 <round>
 8003c2a:	ec53 2b10 	vmov	r2, r3, d0
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7fc ffb9 	bl	8000ba8 <__aeabi_d2uiz>
 8003c36:	4603      	mov	r3, r0
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (freq[target_bin] > max) {
 8003c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	ed93 7a00 	vldr	s14, [r3]
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c58:	dd13      	ble.n	8003c82 <get_frequency+0x1aa>
        	frequency = target_frequencies[i];
 8003c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	3348      	adds	r3, #72	; 0x48
 8003c60:	f107 0208 	add.w	r2, r7, #8
 8003c64:	4413      	add	r3, r2
 8003c66:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
        	max = freq[target_bin];
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7c:	ee17 3a90 	vmov	r3, s15
 8003c80:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < 4; i++) {
 8003c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c84:	3301      	adds	r3, #1
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
 8003c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	ddb0      	ble.n	8003bf0 <get_frequency+0x118>
        }
    }

    return frequency;
 8003c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c90:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3754      	adds	r7, #84	; 0x54
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9e:	bf00      	nop
 8003ca0:	0800d7e4 	.word	0x0800d7e4
 8003ca4:	0800d8d0 	.word	0x0800d8d0

08003ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_MspInit+0x44>)
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_MspInit+0x44>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8003cba:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_MspInit+0x44>)
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_MspInit+0x44>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <HAL_MspInit+0x44>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_MspInit+0x44>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0a2      	sub	sp, #136	; 0x88
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	2260      	movs	r2, #96	; 0x60
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f007 fcac 	bl	800b66e <memset>
  if(hadc->Instance==ADC1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a47      	ldr	r2, [pc, #284]	; (8003e38 <HAL_ADC_MspInit+0x148>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	f040 8087 	bne.w	8003e30 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d2c:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003d36:	2308      	movs	r3, #8
 8003d38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003d42:	2302      	movs	r3, #2
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4618      	mov	r0, r3
 8003d52:	f003 f8c7 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003d5c:	f7ff f99e 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003d60:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	4a35      	ldr	r2, [pc, #212]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d6c:	4b33      	ldr	r3, [pc, #204]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d78:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d84:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d96:	f043 0302 	orr.w	r3, r3, #2
 8003d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d9c:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_ADC_MspInit+0x14c>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003da8:	2350      	movs	r3, #80	; 0x50
 8003daa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dac:	230b      	movs	r3, #11
 8003dae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003db8:	4619      	mov	r1, r3
 8003dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dbe:	f002 f863 	bl	8005e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003dc6:	230b      	movs	r3, #11
 8003dc8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	481a      	ldr	r0, [pc, #104]	; (8003e40 <HAL_ADC_MspInit+0x150>)
 8003dd6:	f002 f857 	bl	8005e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003dda:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_ADC_MspInit+0x158>)
 8003dde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003de0:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003de6:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dfe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e06:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e14:	480b      	ldr	r0, [pc, #44]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003e16:	f001 fdc1 	bl	800599c <HAL_DMA_Init>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003e20:	f7ff f93c 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003e28:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e2a:	4a06      	ldr	r2, [pc, #24]	; (8003e44 <HAL_ADC_MspInit+0x154>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e30:	bf00      	nop
 8003e32:	3788      	adds	r7, #136	; 0x88
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	50040000 	.word	0x50040000
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	48000400 	.word	0x48000400
 8003e44:	20000258 	.word	0x20000258
 8003e48:	40020008 	.word	0x40020008

08003e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d113      	bne.n	8003e86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_TIM_Base_MspInit+0x44>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <HAL_TIM_Base_MspInit+0x44>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6593      	str	r3, [r2, #88]	; 0x58
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_TIM_Base_MspInit+0x44>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e76:	2200      	movs	r2, #0
 8003e78:	2100      	movs	r1, #0
 8003e7a:	201c      	movs	r0, #28
 8003e7c:	f001 fd57 	bl	800592e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e80:	201c      	movs	r0, #28
 8003e82:	f001 fd70 	bl	8005966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000

08003e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b0a2      	sub	sp, #136	; 0x88
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	2260      	movs	r2, #96	; 0x60
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f007 fbda 	bl	800b66e <memset>
  if(huart->Instance==USART2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a4d      	ldr	r2, [pc, #308]	; (8003ff4 <HAL_UART_MspInit+0x160>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	f040 8093 	bne.w	8003fec <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f003 f806 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003ede:	f7ff f8dd 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ee2:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <HAL_UART_MspInit+0x164>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	4a44      	ldr	r2, [pc, #272]	; (8003ff8 <HAL_UART_MspInit+0x164>)
 8003ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eec:	6593      	str	r3, [r2, #88]	; 0x58
 8003eee:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <HAL_UART_MspInit+0x164>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efa:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <HAL_UART_MspInit+0x164>)
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	4a3e      	ldr	r2, [pc, #248]	; (8003ff8 <HAL_UART_MspInit+0x164>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f06:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <HAL_UART_MspInit+0x164>)
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f12:	230c      	movs	r3, #12
 8003f14:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f24:	2307      	movs	r3, #7
 8003f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f34:	f001 ffa8 	bl	8005e88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003f38:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f3a:	4a31      	ldr	r2, [pc, #196]	; (8004000 <HAL_UART_MspInit+0x16c>)
 8003f3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f40:	2202      	movs	r2, #2
 8003f42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f44:	4b2d      	ldr	r3, [pc, #180]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f4a:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f56:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5c:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003f62:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f6e:	4823      	ldr	r0, [pc, #140]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f70:	f001 fd14 	bl	800599c <HAL_DMA_Init>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8003f7a:	f7ff f88f 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f82:	675a      	str	r2, [r3, #116]	; 0x74
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_UART_MspInit+0x168>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003f8c:	4a1e      	ldr	r2, [pc, #120]	; (8004008 <HAL_UART_MspInit+0x174>)
 8003f8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003f90:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003f92:	2202      	movs	r2, #2
 8003f94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003f98:	2210      	movs	r2, #16
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa2:	4b18      	ldr	r3, [pc, #96]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003fb4:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003fc0:	4810      	ldr	r0, [pc, #64]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003fc2:	f001 fceb 	bl	800599c <HAL_DMA_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8003fcc:	f7ff f866 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003fd4:	671a      	str	r2, [r3, #112]	; 0x70
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <HAL_UART_MspInit+0x170>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	2026      	movs	r0, #38	; 0x26
 8003fe2:	f001 fca4 	bl	800592e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fe6:	2026      	movs	r0, #38	; 0x26
 8003fe8:	f001 fcbd 	bl	8005966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fec:	bf00      	nop
 8003fee:	3788      	adds	r7, #136	; 0x88
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	20000374 	.word	0x20000374
 8004000:	4002006c 	.word	0x4002006c
 8004004:	200003bc 	.word	0x200003bc
 8004008:	40020080 	.word	0x40020080

0800400c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <NMI_Handler+0x4>

08004012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004016:	e7fe      	b.n	8004016 <HardFault_Handler+0x4>

08004018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800401c:	e7fe      	b.n	800401c <MemManage_Handler+0x4>

0800401e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004022:	e7fe      	b.n	8004022 <BusFault_Handler+0x4>

08004024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004028:	e7fe      	b.n	8004028 <UsageFault_Handler+0x4>

0800402a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004058:	f000 f9be 	bl	80043d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}

08004060 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <DMA1_Channel1_IRQHandler+0x10>)
 8004066:	f001 fe30 	bl	8005cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000258 	.word	0x20000258

08004074 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004078:	4802      	ldr	r0, [pc, #8]	; (8004084 <DMA1_Channel6_IRQHandler+0x10>)
 800407a:	f001 fe26 	bl	8005cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000374 	.word	0x20000374

08004088 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <DMA1_Channel7_IRQHandler+0x10>)
 800408e:	f001 fe1c 	bl	8005cca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200003bc 	.word	0x200003bc

0800409c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040a0:	4802      	ldr	r0, [pc, #8]	; (80040ac <TIM2_IRQHandler+0x10>)
 80040a2:	f003 fb07 	bl	80076b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200002a0 	.word	0x200002a0

080040b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040b4:	4802      	ldr	r0, [pc, #8]	; (80040c0 <USART2_IRQHandler+0x10>)
 80040b6:	f003 ff89 	bl	8007fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200002ec 	.word	0x200002ec

080040c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return 1;
 80040c8:	2301      	movs	r3, #1
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <_kill>:

int _kill(int pid, int sig)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040de:	f007 fb19 	bl	800b714 <__errno>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2216      	movs	r2, #22
 80040e6:	601a      	str	r2, [r3, #0]
  return -1;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_exit>:

void _exit (int status)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffe7 	bl	80040d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004106:	e7fe      	b.n	8004106 <_exit+0x12>

08004108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00a      	b.n	8004130 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800411a:	f3af 8000 	nop.w
 800411e:	4601      	mov	r1, r0
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	60ba      	str	r2, [r7, #8]
 8004126:	b2ca      	uxtb	r2, r1
 8004128:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3301      	adds	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	dbf0      	blt.n	800411a <_read+0x12>
  }

  return len;
 8004138:	687b      	ldr	r3, [r7, #4]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e009      	b.n	8004168 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	60ba      	str	r2, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3301      	adds	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	dbf1      	blt.n	8004154 <_write+0x12>
  }
  return len;
 8004170:	687b      	ldr	r3, [r7, #4]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_close>:

int _close(int file)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041a2:	605a      	str	r2, [r3, #4]
  return 0;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <_isatty>:

int _isatty(int file)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041ba:	2301      	movs	r3, #1
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041ec:	4a14      	ldr	r2, [pc, #80]	; (8004240 <_sbrk+0x5c>)
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <_sbrk+0x60>)
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <_sbrk+0x64>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <_sbrk+0x64>)
 8004202:	4a12      	ldr	r2, [pc, #72]	; (800424c <_sbrk+0x68>)
 8004204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d207      	bcs.n	8004224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004214:	f007 fa7e 	bl	800b714 <__errno>
 8004218:	4603      	mov	r3, r0
 800421a:	220c      	movs	r2, #12
 800421c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004222:	e009      	b.n	8004238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <_sbrk+0x64>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <_sbrk+0x64>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	4a05      	ldr	r2, [pc, #20]	; (8004248 <_sbrk+0x64>)
 8004234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20010000 	.word	0x20010000
 8004244:	00000400 	.word	0x00000400
 8004248:	20000dc0 	.word	0x20000dc0
 800424c:	20000f18 	.word	0x20000f18

08004250 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <SystemInit+0x20>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <SystemInit+0x20>)
 800425c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0a5a      	lsrs	r2, r3, #9
 8004284:	490f      	ldr	r1, [pc, #60]	; (80042c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004286:	fba1 1202 	umull	r1, r2, r1, r2
 800428a:	09d2      	lsrs	r2, r2, #7
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800428e:	fb01 f202 	mul.w	r2, r1, r2
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	0a5b      	lsrs	r3, r3, #9
 800429c:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	09db      	lsrs	r3, r3, #7
 80042a4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	00044b83 	.word	0x00044b83
 80042c8:	3b9aca00 	.word	0x3b9aca00

080042cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80042cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004304 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042d0:	f7ff ffbe 	bl	8004250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042d4:	480c      	ldr	r0, [pc, #48]	; (8004308 <LoopForever+0x6>)
  ldr r1, =_edata
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <LoopForever+0xa>)
  ldr r2, =_sidata
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <LoopForever+0xe>)
  movs r3, #0
 80042da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042dc:	e002      	b.n	80042e4 <LoopCopyDataInit>

080042de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042e2:	3304      	adds	r3, #4

080042e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e8:	d3f9      	bcc.n	80042de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042ec:	4c0a      	ldr	r4, [pc, #40]	; (8004318 <LoopForever+0x16>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f0:	e001      	b.n	80042f6 <LoopFillZerobss>

080042f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f4:	3204      	adds	r2, #4

080042f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f8:	d3fb      	bcc.n	80042f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042fa:	f007 fa11 	bl	800b720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042fe:	f7fd ff6b 	bl	80021d8 <main>

08004302 <LoopForever>:

LoopForever:
    b LoopForever
 8004302:	e7fe      	b.n	8004302 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004304:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800430c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004310:	0800f048 	.word	0x0800f048
  ldr r2, =_sbss
 8004314:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004318:	20000f14 	.word	0x20000f14

0800431c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800431c:	e7fe      	b.n	800431c <ADC1_IRQHandler>
	...

08004320 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_Init+0x3c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a0b      	ldr	r2, [pc, #44]	; (800435c <HAL_Init+0x3c>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004334:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004336:	2003      	movs	r0, #3
 8004338:	f001 faee 	bl	8005918 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800433c:	2000      	movs	r0, #0
 800433e:	f000 f80f 	bl	8004360 <HAL_InitTick>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	71fb      	strb	r3, [r7, #7]
 800434c:	e001      	b.n	8004352 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800434e:	f7ff fcab 	bl	8003ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004352:	79fb      	ldrb	r3, [r7, #7]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <HAL_InitTick+0x6c>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d023      	beq.n	80043bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004374:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_InitTick+0x70>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_InitTick+0x6c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	4619      	mov	r1, r3
 800437e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004382:	fbb3 f3f1 	udiv	r3, r3, r1
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	4618      	mov	r0, r3
 800438c:	f001 faf9 	bl	8005982 <HAL_SYSTICK_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b0f      	cmp	r3, #15
 800439a:	d809      	bhi.n	80043b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800439c:	2200      	movs	r2, #0
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a4:	f001 fac3 	bl	800592e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043a8:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <HAL_InitTick+0x74>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e007      	b.n	80043c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
 80043b4:	e004      	b.n	80043c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
 80043ba:	e001      	b.n	80043c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000008 	.word	0x20000008
 80043d0:	20000000 	.word	0x20000000
 80043d4:	20000004 	.word	0x20000004

080043d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_IncTick+0x20>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_IncTick+0x24>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <HAL_IncTick+0x24>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000008 	.word	0x20000008
 80043fc:	20000dc4 	.word	0x20000dc4

08004400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return uwTick;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_GetTick+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000dc4 	.word	0x20000dc4

08004418 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3360      	adds	r3, #96	; 0x60
 8004492:	461a      	mov	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <LL_ADC_SetOffset+0x44>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	03fff000 	.word	0x03fff000

080044c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3360      	adds	r3, #96	; 0x60
 80044d6:	461a      	mov	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3360      	adds	r3, #96	; 0x60
 8004504:	461a      	mov	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	431a      	orrs	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3330      	adds	r3, #48	; 0x30
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	f003 030c 	and.w	r3, r3, #12
 800456c:	4413      	add	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	211f      	movs	r1, #31
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	401a      	ands	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0e9b      	lsrs	r3, r3, #26
 8004588:	f003 011f 	and.w	r1, r3, #31
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	431a      	orrs	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3314      	adds	r3, #20
 80045b8:	461a      	mov	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	0e5b      	lsrs	r3, r3, #25
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	4413      	add	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	0d1b      	lsrs	r3, r3, #20
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2107      	movs	r1, #7
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	401a      	ands	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0d1b      	lsrs	r3, r3, #20
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	431a      	orrs	r2, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004618:	43db      	mvns	r3, r3
 800461a:	401a      	ands	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0318 	and.w	r3, r3, #24
 8004622:	4908      	ldr	r1, [pc, #32]	; (8004644 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004624:	40d9      	lsrs	r1, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	400b      	ands	r3, r1
 800462a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	0007ffff 	.word	0x0007ffff

08004648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6093      	str	r3, [r2, #8]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004680:	d101      	bne.n	8004686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80046a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d0:	d101      	bne.n	80046d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046f8:	f043 0201 	orr.w	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800471c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004720:	f043 0202 	orr.w	r2, r3, #2
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <LL_ADC_IsEnabled+0x18>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <LL_ADC_IsEnabled+0x1a>
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d101      	bne.n	8004772 <LL_ADC_IsDisableOngoing+0x18>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <LL_ADC_IsDisableOngoing+0x1a>
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d101      	bne.n	80047c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d101      	bne.n	80047e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e126      	b.n	8004a5c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fa67 	bl	8003cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff19 	bl	800466c <LL_ADC_IsDeepPowerDownEnabled>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff feff 	bl	8004648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff ff34 	bl	80046bc <LL_ADC_IsInternalRegulatorEnabled>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d115      	bne.n	8004886 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ff18 	bl	8004694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004864:	4b7f      	ldr	r3, [pc, #508]	; (8004a64 <HAL_ADC_Init+0x270>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	099b      	lsrs	r3, r3, #6
 800486a:	4a7f      	ldr	r2, [pc, #508]	; (8004a68 <HAL_ADC_Init+0x274>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	3301      	adds	r3, #1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004878:	e002      	b.n	8004880 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b01      	subs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f9      	bne.n	800487a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff ff16 	bl	80046bc <LL_ADC_IsInternalRegulatorEnabled>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f043 0210 	orr.w	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	f043 0201 	orr.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ff76 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 80048bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 80bf 	bne.w	8004a4a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 80bb 	bne.w	8004a4a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048dc:	f043 0202 	orr.w	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ff23 	bl	8004734 <LL_ADC_IsEnabled>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048f4:	485d      	ldr	r0, [pc, #372]	; (8004a6c <HAL_ADC_Init+0x278>)
 80048f6:	f7ff ff1d 	bl	8004734 <LL_ADC_IsEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4619      	mov	r1, r3
 8004906:	485a      	ldr	r0, [pc, #360]	; (8004a70 <HAL_ADC_Init+0x27c>)
 8004908:	f7ff fd86 	bl	8004418 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7e5b      	ldrb	r3, [r3, #25]
 8004910:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004916:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800491c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004922:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800492a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d106      	bne.n	8004948 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	3b01      	subs	r3, #1
 8004940:	045b      	lsls	r3, r3, #17
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <HAL_ADC_Init+0x280>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	430b      	orrs	r3, r1
 8004976:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff26 	bl	80047ce <LL_ADC_INJ_IsConversionOngoing>
 8004982:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d13d      	bne.n	8004a06 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d13a      	bne.n	8004a06 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004994:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800499c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ac:	f023 0302 	bic.w	r3, r3, #2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	430b      	orrs	r3, r1
 80049b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d118      	bne.n	80049f6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049ce:	f023 0304 	bic.w	r3, r3, #4
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049e6:	430a      	orrs	r2, r1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	611a      	str	r2, [r3, #16]
 80049f4:	e007      	b.n	8004a06 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10c      	bne.n	8004a28 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	f023 010f 	bic.w	r1, r3, #15
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	1e5a      	subs	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
 8004a26:	e007      	b.n	8004a38 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 020f 	bic.w	r2, r2, #15
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f023 0303 	bic.w	r3, r3, #3
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
 8004a48:	e007      	b.n	8004a5a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000000 	.word	0x20000000
 8004a68:	053e2d63 	.word	0x053e2d63
 8004a6c:	50040000 	.word	0x50040000
 8004a70:	50040300 	.word	0x50040300
 8004a74:	fff0c007 	.word	0xfff0c007

08004a78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fe8d 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d167      	bne.n	8004b64 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_ADC_Start_DMA+0x2a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e063      	b.n	8004b6a <HAL_ADC_Start_DMA+0xf2>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fc5e 	bl	800536c <ADC_Enable>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d14f      	bne.n	8004b5a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d006      	beq.n	8004ae8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	f023 0206 	bic.w	r2, r3, #6
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae6:	e002      	b.n	8004aee <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <HAL_ADC_Start_DMA+0xfc>)
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <HAL_ADC_Start_DMA+0x100>)
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <HAL_ADC_Start_DMA+0x104>)
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	221c      	movs	r2, #28
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0210 	orr.w	r2, r2, #16
 8004b24:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3340      	adds	r3, #64	; 0x40
 8004b40:	4619      	mov	r1, r3
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f000 ffe1 	bl	8005b0c <HAL_DMA_Start_IT>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fe14 	bl	8004780 <LL_ADC_REG_StartConversion>
 8004b58:	e006      	b.n	8004b68 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b62:	e001      	b.n	8004b68 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
 8004b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08005537 	.word	0x08005537
 8004b78:	0800560f 	.word	0x0800560f
 8004b7c:	0800562b 	.word	0x0800562b

08004b80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b0b6      	sub	sp, #216	; 0xd8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x22>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e3bb      	b.n	8005342 <HAL_ADC_ConfigChannel+0x79a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fde6 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 83a0 	bne.w	8005324 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d824      	bhi.n	8004c3e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	3b02      	subs	r3, #2
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d81b      	bhi.n	8004c36 <HAL_ADC_ConfigChannel+0x8e>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <HAL_ADC_ConfigChannel+0x5c>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c1d 	.word	0x08004c1d
 8004c0c:	08004c25 	.word	0x08004c25
 8004c10:	08004c2d 	.word	0x08004c2d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004c14:	230c      	movs	r3, #12
 8004c16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c1a:	e010      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004c1c:	2312      	movs	r3, #18
 8004c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c22:	e00c      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004c24:	2318      	movs	r3, #24
 8004c26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c2a:	e008      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c34:	e003      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004c36:	2306      	movs	r3, #6
 8004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004c3c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004c4c:	f7ff fc80 	bl	8004550 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fda7 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 8004c5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fdb3 	bl	80047ce <LL_ADC_INJ_IsConversionOngoing>
 8004c68:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f040 81a4 	bne.w	8004fbe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 819f 	bne.w	8004fbe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6819      	ldr	r1, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f7ff fc8b 	bl	80045a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	08db      	lsrs	r3, r3, #3
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d00a      	beq.n	8004cca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6919      	ldr	r1, [r3, #16]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cc4:	f7ff fbdc 	bl	8004480 <LL_ADC_SetOffset>
 8004cc8:	e179      	b.n	8004fbe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fbf9 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x14e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fbee 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004cec:	4603      	mov	r3, r0
 8004cee:	0e9b      	lsrs	r3, r3, #26
 8004cf0:	f003 021f 	and.w	r2, r3, #31
 8004cf4:	e01e      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x18c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff fbe3 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004d24:	2320      	movs	r3, #32
 8004d26:	e004      	b.n	8004d32 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x1a4>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0e9b      	lsrs	r3, r3, #26
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	e018      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x1d6>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004d70:	2320      	movs	r3, #32
 8004d72:	e004      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004d74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d78:	fab3 f383 	clz	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d106      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fbb2 	bl	80044f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2101      	movs	r1, #1
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fb96 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x214>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2101      	movs	r1, #1
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fb8b 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004db2:	4603      	mov	r3, r0
 8004db4:	0e9b      	lsrs	r3, r3, #26
 8004db6:	f003 021f 	and.w	r2, r3, #31
 8004dba:	e01e      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x252>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fb80 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dd2:	fa93 f3a3 	rbit	r3, r3
 8004dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004dea:	2320      	movs	r3, #32
 8004dec:	e004      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x26a>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	0e9b      	lsrs	r3, r3, #26
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	e018      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x29c>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e1e:	fa93 f3a3 	rbit	r3, r3
 8004e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004e2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004e36:	2320      	movs	r3, #32
 8004e38:	e004      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d106      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fb4f 	bl	80044f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fb33 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x2da>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2102      	movs	r1, #2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fb28 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	0e9b      	lsrs	r3, r3, #26
 8004e7c:	f003 021f 	and.w	r2, r3, #31
 8004e80:	e01e      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x318>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2102      	movs	r1, #2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fb1d 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	e004      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb8:	fab3 f383 	clz	r3, r3
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x330>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	0e9b      	lsrs	r3, r3, #26
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	e014      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x35a>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ee0:	fa93 f3a3 	rbit	r3, r3
 8004ee4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	e004      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004efc:	fab3 f383 	clz	r3, r3
 8004f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d106      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff faf0 	bl	80044f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2103      	movs	r1, #3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fad4 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x398>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2103      	movs	r1, #3
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fac9 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004f36:	4603      	mov	r3, r0
 8004f38:	0e9b      	lsrs	r3, r3, #26
 8004f3a:	f003 021f 	and.w	r2, r3, #31
 8004f3e:	e017      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x3c8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2103      	movs	r1, #3
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff fabe 	bl	80044c8 <LL_ADC_GetOffsetChannel>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f52:	fa93 f3a3 	rbit	r3, r3
 8004f56:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004f62:	2320      	movs	r3, #32
 8004f64:	e003      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x3e0>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0e9b      	lsrs	r3, r3, #26
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	e011      	b.n	8004fac <HAL_ADC_ConfigChannel+0x404>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f90:	fa93 f3a3 	rbit	r3, r3
 8004f94:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f98:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e003      	b.n	8004fac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d106      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2103      	movs	r1, #3
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fa9b 	bl	80044f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fbb6 	bl	8004734 <LL_ADC_IsEnabled>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f040 8140 	bne.w	8005250 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6819      	ldr	r1, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f7ff fb0f 	bl	8004600 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4a8f      	ldr	r2, [pc, #572]	; (8005224 <HAL_ADC_ConfigChannel+0x67c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f040 8131 	bne.w	8005250 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_ADC_ConfigChannel+0x46e>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	0e9b      	lsrs	r3, r3, #26
 8005004:	3301      	adds	r3, #1
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2b09      	cmp	r3, #9
 800500c:	bf94      	ite	ls
 800500e:	2301      	movls	r3, #1
 8005010:	2300      	movhi	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e019      	b.n	800504a <HAL_ADC_ConfigChannel+0x4a2>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800501e:	fa93 f3a3 	rbit	r3, r3
 8005022:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005026:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800502e:	2320      	movs	r3, #32
 8005030:	e003      	b.n	800503a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	3301      	adds	r3, #1
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2b09      	cmp	r3, #9
 8005042:	bf94      	ite	ls
 8005044:	2301      	movls	r3, #1
 8005046:	2300      	movhi	r3, #0
 8005048:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800504a:	2b00      	cmp	r3, #0
 800504c:	d079      	beq.n	8005142 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <HAL_ADC_ConfigChannel+0x4c2>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	0e9b      	lsrs	r3, r3, #26
 8005060:	3301      	adds	r3, #1
 8005062:	069b      	lsls	r3, r3, #26
 8005064:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005068:	e015      	b.n	8005096 <HAL_ADC_ConfigChannel+0x4ee>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005072:	fa93 f3a3 	rbit	r3, r3
 8005076:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800507c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005082:	2320      	movs	r3, #32
 8005084:	e003      	b.n	800508e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005088:	fab3 f383 	clz	r3, r3
 800508c:	b2db      	uxtb	r3, r3
 800508e:	3301      	adds	r3, #1
 8005090:	069b      	lsls	r3, r3, #26
 8005092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x50e>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	0e9b      	lsrs	r3, r3, #26
 80050a8:	3301      	adds	r3, #1
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2101      	movs	r1, #1
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	e017      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x53e>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050be:	fa93 f3a3 	rbit	r3, r3
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80050c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80050c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80050ce:	2320      	movs	r3, #32
 80050d0:	e003      	b.n	80050da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80050d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d4:	fab3 f383 	clz	r3, r3
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	3301      	adds	r3, #1
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f303 	lsl.w	r3, r1, r3
 80050e6:	ea42 0103 	orr.w	r1, r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <HAL_ADC_ConfigChannel+0x564>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	0e9b      	lsrs	r3, r3, #26
 80050fc:	3301      	adds	r3, #1
 80050fe:	f003 021f 	and.w	r2, r3, #31
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	051b      	lsls	r3, r3, #20
 800510a:	e018      	b.n	800513e <HAL_ADC_ConfigChannel+0x596>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005114:	fa93 f3a3 	rbit	r3, r3
 8005118:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	e003      	b.n	8005130 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3301      	adds	r3, #1
 8005132:	f003 021f 	and.w	r2, r3, #31
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800513e:	430b      	orrs	r3, r1
 8005140:	e081      	b.n	8005246 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514a:	2b00      	cmp	r3, #0
 800514c:	d107      	bne.n	800515e <HAL_ADC_ConfigChannel+0x5b6>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	0e9b      	lsrs	r3, r3, #26
 8005154:	3301      	adds	r3, #1
 8005156:	069b      	lsls	r3, r3, #26
 8005158:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800515c:	e015      	b.n	800518a <HAL_ADC_ConfigChannel+0x5e2>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005176:	2320      	movs	r3, #32
 8005178:	e003      	b.n	8005182 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	3301      	adds	r3, #1
 8005184:	069b      	lsls	r3, r3, #26
 8005186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x602>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	0e9b      	lsrs	r3, r3, #26
 800519c:	3301      	adds	r3, #1
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	e017      	b.n	80051da <HAL_ADC_ConfigChannel+0x632>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	fa93 f3a3 	rbit	r3, r3
 80051b6:	61bb      	str	r3, [r7, #24]
  return result;
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80051c2:	2320      	movs	r3, #32
 80051c4:	e003      	b.n	80051ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	3301      	adds	r3, #1
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2101      	movs	r1, #1
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	ea42 0103 	orr.w	r1, r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x65e>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	0e9b      	lsrs	r3, r3, #26
 80051f0:	3301      	adds	r3, #1
 80051f2:	f003 021f 	and.w	r2, r3, #31
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	3b1e      	subs	r3, #30
 80051fe:	051b      	lsls	r3, r3, #20
 8005200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005204:	e01e      	b.n	8005244 <HAL_ADC_ConfigChannel+0x69c>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	60fb      	str	r3, [r7, #12]
  return result;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800521e:	2320      	movs	r3, #32
 8005220:	e006      	b.n	8005230 <HAL_ADC_ConfigChannel+0x688>
 8005222:	bf00      	nop
 8005224:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fab3 f383 	clz	r3, r3
 800522e:	b2db      	uxtb	r3, r3
 8005230:	3301      	adds	r3, #1
 8005232:	f003 021f 	and.w	r2, r3, #31
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	3b1e      	subs	r3, #30
 800523e:	051b      	lsls	r3, r3, #20
 8005240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005244:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800524a:	4619      	mov	r1, r3
 800524c:	f7ff f9ac 	bl	80045a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_ADC_ConfigChannel+0x7a4>)
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d06c      	beq.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800525c:	483c      	ldr	r0, [pc, #240]	; (8005350 <HAL_ADC_ConfigChannel+0x7a8>)
 800525e:	f7ff f901 	bl	8004464 <LL_ADC_GetCommonPathInternalCh>
 8005262:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3a      	ldr	r2, [pc, #232]	; (8005354 <HAL_ADC_ConfigChannel+0x7ac>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d127      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d121      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a35      	ldr	r2, [pc, #212]	; (8005358 <HAL_ADC_ConfigChannel+0x7b0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d157      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800528a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800528e:	4619      	mov	r1, r3
 8005290:	482f      	ldr	r0, [pc, #188]	; (8005350 <HAL_ADC_ConfigChannel+0x7a8>)
 8005292:	f7ff f8d4 	bl	800443e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <HAL_ADC_ConfigChannel+0x7b4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	4a30      	ldr	r2, [pc, #192]	; (8005360 <HAL_ADC_ConfigChannel+0x7b8>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	4613      	mov	r3, r2
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80052b0:	e002      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f9      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052be:	e03a      	b.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_ADC_ConfigChannel+0x7bc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d113      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <HAL_ADC_ConfigChannel+0x7b0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d12a      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052e8:	4619      	mov	r1, r3
 80052ea:	4819      	ldr	r0, [pc, #100]	; (8005350 <HAL_ADC_ConfigChannel+0x7a8>)
 80052ec:	f7ff f8a7 	bl	800443e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052f0:	e021      	b.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <HAL_ADC_ConfigChannel+0x7c0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d11c      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d116      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a12      	ldr	r2, [pc, #72]	; (8005358 <HAL_ADC_ConfigChannel+0x7b0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d111      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005316:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800531a:	4619      	mov	r1, r3
 800531c:	480c      	ldr	r0, [pc, #48]	; (8005350 <HAL_ADC_ConfigChannel+0x7a8>)
 800531e:	f7ff f88e 	bl	800443e <LL_ADC_SetCommonPathInternalCh>
 8005322:	e008      	b.n	8005336 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800533e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005342:	4618      	mov	r0, r3
 8005344:	37d8      	adds	r7, #216	; 0xd8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	80080000 	.word	0x80080000
 8005350:	50040300 	.word	0x50040300
 8005354:	c7520000 	.word	0xc7520000
 8005358:	50040000 	.word	0x50040000
 800535c:	20000000 	.word	0x20000000
 8005360:	053e2d63 	.word	0x053e2d63
 8005364:	cb840000 	.word	0xcb840000
 8005368:	80000001 	.word	0x80000001

0800536c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff f9d9 	bl	8004734 <LL_ADC_IsEnabled>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d169      	bne.n	800545c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <ADC_Enable+0xfc>)
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	f043 0210 	orr.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	f043 0201 	orr.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e055      	b.n	800545e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f994 	bl	80046e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053bc:	482b      	ldr	r0, [pc, #172]	; (800546c <ADC_Enable+0x100>)
 80053be:	f7ff f851 	bl	8004464 <LL_ADC_GetCommonPathInternalCh>
 80053c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d013      	beq.n	80053f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053cc:	4b28      	ldr	r3, [pc, #160]	; (8005470 <ADC_Enable+0x104>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	099b      	lsrs	r3, r3, #6
 80053d2:	4a28      	ldr	r2, [pc, #160]	; (8005474 <ADC_Enable+0x108>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	099b      	lsrs	r3, r3, #6
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	4613      	mov	r3, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053e6:	e002      	b.n	80053ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f9      	bne.n	80053e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80053f4:	f7ff f804 	bl	8004400 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053fa:	e028      	b.n	800544e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff f997 	bl	8004734 <LL_ADC_IsEnabled>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff f967 	bl	80046e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005416:	f7fe fff3 	bl	8004400 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d914      	bls.n	800544e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d00d      	beq.n	800544e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f043 0210 	orr.w	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	f043 0201 	orr.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e007      	b.n	800545e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d1cf      	bne.n	80053fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	8000003f 	.word	0x8000003f
 800546c:	50040300 	.word	0x50040300
 8005470:	20000000 	.word	0x20000000
 8005474:	053e2d63 	.word	0x053e2d63

08005478 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff f968 	bl	800475a <LL_ADC_IsDisableOngoing>
 800548a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff f94f 	bl	8004734 <LL_ADC_IsEnabled>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d047      	beq.n	800552c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d144      	bne.n	800552c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 030d 	and.w	r3, r3, #13
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10c      	bne.n	80054ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f929 	bl	800470c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2203      	movs	r2, #3
 80054c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054c2:	f7fe ff9d 	bl	8004400 <HAL_GetTick>
 80054c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054c8:	e029      	b.n	800551e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f043 0210 	orr.w	r2, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e023      	b.n	800552e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054e6:	f7fe ff8b 	bl	8004400 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d914      	bls.n	800551e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f043 0210 	orr.w	r2, r3, #16
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	f043 0201 	orr.w	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e007      	b.n	800552e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1dc      	bne.n	80054e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800554c:	2b00      	cmp	r3, #0
 800554e:	d14b      	bne.n	80055e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d021      	beq.n	80055ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe ffdb 	bl	800452a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d032      	beq.n	80055e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d12b      	bne.n	80055e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d11f      	bne.n	80055e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	f043 0201 	orr.w	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
 80055ac:	e018      	b.n	80055e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d111      	bne.n	80055e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f043 0201 	orr.w	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7fd fd2b 	bl	800303c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055e6:	e00e      	b.n	8005606 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff facd 	bl	8004b94 <HAL_ADC_ErrorCallback>
}
 80055fa:	e004      	b.n	8005606 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff faaf 	bl	8004b80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	f043 0204 	orr.w	r2, r3, #4
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff fa9f 	bl	8004b94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <LL_ADC_StartCalibration>:
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800567a:	4313      	orrs	r3, r2
 800567c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <LL_ADC_IsCalibrationOnGoing>:
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a4:	d101      	bne.n	80056aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e04d      	b.n	8005770 <HAL_ADCEx_Calibration_Start+0xb8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fecb 	bl	8005478 <ADC_Disable>
 80056e2:	4603      	mov	r3, r0
 80056e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d136      	bne.n	800575a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056f4:	f023 0302 	bic.w	r3, r3, #2
 80056f8:	f043 0202 	orr.w	r2, r3, #2
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff ffa9 	bl	800565e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800570c:	e014      	b.n	8005738 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3301      	adds	r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800571a:	d30d      	bcc.n	8005738 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	f023 0312 	bic.w	r3, r3, #18
 8005724:	f043 0210 	orr.w	r2, r3, #16
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e01b      	b.n	8005770 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ffa7 	bl	8005690 <LL_ADC_IsCalibrationOnGoing>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e2      	bne.n	800570e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	f043 0201 	orr.w	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
 8005758:	e005      	b.n	8005766 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	f043 0210 	orr.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <__NVIC_SetPriorityGrouping+0x44>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005794:	4013      	ands	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057aa:	4a04      	ldr	r2, [pc, #16]	; (80057bc <__NVIC_SetPriorityGrouping+0x44>)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	60d3      	str	r3, [r2, #12]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <__NVIC_GetPriorityGrouping+0x18>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	f003 0307 	and.w	r3, r3, #7
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	e000ed00 	.word	0xe000ed00

080057dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	db0b      	blt.n	8005806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	f003 021f 	and.w	r2, r3, #31
 80057f4:	4907      	ldr	r1, [pc, #28]	; (8005814 <__NVIC_EnableIRQ+0x38>)
 80057f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	2001      	movs	r0, #1
 80057fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	e000e100 	.word	0xe000e100

08005818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005828:	2b00      	cmp	r3, #0
 800582a:	db0a      	blt.n	8005842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	490c      	ldr	r1, [pc, #48]	; (8005864 <__NVIC_SetPriority+0x4c>)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	0112      	lsls	r2, r2, #4
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	440b      	add	r3, r1
 800583c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005840:	e00a      	b.n	8005858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4908      	ldr	r1, [pc, #32]	; (8005868 <__NVIC_SetPriority+0x50>)
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	3b04      	subs	r3, #4
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	440b      	add	r3, r1
 8005856:	761a      	strb	r2, [r3, #24]
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	e000e100 	.word	0xe000e100
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f1c3 0307 	rsb	r3, r3, #7
 8005886:	2b04      	cmp	r3, #4
 8005888:	bf28      	it	cs
 800588a:	2304      	movcs	r3, #4
 800588c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3304      	adds	r3, #4
 8005892:	2b06      	cmp	r3, #6
 8005894:	d902      	bls.n	800589c <NVIC_EncodePriority+0x30>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3b03      	subs	r3, #3
 800589a:	e000      	b.n	800589e <NVIC_EncodePriority+0x32>
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43da      	mvns	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	401a      	ands	r2, r3
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	43d9      	mvns	r1, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c4:	4313      	orrs	r3, r2
         );
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3724      	adds	r7, #36	; 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058e4:	d301      	bcc.n	80058ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058e6:	2301      	movs	r3, #1
 80058e8:	e00f      	b.n	800590a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ea:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <SysTick_Config+0x40>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058f2:	210f      	movs	r1, #15
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f8:	f7ff ff8e 	bl	8005818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <SysTick_Config+0x40>)
 80058fe:	2200      	movs	r2, #0
 8005900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <SysTick_Config+0x40>)
 8005904:	2207      	movs	r2, #7
 8005906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	e000e010 	.word	0xe000e010

08005918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ff29 	bl	8005778 <__NVIC_SetPriorityGrouping>
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005940:	f7ff ff3e 	bl	80057c0 <__NVIC_GetPriorityGrouping>
 8005944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff ff8e 	bl	800586c <NVIC_EncodePriority>
 8005950:	4602      	mov	r2, r0
 8005952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff ff5d 	bl	8005818 <__NVIC_SetPriority>
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	4603      	mov	r3, r0
 800596e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff ff31 	bl	80057dc <__NVIC_EnableIRQ>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ffa2 	bl	80058d4 <SysTick_Config>
 8005990:	4603      	mov	r3, r0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e098      	b.n	8005ae0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	4b4d      	ldr	r3, [pc, #308]	; (8005aec <HAL_DMA_Init+0x150>)
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d80f      	bhi.n	80059da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	4b4b      	ldr	r3, [pc, #300]	; (8005af0 <HAL_DMA_Init+0x154>)
 80059c2:	4413      	add	r3, r2
 80059c4:	4a4b      	ldr	r2, [pc, #300]	; (8005af4 <HAL_DMA_Init+0x158>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	091b      	lsrs	r3, r3, #4
 80059cc:	009a      	lsls	r2, r3, #2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a48      	ldr	r2, [pc, #288]	; (8005af8 <HAL_DMA_Init+0x15c>)
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
 80059d8:	e00e      	b.n	80059f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	4b46      	ldr	r3, [pc, #280]	; (8005afc <HAL_DMA_Init+0x160>)
 80059e2:	4413      	add	r3, r2
 80059e4:	4a43      	ldr	r2, [pc, #268]	; (8005af4 <HAL_DMA_Init+0x158>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	009a      	lsls	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a42      	ldr	r2, [pc, #264]	; (8005b00 <HAL_DMA_Init+0x164>)
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a52:	d039      	beq.n	8005ac8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <HAL_DMA_Init+0x15c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d11a      	bne.n	8005a94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a5e:	4b29      	ldr	r3, [pc, #164]	; (8005b04 <HAL_DMA_Init+0x168>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	f003 031c 	and.w	r3, r3, #28
 8005a6a:	210f      	movs	r1, #15
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	4924      	ldr	r1, [pc, #144]	; (8005b04 <HAL_DMA_Init+0x168>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a78:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <HAL_DMA_Init+0x168>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a84:	f003 031c 	and.w	r3, r3, #28
 8005a88:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8c:	491d      	ldr	r1, [pc, #116]	; (8005b04 <HAL_DMA_Init+0x168>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]
 8005a92:	e019      	b.n	8005ac8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <HAL_DMA_Init+0x16c>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9c:	f003 031c 	and.w	r3, r3, #28
 8005aa0:	210f      	movs	r1, #15
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	4917      	ldr	r1, [pc, #92]	; (8005b08 <HAL_DMA_Init+0x16c>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <HAL_DMA_Init+0x16c>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6859      	ldr	r1, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f003 031c 	and.w	r3, r3, #28
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	4911      	ldr	r1, [pc, #68]	; (8005b08 <HAL_DMA_Init+0x16c>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40020407 	.word	0x40020407
 8005af0:	bffdfff8 	.word	0xbffdfff8
 8005af4:	cccccccd 	.word	0xcccccccd
 8005af8:	40020000 	.word	0x40020000
 8005afc:	bffdfbf8 	.word	0xbffdfbf8
 8005b00:	40020400 	.word	0x40020400
 8005b04:	400200a8 	.word	0x400200a8
 8005b08:	400204a8 	.word	0x400204a8

08005b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_DMA_Start_IT+0x20>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e04b      	b.n	8005bc4 <HAL_DMA_Start_IT+0xb8>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d13a      	bne.n	8005bb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f95f 	bl	8005e28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 020e 	orr.w	r2, r2, #14
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e00f      	b.n	8005ba4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0204 	bic.w	r2, r2, #4
 8005b92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 020a 	orr.w	r2, r2, #10
 8005ba2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e005      	b.n	8005bc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d008      	beq.n	8005bf6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2204      	movs	r2, #4
 8005be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e022      	b.n	8005c3c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 020e 	bic.w	r2, r2, #14
 8005c04:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	f003 021c 	and.w	r2, r3, #28
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f202 	lsl.w	r2, r1, r2
 8005c28:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d005      	beq.n	8005c6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	e029      	b.n	8005cc0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 020e 	bic.w	r2, r2, #14
 8005c7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	f003 021c 	and.w	r2, r3, #28
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
    }
  }
  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	f003 031c 	and.w	r3, r3, #28
 8005cea:	2204      	movs	r2, #4
 8005cec:	409a      	lsls	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d026      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x7a>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d021      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0204 	bic.w	r2, r2, #4
 8005d1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	f003 021c 	and.w	r2, r3, #28
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2104      	movs	r1, #4
 8005d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d071      	beq.n	8005e1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d42:	e06c      	b.n	8005e1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	f003 031c 	and.w	r3, r3, #28
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02e      	beq.n	8005db6 <HAL_DMA_IRQHandler+0xec>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d029      	beq.n	8005db6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 020a 	bic.w	r2, r2, #10
 8005d7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	f003 021c 	and.w	r2, r3, #28
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	2102      	movs	r1, #2
 8005d96:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d038      	beq.n	8005e1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005db4:	e033      	b.n	8005e1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	f003 031c 	and.w	r3, r3, #28
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d02a      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x156>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d025      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 020e 	bic.w	r2, r2, #14
 8005de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	f003 021c 	and.w	r2, r3, #28
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	2101      	movs	r1, #1
 8005df2:	fa01 f202 	lsl.w	r2, r1, r2
 8005df6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
}
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f003 021c 	and.w	r2, r3, #28
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	2101      	movs	r1, #1
 8005e44:	fa01 f202 	lsl.w	r2, r1, r2
 8005e48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d108      	bne.n	8005e6c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e6a:	e007      	b.n	8005e7c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	60da      	str	r2, [r3, #12]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e96:	e154      	b.n	8006142 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8146 	beq.w	800613c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d005      	beq.n	8005ec8 <HAL_GPIO_Init+0x40>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d130      	bne.n	8005f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4013      	ands	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005efe:	2201      	movs	r2, #1
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	091b      	lsrs	r3, r3, #4
 8005f14:	f003 0201 	and.w	r2, r3, #1
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d017      	beq.n	8005f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	2203      	movs	r2, #3
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d123      	bne.n	8005fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	08da      	lsrs	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3208      	adds	r2, #8
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	220f      	movs	r2, #15
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4013      	ands	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	08da      	lsrs	r2, r3, #3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3208      	adds	r2, #8
 8005fb4:	6939      	ldr	r1, [r7, #16]
 8005fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 0203 	and.w	r2, r3, #3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80a0 	beq.w	800613c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ffc:	4b58      	ldr	r3, [pc, #352]	; (8006160 <HAL_GPIO_Init+0x2d8>)
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	4a57      	ldr	r2, [pc, #348]	; (8006160 <HAL_GPIO_Init+0x2d8>)
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	6613      	str	r3, [r2, #96]	; 0x60
 8006008:	4b55      	ldr	r3, [pc, #340]	; (8006160 <HAL_GPIO_Init+0x2d8>)
 800600a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006014:	4a53      	ldr	r2, [pc, #332]	; (8006164 <HAL_GPIO_Init+0x2dc>)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	089b      	lsrs	r3, r3, #2
 800601a:	3302      	adds	r3, #2
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	220f      	movs	r2, #15
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800603e:	d019      	beq.n	8006074 <HAL_GPIO_Init+0x1ec>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a49      	ldr	r2, [pc, #292]	; (8006168 <HAL_GPIO_Init+0x2e0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d013      	beq.n	8006070 <HAL_GPIO_Init+0x1e8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a48      	ldr	r2, [pc, #288]	; (800616c <HAL_GPIO_Init+0x2e4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00d      	beq.n	800606c <HAL_GPIO_Init+0x1e4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a47      	ldr	r2, [pc, #284]	; (8006170 <HAL_GPIO_Init+0x2e8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d007      	beq.n	8006068 <HAL_GPIO_Init+0x1e0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a46      	ldr	r2, [pc, #280]	; (8006174 <HAL_GPIO_Init+0x2ec>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d101      	bne.n	8006064 <HAL_GPIO_Init+0x1dc>
 8006060:	2304      	movs	r3, #4
 8006062:	e008      	b.n	8006076 <HAL_GPIO_Init+0x1ee>
 8006064:	2307      	movs	r3, #7
 8006066:	e006      	b.n	8006076 <HAL_GPIO_Init+0x1ee>
 8006068:	2303      	movs	r3, #3
 800606a:	e004      	b.n	8006076 <HAL_GPIO_Init+0x1ee>
 800606c:	2302      	movs	r3, #2
 800606e:	e002      	b.n	8006076 <HAL_GPIO_Init+0x1ee>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <HAL_GPIO_Init+0x1ee>
 8006074:	2300      	movs	r3, #0
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	f002 0203 	and.w	r2, r2, #3
 800607c:	0092      	lsls	r2, r2, #2
 800607e:	4093      	lsls	r3, r2
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006086:	4937      	ldr	r1, [pc, #220]	; (8006164 <HAL_GPIO_Init+0x2dc>)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	3302      	adds	r3, #2
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006094:	4b38      	ldr	r3, [pc, #224]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	43db      	mvns	r3, r3
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4013      	ands	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80060b8:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80060be:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	43db      	mvns	r3, r3
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4013      	ands	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060e2:	4a25      	ldr	r2, [pc, #148]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80060e8:	4b23      	ldr	r3, [pc, #140]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4013      	ands	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800610c:	4a1a      	ldr	r2, [pc, #104]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006112:	4b19      	ldr	r3, [pc, #100]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	43db      	mvns	r3, r3
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4013      	ands	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006136:	4a10      	ldr	r2, [pc, #64]	; (8006178 <HAL_GPIO_Init+0x2f0>)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	3301      	adds	r3, #1
 8006140:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f aea3 	bne.w	8005e98 <HAL_GPIO_Init+0x10>
  }
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40021000 	.word	0x40021000
 8006164:	40010000 	.word	0x40010000
 8006168:	48000400 	.word	0x48000400
 800616c:	48000800 	.word	0x48000800
 8006170:	48000c00 	.word	0x48000c00
 8006174:	48001000 	.word	0x48001000
 8006178:	40010400 	.word	0x40010400

0800617c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	807b      	strh	r3, [r7, #2]
 8006188:	4613      	mov	r3, r2
 800618a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800618c:	787b      	ldrb	r3, [r7, #1]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006198:	e002      	b.n	80061a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800619a:	887a      	ldrh	r2, [r7, #2]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40007000 	.word	0x40007000

080061c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d6:	d130      	bne.n	800623a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061d8:	4b23      	ldr	r3, [pc, #140]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e4:	d038      	beq.n	8006258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e6:	4b20      	ldr	r3, [pc, #128]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2232      	movs	r2, #50	; 0x32
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
 8006200:	4a1b      	ldr	r2, [pc, #108]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	0c9b      	lsrs	r3, r3, #18
 8006208:	3301      	adds	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620c:	e002      	b.n	8006214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3b01      	subs	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006214:	4b14      	ldr	r3, [pc, #80]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006220:	d102      	bne.n	8006228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f2      	bne.n	800620e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006228:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006234:	d110      	bne.n	8006258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e00f      	b.n	800625a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006246:	d007      	beq.n	8006258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006250:	4a05      	ldr	r2, [pc, #20]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40007000 	.word	0x40007000
 800626c:	20000000 	.word	0x20000000
 8006270:	431bde83 	.word	0x431bde83

08006274 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f000 bc02 	b.w	8006a8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006288:	4b96      	ldr	r3, [pc, #600]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 030c 	and.w	r3, r3, #12
 8006290:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006292:	4b94      	ldr	r3, [pc, #592]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80e4 	beq.w	8006472 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <HAL_RCC_OscConfig+0x4c>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	f040 808b 	bne.w	80063ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	f040 8087 	bne.w	80063ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062c0:	4b88      	ldr	r3, [pc, #544]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_RCC_OscConfig+0x64>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e3d9      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	4b81      	ldr	r3, [pc, #516]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <HAL_RCC_OscConfig+0x7e>
 80062e8:	4b7e      	ldr	r3, [pc, #504]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f0:	e005      	b.n	80062fe <HAL_RCC_OscConfig+0x8a>
 80062f2:	4b7c      	ldr	r3, [pc, #496]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80062f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062fe:	4293      	cmp	r3, r2
 8006300:	d223      	bcs.n	800634a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fd8c 	bl	8006e24 <RCC_SetFlashLatencyFromMSIRange>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e3ba      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006316:	4b73      	ldr	r3, [pc, #460]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a72      	ldr	r2, [pc, #456]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800631c:	f043 0308 	orr.w	r3, r3, #8
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b70      	ldr	r3, [pc, #448]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	496d      	ldr	r1, [pc, #436]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006334:	4b6b      	ldr	r3, [pc, #428]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	4968      	ldr	r1, [pc, #416]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]
 8006348:	e025      	b.n	8006396 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800634a:	4b66      	ldr	r3, [pc, #408]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a65      	ldr	r2, [pc, #404]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006350:	f043 0308 	orr.w	r3, r3, #8
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4b63      	ldr	r3, [pc, #396]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	4960      	ldr	r1, [pc, #384]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006364:	4313      	orrs	r3, r2
 8006366:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006368:	4b5e      	ldr	r3, [pc, #376]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	495b      	ldr	r1, [pc, #364]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd4c 	bl	8006e24 <RCC_SetFlashLatencyFromMSIRange>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e37a      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006396:	f000 fc81 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 800639a:	4602      	mov	r2, r0
 800639c:	4b51      	ldr	r3, [pc, #324]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	4950      	ldr	r1, [pc, #320]	; (80064e8 <HAL_RCC_OscConfig+0x274>)
 80063a8:	5ccb      	ldrb	r3, [r1, r3]
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	4a4e      	ldr	r2, [pc, #312]	; (80064ec <HAL_RCC_OscConfig+0x278>)
 80063b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063b6:	4b4e      	ldr	r3, [pc, #312]	; (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd ffd0 	bl	8004360 <HAL_InitTick>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d052      	beq.n	8006470 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	e35e      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d032      	beq.n	800643c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063d6:	4b43      	ldr	r3, [pc, #268]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a42      	ldr	r2, [pc, #264]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063e2:	f7fe f80d 	bl	8004400 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063ea:	f7fe f809 	bl	8004400 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e347      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063fc:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006408:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a35      	ldr	r2, [pc, #212]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800640e:	f043 0308 	orr.w	r3, r3, #8
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	4b33      	ldr	r3, [pc, #204]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	4930      	ldr	r1, [pc, #192]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006422:	4313      	orrs	r3, r2
 8006424:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006426:	4b2f      	ldr	r3, [pc, #188]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	492b      	ldr	r1, [pc, #172]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006436:	4313      	orrs	r3, r2
 8006438:	604b      	str	r3, [r1, #4]
 800643a:	e01a      	b.n	8006472 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800643c:	4b29      	ldr	r3, [pc, #164]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006448:	f7fd ffda 	bl	8004400 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006450:	f7fd ffd6 	bl	8004400 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e314      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006462:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x1dc>
 800646e:	e000      	b.n	8006472 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d073      	beq.n	8006566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d005      	beq.n	8006490 <HAL_RCC_OscConfig+0x21c>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d10e      	bne.n	80064a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b03      	cmp	r3, #3
 800648e:	d10b      	bne.n	80064a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006490:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d063      	beq.n	8006564 <HAL_RCC_OscConfig+0x2f0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d15f      	bne.n	8006564 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e2f1      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d106      	bne.n	80064c0 <HAL_RCC_OscConfig+0x24c>
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a0b      	ldr	r2, [pc, #44]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80064b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	e025      	b.n	800650c <HAL_RCC_OscConfig+0x298>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c8:	d114      	bne.n	80064f4 <HAL_RCC_OscConfig+0x280>
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a05      	ldr	r2, [pc, #20]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80064d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a02      	ldr	r2, [pc, #8]	; (80064e4 <HAL_RCC_OscConfig+0x270>)
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	e013      	b.n	800650c <HAL_RCC_OscConfig+0x298>
 80064e4:	40021000 	.word	0x40021000
 80064e8:	0800d8e0 	.word	0x0800d8e0
 80064ec:	20000000 	.word	0x20000000
 80064f0:	20000004 	.word	0x20000004
 80064f4:	4ba0      	ldr	r3, [pc, #640]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a9f      	ldr	r2, [pc, #636]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80064fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	4b9d      	ldr	r3, [pc, #628]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a9c      	ldr	r2, [pc, #624]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d013      	beq.n	800653c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006514:	f7fd ff74 	bl	8004400 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800651c:	f7fd ff70 	bl	8004400 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b64      	cmp	r3, #100	; 0x64
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e2ae      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800652e:	4b92      	ldr	r3, [pc, #584]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0x2a8>
 800653a:	e014      	b.n	8006566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fd ff60 	bl	8004400 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006544:	f7fd ff5c 	bl	8004400 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b64      	cmp	r3, #100	; 0x64
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e29a      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006556:	4b88      	ldr	r3, [pc, #544]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0x2d0>
 8006562:	e000      	b.n	8006566 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d060      	beq.n	8006634 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b04      	cmp	r3, #4
 8006576:	d005      	beq.n	8006584 <HAL_RCC_OscConfig+0x310>
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b0c      	cmp	r3, #12
 800657c:	d119      	bne.n	80065b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d116      	bne.n	80065b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006584:	4b7c      	ldr	r3, [pc, #496]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_RCC_OscConfig+0x328>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e277      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659c:	4b76      	ldr	r3, [pc, #472]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	4973      	ldr	r1, [pc, #460]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065b0:	e040      	b.n	8006634 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d023      	beq.n	8006602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ba:	4b6f      	ldr	r3, [pc, #444]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a6e      	ldr	r2, [pc, #440]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80065c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c6:	f7fd ff1b 	bl	8004400 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ce:	f7fd ff17 	bl	8004400 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e255      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065e0:	4b65      	ldr	r3, [pc, #404]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ec:	4b62      	ldr	r3, [pc, #392]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	061b      	lsls	r3, r3, #24
 80065fa:	495f      	ldr	r1, [pc, #380]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
 8006600:	e018      	b.n	8006634 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006602:	4b5d      	ldr	r3, [pc, #372]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a5c      	ldr	r2, [pc, #368]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800660c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fd fef7 	bl	8004400 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006616:	f7fd fef3 	bl	8004400 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e231      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006628:	4b53      	ldr	r3, [pc, #332]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d03c      	beq.n	80066ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01c      	beq.n	8006682 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 800664a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664e:	4a4a      	ldr	r2, [pc, #296]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006658:	f7fd fed2 	bl	8004400 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006660:	f7fd fece 	bl	8004400 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e20c      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006672:	4b41      	ldr	r3, [pc, #260]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0ef      	beq.n	8006660 <HAL_RCC_OscConfig+0x3ec>
 8006680:	e01b      	b.n	80066ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006682:	4b3d      	ldr	r3, [pc, #244]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006688:	4a3b      	ldr	r2, [pc, #236]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006692:	f7fd feb5 	bl	8004400 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800669a:	f7fd feb1 	bl	8004400 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e1ef      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066ac:	4b32      	ldr	r3, [pc, #200]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80066ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1ef      	bne.n	800669a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80a6 	beq.w	8006814 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c8:	2300      	movs	r3, #0
 80066ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066cc:	4b2a      	ldr	r3, [pc, #168]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d8:	4b27      	ldr	r3, [pc, #156]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80066da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066dc:	4a26      	ldr	r2, [pc, #152]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80066de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e2:	6593      	str	r3, [r2, #88]	; 0x58
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ec:	60bb      	str	r3, [r7, #8]
 80066ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f0:	2301      	movs	r3, #1
 80066f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f4:	4b21      	ldr	r3, [pc, #132]	; (800677c <HAL_RCC_OscConfig+0x508>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d118      	bne.n	8006732 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006700:	4b1e      	ldr	r3, [pc, #120]	; (800677c <HAL_RCC_OscConfig+0x508>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1d      	ldr	r2, [pc, #116]	; (800677c <HAL_RCC_OscConfig+0x508>)
 8006706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800670c:	f7fd fe78 	bl	8004400 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006714:	f7fd fe74 	bl	8004400 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e1b2      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <HAL_RCC_OscConfig+0x508>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d108      	bne.n	800674c <HAL_RCC_OscConfig+0x4d8>
 800673a:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 800673c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006740:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800674a:	e029      	b.n	80067a0 <HAL_RCC_OscConfig+0x52c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b05      	cmp	r3, #5
 8006752:	d115      	bne.n	8006780 <HAL_RCC_OscConfig+0x50c>
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 800675c:	f043 0304 	orr.w	r3, r3, #4
 8006760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006764:	4b04      	ldr	r3, [pc, #16]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	4a03      	ldr	r2, [pc, #12]	; (8006778 <HAL_RCC_OscConfig+0x504>)
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006774:	e014      	b.n	80067a0 <HAL_RCC_OscConfig+0x52c>
 8006776:	bf00      	nop
 8006778:	40021000 	.word	0x40021000
 800677c:	40007000 	.word	0x40007000
 8006780:	4b9a      	ldr	r3, [pc, #616]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	4a99      	ldr	r2, [pc, #612]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006790:	4b96      	ldr	r3, [pc, #600]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006796:	4a95      	ldr	r2, [pc, #596]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d016      	beq.n	80067d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fd fe2a 	bl	8004400 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ae:	e00a      	b.n	80067c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b0:	f7fd fe26 	bl	8004400 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80067be:	4293      	cmp	r3, r2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e162      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c6:	4b89      	ldr	r3, [pc, #548]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80067c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0ed      	beq.n	80067b0 <HAL_RCC_OscConfig+0x53c>
 80067d4:	e015      	b.n	8006802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d6:	f7fd fe13 	bl	8004400 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067dc:	e00a      	b.n	80067f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067de:	f7fd fe0f 	bl	8004400 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e14b      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f4:	4b7d      	ldr	r3, [pc, #500]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ed      	bne.n	80067de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006802:	7ffb      	ldrb	r3, [r7, #31]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d105      	bne.n	8006814 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006808:	4b78      	ldr	r3, [pc, #480]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 800680a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680c:	4a77      	ldr	r2, [pc, #476]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 800680e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006812:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d03c      	beq.n	800689a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01c      	beq.n	8006862 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006828:	4b70      	ldr	r3, [pc, #448]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 800682a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800682e:	4a6f      	ldr	r2, [pc, #444]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fd fde2 	bl	8004400 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006840:	f7fd fdde 	bl	8004400 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e11c      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006852:	4b66      	ldr	r3, [pc, #408]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ef      	beq.n	8006840 <HAL_RCC_OscConfig+0x5cc>
 8006860:	e01b      	b.n	800689a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006862:	4b62      	ldr	r3, [pc, #392]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006868:	4a60      	ldr	r2, [pc, #384]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006872:	f7fd fdc5 	bl	8004400 <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800687a:	f7fd fdc1 	bl	8004400 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e0ff      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800688c:	4b57      	ldr	r3, [pc, #348]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 800688e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ef      	bne.n	800687a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80f3 	beq.w	8006a8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	f040 80c9 	bne.w	8006a40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068ae:	4b4f      	ldr	r3, [pc, #316]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f003 0203 	and.w	r2, r3, #3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d12c      	bne.n	800691c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	3b01      	subs	r3, #1
 80068ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d123      	bne.n	800691c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d11b      	bne.n	800691c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d113      	bne.n	800691c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	3b01      	subs	r3, #1
 8006902:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006904:	429a      	cmp	r2, r3
 8006906:	d109      	bne.n	800691c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	3b01      	subs	r3, #1
 8006916:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006918:	429a      	cmp	r2, r3
 800691a:	d06b      	beq.n	80069f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b0c      	cmp	r3, #12
 8006920:	d062      	beq.n	80069e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006922:	4b32      	ldr	r3, [pc, #200]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e0ac      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006932:	4b2e      	ldr	r3, [pc, #184]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2d      	ldr	r2, [pc, #180]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800693e:	f7fd fd5f 	bl	8004400 <HAL_GetTick>
 8006942:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006944:	e008      	b.n	8006958 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006946:	f7fd fd5b 	bl	8004400 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e099      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006958:	4b24      	ldr	r3, [pc, #144]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f0      	bne.n	8006946 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006964:	4b21      	ldr	r3, [pc, #132]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <HAL_RCC_OscConfig+0x77c>)
 800696a:	4013      	ands	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006974:	3a01      	subs	r2, #1
 8006976:	0112      	lsls	r2, r2, #4
 8006978:	4311      	orrs	r1, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800697e:	0212      	lsls	r2, r2, #8
 8006980:	4311      	orrs	r1, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006986:	0852      	lsrs	r2, r2, #1
 8006988:	3a01      	subs	r2, #1
 800698a:	0552      	lsls	r2, r2, #21
 800698c:	4311      	orrs	r1, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006992:	0852      	lsrs	r2, r2, #1
 8006994:	3a01      	subs	r2, #1
 8006996:	0652      	lsls	r2, r2, #25
 8006998:	4311      	orrs	r1, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800699e:	06d2      	lsls	r2, r2, #27
 80069a0:	430a      	orrs	r2, r1
 80069a2:	4912      	ldr	r1, [pc, #72]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069a8:	4b10      	ldr	r3, [pc, #64]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a0f      	ldr	r2, [pc, #60]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80069ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80069ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069c0:	f7fd fd1e 	bl	8004400 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fd fd1a 	bl	8004400 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e058      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069da:	4b04      	ldr	r3, [pc, #16]	; (80069ec <HAL_RCC_OscConfig+0x778>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f0      	beq.n	80069c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069e6:	e050      	b.n	8006a8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e04f      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
 80069ec:	40021000 	.word	0x40021000
 80069f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f4:	4b27      	ldr	r3, [pc, #156]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d144      	bne.n	8006a8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a00:	4b24      	ldr	r3, [pc, #144]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a0c:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a20      	ldr	r2, [pc, #128]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a18:	f7fd fcf2 	bl	8004400 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a20:	f7fd fcee 	bl	8004400 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e02c      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a32:	4b18      	ldr	r3, [pc, #96]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0x7ac>
 8006a3e:	e024      	b.n	8006a8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b0c      	cmp	r3, #12
 8006a44:	d01f      	beq.n	8006a86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a12      	ldr	r2, [pc, #72]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a52:	f7fd fcd5 	bl	8004400 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a5a:	f7fd fcd1 	bl	8004400 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e00f      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a6c:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f0      	bne.n	8006a5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	4905      	ldr	r1, [pc, #20]	; (8006a94 <HAL_RCC_OscConfig+0x820>)
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <HAL_RCC_OscConfig+0x824>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	60cb      	str	r3, [r1, #12]
 8006a84:	e001      	b.n	8006a8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40021000 	.word	0x40021000
 8006a98:	feeefffc 	.word	0xfeeefffc

08006a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0e7      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b75      	ldr	r3, [pc, #468]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d910      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b72      	ldr	r3, [pc, #456]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 0207 	bic.w	r2, r3, #7
 8006ac6:	4970      	ldr	r1, [pc, #448]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b6e      	ldr	r3, [pc, #440]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0cf      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d010      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	4b66      	ldr	r3, [pc, #408]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d908      	bls.n	8006b0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006afc:	4b63      	ldr	r3, [pc, #396]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4960      	ldr	r1, [pc, #384]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d04c      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b22:	4b5a      	ldr	r3, [pc, #360]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d121      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e0a6      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b3a:	4b54      	ldr	r3, [pc, #336]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d115      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e09a      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b52:	4b4e      	ldr	r3, [pc, #312]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e08e      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b62:	4b4a      	ldr	r3, [pc, #296]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e086      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b72:	4b46      	ldr	r3, [pc, #280]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 0203 	bic.w	r2, r3, #3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	4943      	ldr	r1, [pc, #268]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b84:	f7fd fc3c 	bl	8004400 <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b8c:	f7fd fc38 	bl	8004400 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e06e      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba2:	4b3a      	ldr	r3, [pc, #232]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 020c 	and.w	r2, r3, #12
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d1eb      	bne.n	8006b8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d010      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	4b31      	ldr	r3, [pc, #196]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d208      	bcs.n	8006be2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd0:	4b2e      	ldr	r3, [pc, #184]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	492b      	ldr	r1, [pc, #172]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006be2:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d210      	bcs.n	8006c12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf0:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f023 0207 	bic.w	r2, r3, #7
 8006bf8:	4923      	ldr	r1, [pc, #140]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c00:	4b21      	ldr	r3, [pc, #132]	; (8006c88 <HAL_RCC_ClockConfig+0x1ec>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d001      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e036      	b.n	8006c80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d008      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c1e:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	4918      	ldr	r1, [pc, #96]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c3c:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4910      	ldr	r1, [pc, #64]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c50:	f000 f824 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <HAL_RCC_ClockConfig+0x1f0>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	490b      	ldr	r1, [pc, #44]	; (8006c90 <HAL_RCC_ClockConfig+0x1f4>)
 8006c62:	5ccb      	ldrb	r3, [r1, r3]
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <HAL_RCC_ClockConfig+0x1f8>)
 8006c6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <HAL_RCC_ClockConfig+0x1fc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fd fb73 	bl	8004360 <HAL_InitTick>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40022000 	.word	0x40022000
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	0800d8e0 	.word	0x0800d8e0
 8006c94:	20000000 	.word	0x20000000
 8006c98:	20000004 	.word	0x20000004

08006c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	; 0x24
 8006ca0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006caa:	4b3e      	ldr	r3, [pc, #248]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 030c 	and.w	r3, r3, #12
 8006cb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cb4:	4b3b      	ldr	r3, [pc, #236]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b0c      	cmp	r3, #12
 8006cc8:	d121      	bne.n	8006d0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d11e      	bne.n	8006d0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006cd0:	4b34      	ldr	r3, [pc, #208]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d107      	bne.n	8006cec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006cdc:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e005      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006cec:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006cf8:	4a2b      	ldr	r2, [pc, #172]	; (8006da8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10d      	bne.n	8006d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d0c:	e00a      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d102      	bne.n	8006d1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <HAL_RCC_GetSysClockFreq+0x110>)
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e004      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d101      	bne.n	8006d24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d20:	4b23      	ldr	r3, [pc, #140]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b0c      	cmp	r3, #12
 8006d28:	d134      	bne.n	8006d94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d2a:	4b1e      	ldr	r3, [pc, #120]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d003      	beq.n	8006d42 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCC_GetSysClockFreq+0xac>
 8006d40:	e005      	b.n	8006d4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d42:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <HAL_RCC_GetSysClockFreq+0x110>)
 8006d44:	617b      	str	r3, [r7, #20]
      break;
 8006d46:	e005      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d48:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d4a:	617b      	str	r3, [r7, #20]
      break;
 8006d4c:	e002      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	617b      	str	r3, [r7, #20]
      break;
 8006d52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d54:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	3301      	adds	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d62:	4b10      	ldr	r3, [pc, #64]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	fb03 f202 	mul.w	r2, r3, r2
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	0e5b      	lsrs	r3, r3, #25
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	3301      	adds	r3, #1
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d94:	69bb      	ldr	r3, [r7, #24]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3724      	adds	r7, #36	; 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40021000 	.word	0x40021000
 8006da8:	0800d8f8 	.word	0x0800d8f8
 8006dac:	00f42400 	.word	0x00f42400
 8006db0:	007a1200 	.word	0x007a1200

08006db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dba:	681b      	ldr	r3, [r3, #0]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000000 	.word	0x20000000

08006dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006dd0:	f7ff fff0 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	4904      	ldr	r1, [pc, #16]	; (8006df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006de2:	5ccb      	ldrb	r3, [r1, r3]
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40021000 	.word	0x40021000
 8006df4:	0800d8f0 	.word	0x0800d8f0

08006df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006dfc:	f7ff ffda 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	0adb      	lsrs	r3, r3, #11
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	4904      	ldr	r1, [pc, #16]	; (8006e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e0e:	5ccb      	ldrb	r3, [r1, r3]
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40021000 	.word	0x40021000
 8006e20:	0800d8f0 	.word	0x0800d8f0

08006e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e30:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e3c:	f7ff f9b6 	bl	80061ac <HAL_PWREx_GetVoltageRange>
 8006e40:	6178      	str	r0, [r7, #20]
 8006e42:	e014      	b.n	8006e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e44:	4b25      	ldr	r3, [pc, #148]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	4a24      	ldr	r2, [pc, #144]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e50:	4b22      	ldr	r3, [pc, #136]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e5c:	f7ff f9a6 	bl	80061ac <HAL_PWREx_GetVoltageRange>
 8006e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e62:	4b1e      	ldr	r3, [pc, #120]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e66:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d10b      	bne.n	8006e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d919      	bls.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2ba0      	cmp	r3, #160	; 0xa0
 8006e80:	d902      	bls.n	8006e88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e82:	2302      	movs	r3, #2
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e013      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e88:	2301      	movs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e010      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d902      	bls.n	8006e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e94:	2303      	movs	r3, #3
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	e00a      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	d102      	bne.n	8006ea6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	e004      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b70      	cmp	r3, #112	; 0x70
 8006eaa:	d101      	bne.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006eac:	2301      	movs	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f023 0207 	bic.w	r2, r3, #7
 8006eb8:	4909      	ldr	r1, [pc, #36]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d001      	beq.n	8006ed2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40022000 	.word	0x40022000

08006ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006eec:	2300      	movs	r3, #0
 8006eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d031      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f08:	d01a      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f0e:	d814      	bhi.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f18:	d10f      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006f1a:	4b5d      	ldr	r3, [pc, #372]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	4a5c      	ldr	r2, [pc, #368]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f26:	e00c      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fa22 	bl	8007378 <RCCEx_PLLSAI1_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f38:	e003      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8006f3e:	e000      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f42:	7cfb      	ldrb	r3, [r7, #19]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f48:	4b51      	ldr	r3, [pc, #324]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	494e      	ldr	r1, [pc, #312]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f5e:	e001      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	7cfb      	ldrb	r3, [r7, #19]
 8006f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 809e 	beq.w	80070ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f72:	2300      	movs	r3, #0
 8006f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f76:	4b46      	ldr	r3, [pc, #280]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00d      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f8c:	4b40      	ldr	r3, [pc, #256]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	4a3f      	ldr	r2, [pc, #252]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f96:	6593      	str	r3, [r2, #88]	; 0x58
 8006f98:	4b3d      	ldr	r3, [pc, #244]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fa8:	4b3a      	ldr	r3, [pc, #232]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a39      	ldr	r2, [pc, #228]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fb4:	f7fd fa24 	bl	8004400 <HAL_GetTick>
 8006fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fba:	e009      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fbc:	f7fd fa20 	bl	8004400 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d902      	bls.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8006fce:	e005      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fd0:	4b30      	ldr	r3, [pc, #192]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0ef      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006fdc:	7cfb      	ldrb	r3, [r7, #19]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d15a      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fe2:	4b2b      	ldr	r3, [pc, #172]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01e      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d019      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007008:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800700a:	4b21      	ldr	r3, [pc, #132]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007010:	4a1f      	ldr	r2, [pc, #124]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800701a:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	4a1b      	ldr	r2, [pc, #108]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800702a:	4a19      	ldr	r2, [pc, #100]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d016      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fd f9e0 	bl	8004400 <HAL_GetTick>
 8007040:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007042:	e00b      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fd f9dc 	bl	8004400 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d902      	bls.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	74fb      	strb	r3, [r7, #19]
            break;
 800705a:	e006      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800705e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0ec      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800706a:	7cfb      	ldrb	r3, [r7, #19]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707e:	4904      	ldr	r1, [pc, #16]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007080:	4313      	orrs	r3, r2
 8007082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007086:	e009      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007088:	7cfb      	ldrb	r3, [r7, #19]
 800708a:	74bb      	strb	r3, [r7, #18]
 800708c:	e006      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000
 8007094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	7cfb      	ldrb	r3, [r7, #19]
 800709a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800709c:	7c7b      	ldrb	r3, [r7, #17]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d105      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a2:	4b8d      	ldr	r3, [pc, #564]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a6:	4a8c      	ldr	r2, [pc, #560]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ba:	4b87      	ldr	r3, [pc, #540]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c0:	f023 0203 	bic.w	r2, r3, #3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	4983      	ldr	r1, [pc, #524]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070dc:	4b7e      	ldr	r3, [pc, #504]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e2:	f023 020c 	bic.w	r2, r3, #12
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	497b      	ldr	r1, [pc, #492]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070fe:	4b76      	ldr	r3, [pc, #472]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007104:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	4972      	ldr	r1, [pc, #456]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007120:	4b6d      	ldr	r3, [pc, #436]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007126:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	496a      	ldr	r1, [pc, #424]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007142:	4b65      	ldr	r3, [pc, #404]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007150:	4961      	ldr	r1, [pc, #388]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007164:	4b5c      	ldr	r3, [pc, #368]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	4959      	ldr	r1, [pc, #356]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007186:	4b54      	ldr	r3, [pc, #336]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007194:	4950      	ldr	r1, [pc, #320]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071a8:	4b4b      	ldr	r3, [pc, #300]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	4948      	ldr	r1, [pc, #288]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ca:	4b43      	ldr	r3, [pc, #268]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	493f      	ldr	r1, [pc, #252]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d028      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071ec:	4b3a      	ldr	r3, [pc, #232]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fa:	4937      	ldr	r1, [pc, #220]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800720a:	d106      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800720c:	4b32      	ldr	r3, [pc, #200]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	4a31      	ldr	r2, [pc, #196]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007216:	60d3      	str	r3, [r2, #12]
 8007218:	e011      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007222:	d10c      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3304      	adds	r3, #4
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f8a4 	bl	8007378 <RCCEx_PLLSAI1_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007234:	7cfb      	ldrb	r3, [r7, #19]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800723a:	7cfb      	ldrb	r3, [r7, #19]
 800723c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d028      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800724a:	4b23      	ldr	r3, [pc, #140]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007250:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007258:	491f      	ldr	r1, [pc, #124]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007268:	d106      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800726a:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	4a1a      	ldr	r2, [pc, #104]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007274:	60d3      	str	r3, [r2, #12]
 8007276:	e011      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007280:	d10c      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3304      	adds	r3, #4
 8007286:	2101      	movs	r1, #1
 8007288:	4618      	mov	r0, r3
 800728a:	f000 f875 	bl	8007378 <RCCEx_PLLSAI1_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007292:	7cfb      	ldrb	r3, [r7, #19]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007298:	7cfb      	ldrb	r3, [r7, #19]
 800729a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02b      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b6:	4908      	ldr	r1, [pc, #32]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072c6:	d109      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072c8:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4a02      	ldr	r2, [pc, #8]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80072ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072d2:	60d3      	str	r3, [r2, #12]
 80072d4:	e014      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80072d6:	bf00      	nop
 80072d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072e4:	d10c      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	2101      	movs	r1, #1
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 f843 	bl	8007378 <RCCEx_PLLSAI1_Config>
 80072f2:	4603      	mov	r3, r0
 80072f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072f6:	7cfb      	ldrb	r3, [r7, #19]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80072fc:	7cfb      	ldrb	r3, [r7, #19]
 80072fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800730c:	4b19      	ldr	r3, [pc, #100]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800730e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	4916      	ldr	r1, [pc, #88]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800731c:	4313      	orrs	r3, r2
 800731e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800732a:	d10c      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3304      	adds	r3, #4
 8007330:	2102      	movs	r1, #2
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f820 	bl	8007378 <RCCEx_PLLSAI1_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800733c:	7cfb      	ldrb	r3, [r7, #19]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8007342:	7cfb      	ldrb	r3, [r7, #19]
 8007344:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007352:	4b08      	ldr	r3, [pc, #32]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007360:	4904      	ldr	r1, [pc, #16]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007368:	7cbb      	ldrb	r3, [r7, #18]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	40021000 	.word	0x40021000

08007378 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007386:	4b74      	ldr	r3, [pc, #464]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d018      	beq.n	80073c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007392:	4b71      	ldr	r3, [pc, #452]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0203 	and.w	r2, r3, #3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d10d      	bne.n	80073be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
       ||
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80073aa:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
       ||
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d047      	beq.n	800744e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	73fb      	strb	r3, [r7, #15]
 80073c2:	e044      	b.n	800744e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d018      	beq.n	80073fe <RCCEx_PLLSAI1_Config+0x86>
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d825      	bhi.n	800741c <RCCEx_PLLSAI1_Config+0xa4>
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d002      	beq.n	80073da <RCCEx_PLLSAI1_Config+0x62>
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d009      	beq.n	80073ec <RCCEx_PLLSAI1_Config+0x74>
 80073d8:	e020      	b.n	800741c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073da:	4b5f      	ldr	r3, [pc, #380]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d11d      	bne.n	8007422 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073ea:	e01a      	b.n	8007422 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073ec:	4b5a      	ldr	r3, [pc, #360]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d116      	bne.n	8007426 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073fc:	e013      	b.n	8007426 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073fe:	4b56      	ldr	r3, [pc, #344]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10f      	bne.n	800742a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800740a:	4b53      	ldr	r3, [pc, #332]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800741a:	e006      	b.n	800742a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	73fb      	strb	r3, [r7, #15]
      break;
 8007420:	e004      	b.n	800742c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800742a:	bf00      	nop
    }

    if(status == HAL_OK)
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10d      	bne.n	800744e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007432:	4b49      	ldr	r3, [pc, #292]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	3b01      	subs	r3, #1
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	430b      	orrs	r3, r1
 8007448:	4943      	ldr	r1, [pc, #268]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800744a:	4313      	orrs	r3, r2
 800744c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d17c      	bne.n	800754e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007454:	4b40      	ldr	r3, [pc, #256]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a3f      	ldr	r2, [pc, #252]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800745a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800745e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007460:	f7fc ffce 	bl	8004400 <HAL_GetTick>
 8007464:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007466:	e009      	b.n	800747c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007468:	f7fc ffca 	bl	8004400 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d902      	bls.n	800747c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	73fb      	strb	r3, [r7, #15]
        break;
 800747a:	e005      	b.n	8007488 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800747c:	4b36      	ldr	r3, [pc, #216]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1ef      	bne.n	8007468 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d15f      	bne.n	800754e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d110      	bne.n	80074b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007494:	4b30      	ldr	r3, [pc, #192]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800749c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6892      	ldr	r2, [r2, #8]
 80074a4:	0211      	lsls	r1, r2, #8
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	68d2      	ldr	r2, [r2, #12]
 80074aa:	06d2      	lsls	r2, r2, #27
 80074ac:	430a      	orrs	r2, r1
 80074ae:	492a      	ldr	r1, [pc, #168]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	610b      	str	r3, [r1, #16]
 80074b4:	e027      	b.n	8007506 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d112      	bne.n	80074e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074bc:	4b26      	ldr	r3, [pc, #152]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80074c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6892      	ldr	r2, [r2, #8]
 80074cc:	0211      	lsls	r1, r2, #8
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6912      	ldr	r2, [r2, #16]
 80074d2:	0852      	lsrs	r2, r2, #1
 80074d4:	3a01      	subs	r2, #1
 80074d6:	0552      	lsls	r2, r2, #21
 80074d8:	430a      	orrs	r2, r1
 80074da:	491f      	ldr	r1, [pc, #124]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	610b      	str	r3, [r1, #16]
 80074e0:	e011      	b.n	8007506 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80074ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6892      	ldr	r2, [r2, #8]
 80074f2:	0211      	lsls	r1, r2, #8
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6952      	ldr	r2, [r2, #20]
 80074f8:	0852      	lsrs	r2, r2, #1
 80074fa:	3a01      	subs	r2, #1
 80074fc:	0652      	lsls	r2, r2, #25
 80074fe:	430a      	orrs	r2, r1
 8007500:	4915      	ldr	r1, [pc, #84]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007502:	4313      	orrs	r3, r2
 8007504:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007506:	4b14      	ldr	r3, [pc, #80]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a13      	ldr	r2, [pc, #76]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800750c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007510:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007512:	f7fc ff75 	bl	8004400 <HAL_GetTick>
 8007516:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007518:	e009      	b.n	800752e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800751a:	f7fc ff71 	bl	8004400 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d902      	bls.n	800752e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	73fb      	strb	r3, [r7, #15]
          break;
 800752c:	e005      	b.n	800753a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0ef      	beq.n	800751a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d106      	bne.n	800754e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	4903      	ldr	r1, [pc, #12]	; (8007558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800754a:	4313      	orrs	r3, r2
 800754c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40021000 	.word	0x40021000

0800755c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e049      	b.n	8007602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fc fc62 	bl	8003e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f000 fa7e 	bl	8007a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d001      	beq.n	8007624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e03b      	b.n	800769c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_TIM_Base_Start_IT+0x4e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764e:	d004      	beq.n	800765a <HAL_TIM_Base_Start_IT+0x4e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <HAL_TIM_Base_Start_IT+0xa0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d115      	bne.n	8007686 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007662:	4013      	ands	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b06      	cmp	r3, #6
 800766a:	d015      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x8c>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007672:	d011      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	e008      	b.n	8007698 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e000      	b.n	800769a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40014000 	.word	0x40014000
 80076b0:	00010007 	.word	0x00010007

080076b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d020      	beq.n	8007718 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0202 	mvn.w	r2, #2
 80076e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f9ad 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f99f 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f9b0 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 0304 	and.w	r3, r3, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	d020      	beq.n	8007764 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01b      	beq.n	8007764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0204 	mvn.w	r2, #4
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f987 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f979 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f98a 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d020      	beq.n	80077b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01b      	beq.n	80077b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0208 	mvn.w	r2, #8
 8007780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2204      	movs	r2, #4
 8007786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f961 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f953 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f964 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d020      	beq.n	80077fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01b      	beq.n	80077fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0210 	mvn.w	r2, #16
 80077cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2208      	movs	r2, #8
 80077d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f93b 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f92d 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f93e 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0201 	mvn.w	r2, #1
 8007818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fb fbfc 	bl	8003018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00c      	beq.n	8007844 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa9a 	bl	8007d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa92 	bl	8007d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00c      	beq.n	800788c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f8fd 	bl	8007a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d007      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f06f 0220 	mvn.w	r2, #32
 80078a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa5a 	bl	8007d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_TIM_ConfigClockSource+0x1c>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e0b6      	b.n	8007a42 <HAL_TIM_ConfigClockSource+0x18a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007910:	d03e      	beq.n	8007990 <HAL_TIM_ConfigClockSource+0xd8>
 8007912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007916:	f200 8087 	bhi.w	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 800791a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791e:	f000 8086 	beq.w	8007a2e <HAL_TIM_ConfigClockSource+0x176>
 8007922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007926:	d87f      	bhi.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 8007928:	2b70      	cmp	r3, #112	; 0x70
 800792a:	d01a      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0xaa>
 800792c:	2b70      	cmp	r3, #112	; 0x70
 800792e:	d87b      	bhi.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 8007930:	2b60      	cmp	r3, #96	; 0x60
 8007932:	d050      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x11e>
 8007934:	2b60      	cmp	r3, #96	; 0x60
 8007936:	d877      	bhi.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 8007938:	2b50      	cmp	r3, #80	; 0x50
 800793a:	d03c      	beq.n	80079b6 <HAL_TIM_ConfigClockSource+0xfe>
 800793c:	2b50      	cmp	r3, #80	; 0x50
 800793e:	d873      	bhi.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d058      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x13e>
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d86f      	bhi.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 8007948:	2b30      	cmp	r3, #48	; 0x30
 800794a:	d064      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x15e>
 800794c:	2b30      	cmp	r3, #48	; 0x30
 800794e:	d86b      	bhi.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 8007950:	2b20      	cmp	r3, #32
 8007952:	d060      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x15e>
 8007954:	2b20      	cmp	r3, #32
 8007956:	d867      	bhi.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d05c      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x15e>
 800795c:	2b10      	cmp	r3, #16
 800795e:	d05a      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x15e>
 8007960:	e062      	b.n	8007a28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007972:	f000 f971 	bl	8007c58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007984:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	609a      	str	r2, [r3, #8]
      break;
 800798e:	e04f      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079a0:	f000 f95a 	bl	8007c58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079b2:	609a      	str	r2, [r3, #8]
      break;
 80079b4:	e03c      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c2:	461a      	mov	r2, r3
 80079c4:	f000 f8ce 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2150      	movs	r1, #80	; 0x50
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f927 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80079d4:	e02c      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079e2:	461a      	mov	r2, r3
 80079e4:	f000 f8ed 	bl	8007bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2160      	movs	r1, #96	; 0x60
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f917 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80079f4:	e01c      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 f8ae 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2140      	movs	r1, #64	; 0x40
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f907 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 8007a14:	e00c      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f000 f8fe 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 8007a26:	e003      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2c:	e000      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007a2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a2a      	ldr	r2, [pc, #168]	; (8007b58 <TIM_Base_SetConfig+0xbc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_Base_SetConfig+0x20>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d108      	bne.n	8007ace <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a21      	ldr	r2, [pc, #132]	; (8007b58 <TIM_Base_SetConfig+0xbc>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00b      	beq.n	8007aee <TIM_Base_SetConfig+0x52>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007adc:	d007      	beq.n	8007aee <TIM_Base_SetConfig+0x52>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <TIM_Base_SetConfig+0xc0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d003      	beq.n	8007aee <TIM_Base_SetConfig+0x52>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	; (8007b60 <TIM_Base_SetConfig+0xc4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d108      	bne.n	8007b00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a0c      	ldr	r2, [pc, #48]	; (8007b58 <TIM_Base_SetConfig+0xbc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0xa0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a0b      	ldr	r2, [pc, #44]	; (8007b5c <TIM_Base_SetConfig+0xc0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0xa0>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <TIM_Base_SetConfig+0xc4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d103      	bne.n	8007b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	615a      	str	r2, [r3, #20]
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	40014000 	.word	0x40014000
 8007b60:	40014400 	.word	0x40014400

08007b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f023 030a 	bic.w	r3, r3, #10
 8007ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	621a      	str	r2, [r3, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f023 0210 	bic.w	r2, r3, #16
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f043 0307 	orr.w	r3, r3, #7
 8007c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	609a      	str	r2, [r3, #8]
}
 8007c4c:	bf00      	nop
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	021a      	lsls	r2, r3, #8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	609a      	str	r2, [r3, #8]
}
 8007c8c:	bf00      	nop
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e04f      	b.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d108      	bne.n	8007cec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ce0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a14      	ldr	r2, [pc, #80]	; (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d009      	beq.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d18:	d004      	beq.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d10c      	bne.n	8007d3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	40012c00 	.word	0x40012c00
 8007d60:	40014000 	.word	0x40014000

08007d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e040      	b.n	8007e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fc f866 	bl	8003e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2224      	movs	r2, #36	; 0x24
 8007dcc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fe5e 	bl	8008aa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc01 	bl	80085f4 <UART_SetConfig>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d101      	bne.n	8007dfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e01b      	b.n	8007e34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fedd 	bl	8008bec <UART_CheckIdleState>
 8007e32:	4603      	mov	r3, r0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	; 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d165      	bne.n	8007f1e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_UART_Transmit_DMA+0x22>
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e05e      	b.n	8007f20 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	88fa      	ldrh	r2, [r7, #6]
 8007e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2221      	movs	r2, #33	; 0x21
 8007e84:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d027      	beq.n	8007ede <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	4a25      	ldr	r2, [pc, #148]	; (8007f28 <HAL_UART_Transmit_DMA+0xec>)
 8007e94:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9a:	4a24      	ldr	r2, [pc, #144]	; (8007f2c <HAL_UART_Transmit_DMA+0xf0>)
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea2:	4a23      	ldr	r2, [pc, #140]	; (8007f30 <HAL_UART_Transmit_DMA+0xf4>)
 8007ea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eaa:	2200      	movs	r2, #0
 8007eac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3328      	adds	r3, #40	; 0x28
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	f7fd fe23 	bl	8005b0c <HAL_DMA_Start_IT>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2210      	movs	r2, #16
 8007ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e020      	b.n	8007f20 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2240      	movs	r2, #64	; 0x40
 8007ee4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3308      	adds	r3, #8
 8007f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f06:	623a      	str	r2, [r7, #32]
 8007f08:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	69f9      	ldr	r1, [r7, #28]
 8007f0c:	6a3a      	ldr	r2, [r7, #32]
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e5      	bne.n	8007ee6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e000      	b.n	8007f20 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007f1e:	2302      	movs	r3, #2
  }
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3728      	adds	r7, #40	; 0x28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	08009061 	.word	0x08009061
 8007f2c:	080090fb 	.word	0x080090fb
 8007f30:	08009281 	.word	0x08009281

08007f34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d137      	bne.n	8007fbc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <HAL_UART_Receive_DMA+0x24>
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e030      	b.n	8007fbe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <HAL_UART_Receive_DMA+0x94>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d01f      	beq.n	8007fac <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d018      	beq.n	8007fac <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	613b      	str	r3, [r7, #16]
   return(result);
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	623b      	str	r3, [r7, #32]
 8007f9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	69f9      	ldr	r1, [r7, #28]
 8007f9e:	6a3a      	ldr	r2, [r7, #32]
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 ff2a 	bl	8008e0c <UART_Start_Receive_DMA>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	e000      	b.n	8007fbe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
  }
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3728      	adds	r7, #40	; 0x28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40008000 	.word	0x40008000

08007fcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b0ba      	sub	sp, #232	; 0xe8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ff2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ff6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d115      	bne.n	8008034 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00f      	beq.n	8008034 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008018:	f003 0320 	and.w	r3, r3, #32
 800801c:	2b00      	cmp	r3, #0
 800801e:	d009      	beq.n	8008034 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 82ae 	beq.w	8008586 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
      }
      return;
 8008032:	e2a8      	b.n	8008586 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 8117 	beq.w	800826c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800803e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800804a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800804e:	4b85      	ldr	r3, [pc, #532]	; (8008264 <HAL_UART_IRQHandler+0x298>)
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 810a 	beq.w	800826c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d011      	beq.n	8008088 <HAL_UART_IRQHandler+0xbc>
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2201      	movs	r2, #1
 8008076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800807e:	f043 0201 	orr.w	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d011      	beq.n	80080b8 <HAL_UART_IRQHandler+0xec>
 8008094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2202      	movs	r2, #2
 80080a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ae:	f043 0204 	orr.w	r2, r3, #4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d011      	beq.n	80080e8 <HAL_UART_IRQHandler+0x11c>
 80080c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2204      	movs	r2, #4
 80080d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080de:	f043 0202 	orr.w	r2, r3, #2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d017      	beq.n	8008124 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008104:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2208      	movs	r2, #8
 8008112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800811a:	f043 0208 	orr.w	r2, r3, #8
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800812c:	2b00      	cmp	r3, #0
 800812e:	d012      	beq.n	8008156 <HAL_UART_IRQHandler+0x18a>
 8008130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00c      	beq.n	8008156 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800814c:	f043 0220 	orr.w	r2, r3, #32
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8214 	beq.w	800858a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00d      	beq.n	800818a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800816e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d005      	beq.n	80081ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d04f      	beq.n	800824e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fef2 	bl	8008f98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d141      	bne.n	8008246 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3308      	adds	r3, #8
 80081c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1d9      	bne.n	80081c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008212:	2b00      	cmp	r3, #0
 8008214:	d013      	beq.n	800823e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800821a:	4a13      	ldr	r2, [pc, #76]	; (8008268 <HAL_UART_IRQHandler+0x29c>)
 800821c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008222:	4618      	mov	r0, r3
 8008224:	f7fd fd10 	bl	8005c48 <HAL_DMA_Abort_IT>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d017      	beq.n	800825e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823c:	e00f      	b.n	800825e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f9c2 	bl	80085c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	e00b      	b.n	800825e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f9be 	bl	80085c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824c:	e007      	b.n	800825e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f9ba 	bl	80085c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800825c:	e195      	b.n	800858a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825e:	bf00      	nop
    return;
 8008260:	e193      	b.n	800858a <HAL_UART_IRQHandler+0x5be>
 8008262:	bf00      	nop
 8008264:	04000120 	.word	0x04000120
 8008268:	080092ff 	.word	0x080092ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008270:	2b01      	cmp	r3, #1
 8008272:	f040 814e 	bne.w	8008512 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827a:	f003 0310 	and.w	r3, r3, #16
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 8147 	beq.w	8008512 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8140 	beq.w	8008512 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2210      	movs	r2, #16
 8008298:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	f040 80b8 	bne.w	800841a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 8167 	beq.w	800858e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082ca:	429a      	cmp	r2, r3
 80082cc:	f080 815f 	bcs.w	800858e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f040 8086 	bne.w	80083f8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800831a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008322:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800832e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1da      	bne.n	80082ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800835a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800835e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008362:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800836c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e1      	bne.n	8008336 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3308      	adds	r3, #8
 8008392:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008396:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008398:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800839c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e3      	bne.n	8008372 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083c8:	f023 0310 	bic.w	r3, r3, #16
 80083cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083da:	65bb      	str	r3, [r7, #88]	; 0x58
 80083dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e4      	bne.n	80083b8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd fbea 	bl	8005bcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800840a:	b29b      	uxth	r3, r3
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	b29b      	uxth	r3, r3
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f8e2 	bl	80085dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008418:	e0b9      	b.n	800858e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008426:	b29b      	uxth	r3, r3
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008434:	b29b      	uxth	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 80ab 	beq.w	8008592 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800843c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80a6 	beq.w	8008592 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800845a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008468:	647b      	str	r3, [r7, #68]	; 0x44
 800846a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800846e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e4      	bne.n	8008446 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	623b      	str	r3, [r7, #32]
   return(result);
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	f023 0301 	bic.w	r3, r3, #1
 8008492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084a0:	633a      	str	r2, [r7, #48]	; 0x30
 80084a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e3      	bne.n	800847c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f023 0310 	bic.w	r3, r3, #16
 80084dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084ea:	61fb      	str	r3, [r7, #28]
 80084ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	69b9      	ldr	r1, [r7, #24]
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	617b      	str	r3, [r7, #20]
   return(result);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e4      	bne.n	80084c8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f866 	bl	80085dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008510:	e03f      	b.n	8008592 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00e      	beq.n	800853c <HAL_UART_IRQHandler+0x570>
 800851e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d008      	beq.n	800853c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 ff22 	bl	800937e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800853a:	e02d      	b.n	8008598 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800853c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00e      	beq.n	8008566 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01c      	beq.n	8008596 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	4798      	blx	r3
    }
    return;
 8008564:	e017      	b.n	8008596 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d012      	beq.n	8008598 <HAL_UART_IRQHandler+0x5cc>
 8008572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00c      	beq.n	8008598 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fed3 	bl	800932a <UART_EndTransmit_IT>
    return;
 8008584:	e008      	b.n	8008598 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008586:	bf00      	nop
 8008588:	e006      	b.n	8008598 <HAL_UART_IRQHandler+0x5cc>
    return;
 800858a:	bf00      	nop
 800858c:	e004      	b.n	8008598 <HAL_UART_IRQHandler+0x5cc>
      return;
 800858e:	bf00      	nop
 8008590:	e002      	b.n	8008598 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008592:	bf00      	nop
 8008594:	e000      	b.n	8008598 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008596:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008598:	37e8      	adds	r7, #232	; 0xe8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop

080085a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085f8:	b08a      	sub	sp, #40	; 0x28
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	431a      	orrs	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	431a      	orrs	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	4313      	orrs	r3, r2
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b9e      	ldr	r3, [pc, #632]	; (800889c <UART_SetConfig+0x2a8>)
 8008624:	4013      	ands	r3, r2
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	6812      	ldr	r2, [r2, #0]
 800862a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800862c:	430b      	orrs	r3, r1
 800862e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a93      	ldr	r2, [pc, #588]	; (80088a0 <UART_SetConfig+0x2ac>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d004      	beq.n	8008660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865c:	4313      	orrs	r3, r2
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008670:	430a      	orrs	r2, r1
 8008672:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a8a      	ldr	r2, [pc, #552]	; (80088a4 <UART_SetConfig+0x2b0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d126      	bne.n	80086cc <UART_SetConfig+0xd8>
 800867e:	4b8a      	ldr	r3, [pc, #552]	; (80088a8 <UART_SetConfig+0x2b4>)
 8008680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	2b03      	cmp	r3, #3
 800868a:	d81b      	bhi.n	80086c4 <UART_SetConfig+0xd0>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <UART_SetConfig+0xa0>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086b5 	.word	0x080086b5
 800869c:	080086ad 	.word	0x080086ad
 80086a0:	080086bd 	.word	0x080086bd
 80086a4:	2301      	movs	r3, #1
 80086a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086aa:	e0ab      	b.n	8008804 <UART_SetConfig+0x210>
 80086ac:	2302      	movs	r3, #2
 80086ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086b2:	e0a7      	b.n	8008804 <UART_SetConfig+0x210>
 80086b4:	2304      	movs	r3, #4
 80086b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ba:	e0a3      	b.n	8008804 <UART_SetConfig+0x210>
 80086bc:	2308      	movs	r3, #8
 80086be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086c2:	e09f      	b.n	8008804 <UART_SetConfig+0x210>
 80086c4:	2310      	movs	r3, #16
 80086c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ca:	e09b      	b.n	8008804 <UART_SetConfig+0x210>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a76      	ldr	r2, [pc, #472]	; (80088ac <UART_SetConfig+0x2b8>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d138      	bne.n	8008748 <UART_SetConfig+0x154>
 80086d6:	4b74      	ldr	r3, [pc, #464]	; (80088a8 <UART_SetConfig+0x2b4>)
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086dc:	f003 030c 	and.w	r3, r3, #12
 80086e0:	2b0c      	cmp	r3, #12
 80086e2:	d82d      	bhi.n	8008740 <UART_SetConfig+0x14c>
 80086e4:	a201      	add	r2, pc, #4	; (adr r2, 80086ec <UART_SetConfig+0xf8>)
 80086e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ea:	bf00      	nop
 80086ec:	08008721 	.word	0x08008721
 80086f0:	08008741 	.word	0x08008741
 80086f4:	08008741 	.word	0x08008741
 80086f8:	08008741 	.word	0x08008741
 80086fc:	08008731 	.word	0x08008731
 8008700:	08008741 	.word	0x08008741
 8008704:	08008741 	.word	0x08008741
 8008708:	08008741 	.word	0x08008741
 800870c:	08008729 	.word	0x08008729
 8008710:	08008741 	.word	0x08008741
 8008714:	08008741 	.word	0x08008741
 8008718:	08008741 	.word	0x08008741
 800871c:	08008739 	.word	0x08008739
 8008720:	2300      	movs	r3, #0
 8008722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008726:	e06d      	b.n	8008804 <UART_SetConfig+0x210>
 8008728:	2302      	movs	r3, #2
 800872a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800872e:	e069      	b.n	8008804 <UART_SetConfig+0x210>
 8008730:	2304      	movs	r3, #4
 8008732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008736:	e065      	b.n	8008804 <UART_SetConfig+0x210>
 8008738:	2308      	movs	r3, #8
 800873a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800873e:	e061      	b.n	8008804 <UART_SetConfig+0x210>
 8008740:	2310      	movs	r3, #16
 8008742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008746:	e05d      	b.n	8008804 <UART_SetConfig+0x210>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a58      	ldr	r2, [pc, #352]	; (80088b0 <UART_SetConfig+0x2bc>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d125      	bne.n	800879e <UART_SetConfig+0x1aa>
 8008752:	4b55      	ldr	r3, [pc, #340]	; (80088a8 <UART_SetConfig+0x2b4>)
 8008754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008758:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800875c:	2b30      	cmp	r3, #48	; 0x30
 800875e:	d016      	beq.n	800878e <UART_SetConfig+0x19a>
 8008760:	2b30      	cmp	r3, #48	; 0x30
 8008762:	d818      	bhi.n	8008796 <UART_SetConfig+0x1a2>
 8008764:	2b20      	cmp	r3, #32
 8008766:	d00a      	beq.n	800877e <UART_SetConfig+0x18a>
 8008768:	2b20      	cmp	r3, #32
 800876a:	d814      	bhi.n	8008796 <UART_SetConfig+0x1a2>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <UART_SetConfig+0x182>
 8008770:	2b10      	cmp	r3, #16
 8008772:	d008      	beq.n	8008786 <UART_SetConfig+0x192>
 8008774:	e00f      	b.n	8008796 <UART_SetConfig+0x1a2>
 8008776:	2300      	movs	r3, #0
 8008778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800877c:	e042      	b.n	8008804 <UART_SetConfig+0x210>
 800877e:	2302      	movs	r3, #2
 8008780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008784:	e03e      	b.n	8008804 <UART_SetConfig+0x210>
 8008786:	2304      	movs	r3, #4
 8008788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800878c:	e03a      	b.n	8008804 <UART_SetConfig+0x210>
 800878e:	2308      	movs	r3, #8
 8008790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008794:	e036      	b.n	8008804 <UART_SetConfig+0x210>
 8008796:	2310      	movs	r3, #16
 8008798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800879c:	e032      	b.n	8008804 <UART_SetConfig+0x210>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a3f      	ldr	r2, [pc, #252]	; (80088a0 <UART_SetConfig+0x2ac>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d12a      	bne.n	80087fe <UART_SetConfig+0x20a>
 80087a8:	4b3f      	ldr	r3, [pc, #252]	; (80088a8 <UART_SetConfig+0x2b4>)
 80087aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087b6:	d01a      	beq.n	80087ee <UART_SetConfig+0x1fa>
 80087b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087bc:	d81b      	bhi.n	80087f6 <UART_SetConfig+0x202>
 80087be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c2:	d00c      	beq.n	80087de <UART_SetConfig+0x1ea>
 80087c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c8:	d815      	bhi.n	80087f6 <UART_SetConfig+0x202>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <UART_SetConfig+0x1e2>
 80087ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087d2:	d008      	beq.n	80087e6 <UART_SetConfig+0x1f2>
 80087d4:	e00f      	b.n	80087f6 <UART_SetConfig+0x202>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087dc:	e012      	b.n	8008804 <UART_SetConfig+0x210>
 80087de:	2302      	movs	r3, #2
 80087e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e4:	e00e      	b.n	8008804 <UART_SetConfig+0x210>
 80087e6:	2304      	movs	r3, #4
 80087e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ec:	e00a      	b.n	8008804 <UART_SetConfig+0x210>
 80087ee:	2308      	movs	r3, #8
 80087f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f4:	e006      	b.n	8008804 <UART_SetConfig+0x210>
 80087f6:	2310      	movs	r3, #16
 80087f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fc:	e002      	b.n	8008804 <UART_SetConfig+0x210>
 80087fe:	2310      	movs	r3, #16
 8008800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a25      	ldr	r2, [pc, #148]	; (80088a0 <UART_SetConfig+0x2ac>)
 800880a:	4293      	cmp	r3, r2
 800880c:	f040 808a 	bne.w	8008924 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008814:	2b08      	cmp	r3, #8
 8008816:	d824      	bhi.n	8008862 <UART_SetConfig+0x26e>
 8008818:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <UART_SetConfig+0x22c>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	08008845 	.word	0x08008845
 8008824:	08008863 	.word	0x08008863
 8008828:	0800884d 	.word	0x0800884d
 800882c:	08008863 	.word	0x08008863
 8008830:	08008853 	.word	0x08008853
 8008834:	08008863 	.word	0x08008863
 8008838:	08008863 	.word	0x08008863
 800883c:	08008863 	.word	0x08008863
 8008840:	0800885b 	.word	0x0800885b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008844:	f7fe fac2 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 8008848:	61f8      	str	r0, [r7, #28]
        break;
 800884a:	e010      	b.n	800886e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800884c:	4b19      	ldr	r3, [pc, #100]	; (80088b4 <UART_SetConfig+0x2c0>)
 800884e:	61fb      	str	r3, [r7, #28]
        break;
 8008850:	e00d      	b.n	800886e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008852:	f7fe fa23 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 8008856:	61f8      	str	r0, [r7, #28]
        break;
 8008858:	e009      	b.n	800886e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800885a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885e:	61fb      	str	r3, [r7, #28]
        break;
 8008860:	e005      	b.n	800886e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800886c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 8109 	beq.w	8008a88 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	4413      	add	r3, r2
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	429a      	cmp	r2, r3
 8008884:	d305      	bcc.n	8008892 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800888c:	69fa      	ldr	r2, [r7, #28]
 800888e:	429a      	cmp	r2, r3
 8008890:	d912      	bls.n	80088b8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008898:	e0f6      	b.n	8008a88 <UART_SetConfig+0x494>
 800889a:	bf00      	nop
 800889c:	efff69f3 	.word	0xefff69f3
 80088a0:	40008000 	.word	0x40008000
 80088a4:	40013800 	.word	0x40013800
 80088a8:	40021000 	.word	0x40021000
 80088ac:	40004400 	.word	0x40004400
 80088b0:	40004800 	.word	0x40004800
 80088b4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2200      	movs	r2, #0
 80088bc:	461c      	mov	r4, r3
 80088be:	4615      	mov	r5, r2
 80088c0:	f04f 0200 	mov.w	r2, #0
 80088c4:	f04f 0300 	mov.w	r3, #0
 80088c8:	022b      	lsls	r3, r5, #8
 80088ca:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80088ce:	0222      	lsls	r2, r4, #8
 80088d0:	68f9      	ldr	r1, [r7, #12]
 80088d2:	6849      	ldr	r1, [r1, #4]
 80088d4:	0849      	lsrs	r1, r1, #1
 80088d6:	2000      	movs	r0, #0
 80088d8:	4688      	mov	r8, r1
 80088da:	4681      	mov	r9, r0
 80088dc:	eb12 0a08 	adds.w	sl, r2, r8
 80088e0:	eb43 0b09 	adc.w	fp, r3, r9
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	607a      	str	r2, [r7, #4]
 80088ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f2:	4650      	mov	r0, sl
 80088f4:	4659      	mov	r1, fp
 80088f6:	f7f8 f977 	bl	8000be8 <__aeabi_uldivmod>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4613      	mov	r3, r2
 8008900:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008908:	d308      	bcc.n	800891c <UART_SetConfig+0x328>
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008910:	d204      	bcs.n	800891c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	60da      	str	r2, [r3, #12]
 800891a:	e0b5      	b.n	8008a88 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008922:	e0b1      	b.n	8008a88 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800892c:	d15d      	bne.n	80089ea <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800892e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008932:	2b08      	cmp	r3, #8
 8008934:	d827      	bhi.n	8008986 <UART_SetConfig+0x392>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <UART_SetConfig+0x348>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008961 	.word	0x08008961
 8008940:	08008969 	.word	0x08008969
 8008944:	08008971 	.word	0x08008971
 8008948:	08008987 	.word	0x08008987
 800894c:	08008977 	.word	0x08008977
 8008950:	08008987 	.word	0x08008987
 8008954:	08008987 	.word	0x08008987
 8008958:	08008987 	.word	0x08008987
 800895c:	0800897f 	.word	0x0800897f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008960:	f7fe fa34 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 8008964:	61f8      	str	r0, [r7, #28]
        break;
 8008966:	e014      	b.n	8008992 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008968:	f7fe fa46 	bl	8006df8 <HAL_RCC_GetPCLK2Freq>
 800896c:	61f8      	str	r0, [r7, #28]
        break;
 800896e:	e010      	b.n	8008992 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008970:	4b4c      	ldr	r3, [pc, #304]	; (8008aa4 <UART_SetConfig+0x4b0>)
 8008972:	61fb      	str	r3, [r7, #28]
        break;
 8008974:	e00d      	b.n	8008992 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008976:	f7fe f991 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 800897a:	61f8      	str	r0, [r7, #28]
        break;
 800897c:	e009      	b.n	8008992 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800897e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008982:	61fb      	str	r3, [r7, #28]
        break;
 8008984:	e005      	b.n	8008992 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d077      	beq.n	8008a88 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	005a      	lsls	r2, r3, #1
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	085b      	lsrs	r3, r3, #1
 80089a2:	441a      	add	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b0f      	cmp	r3, #15
 80089b2:	d916      	bls.n	80089e2 <UART_SetConfig+0x3ee>
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ba:	d212      	bcs.n	80089e2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f023 030f 	bic.w	r3, r3, #15
 80089c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	085b      	lsrs	r3, r3, #1
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	8afb      	ldrh	r3, [r7, #22]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	8afa      	ldrh	r2, [r7, #22]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	e052      	b.n	8008a88 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089e8:	e04e      	b.n	8008a88 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d827      	bhi.n	8008a42 <UART_SetConfig+0x44e>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x404>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a1d 	.word	0x08008a1d
 80089fc:	08008a25 	.word	0x08008a25
 8008a00:	08008a2d 	.word	0x08008a2d
 8008a04:	08008a43 	.word	0x08008a43
 8008a08:	08008a33 	.word	0x08008a33
 8008a0c:	08008a43 	.word	0x08008a43
 8008a10:	08008a43 	.word	0x08008a43
 8008a14:	08008a43 	.word	0x08008a43
 8008a18:	08008a3b 	.word	0x08008a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a1c:	f7fe f9d6 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 8008a20:	61f8      	str	r0, [r7, #28]
        break;
 8008a22:	e014      	b.n	8008a4e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a24:	f7fe f9e8 	bl	8006df8 <HAL_RCC_GetPCLK2Freq>
 8008a28:	61f8      	str	r0, [r7, #28]
        break;
 8008a2a:	e010      	b.n	8008a4e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a2c:	4b1d      	ldr	r3, [pc, #116]	; (8008aa4 <UART_SetConfig+0x4b0>)
 8008a2e:	61fb      	str	r3, [r7, #28]
        break;
 8008a30:	e00d      	b.n	8008a4e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a32:	f7fe f933 	bl	8006c9c <HAL_RCC_GetSysClockFreq>
 8008a36:	61f8      	str	r0, [r7, #28]
        break;
 8008a38:	e009      	b.n	8008a4e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3e:	61fb      	str	r3, [r7, #28]
        break;
 8008a40:	e005      	b.n	8008a4e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a4c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d019      	beq.n	8008a88 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	085a      	lsrs	r2, r3, #1
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	2b0f      	cmp	r3, #15
 8008a6c:	d909      	bls.n	8008a82 <UART_SetConfig+0x48e>
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a74:	d205      	bcs.n	8008a82 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60da      	str	r2, [r3, #12]
 8008a80:	e002      	b.n	8008a88 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3728      	adds	r7, #40	; 0x28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aa2:	bf00      	nop
 8008aa4:	00f42400 	.word	0x00f42400

08008aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	430a      	orrs	r2, r1
 8008af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	f003 0310 	and.w	r3, r3, #16
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01a      	beq.n	8008bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ba6:	d10a      	bne.n	8008bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	605a      	str	r2, [r3, #4]
  }
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b098      	sub	sp, #96	; 0x60
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bfc:	f7fb fc00 	bl	8004400 <HAL_GetTick>
 8008c00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d12e      	bne.n	8008c6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f88c 	bl	8008d3c <UART_WaitOnFlagUntilTimeout>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d021      	beq.n	8008c6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c48:	647b      	str	r3, [r7, #68]	; 0x44
 8008c4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e6      	bne.n	8008c2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e062      	b.n	8008d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d149      	bne.n	8008d10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c84:	2200      	movs	r2, #0
 8008c86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f856 	bl	8008d3c <UART_WaitOnFlagUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d03c      	beq.n	8008d10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	e853 3f00 	ldrex	r3, [r3]
 8008ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8008cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cbc:	e841 2300 	strex	r3, r2, [r1]
 8008cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e6      	bne.n	8008c96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f023 0301 	bic.w	r3, r3, #1
 8008cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ce8:	61fa      	str	r2, [r7, #28]
 8008cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	69b9      	ldr	r1, [r7, #24]
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e5      	bne.n	8008cc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e011      	b.n	8008d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3758      	adds	r7, #88	; 0x58
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d4c:	e049      	b.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d54:	d045      	beq.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d56:	f7fb fb53 	bl	8004400 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d302      	bcc.n	8008d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e048      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d031      	beq.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f003 0308 	and.w	r3, r3, #8
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d110      	bne.n	8008dae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2208      	movs	r2, #8
 8008d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f8ff 	bl	8008f98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e029      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dbc:	d111      	bne.n	8008de2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f8e5 	bl	8008f98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e00f      	b.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69da      	ldr	r2, [r3, #28]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4013      	ands	r3, r2
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	bf0c      	ite	eq
 8008df2:	2301      	moveq	r3, #1
 8008df4:	2300      	movne	r3, #0
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	461a      	mov	r2, r3
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d0a6      	beq.n	8008d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b096      	sub	sp, #88	; 0x58
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	88fa      	ldrh	r2, [r7, #6]
 8008e24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2222      	movs	r2, #34	; 0x22
 8008e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d028      	beq.n	8008e92 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e44:	4a3e      	ldr	r2, [pc, #248]	; (8008f40 <UART_Start_Receive_DMA+0x134>)
 8008e46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4c:	4a3d      	ldr	r2, [pc, #244]	; (8008f44 <UART_Start_Receive_DMA+0x138>)
 8008e4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	4a3c      	ldr	r2, [pc, #240]	; (8008f48 <UART_Start_Receive_DMA+0x13c>)
 8008e56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3324      	adds	r3, #36	; 0x24
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e70:	461a      	mov	r2, r3
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	f7fc fe4a 	bl	8005b0c <HAL_DMA_Start_IT>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2210      	movs	r2, #16
 8008e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e051      	b.n	8008f36 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d018      	beq.n	8008ecc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eae:	657b      	str	r3, [r7, #84]	; 0x54
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e6      	bne.n	8008e9a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	f043 0301 	orr.w	r3, r3, #1
 8008ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3308      	adds	r3, #8
 8008eea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008eec:	637a      	str	r2, [r7, #52]	; 0x34
 8008eee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e5      	bne.n	8008ecc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3308      	adds	r3, #8
 8008f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f20:	623a      	str	r2, [r7, #32]
 8008f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	69f9      	ldr	r1, [r7, #28]
 8008f26:	6a3a      	ldr	r2, [r7, #32]
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e5      	bne.n	8008f00 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3758      	adds	r7, #88	; 0x58
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	08009117 	.word	0x08009117
 8008f44:	08009243 	.word	0x08009243
 8008f48:	08009281 	.word	0x08009281

08008f4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b089      	sub	sp, #36	; 0x24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f68:	61fb      	str	r3, [r7, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	61bb      	str	r3, [r7, #24]
 8008f74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6979      	ldr	r1, [r7, #20]
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e6      	bne.n	8008f54 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008f8c:	bf00      	nop
 8008f8e:	3724      	adds	r7, #36	; 0x24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b095      	sub	sp, #84	; 0x54
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8008fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e6      	bne.n	8008fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3308      	adds	r3, #8
 8008fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	f023 0301 	bic.w	r3, r3, #1
 8008fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e5      	bne.n	8008fd2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900a:	2b01      	cmp	r3, #1
 800900c:	d118      	bne.n	8009040 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	60bb      	str	r3, [r7, #8]
   return(result);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f023 0310 	bic.w	r3, r3, #16
 8009022:	647b      	str	r3, [r7, #68]	; 0x44
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	6979      	ldr	r1, [r7, #20]
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	613b      	str	r3, [r7, #16]
   return(result);
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e6      	bne.n	800900e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2220      	movs	r2, #32
 8009044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009054:	bf00      	nop
 8009056:	3754      	adds	r7, #84	; 0x54
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b090      	sub	sp, #64	; 0x40
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d137      	bne.n	80090ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	2200      	movs	r2, #0
 8009080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3308      	adds	r3, #8
 800908a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	623b      	str	r3, [r7, #32]
   return(result);
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800909a:	63bb      	str	r3, [r7, #56]	; 0x38
 800909c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090a4:	633a      	str	r2, [r7, #48]	; 0x30
 80090a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ac:	e841 2300 	strex	r3, r2, [r1]
 80090b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1e5      	bne.n	8009084 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
 80090ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	69b9      	ldr	r1, [r7, #24]
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	617b      	str	r3, [r7, #20]
   return(result);
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e6      	bne.n	80090b8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090ea:	e002      	b.n	80090f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090ee:	f7f9 f84d 	bl	800218c <HAL_UART_TxCpltCallback>
}
 80090f2:	bf00      	nop
 80090f4:	3740      	adds	r7, #64	; 0x40
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009106:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7ff fa49 	bl	80085a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800910e:	bf00      	nop
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b09c      	sub	sp, #112	; 0x70
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009122:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d171      	bne.n	8009216 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009134:	2200      	movs	r2, #0
 8009136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800913a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800914a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800914e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009158:	65bb      	str	r3, [r7, #88]	; 0x58
 800915a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800915e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e6      	bne.n	800913a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800916c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3308      	adds	r3, #8
 8009172:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	e853 3f00 	ldrex	r3, [r3]
 800917a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800917c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917e:	f023 0301 	bic.w	r3, r3, #1
 8009182:	667b      	str	r3, [r7, #100]	; 0x64
 8009184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3308      	adds	r3, #8
 800918a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800918c:	647a      	str	r2, [r7, #68]	; 0x44
 800918e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009190:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009194:	e841 2300 	strex	r3, r2, [r1]
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800919a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1e5      	bne.n	800916c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3308      	adds	r3, #8
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	623b      	str	r3, [r7, #32]
   return(result);
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b6:	663b      	str	r3, [r7, #96]	; 0x60
 80091b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3308      	adds	r3, #8
 80091be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091c0:	633a      	str	r2, [r7, #48]	; 0x30
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e5      	bne.n	80091a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d6:	2220      	movs	r2, #32
 80091d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d118      	bne.n	8009216 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f023 0310 	bic.w	r3, r3, #16
 80091f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	69b9      	ldr	r1, [r7, #24]
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	617b      	str	r3, [r7, #20]
   return(result);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e6      	bne.n	80091e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009218:	2200      	movs	r2, #0
 800921a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800921c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009220:	2b01      	cmp	r3, #1
 8009222:	d107      	bne.n	8009234 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009226:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800922a:	4619      	mov	r1, r3
 800922c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800922e:	f7ff f9d5 	bl	80085dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009232:	e002      	b.n	800923a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009234:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009236:	f7f8 ffbb 	bl	80021b0 <HAL_UART_RxCpltCallback>
}
 800923a:	bf00      	nop
 800923c:	3770      	adds	r7, #112	; 0x70
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925a:	2b01      	cmp	r3, #1
 800925c:	d109      	bne.n	8009272 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009264:	085b      	lsrs	r3, r3, #1
 8009266:	b29b      	uxth	r3, r3
 8009268:	4619      	mov	r1, r3
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff f9b6 	bl	80085dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009270:	e002      	b.n	8009278 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff f99e 	bl	80085b4 <HAL_UART_RxHalfCpltCallback>
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009292:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800929a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d109      	bne.n	80092be <UART_DMAError+0x3e>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2b21      	cmp	r3, #33	; 0x21
 80092ae:	d106      	bne.n	80092be <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80092b8:	6978      	ldr	r0, [r7, #20]
 80092ba:	f7ff fe47 	bl	8008f4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d109      	bne.n	80092e0 <UART_DMAError+0x60>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b22      	cmp	r3, #34	; 0x22
 80092d0:	d106      	bne.n	80092e0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80092da:	6978      	ldr	r0, [r7, #20]
 80092dc:	f7ff fe5c 	bl	8008f98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e6:	f043 0210 	orr.w	r2, r3, #16
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092f0:	6978      	ldr	r0, [r7, #20]
 80092f2:	f7ff f969 	bl	80085c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092f6:	bf00      	nop
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff f953 	bl	80085c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b088      	sub	sp, #32
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6979      	ldr	r1, [r7, #20]
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	613b      	str	r3, [r7, #16]
   return(result);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7f8 ff0b 	bl	800218c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009376:	bf00      	nop
 8009378:	3720      	adds	r7, #32
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
	...

08009394 <arm_cfft_radix8by2_f32>:
 8009394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009398:	ed2d 8b08 	vpush	{d8-d11}
 800939c:	4607      	mov	r7, r0
 800939e:	4608      	mov	r0, r1
 80093a0:	f8b7 c000 	ldrh.w	ip, [r7]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80093aa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80093ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80093b2:	f000 80b0 	beq.w	8009516 <arm_cfft_radix8by2_f32+0x182>
 80093b6:	008c      	lsls	r4, r1, #2
 80093b8:	3410      	adds	r4, #16
 80093ba:	f100 0310 	add.w	r3, r0, #16
 80093be:	1906      	adds	r6, r0, r4
 80093c0:	3210      	adds	r2, #16
 80093c2:	4444      	add	r4, r8
 80093c4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80093c8:	f108 0510 	add.w	r5, r8, #16
 80093cc:	ed15 2a04 	vldr	s4, [r5, #-16]
 80093d0:	ed55 2a03 	vldr	s5, [r5, #-12]
 80093d4:	ed54 4a04 	vldr	s9, [r4, #-16]
 80093d8:	ed14 4a03 	vldr	s8, [r4, #-12]
 80093dc:	ed14 6a02 	vldr	s12, [r4, #-8]
 80093e0:	ed54 5a01 	vldr	s11, [r4, #-4]
 80093e4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80093e8:	ed15 0a02 	vldr	s0, [r5, #-8]
 80093ec:	ed55 0a01 	vldr	s1, [r5, #-4]
 80093f0:	ed56 6a04 	vldr	s13, [r6, #-16]
 80093f4:	ed16 3a03 	vldr	s6, [r6, #-12]
 80093f8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80093fc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009400:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009404:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009408:	ed56 1a01 	vldr	s3, [r6, #-4]
 800940c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009410:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009414:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009418:	ee33 9a04 	vadd.f32	s18, s6, s8
 800941c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009420:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009424:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009428:	ee71 8a06 	vadd.f32	s17, s2, s12
 800942c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009430:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009434:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009438:	ed03 aa01 	vstr	s20, [r3, #-4]
 800943c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009440:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009444:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009448:	ed46 8a02 	vstr	s17, [r6, #-8]
 800944c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009450:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009454:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009458:	ed52 6a03 	vldr	s13, [r2, #-12]
 800945c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009460:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009464:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009468:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800946c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009470:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009474:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009478:	ee27 7a03 	vmul.f32	s14, s14, s6
 800947c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009480:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009484:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009488:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800948c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009490:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009494:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009498:	ed05 3a04 	vstr	s6, [r5, #-16]
 800949c:	ed04 4a04 	vstr	s8, [r4, #-16]
 80094a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80094a4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80094a8:	ee76 6a41 	vsub.f32	s13, s12, s2
 80094ac:	ee35 5a40 	vsub.f32	s10, s10, s0
 80094b0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80094b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80094b8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80094bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80094c0:	ee66 4a87 	vmul.f32	s9, s13, s14
 80094c4:	ee25 4a25 	vmul.f32	s8, s10, s11
 80094c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80094cc:	ee25 5a07 	vmul.f32	s10, s10, s14
 80094d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80094d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80094d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80094dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80094e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80094e4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80094e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80094ec:	3310      	adds	r3, #16
 80094ee:	4563      	cmp	r3, ip
 80094f0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80094f4:	f106 0610 	add.w	r6, r6, #16
 80094f8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80094fc:	f102 0210 	add.w	r2, r2, #16
 8009500:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009504:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009508:	f105 0510 	add.w	r5, r5, #16
 800950c:	f104 0410 	add.w	r4, r4, #16
 8009510:	f47f af5c 	bne.w	80093cc <arm_cfft_radix8by2_f32+0x38>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	b28c      	uxth	r4, r1
 8009518:	4621      	mov	r1, r4
 800951a:	2302      	movs	r3, #2
 800951c:	f000 fc1c 	bl	8009d58 <arm_radix8_butterfly_f32>
 8009520:	ecbd 8b08 	vpop	{d8-d11}
 8009524:	4621      	mov	r1, r4
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	4640      	mov	r0, r8
 800952a:	2302      	movs	r3, #2
 800952c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009530:	f000 bc12 	b.w	8009d58 <arm_radix8_butterfly_f32>

08009534 <arm_cfft_radix8by4_f32>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	ed2d 8b0a 	vpush	{d8-d12}
 800953c:	b08d      	sub	sp, #52	; 0x34
 800953e:	460d      	mov	r5, r1
 8009540:	910b      	str	r1, [sp, #44]	; 0x2c
 8009542:	8801      	ldrh	r1, [r0, #0]
 8009544:	6842      	ldr	r2, [r0, #4]
 8009546:	900a      	str	r0, [sp, #40]	; 0x28
 8009548:	0849      	lsrs	r1, r1, #1
 800954a:	008b      	lsls	r3, r1, #2
 800954c:	18ee      	adds	r6, r5, r3
 800954e:	18f0      	adds	r0, r6, r3
 8009550:	edd0 5a00 	vldr	s11, [r0]
 8009554:	edd5 7a00 	vldr	s15, [r5]
 8009558:	ed96 7a00 	vldr	s14, [r6]
 800955c:	edd0 3a01 	vldr	s7, [r0, #4]
 8009560:	ed96 4a01 	vldr	s8, [r6, #4]
 8009564:	ed95 5a01 	vldr	s10, [r5, #4]
 8009568:	9008      	str	r0, [sp, #32]
 800956a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800956e:	18c7      	adds	r7, r0, r3
 8009570:	edd7 4a00 	vldr	s9, [r7]
 8009574:	ed97 3a01 	vldr	s6, [r7, #4]
 8009578:	9701      	str	r7, [sp, #4]
 800957a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800957e:	462c      	mov	r4, r5
 8009580:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009584:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009588:	ee16 ca90 	vmov	ip, s13
 800958c:	f844 cb08 	str.w	ip, [r4], #8
 8009590:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009594:	edd6 5a01 	vldr	s11, [r6, #4]
 8009598:	edd7 2a01 	vldr	s5, [r7, #4]
 800959c:	9404      	str	r4, [sp, #16]
 800959e:	ee35 5a63 	vsub.f32	s10, s10, s7
 80095a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 80095a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80095aa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80095ae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80095b2:	0849      	lsrs	r1, r1, #1
 80095b4:	f102 0e08 	add.w	lr, r2, #8
 80095b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80095bc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80095c0:	9109      	str	r1, [sp, #36]	; 0x24
 80095c2:	ee35 4a47 	vsub.f32	s8, s10, s14
 80095c6:	f1a1 0902 	sub.w	r9, r1, #2
 80095ca:	f8cd e00c 	str.w	lr, [sp, #12]
 80095ce:	4631      	mov	r1, r6
 80095d0:	ee13 ea90 	vmov	lr, s7
 80095d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80095d8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80095dc:	4604      	mov	r4, r0
 80095de:	edc5 5a01 	vstr	s11, [r5, #4]
 80095e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80095e6:	f841 eb08 	str.w	lr, [r1], #8
 80095ea:	ee34 5a24 	vadd.f32	s10, s8, s9
 80095ee:	ee16 ea10 	vmov	lr, s12
 80095f2:	ed86 5a01 	vstr	s10, [r6, #4]
 80095f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80095fa:	f844 eb08 	str.w	lr, [r4], #8
 80095fe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009602:	edc0 6a01 	vstr	s13, [r0, #4]
 8009606:	9405      	str	r4, [sp, #20]
 8009608:	4604      	mov	r4, r0
 800960a:	ee17 0a90 	vmov	r0, s15
 800960e:	9106      	str	r1, [sp, #24]
 8009610:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009614:	f102 0110 	add.w	r1, r2, #16
 8009618:	46bc      	mov	ip, r7
 800961a:	9100      	str	r1, [sp, #0]
 800961c:	f847 0b08 	str.w	r0, [r7], #8
 8009620:	f102 0118 	add.w	r1, r2, #24
 8009624:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8009628:	9102      	str	r1, [sp, #8]
 800962a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800962e:	9007      	str	r0, [sp, #28]
 8009630:	f000 8134 	beq.w	800989c <arm_cfft_radix8by4_f32+0x368>
 8009634:	f102 0920 	add.w	r9, r2, #32
 8009638:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	f8dd a000 	ldr.w	sl, [sp]
 8009642:	3b0c      	subs	r3, #12
 8009644:	4683      	mov	fp, r0
 8009646:	4463      	add	r3, ip
 8009648:	f105 0e10 	add.w	lr, r5, #16
 800964c:	f1a4 010c 	sub.w	r1, r4, #12
 8009650:	f104 0510 	add.w	r5, r4, #16
 8009654:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009658:	f1a2 040c 	sub.w	r4, r2, #12
 800965c:	f106 0010 	add.w	r0, r6, #16
 8009660:	3210      	adds	r2, #16
 8009662:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009666:	ed55 5a02 	vldr	s11, [r5, #-8]
 800966a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800966e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009672:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009676:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800967a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800967e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009682:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009686:	ee30 6a26 	vadd.f32	s12, s0, s13
 800968a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800968e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009692:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009696:	ee75 5a65 	vsub.f32	s11, s10, s11
 800969a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800969e:	ed10 7a01 	vldr	s14, [r0, #-4]
 80096a2:	ed52 6a01 	vldr	s13, [r2, #-4]
 80096a6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80096aa:	ee78 aa25 	vadd.f32	s21, s16, s11
 80096ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80096b2:	ee70 3a67 	vsub.f32	s7, s0, s15
 80096b6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80096ba:	ed94 7a02 	vldr	s14, [r4, #8]
 80096be:	ed9c 2a02 	vldr	s4, [ip, #8]
 80096c2:	ed91 ba02 	vldr	s22, [r1, #8]
 80096c6:	edd3 9a02 	vldr	s19, [r3, #8]
 80096ca:	edd4 2a01 	vldr	s5, [r4, #4]
 80096ce:	ed9c 9a01 	vldr	s18, [ip, #4]
 80096d2:	ed93 5a01 	vldr	s10, [r3, #4]
 80096d6:	edd1 0a01 	vldr	s1, [r1, #4]
 80096da:	ee72 6a07 	vadd.f32	s13, s4, s14
 80096de:	ee32 2a47 	vsub.f32	s4, s4, s14
 80096e2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80096e6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80096ea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80096ee:	ee79 2a62 	vsub.f32	s5, s18, s5
 80096f2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80096f6:	ed91 7a01 	vldr	s14, [r1, #4]
 80096fa:	edd3 8a01 	vldr	s17, [r3, #4]
 80096fe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8009702:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8009706:	ee37 7a28 	vadd.f32	s14, s14, s17
 800970a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800970e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009712:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8009716:	ed1a aa02 	vldr	s20, [sl, #-8]
 800971a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800971e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8009722:	ee7a aac1 	vsub.f32	s21, s21, s2
 8009726:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800972a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800972e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009732:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009736:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800973a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800973e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009742:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009746:	ee68 8a87 	vmul.f32	s17, s17, s14
 800974a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800974e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009752:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009756:	ee3b aaca 	vsub.f32	s20, s23, s20
 800975a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800975e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009762:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009766:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800976a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800976e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009772:	edc1 8a01 	vstr	s17, [r1, #4]
 8009776:	ed81 aa02 	vstr	s20, [r1, #8]
 800977a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800977e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009782:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009786:	ed59 6a03 	vldr	s13, [r9, #-12]
 800978a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800978e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009792:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009796:	ee66 9a26 	vmul.f32	s19, s12, s13
 800979a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800979e:	ee26 6a23 	vmul.f32	s12, s12, s7
 80097a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 80097a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80097aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80097ae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80097b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80097b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80097ba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80097be:	ee79 3a29 	vadd.f32	s7, s18, s19
 80097c2:	ee75 6a60 	vsub.f32	s13, s10, s1
 80097c6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80097ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80097ce:	ed45 3a02 	vstr	s7, [r5, #-8]
 80097d2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80097d6:	ed84 7a01 	vstr	s14, [r4, #4]
 80097da:	ed84 4a02 	vstr	s8, [r4, #8]
 80097de:	ee35 6a81 	vadd.f32	s12, s11, s2
 80097e2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80097e6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80097ea:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80097ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 80097f2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80097f6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80097fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80097fe:	ee26 5a25 	vmul.f32	s10, s12, s11
 8009802:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009806:	ee26 6a26 	vmul.f32	s12, s12, s13
 800980a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800980e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8009812:	ee23 3a25 	vmul.f32	s6, s6, s11
 8009816:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800981a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800981e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009822:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009826:	f1bb 0b01 	subs.w	fp, fp, #1
 800982a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800982e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009832:	f10e 0e08 	add.w	lr, lr, #8
 8009836:	ed83 3a02 	vstr	s6, [r3, #8]
 800983a:	ed83 7a01 	vstr	s14, [r3, #4]
 800983e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009842:	f10a 0a08 	add.w	sl, sl, #8
 8009846:	f100 0008 	add.w	r0, r0, #8
 800984a:	f1a1 0108 	sub.w	r1, r1, #8
 800984e:	f109 0910 	add.w	r9, r9, #16
 8009852:	f105 0508 	add.w	r5, r5, #8
 8009856:	f1a4 0408 	sub.w	r4, r4, #8
 800985a:	f108 0818 	add.w	r8, r8, #24
 800985e:	f102 0208 	add.w	r2, r2, #8
 8009862:	f1a3 0308 	sub.w	r3, r3, #8
 8009866:	f47f aefc 	bne.w	8009662 <arm_cfft_radix8by4_f32+0x12e>
 800986a:	9907      	ldr	r1, [sp, #28]
 800986c:	9800      	ldr	r0, [sp, #0]
 800986e:	00cb      	lsls	r3, r1, #3
 8009870:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009874:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009878:	9100      	str	r1, [sp, #0]
 800987a:	9904      	ldr	r1, [sp, #16]
 800987c:	4419      	add	r1, r3
 800987e:	9104      	str	r1, [sp, #16]
 8009880:	9903      	ldr	r1, [sp, #12]
 8009882:	4419      	add	r1, r3
 8009884:	9103      	str	r1, [sp, #12]
 8009886:	9906      	ldr	r1, [sp, #24]
 8009888:	4419      	add	r1, r3
 800988a:	9106      	str	r1, [sp, #24]
 800988c:	9905      	ldr	r1, [sp, #20]
 800988e:	441f      	add	r7, r3
 8009890:	4419      	add	r1, r3
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	9105      	str	r1, [sp, #20]
 8009896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800989a:	9302      	str	r3, [sp, #8]
 800989c:	9904      	ldr	r1, [sp, #16]
 800989e:	9805      	ldr	r0, [sp, #20]
 80098a0:	ed91 4a00 	vldr	s8, [r1]
 80098a4:	edd0 6a00 	vldr	s13, [r0]
 80098a8:	9b06      	ldr	r3, [sp, #24]
 80098aa:	ed97 3a00 	vldr	s6, [r7]
 80098ae:	edd3 7a00 	vldr	s15, [r3]
 80098b2:	edd0 4a01 	vldr	s9, [r0, #4]
 80098b6:	edd1 3a01 	vldr	s7, [r1, #4]
 80098ba:	ed97 2a01 	vldr	s4, [r7, #4]
 80098be:	ed93 7a01 	vldr	s14, [r3, #4]
 80098c2:	9a03      	ldr	r2, [sp, #12]
 80098c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80098c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 80098cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80098d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80098d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80098d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80098dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 80098e0:	ed81 5a00 	vstr	s10, [r1]
 80098e4:	ed93 5a01 	vldr	s10, [r3, #4]
 80098e8:	edd7 4a01 	vldr	s9, [r7, #4]
 80098ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 80098f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80098f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80098f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80098fc:	ed81 5a01 	vstr	s10, [r1, #4]
 8009900:	edd2 1a00 	vldr	s3, [r2]
 8009904:	edd2 2a01 	vldr	s5, [r2, #4]
 8009908:	ee34 5a83 	vadd.f32	s10, s9, s6
 800990c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009910:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009914:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009918:	ee24 4a22 	vmul.f32	s8, s8, s5
 800991c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009920:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009924:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009928:	ee35 5a44 	vsub.f32	s10, s10, s8
 800992c:	edc3 2a00 	vstr	s5, [r3]
 8009930:	ed83 5a01 	vstr	s10, [r3, #4]
 8009934:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009938:	9b00      	ldr	r3, [sp, #0]
 800993a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800993e:	ed93 4a01 	vldr	s8, [r3, #4]
 8009942:	ed93 5a00 	vldr	s10, [r3]
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800994c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009950:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009954:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009958:	ee65 5a84 	vmul.f32	s11, s11, s8
 800995c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009960:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009964:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009968:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800996c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009970:	edc0 5a00 	vstr	s11, [r0]
 8009974:	edd3 5a01 	vldr	s11, [r3, #4]
 8009978:	edd3 6a00 	vldr	s13, [r3]
 800997c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009980:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009984:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009988:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800998c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009990:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009994:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009998:	ee76 7a27 	vadd.f32	s15, s12, s15
 800999c:	ed87 7a01 	vstr	s14, [r7, #4]
 80099a0:	edc7 7a00 	vstr	s15, [r7]
 80099a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80099a8:	4621      	mov	r1, r4
 80099aa:	686a      	ldr	r2, [r5, #4]
 80099ac:	2304      	movs	r3, #4
 80099ae:	f000 f9d3 	bl	8009d58 <arm_radix8_butterfly_f32>
 80099b2:	4630      	mov	r0, r6
 80099b4:	4621      	mov	r1, r4
 80099b6:	686a      	ldr	r2, [r5, #4]
 80099b8:	2304      	movs	r3, #4
 80099ba:	f000 f9cd 	bl	8009d58 <arm_radix8_butterfly_f32>
 80099be:	9808      	ldr	r0, [sp, #32]
 80099c0:	686a      	ldr	r2, [r5, #4]
 80099c2:	4621      	mov	r1, r4
 80099c4:	2304      	movs	r3, #4
 80099c6:	f000 f9c7 	bl	8009d58 <arm_radix8_butterfly_f32>
 80099ca:	686a      	ldr	r2, [r5, #4]
 80099cc:	9801      	ldr	r0, [sp, #4]
 80099ce:	4621      	mov	r1, r4
 80099d0:	2304      	movs	r3, #4
 80099d2:	b00d      	add	sp, #52	; 0x34
 80099d4:	ecbd 8b0a 	vpop	{d8-d12}
 80099d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	f000 b9bc 	b.w	8009d58 <arm_radix8_butterfly_f32>

080099e0 <arm_cfft_f32>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	2a01      	cmp	r2, #1
 80099e6:	4606      	mov	r6, r0
 80099e8:	4617      	mov	r7, r2
 80099ea:	460c      	mov	r4, r1
 80099ec:	4698      	mov	r8, r3
 80099ee:	8805      	ldrh	r5, [r0, #0]
 80099f0:	d056      	beq.n	8009aa0 <arm_cfft_f32+0xc0>
 80099f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80099f6:	d063      	beq.n	8009ac0 <arm_cfft_f32+0xe0>
 80099f8:	d916      	bls.n	8009a28 <arm_cfft_f32+0x48>
 80099fa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80099fe:	d01a      	beq.n	8009a36 <arm_cfft_f32+0x56>
 8009a00:	d947      	bls.n	8009a92 <arm_cfft_f32+0xb2>
 8009a02:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009a06:	d05b      	beq.n	8009ac0 <arm_cfft_f32+0xe0>
 8009a08:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009a0c:	d105      	bne.n	8009a1a <arm_cfft_f32+0x3a>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	6872      	ldr	r2, [r6, #4]
 8009a12:	4629      	mov	r1, r5
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 f99f 	bl	8009d58 <arm_radix8_butterfly_f32>
 8009a1a:	f1b8 0f00 	cmp.w	r8, #0
 8009a1e:	d111      	bne.n	8009a44 <arm_cfft_f32+0x64>
 8009a20:	2f01      	cmp	r7, #1
 8009a22:	d016      	beq.n	8009a52 <arm_cfft_f32+0x72>
 8009a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a28:	2d20      	cmp	r5, #32
 8009a2a:	d049      	beq.n	8009ac0 <arm_cfft_f32+0xe0>
 8009a2c:	d935      	bls.n	8009a9a <arm_cfft_f32+0xba>
 8009a2e:	2d40      	cmp	r5, #64	; 0x40
 8009a30:	d0ed      	beq.n	8009a0e <arm_cfft_f32+0x2e>
 8009a32:	2d80      	cmp	r5, #128	; 0x80
 8009a34:	d1f1      	bne.n	8009a1a <arm_cfft_f32+0x3a>
 8009a36:	4621      	mov	r1, r4
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff fcab 	bl	8009394 <arm_cfft_radix8by2_f32>
 8009a3e:	f1b8 0f00 	cmp.w	r8, #0
 8009a42:	d0ed      	beq.n	8009a20 <arm_cfft_f32+0x40>
 8009a44:	68b2      	ldr	r2, [r6, #8]
 8009a46:	89b1      	ldrh	r1, [r6, #12]
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 f841 	bl	8009ad0 <arm_bitreversal_32>
 8009a4e:	2f01      	cmp	r7, #1
 8009a50:	d1e8      	bne.n	8009a24 <arm_cfft_f32+0x44>
 8009a52:	ee07 5a90 	vmov	s15, r5
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009a62:	2d00      	cmp	r5, #0
 8009a64:	d0de      	beq.n	8009a24 <arm_cfft_f32+0x44>
 8009a66:	f104 0108 	add.w	r1, r4, #8
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	429d      	cmp	r5, r3
 8009a70:	f101 0108 	add.w	r1, r1, #8
 8009a74:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009a78:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009a7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009a80:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009a84:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009a88:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009a8c:	d1ee      	bne.n	8009a6c <arm_cfft_f32+0x8c>
 8009a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a92:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009a96:	d0ba      	beq.n	8009a0e <arm_cfft_f32+0x2e>
 8009a98:	e7bf      	b.n	8009a1a <arm_cfft_f32+0x3a>
 8009a9a:	2d10      	cmp	r5, #16
 8009a9c:	d0cb      	beq.n	8009a36 <arm_cfft_f32+0x56>
 8009a9e:	e7bc      	b.n	8009a1a <arm_cfft_f32+0x3a>
 8009aa0:	b19d      	cbz	r5, 8009aca <arm_cfft_f32+0xea>
 8009aa2:	f101 030c 	add.w	r3, r1, #12
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009aac:	3201      	adds	r2, #1
 8009aae:	eef1 7a67 	vneg.f32	s15, s15
 8009ab2:	4295      	cmp	r5, r2
 8009ab4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009ab8:	f103 0308 	add.w	r3, r3, #8
 8009abc:	d1f4      	bne.n	8009aa8 <arm_cfft_f32+0xc8>
 8009abe:	e798      	b.n	80099f2 <arm_cfft_f32+0x12>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff fd36 	bl	8009534 <arm_cfft_radix8by4_f32>
 8009ac8:	e7a7      	b.n	8009a1a <arm_cfft_f32+0x3a>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0aa      	beq.n	8009a24 <arm_cfft_f32+0x44>
 8009ace:	e7b9      	b.n	8009a44 <arm_cfft_f32+0x64>

08009ad0 <arm_bitreversal_32>:
 8009ad0:	b1e9      	cbz	r1, 8009b0e <arm_bitreversal_32+0x3e>
 8009ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	f102 0e02 	add.w	lr, r2, #2
 8009ada:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009ade:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8009ae2:	08a4      	lsrs	r4, r4, #2
 8009ae4:	089b      	lsrs	r3, r3, #2
 8009ae6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8009aea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009aee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009af2:	00a6      	lsls	r6, r4, #2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8009afa:	3304      	adds	r3, #4
 8009afc:	1d34      	adds	r4, r6, #4
 8009afe:	3502      	adds	r5, #2
 8009b00:	58c6      	ldr	r6, [r0, r3]
 8009b02:	5907      	ldr	r7, [r0, r4]
 8009b04:	50c7      	str	r7, [r0, r3]
 8009b06:	428d      	cmp	r5, r1
 8009b08:	5106      	str	r6, [r0, r4]
 8009b0a:	d3e6      	bcc.n	8009ada <arm_bitreversal_32+0xa>
 8009b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0e:	4770      	bx	lr

08009b10 <arm_cmplx_mag_f32>:
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	ed2d 8b02 	vpush	{d8}
 8009b18:	0897      	lsrs	r7, r2, #2
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	d077      	beq.n	8009c0e <arm_cmplx_mag_f32+0xfe>
 8009b1e:	f04f 0800 	mov.w	r8, #0
 8009b22:	f100 0420 	add.w	r4, r0, #32
 8009b26:	f101 0510 	add.w	r5, r1, #16
 8009b2a:	463e      	mov	r6, r7
 8009b2c:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009b30:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8009b34:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b48:	f2c0 80c5 	blt.w	8009cd6 <arm_cmplx_mag_f32+0x1c6>
 8009b4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b54:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009b58:	f100 80cb 	bmi.w	8009cf2 <arm_cmplx_mag_f32+0x1e2>
 8009b5c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009b60:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8009b64:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8009b68:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7c:	f2c0 80a8 	blt.w	8009cd0 <arm_cmplx_mag_f32+0x1c0>
 8009b80:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b88:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009b8c:	f100 80a8 	bmi.w	8009ce0 <arm_cmplx_mag_f32+0x1d0>
 8009b90:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009b94:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009b98:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009b9c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ba0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009ba4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ba8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb0:	f2c0 808b 	blt.w	8009cca <arm_cmplx_mag_f32+0x1ba>
 8009bb4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009bc0:	f100 80a9 	bmi.w	8009d16 <arm_cmplx_mag_f32+0x206>
 8009bc4:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009bc8:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009bcc:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009bd0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009bd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009bd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be4:	db6e      	blt.n	8009cc4 <arm_cmplx_mag_f32+0x1b4>
 8009be6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009bf2:	f100 8087 	bmi.w	8009d04 <arm_cmplx_mag_f32+0x1f4>
 8009bf6:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009bfa:	3e01      	subs	r6, #1
 8009bfc:	f104 0420 	add.w	r4, r4, #32
 8009c00:	f105 0510 	add.w	r5, r5, #16
 8009c04:	d192      	bne.n	8009b2c <arm_cmplx_mag_f32+0x1c>
 8009c06:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009c0a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009c0e:	f012 0203 	ands.w	r2, r2, #3
 8009c12:	d052      	beq.n	8009cba <arm_cmplx_mag_f32+0x1aa>
 8009c14:	ed90 0a00 	vldr	s0, [r0]
 8009c18:	edd0 7a01 	vldr	s15, [r0, #4]
 8009c1c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c24:	2300      	movs	r3, #0
 8009c26:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009c2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c32:	bfb8      	it	lt
 8009c34:	600b      	strlt	r3, [r1, #0]
 8009c36:	db08      	blt.n	8009c4a <arm_cmplx_mag_f32+0x13a>
 8009c38:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c40:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c44:	d479      	bmi.n	8009d3a <arm_cmplx_mag_f32+0x22a>
 8009c46:	ed81 8a00 	vstr	s16, [r1]
 8009c4a:	3a01      	subs	r2, #1
 8009c4c:	d035      	beq.n	8009cba <arm_cmplx_mag_f32+0x1aa>
 8009c4e:	ed90 0a02 	vldr	s0, [r0, #8]
 8009c52:	edd0 7a03 	vldr	s15, [r0, #12]
 8009c56:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c5e:	2300      	movs	r3, #0
 8009c60:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009c64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6c:	bfb8      	it	lt
 8009c6e:	604b      	strlt	r3, [r1, #4]
 8009c70:	db08      	blt.n	8009c84 <arm_cmplx_mag_f32+0x174>
 8009c72:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009c7e:	d453      	bmi.n	8009d28 <arm_cmplx_mag_f32+0x218>
 8009c80:	ed81 8a01 	vstr	s16, [r1, #4]
 8009c84:	2a01      	cmp	r2, #1
 8009c86:	d018      	beq.n	8009cba <arm_cmplx_mag_f32+0x1aa>
 8009c88:	ed90 0a04 	vldr	s0, [r0, #16]
 8009c8c:	edd0 7a05 	vldr	s15, [r0, #20]
 8009c90:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009c94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009c98:	2300      	movs	r3, #0
 8009c9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca6:	db19      	blt.n	8009cdc <arm_cmplx_mag_f32+0x1cc>
 8009ca8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009cb4:	d44a      	bmi.n	8009d4c <arm_cmplx_mag_f32+0x23c>
 8009cb6:	ed81 8a02 	vstr	s16, [r1, #8]
 8009cba:	b004      	add	sp, #16
 8009cbc:	ecbd 8b02 	vpop	{d8}
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	f845 8c04 	str.w	r8, [r5, #-4]
 8009cc8:	e797      	b.n	8009bfa <arm_cmplx_mag_f32+0xea>
 8009cca:	f845 8c08 	str.w	r8, [r5, #-8]
 8009cce:	e77b      	b.n	8009bc8 <arm_cmplx_mag_f32+0xb8>
 8009cd0:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009cd4:	e75e      	b.n	8009b94 <arm_cmplx_mag_f32+0x84>
 8009cd6:	f845 8c10 	str.w	r8, [r5, #-16]
 8009cda:	e741      	b.n	8009b60 <arm_cmplx_mag_f32+0x50>
 8009cdc:	608b      	str	r3, [r1, #8]
 8009cde:	e7ec      	b.n	8009cba <arm_cmplx_mag_f32+0x1aa>
 8009ce0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009ce4:	9001      	str	r0, [sp, #4]
 8009ce6:	f000 fb4f 	bl	800a388 <sqrtf>
 8009cea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009cee:	9801      	ldr	r0, [sp, #4]
 8009cf0:	e74e      	b.n	8009b90 <arm_cmplx_mag_f32+0x80>
 8009cf2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009cf6:	9001      	str	r0, [sp, #4]
 8009cf8:	f000 fb46 	bl	800a388 <sqrtf>
 8009cfc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009d00:	9801      	ldr	r0, [sp, #4]
 8009d02:	e72b      	b.n	8009b5c <arm_cmplx_mag_f32+0x4c>
 8009d04:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009d08:	9001      	str	r0, [sp, #4]
 8009d0a:	f000 fb3d 	bl	800a388 <sqrtf>
 8009d0e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009d12:	9801      	ldr	r0, [sp, #4]
 8009d14:	e76f      	b.n	8009bf6 <arm_cmplx_mag_f32+0xe6>
 8009d16:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009d1a:	9001      	str	r0, [sp, #4]
 8009d1c:	f000 fb34 	bl	800a388 <sqrtf>
 8009d20:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009d24:	9801      	ldr	r0, [sp, #4]
 8009d26:	e74d      	b.n	8009bc4 <arm_cmplx_mag_f32+0xb4>
 8009d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d2c:	9201      	str	r2, [sp, #4]
 8009d2e:	f000 fb2b 	bl	800a388 <sqrtf>
 8009d32:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009d36:	9903      	ldr	r1, [sp, #12]
 8009d38:	e7a2      	b.n	8009c80 <arm_cmplx_mag_f32+0x170>
 8009d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d3e:	9201      	str	r2, [sp, #4]
 8009d40:	f000 fb22 	bl	800a388 <sqrtf>
 8009d44:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009d48:	9903      	ldr	r1, [sp, #12]
 8009d4a:	e77c      	b.n	8009c46 <arm_cmplx_mag_f32+0x136>
 8009d4c:	9101      	str	r1, [sp, #4]
 8009d4e:	f000 fb1b 	bl	800a388 <sqrtf>
 8009d52:	9901      	ldr	r1, [sp, #4]
 8009d54:	e7af      	b.n	8009cb6 <arm_cmplx_mag_f32+0x1a6>
 8009d56:	bf00      	nop

08009d58 <arm_radix8_butterfly_f32>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	ed2d 8b10 	vpush	{d8-d15}
 8009d60:	b095      	sub	sp, #84	; 0x54
 8009d62:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009d66:	4603      	mov	r3, r0
 8009d68:	3304      	adds	r3, #4
 8009d6a:	ed9f bab9 	vldr	s22, [pc, #740]	; 800a050 <arm_radix8_butterfly_f32+0x2f8>
 8009d6e:	9012      	str	r0, [sp, #72]	; 0x48
 8009d70:	468b      	mov	fp, r1
 8009d72:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d74:	4689      	mov	r9, r1
 8009d76:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009d7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d7c:	960f      	str	r6, [sp, #60]	; 0x3c
 8009d7e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8009d82:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8009d86:	eb03 0508 	add.w	r5, r3, r8
 8009d8a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8009d8e:	eb05 040e 	add.w	r4, r5, lr
 8009d92:	0137      	lsls	r7, r6, #4
 8009d94:	eba6 030a 	sub.w	r3, r6, sl
 8009d98:	eb04 000e 	add.w	r0, r4, lr
 8009d9c:	44b2      	add	sl, r6
 8009d9e:	1d3a      	adds	r2, r7, #4
 8009da0:	9702      	str	r7, [sp, #8]
 8009da2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009da6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8009daa:	ebae 0c06 	sub.w	ip, lr, r6
 8009dae:	9703      	str	r7, [sp, #12]
 8009db0:	eb03 0708 	add.w	r7, r3, r8
 8009db4:	9701      	str	r7, [sp, #4]
 8009db6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8009dba:	9706      	str	r7, [sp, #24]
 8009dbc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009dbe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8009dc2:	f10e 0104 	add.w	r1, lr, #4
 8009dc6:	4439      	add	r1, r7
 8009dc8:	443a      	add	r2, r7
 8009dca:	0137      	lsls	r7, r6, #4
 8009dcc:	00f6      	lsls	r6, r6, #3
 8009dce:	9704      	str	r7, [sp, #16]
 8009dd0:	9605      	str	r6, [sp, #20]
 8009dd2:	9f01      	ldr	r7, [sp, #4]
 8009dd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009dd6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8009dda:	f04f 0c00 	mov.w	ip, #0
 8009dde:	edd4 6a00 	vldr	s13, [r4]
 8009de2:	edd7 1a00 	vldr	s3, [r7]
 8009de6:	ed16 aa01 	vldr	s20, [r6, #-4]
 8009dea:	edd5 5a00 	vldr	s11, [r5]
 8009dee:	ed52 9a01 	vldr	s19, [r2, #-4]
 8009df2:	ed90 6a00 	vldr	s12, [r0]
 8009df6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009dfa:	ed93 3a00 	vldr	s6, [r3]
 8009dfe:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009e02:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009e06:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009e0a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009e0e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009e12:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009e16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e1a:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009e1e:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009e22:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009e26:	ed85 4a00 	vstr	s8, [r5]
 8009e2a:	edd1 6a00 	vldr	s13, [r1]
 8009e2e:	ed94 9a01 	vldr	s18, [r4, #4]
 8009e32:	edd3 2a01 	vldr	s5, [r3, #4]
 8009e36:	edd7 8a01 	vldr	s17, [r7, #4]
 8009e3a:	edd6 0a00 	vldr	s1, [r6]
 8009e3e:	edd5 3a01 	vldr	s7, [r5, #4]
 8009e42:	ed90 8a01 	vldr	s16, [r0, #4]
 8009e46:	ed92 7a00 	vldr	s14, [r2]
 8009e4a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009e4e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009e52:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009e56:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009e5a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009e5e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009e62:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009e66:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009e6a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009e6e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009e72:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009e76:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009e7a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009e7e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009e82:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009e86:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009e8a:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009e8e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8009e92:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009e96:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009e9a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009e9e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8009ea2:	ee33 2a20 	vadd.f32	s4, s6, s1
 8009ea6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009eaa:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009eae:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8009eb2:	ee77 0a01 	vadd.f32	s1, s14, s2
 8009eb6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009eba:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009ebe:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009ec2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009ec6:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009eca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009ece:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009ed2:	ee33 1a45 	vsub.f32	s2, s6, s10
 8009ed6:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009eda:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009ede:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009ee2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8009ee6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009eea:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009eee:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009ef2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8009ef6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009efa:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009efe:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009f02:	44dc      	add	ip, fp
 8009f04:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009f08:	45e1      	cmp	r9, ip
 8009f0a:	ed86 8a00 	vstr	s16, [r6]
 8009f0e:	ed85 2a01 	vstr	s4, [r5, #4]
 8009f12:	4456      	add	r6, sl
 8009f14:	ed02 0a01 	vstr	s0, [r2, #-4]
 8009f18:	4455      	add	r5, sl
 8009f1a:	edc0 6a00 	vstr	s13, [r0]
 8009f1e:	ed82 1a00 	vstr	s2, [r2]
 8009f22:	ed80 5a01 	vstr	s10, [r0, #4]
 8009f26:	4452      	add	r2, sl
 8009f28:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009f2c:	4450      	add	r0, sl
 8009f2e:	edc7 2a00 	vstr	s5, [r7]
 8009f32:	edc4 4a00 	vstr	s9, [r4]
 8009f36:	ed83 7a00 	vstr	s14, [r3]
 8009f3a:	edc1 5a00 	vstr	s11, [r1]
 8009f3e:	edc7 3a01 	vstr	s7, [r7, #4]
 8009f42:	4451      	add	r1, sl
 8009f44:	ed84 6a01 	vstr	s12, [r4, #4]
 8009f48:	4457      	add	r7, sl
 8009f4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8009f4e:	4454      	add	r4, sl
 8009f50:	4453      	add	r3, sl
 8009f52:	f63f af44 	bhi.w	8009dde <arm_radix8_butterfly_f32+0x86>
 8009f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f58:	2b07      	cmp	r3, #7
 8009f5a:	f240 81b7 	bls.w	800a2cc <arm_radix8_butterfly_f32+0x574>
 8009f5e:	9b06      	ldr	r3, [sp, #24]
 8009f60:	9903      	ldr	r1, [sp, #12]
 8009f62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f64:	9e05      	ldr	r6, [sp, #20]
 8009f66:	9a04      	ldr	r2, [sp, #16]
 8009f68:	f103 0c08 	add.w	ip, r3, #8
 8009f6c:	9b02      	ldr	r3, [sp, #8]
 8009f6e:	3108      	adds	r1, #8
 8009f70:	f108 0808 	add.w	r8, r8, #8
 8009f74:	1841      	adds	r1, r0, r1
 8009f76:	3608      	adds	r6, #8
 8009f78:	330c      	adds	r3, #12
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4444      	add	r4, r8
 8009f7e:	18c3      	adds	r3, r0, r3
 8009f80:	9109      	str	r1, [sp, #36]	; 0x24
 8009f82:	1981      	adds	r1, r0, r6
 8009f84:	f10e 0e08 	add.w	lr, lr, #8
 8009f88:	3208      	adds	r2, #8
 8009f8a:	940b      	str	r4, [sp, #44]	; 0x2c
 8009f8c:	9107      	str	r1, [sp, #28]
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4601      	mov	r1, r0
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	f100 030c 	add.w	r3, r0, #12
 8009f98:	4474      	add	r4, lr
 8009f9a:	f04f 0801 	mov.w	r8, #1
 8009f9e:	1882      	adds	r2, r0, r2
 8009fa0:	4461      	add	r1, ip
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	940a      	str	r4, [sp, #40]	; 0x28
 8009fa8:	46c1      	mov	r9, r8
 8009faa:	9208      	str	r2, [sp, #32]
 8009fac:	46d8      	mov	r8, fp
 8009fae:	9106      	str	r1, [sp, #24]
 8009fb0:	f04f 0e00 	mov.w	lr, #0
 8009fb4:	469b      	mov	fp, r3
 8009fb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009fba:	449e      	add	lr, r3
 8009fbc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8009fc0:	441a      	add	r2, r3
 8009fc2:	920e      	str	r2, [sp, #56]	; 0x38
 8009fc4:	441a      	add	r2, r3
 8009fc6:	18d4      	adds	r4, r2, r3
 8009fc8:	18e5      	adds	r5, r4, r3
 8009fca:	18ee      	adds	r6, r5, r3
 8009fcc:	18f7      	adds	r7, r6, r3
 8009fce:	eb07 0c03 	add.w	ip, r7, r3
 8009fd2:	920d      	str	r2, [sp, #52]	; 0x34
 8009fd4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8009fd8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8009fdc:	910c      	str	r1, [sp, #48]	; 0x30
 8009fde:	4419      	add	r1, r3
 8009fe0:	9103      	str	r1, [sp, #12]
 8009fe2:	4419      	add	r1, r3
 8009fe4:	18ca      	adds	r2, r1, r3
 8009fe6:	9202      	str	r2, [sp, #8]
 8009fe8:	441a      	add	r2, r3
 8009fea:	18d0      	adds	r0, r2, r3
 8009fec:	ed92 ea01 	vldr	s28, [r2, #4]
 8009ff0:	9a02      	ldr	r2, [sp, #8]
 8009ff2:	edd4 7a00 	vldr	s15, [r4]
 8009ff6:	edd2 da01 	vldr	s27, [r2, #4]
 8009ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ffc:	ed91 da01 	vldr	s26, [r1, #4]
 800a000:	ed92 ca01 	vldr	s24, [r2, #4]
 800a004:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a006:	9903      	ldr	r1, [sp, #12]
 800a008:	edcd 7a03 	vstr	s15, [sp, #12]
 800a00c:	edd2 7a00 	vldr	s15, [r2]
 800a010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a012:	edcd 7a02 	vstr	s15, [sp, #8]
 800a016:	edd2 7a00 	vldr	s15, [r2]
 800a01a:	edd0 ea01 	vldr	s29, [r0, #4]
 800a01e:	edd1 ca01 	vldr	s25, [r1, #4]
 800a022:	eddc ba00 	vldr	s23, [ip]
 800a026:	edd7 aa00 	vldr	s21, [r7]
 800a02a:	ed96 aa00 	vldr	s20, [r6]
 800a02e:	edd5 9a00 	vldr	s19, [r5]
 800a032:	edcd 7a01 	vstr	s15, [sp, #4]
 800a036:	4403      	add	r3, r0
 800a038:	ed93 fa01 	vldr	s30, [r3, #4]
 800a03c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800a040:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800a044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a048:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a04c:	46cc      	mov	ip, r9
 800a04e:	e001      	b.n	800a054 <arm_radix8_butterfly_f32+0x2fc>
 800a050:	3f3504f3 	.word	0x3f3504f3
 800a054:	ed91 6a00 	vldr	s12, [r1]
 800a058:	ed93 5a00 	vldr	s10, [r3]
 800a05c:	edd0 fa00 	vldr	s31, [r0]
 800a060:	edd4 7a00 	vldr	s15, [r4]
 800a064:	ed95 7a00 	vldr	s14, [r5]
 800a068:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a06c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800a070:	ed92 2a00 	vldr	s4, [r2]
 800a074:	ed96 0a00 	vldr	s0, [r6]
 800a078:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a07c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a080:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800a084:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a088:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a08c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a090:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a094:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a09c:	ed06 6a01 	vstr	s12, [r6, #-4]
 800a0a0:	edd4 8a01 	vldr	s17, [r4, #4]
 800a0a4:	ed92 9a01 	vldr	s18, [r2, #4]
 800a0a8:	edd7 0a00 	vldr	s1, [r7]
 800a0ac:	edd1 2a01 	vldr	s5, [r1, #4]
 800a0b0:	ed95 7a01 	vldr	s14, [r5, #4]
 800a0b4:	ed93 6a01 	vldr	s12, [r3, #4]
 800a0b8:	edd0 5a01 	vldr	s11, [r0, #4]
 800a0bc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a0c0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800a0c4:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a0c8:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a0cc:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a0d0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a0d4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a0d8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a0dc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a0e0:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a0e4:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a0e8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a0ec:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a0f0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a0f4:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a0f8:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a0fc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a100:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a104:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a108:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a10c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a110:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a114:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a118:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a11c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a120:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a124:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a128:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a12c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a130:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a134:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a138:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a13c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a140:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a144:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a148:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a14c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a150:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a154:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a158:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a15c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a160:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a164:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a168:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a16c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a170:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a174:	eddd 1a02 	vldr	s3, [sp, #8]
 800a178:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a17c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a180:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a184:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a188:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a18c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a190:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a194:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a198:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a19c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a1a0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a1a4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a1a8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a1ac:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a1b0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a1b4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a1b8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a1bc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a1c0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a1c4:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a1c8:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a1cc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a1d0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a1d4:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a1d8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a1dc:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a1e0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a1e4:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a1e8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a1ec:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a1f0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a1f4:	eddd 5a03 	vldr	s11, [sp, #12]
 800a1f8:	edc6 fa00 	vstr	s31, [r6]
 800a1fc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a200:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a204:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a208:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a20c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a210:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a214:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a218:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a21c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a220:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a224:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a228:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a22c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a230:	44c4      	add	ip, r8
 800a232:	45e3      	cmp	fp, ip
 800a234:	edc3 3a00 	vstr	s7, [r3]
 800a238:	edc3 6a01 	vstr	s13, [r3, #4]
 800a23c:	4456      	add	r6, sl
 800a23e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a242:	edc7 0a00 	vstr	s1, [r7]
 800a246:	4453      	add	r3, sl
 800a248:	ed80 2a00 	vstr	s4, [r0]
 800a24c:	edc0 2a01 	vstr	s5, [r0, #4]
 800a250:	4457      	add	r7, sl
 800a252:	edc2 1a00 	vstr	s3, [r2]
 800a256:	ed82 7a01 	vstr	s14, [r2, #4]
 800a25a:	4450      	add	r0, sl
 800a25c:	ed85 8a00 	vstr	s16, [r5]
 800a260:	ed85 0a01 	vstr	s0, [r5, #4]
 800a264:	4452      	add	r2, sl
 800a266:	edc1 4a00 	vstr	s9, [r1]
 800a26a:	4455      	add	r5, sl
 800a26c:	ed81 3a01 	vstr	s6, [r1, #4]
 800a270:	edc4 8a00 	vstr	s17, [r4]
 800a274:	ed84 6a01 	vstr	s12, [r4, #4]
 800a278:	4451      	add	r1, sl
 800a27a:	4454      	add	r4, sl
 800a27c:	f63f aeea 	bhi.w	800a054 <arm_radix8_butterfly_f32+0x2fc>
 800a280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a282:	3308      	adds	r3, #8
 800a284:	930b      	str	r3, [sp, #44]	; 0x2c
 800a286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a288:	3308      	adds	r3, #8
 800a28a:	930a      	str	r3, [sp, #40]	; 0x28
 800a28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28e:	3308      	adds	r3, #8
 800a290:	9309      	str	r3, [sp, #36]	; 0x24
 800a292:	9b08      	ldr	r3, [sp, #32]
 800a294:	3308      	adds	r3, #8
 800a296:	9308      	str	r3, [sp, #32]
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	3308      	adds	r3, #8
 800a29c:	9307      	str	r3, [sp, #28]
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	9306      	str	r3, [sp, #24]
 800a2a4:	9b05      	ldr	r3, [sp, #20]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	9304      	str	r3, [sp, #16]
 800a2b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b2:	f109 0901 	add.w	r9, r9, #1
 800a2b6:	454b      	cmp	r3, r9
 800a2b8:	f47f ae7d 	bne.w	8009fb6 <arm_radix8_butterfly_f32+0x25e>
 800a2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	46d9      	mov	r9, fp
 800a2c4:	9310      	str	r3, [sp, #64]	; 0x40
 800a2c6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800a2ca:	e554      	b.n	8009d76 <arm_radix8_butterfly_f32+0x1e>
 800a2cc:	b015      	add	sp, #84	; 0x54
 800a2ce:	ecbd 8b10 	vpop	{d8-d15}
 800a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d6:	bf00      	nop

0800a2d8 <powf>:
 800a2d8:	b508      	push	{r3, lr}
 800a2da:	ed2d 8b04 	vpush	{d8-d9}
 800a2de:	eeb0 8a60 	vmov.f32	s16, s1
 800a2e2:	eeb0 9a40 	vmov.f32	s18, s0
 800a2e6:	f000 f8c5 	bl	800a474 <__ieee754_powf>
 800a2ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800a2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f2:	eef0 8a40 	vmov.f32	s17, s0
 800a2f6:	d63e      	bvs.n	800a376 <powf+0x9e>
 800a2f8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a300:	d112      	bne.n	800a328 <powf+0x50>
 800a302:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30a:	d039      	beq.n	800a380 <powf+0xa8>
 800a30c:	eeb0 0a48 	vmov.f32	s0, s16
 800a310:	f000 f858 	bl	800a3c4 <finitef>
 800a314:	b378      	cbz	r0, 800a376 <powf+0x9e>
 800a316:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31e:	d52a      	bpl.n	800a376 <powf+0x9e>
 800a320:	f001 f9f8 	bl	800b714 <__errno>
 800a324:	2322      	movs	r3, #34	; 0x22
 800a326:	e014      	b.n	800a352 <powf+0x7a>
 800a328:	f000 f84c 	bl	800a3c4 <finitef>
 800a32c:	b998      	cbnz	r0, 800a356 <powf+0x7e>
 800a32e:	eeb0 0a49 	vmov.f32	s0, s18
 800a332:	f000 f847 	bl	800a3c4 <finitef>
 800a336:	b170      	cbz	r0, 800a356 <powf+0x7e>
 800a338:	eeb0 0a48 	vmov.f32	s0, s16
 800a33c:	f000 f842 	bl	800a3c4 <finitef>
 800a340:	b148      	cbz	r0, 800a356 <powf+0x7e>
 800a342:	eef4 8a68 	vcmp.f32	s17, s17
 800a346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34a:	d7e9      	bvc.n	800a320 <powf+0x48>
 800a34c:	f001 f9e2 	bl	800b714 <__errno>
 800a350:	2321      	movs	r3, #33	; 0x21
 800a352:	6003      	str	r3, [r0, #0]
 800a354:	e00f      	b.n	800a376 <powf+0x9e>
 800a356:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35e:	d10a      	bne.n	800a376 <powf+0x9e>
 800a360:	eeb0 0a49 	vmov.f32	s0, s18
 800a364:	f000 f82e 	bl	800a3c4 <finitef>
 800a368:	b128      	cbz	r0, 800a376 <powf+0x9e>
 800a36a:	eeb0 0a48 	vmov.f32	s0, s16
 800a36e:	f000 f829 	bl	800a3c4 <finitef>
 800a372:	2800      	cmp	r0, #0
 800a374:	d1d4      	bne.n	800a320 <powf+0x48>
 800a376:	eeb0 0a68 	vmov.f32	s0, s17
 800a37a:	ecbd 8b04 	vpop	{d8-d9}
 800a37e:	bd08      	pop	{r3, pc}
 800a380:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a384:	e7f7      	b.n	800a376 <powf+0x9e>
	...

0800a388 <sqrtf>:
 800a388:	b508      	push	{r3, lr}
 800a38a:	ed2d 8b02 	vpush	{d8}
 800a38e:	eeb0 8a40 	vmov.f32	s16, s0
 800a392:	f000 f824 	bl	800a3de <__ieee754_sqrtf>
 800a396:	eeb4 8a48 	vcmp.f32	s16, s16
 800a39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39e:	d60c      	bvs.n	800a3ba <sqrtf+0x32>
 800a3a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a3c0 <sqrtf+0x38>
 800a3a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ac:	d505      	bpl.n	800a3ba <sqrtf+0x32>
 800a3ae:	f001 f9b1 	bl	800b714 <__errno>
 800a3b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a3b6:	2321      	movs	r3, #33	; 0x21
 800a3b8:	6003      	str	r3, [r0, #0]
 800a3ba:	ecbd 8b02 	vpop	{d8}
 800a3be:	bd08      	pop	{r3, pc}
 800a3c0:	00000000 	.word	0x00000000

0800a3c4 <finitef>:
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a3ca:	9801      	ldr	r0, [sp, #4]
 800a3cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a3d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a3d4:	bfac      	ite	ge
 800a3d6:	2000      	movge	r0, #0
 800a3d8:	2001      	movlt	r0, #1
 800a3da:	b002      	add	sp, #8
 800a3dc:	4770      	bx	lr

0800a3de <__ieee754_sqrtf>:
 800a3de:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a3e2:	4770      	bx	lr

0800a3e4 <round>:
 800a3e4:	ec53 2b10 	vmov	r2, r3, d0
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a3ee:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a3f2:	2813      	cmp	r0, #19
 800a3f4:	ee10 5a10 	vmov	r5, s0
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	dc18      	bgt.n	800a42e <round+0x4a>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	da09      	bge.n	800a414 <round+0x30>
 800a400:	3001      	adds	r0, #1
 800a402:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a406:	d103      	bne.n	800a410 <round+0x2c>
 800a408:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a40c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a410:	2300      	movs	r3, #0
 800a412:	e02a      	b.n	800a46a <round+0x86>
 800a414:	4c16      	ldr	r4, [pc, #88]	; (800a470 <round+0x8c>)
 800a416:	4104      	asrs	r4, r0
 800a418:	ea03 0604 	and.w	r6, r3, r4
 800a41c:	4316      	orrs	r6, r2
 800a41e:	d011      	beq.n	800a444 <round+0x60>
 800a420:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a424:	4103      	asrs	r3, r0
 800a426:	440b      	add	r3, r1
 800a428:	ea23 0104 	bic.w	r1, r3, r4
 800a42c:	e7f0      	b.n	800a410 <round+0x2c>
 800a42e:	2833      	cmp	r0, #51	; 0x33
 800a430:	dd0b      	ble.n	800a44a <round+0x66>
 800a432:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a436:	d105      	bne.n	800a444 <round+0x60>
 800a438:	ee10 0a10 	vmov	r0, s0
 800a43c:	f7f5 ff26 	bl	800028c <__adddf3>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	ec43 2b10 	vmov	d0, r2, r3
 800a448:	bd70      	pop	{r4, r5, r6, pc}
 800a44a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a44e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a452:	40f4      	lsrs	r4, r6
 800a454:	4214      	tst	r4, r2
 800a456:	d0f5      	beq.n	800a444 <round+0x60>
 800a458:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a45c:	2301      	movs	r3, #1
 800a45e:	4083      	lsls	r3, r0
 800a460:	195b      	adds	r3, r3, r5
 800a462:	bf28      	it	cs
 800a464:	3101      	addcs	r1, #1
 800a466:	ea23 0304 	bic.w	r3, r3, r4
 800a46a:	461a      	mov	r2, r3
 800a46c:	460b      	mov	r3, r1
 800a46e:	e7e9      	b.n	800a444 <round+0x60>
 800a470:	000fffff 	.word	0x000fffff

0800a474 <__ieee754_powf>:
 800a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a478:	ee10 4a90 	vmov	r4, s1
 800a47c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a480:	ed2d 8b02 	vpush	{d8}
 800a484:	ee10 7a10 	vmov	r7, s0
 800a488:	eeb0 8a40 	vmov.f32	s16, s0
 800a48c:	eef0 8a60 	vmov.f32	s17, s1
 800a490:	d10c      	bne.n	800a4ac <__ieee754_powf+0x38>
 800a492:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800a496:	007f      	lsls	r7, r7, #1
 800a498:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800a49c:	f240 8292 	bls.w	800a9c4 <__ieee754_powf+0x550>
 800a4a0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a4a4:	ecbd 8b02 	vpop	{d8}
 800a4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ac:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800a4b0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a4b4:	dcf4      	bgt.n	800a4a0 <__ieee754_powf+0x2c>
 800a4b6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a4ba:	dd08      	ble.n	800a4ce <__ieee754_powf+0x5a>
 800a4bc:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a4c0:	d1ee      	bne.n	800a4a0 <__ieee754_powf+0x2c>
 800a4c2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a4c6:	0064      	lsls	r4, r4, #1
 800a4c8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a4cc:	e7e6      	b.n	800a49c <__ieee754_powf+0x28>
 800a4ce:	2f00      	cmp	r7, #0
 800a4d0:	da20      	bge.n	800a514 <__ieee754_powf+0xa0>
 800a4d2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a4d6:	da2d      	bge.n	800a534 <__ieee754_powf+0xc0>
 800a4d8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a4dc:	f2c0 827b 	blt.w	800a9d6 <__ieee754_powf+0x562>
 800a4e0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a4e4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a4e8:	fa48 f603 	asr.w	r6, r8, r3
 800a4ec:	fa06 f303 	lsl.w	r3, r6, r3
 800a4f0:	4543      	cmp	r3, r8
 800a4f2:	f040 8270 	bne.w	800a9d6 <__ieee754_powf+0x562>
 800a4f6:	f006 0601 	and.w	r6, r6, #1
 800a4fa:	f1c6 0602 	rsb	r6, r6, #2
 800a4fe:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a502:	d11f      	bne.n	800a544 <__ieee754_powf+0xd0>
 800a504:	2c00      	cmp	r4, #0
 800a506:	f280 8263 	bge.w	800a9d0 <__ieee754_powf+0x55c>
 800a50a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a50e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a512:	e7c7      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a514:	2600      	movs	r6, #0
 800a516:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a51a:	d1f0      	bne.n	800a4fe <__ieee754_powf+0x8a>
 800a51c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a520:	f000 8250 	beq.w	800a9c4 <__ieee754_powf+0x550>
 800a524:	dd08      	ble.n	800a538 <__ieee754_powf+0xc4>
 800a526:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800a82c <__ieee754_powf+0x3b8>
 800a52a:	2c00      	cmp	r4, #0
 800a52c:	bfa8      	it	ge
 800a52e:	eeb0 0a68 	vmovge.f32	s0, s17
 800a532:	e7b7      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a534:	2602      	movs	r6, #2
 800a536:	e7ee      	b.n	800a516 <__ieee754_powf+0xa2>
 800a538:	2c00      	cmp	r4, #0
 800a53a:	f280 8246 	bge.w	800a9ca <__ieee754_powf+0x556>
 800a53e:	eeb1 0a68 	vneg.f32	s0, s17
 800a542:	e7af      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a544:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a548:	d102      	bne.n	800a550 <__ieee754_powf+0xdc>
 800a54a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a54e:	e7a9      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a550:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a554:	eeb0 0a48 	vmov.f32	s0, s16
 800a558:	d107      	bne.n	800a56a <__ieee754_powf+0xf6>
 800a55a:	2f00      	cmp	r7, #0
 800a55c:	db05      	blt.n	800a56a <__ieee754_powf+0xf6>
 800a55e:	ecbd 8b02 	vpop	{d8}
 800a562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a566:	f7ff bf3a 	b.w	800a3de <__ieee754_sqrtf>
 800a56a:	f000 fa4d 	bl	800aa08 <fabsf>
 800a56e:	b125      	cbz	r5, 800a57a <__ieee754_powf+0x106>
 800a570:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800a574:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a578:	d115      	bne.n	800a5a6 <__ieee754_powf+0x132>
 800a57a:	2c00      	cmp	r4, #0
 800a57c:	bfbc      	itt	lt
 800a57e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a582:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a586:	2f00      	cmp	r7, #0
 800a588:	da8c      	bge.n	800a4a4 <__ieee754_powf+0x30>
 800a58a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800a58e:	4335      	orrs	r5, r6
 800a590:	d104      	bne.n	800a59c <__ieee754_powf+0x128>
 800a592:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a596:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a59a:	e783      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a59c:	2e01      	cmp	r6, #1
 800a59e:	d181      	bne.n	800a4a4 <__ieee754_powf+0x30>
 800a5a0:	eeb1 0a40 	vneg.f32	s0, s0
 800a5a4:	e77e      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a5a6:	0ff8      	lsrs	r0, r7, #31
 800a5a8:	3801      	subs	r0, #1
 800a5aa:	ea56 0300 	orrs.w	r3, r6, r0
 800a5ae:	d104      	bne.n	800a5ba <__ieee754_powf+0x146>
 800a5b0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a5b4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a5b8:	e774      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a5ba:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800a5be:	dd73      	ble.n	800a6a8 <__ieee754_powf+0x234>
 800a5c0:	4b9b      	ldr	r3, [pc, #620]	; (800a830 <__ieee754_powf+0x3bc>)
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	dc08      	bgt.n	800a5d8 <__ieee754_powf+0x164>
 800a5c6:	2c00      	cmp	r4, #0
 800a5c8:	da0b      	bge.n	800a5e2 <__ieee754_powf+0x16e>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	ecbd 8b02 	vpop	{d8}
 800a5d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	f000 baa2 	b.w	800ab1c <__math_oflowf>
 800a5d8:	4b96      	ldr	r3, [pc, #600]	; (800a834 <__ieee754_powf+0x3c0>)
 800a5da:	429d      	cmp	r5, r3
 800a5dc:	dd08      	ble.n	800a5f0 <__ieee754_powf+0x17c>
 800a5de:	2c00      	cmp	r4, #0
 800a5e0:	dcf3      	bgt.n	800a5ca <__ieee754_powf+0x156>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	ecbd 8b02 	vpop	{d8}
 800a5e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ec:	f000 ba90 	b.w	800ab10 <__math_uflowf>
 800a5f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a5f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a5f8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800a838 <__ieee754_powf+0x3c4>
 800a5fc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a600:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a604:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a608:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a60c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a610:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a614:	eddf 7a89 	vldr	s15, [pc, #548]	; 800a83c <__ieee754_powf+0x3c8>
 800a618:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a61c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a840 <__ieee754_powf+0x3cc>
 800a620:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a624:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800a844 <__ieee754_powf+0x3d0>
 800a628:	eef0 6a67 	vmov.f32	s13, s15
 800a62c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a630:	ee16 3a90 	vmov	r3, s13
 800a634:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a638:	f023 030f 	bic.w	r3, r3, #15
 800a63c:	ee06 3a90 	vmov	s13, r3
 800a640:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a648:	3e01      	subs	r6, #1
 800a64a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a64e:	4306      	orrs	r6, r0
 800a650:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a654:	f024 040f 	bic.w	r4, r4, #15
 800a658:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a65c:	bf08      	it	eq
 800a65e:	eeb0 8a47 	vmoveq.f32	s16, s14
 800a662:	ee07 4a10 	vmov	s14, r4
 800a666:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a66a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a66e:	ee07 3a90 	vmov	s15, r3
 800a672:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a676:	ee07 4a10 	vmov	s14, r4
 800a67a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a67e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a682:	ee17 1a10 	vmov	r1, s14
 800a686:	2900      	cmp	r1, #0
 800a688:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a68c:	f340 817c 	ble.w	800a988 <__ieee754_powf+0x514>
 800a690:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a694:	f340 80f8 	ble.w	800a888 <__ieee754_powf+0x414>
 800a698:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a0:	bf4c      	ite	mi
 800a6a2:	2001      	movmi	r0, #1
 800a6a4:	2000      	movpl	r0, #0
 800a6a6:	e791      	b.n	800a5cc <__ieee754_powf+0x158>
 800a6a8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800a6ac:	bf01      	itttt	eq
 800a6ae:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800a848 <__ieee754_powf+0x3d4>
 800a6b2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a6b6:	f06f 0317 	mvneq.w	r3, #23
 800a6ba:	ee17 5a90 	vmoveq	r5, s15
 800a6be:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800a6c2:	bf18      	it	ne
 800a6c4:	2300      	movne	r3, #0
 800a6c6:	3a7f      	subs	r2, #127	; 0x7f
 800a6c8:	441a      	add	r2, r3
 800a6ca:	4b60      	ldr	r3, [pc, #384]	; (800a84c <__ieee754_powf+0x3d8>)
 800a6cc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800a6d0:	429d      	cmp	r5, r3
 800a6d2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800a6d6:	dd06      	ble.n	800a6e6 <__ieee754_powf+0x272>
 800a6d8:	4b5d      	ldr	r3, [pc, #372]	; (800a850 <__ieee754_powf+0x3dc>)
 800a6da:	429d      	cmp	r5, r3
 800a6dc:	f340 80a4 	ble.w	800a828 <__ieee754_powf+0x3b4>
 800a6e0:	3201      	adds	r2, #1
 800a6e2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a6e6:	2500      	movs	r5, #0
 800a6e8:	4b5a      	ldr	r3, [pc, #360]	; (800a854 <__ieee754_powf+0x3e0>)
 800a6ea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a6ee:	ee07 1a10 	vmov	s14, r1
 800a6f2:	edd3 5a00 	vldr	s11, [r3]
 800a6f6:	4b58      	ldr	r3, [pc, #352]	; (800a858 <__ieee754_powf+0x3e4>)
 800a6f8:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a6fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a700:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a704:	1049      	asrs	r1, r1, #1
 800a706:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a70a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a70e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800a712:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a716:	ee07 1a90 	vmov	s15, r1
 800a71a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a71e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a722:	ee15 7a10 	vmov	r7, s10
 800a726:	401f      	ands	r7, r3
 800a728:	ee06 7a90 	vmov	s13, r7
 800a72c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a730:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a734:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a738:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a73c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800a85c <__ieee754_powf+0x3e8>
 800a740:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a860 <__ieee754_powf+0x3ec>
 800a744:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a748:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a864 <__ieee754_powf+0x3f0>
 800a74c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a750:	eddf 5a39 	vldr	s11, [pc, #228]	; 800a838 <__ieee754_powf+0x3c4>
 800a754:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a758:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800a868 <__ieee754_powf+0x3f4>
 800a75c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a760:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a86c <__ieee754_powf+0x3f8>
 800a764:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a768:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a76c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a770:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a774:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a778:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800a77c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a780:	eef0 5a67 	vmov.f32	s11, s15
 800a784:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a788:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a78c:	ee15 1a90 	vmov	r1, s11
 800a790:	4019      	ands	r1, r3
 800a792:	ee05 1a90 	vmov	s11, r1
 800a796:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a79a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a79e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a7a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a7aa:	eeb0 6a67 	vmov.f32	s12, s15
 800a7ae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a7b2:	ee16 1a10 	vmov	r1, s12
 800a7b6:	4019      	ands	r1, r3
 800a7b8:	ee07 1a10 	vmov	s14, r1
 800a7bc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a7c0:	ee06 1a10 	vmov	s12, r1
 800a7c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7c8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a870 <__ieee754_powf+0x3fc>
 800a7cc:	4929      	ldr	r1, [pc, #164]	; (800a874 <__ieee754_powf+0x400>)
 800a7ce:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800a878 <__ieee754_powf+0x404>
 800a7d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7d6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a87c <__ieee754_powf+0x408>
 800a7da:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a7de:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a7e2:	ed91 7a00 	vldr	s14, [r1]
 800a7e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7ea:	ee07 2a10 	vmov	s14, r2
 800a7ee:	eef0 6a67 	vmov.f32	s13, s15
 800a7f2:	4a23      	ldr	r2, [pc, #140]	; (800a880 <__ieee754_powf+0x40c>)
 800a7f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a7f8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a7fc:	ed92 5a00 	vldr	s10, [r2]
 800a800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a804:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a808:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a80c:	ee16 2a90 	vmov	r2, s13
 800a810:	4013      	ands	r3, r2
 800a812:	ee06 3a90 	vmov	s13, r3
 800a816:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a81a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a81e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a826:	e70f      	b.n	800a648 <__ieee754_powf+0x1d4>
 800a828:	2501      	movs	r5, #1
 800a82a:	e75d      	b.n	800a6e8 <__ieee754_powf+0x274>
 800a82c:	00000000 	.word	0x00000000
 800a830:	3f7ffff3 	.word	0x3f7ffff3
 800a834:	3f800007 	.word	0x3f800007
 800a838:	3eaaaaab 	.word	0x3eaaaaab
 800a83c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a840:	36eca570 	.word	0x36eca570
 800a844:	3fb8aa00 	.word	0x3fb8aa00
 800a848:	4b800000 	.word	0x4b800000
 800a84c:	001cc471 	.word	0x001cc471
 800a850:	005db3d6 	.word	0x005db3d6
 800a854:	0800eca8 	.word	0x0800eca8
 800a858:	fffff000 	.word	0xfffff000
 800a85c:	3e6c3255 	.word	0x3e6c3255
 800a860:	3e53f142 	.word	0x3e53f142
 800a864:	3e8ba305 	.word	0x3e8ba305
 800a868:	3edb6db7 	.word	0x3edb6db7
 800a86c:	3f19999a 	.word	0x3f19999a
 800a870:	3f76384f 	.word	0x3f76384f
 800a874:	0800ecb8 	.word	0x0800ecb8
 800a878:	3f763800 	.word	0x3f763800
 800a87c:	369dc3a0 	.word	0x369dc3a0
 800a880:	0800ecb0 	.word	0x0800ecb0
 800a884:	3338aa3c 	.word	0x3338aa3c
 800a888:	f040 8093 	bne.w	800a9b2 <__ieee754_powf+0x53e>
 800a88c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a884 <__ieee754_powf+0x410>
 800a890:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a894:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a898:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a0:	f73f aefa 	bgt.w	800a698 <__ieee754_powf+0x224>
 800a8a4:	15db      	asrs	r3, r3, #23
 800a8a6:	3b7e      	subs	r3, #126	; 0x7e
 800a8a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a8ac:	4118      	asrs	r0, r3
 800a8ae:	4408      	add	r0, r1
 800a8b0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a8b4:	4a49      	ldr	r2, [pc, #292]	; (800a9dc <__ieee754_powf+0x568>)
 800a8b6:	3b7f      	subs	r3, #127	; 0x7f
 800a8b8:	411a      	asrs	r2, r3
 800a8ba:	4002      	ands	r2, r0
 800a8bc:	ee07 2a10 	vmov	s14, r2
 800a8c0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a8c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a8c8:	f1c3 0317 	rsb	r3, r3, #23
 800a8cc:	4118      	asrs	r0, r3
 800a8ce:	2900      	cmp	r1, #0
 800a8d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8d4:	bfb8      	it	lt
 800a8d6:	4240      	neglt	r0, r0
 800a8d8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a8dc:	eddf 6a40 	vldr	s13, [pc, #256]	; 800a9e0 <__ieee754_powf+0x56c>
 800a8e0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800a9e4 <__ieee754_powf+0x570>
 800a8e4:	ee17 3a10 	vmov	r3, s14
 800a8e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a8ec:	f023 030f 	bic.w	r3, r3, #15
 800a8f0:	ee07 3a10 	vmov	s14, r3
 800a8f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a8fc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a900:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a9e8 <__ieee754_powf+0x574>
 800a904:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a908:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a90c:	eef0 6a67 	vmov.f32	s13, s15
 800a910:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a914:	eef0 5a66 	vmov.f32	s11, s13
 800a918:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a91c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a920:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a924:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a9ec <__ieee754_powf+0x578>
 800a928:	eddf 5a31 	vldr	s11, [pc, #196]	; 800a9f0 <__ieee754_powf+0x57c>
 800a92c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a930:	eddf 5a30 	vldr	s11, [pc, #192]	; 800a9f4 <__ieee754_powf+0x580>
 800a934:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a938:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a9f8 <__ieee754_powf+0x584>
 800a93c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a940:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a9fc <__ieee754_powf+0x588>
 800a944:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a948:	eeb0 6a66 	vmov.f32	s12, s13
 800a94c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a950:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a954:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a958:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a95c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a960:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a964:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a968:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a96c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a970:	ee10 3a10 	vmov	r3, s0
 800a974:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a97c:	da1f      	bge.n	800a9be <__ieee754_powf+0x54a>
 800a97e:	f000 f84b 	bl	800aa18 <scalbnf>
 800a982:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a986:	e58d      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a988:	4a1d      	ldr	r2, [pc, #116]	; (800aa00 <__ieee754_powf+0x58c>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	dd07      	ble.n	800a99e <__ieee754_powf+0x52a>
 800a98e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a996:	bf4c      	ite	mi
 800a998:	2001      	movmi	r0, #1
 800a99a:	2000      	movpl	r0, #0
 800a99c:	e622      	b.n	800a5e4 <__ieee754_powf+0x170>
 800a99e:	d108      	bne.n	800a9b2 <__ieee754_powf+0x53e>
 800a9a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9a4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ac:	f6ff af7a 	blt.w	800a8a4 <__ieee754_powf+0x430>
 800a9b0:	e7ed      	b.n	800a98e <__ieee754_powf+0x51a>
 800a9b2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a9b6:	f73f af75 	bgt.w	800a8a4 <__ieee754_powf+0x430>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e78c      	b.n	800a8d8 <__ieee754_powf+0x464>
 800a9be:	ee00 3a10 	vmov	s0, r3
 800a9c2:	e7de      	b.n	800a982 <__ieee754_powf+0x50e>
 800a9c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a9c8:	e56c      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a9ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aa04 <__ieee754_powf+0x590>
 800a9ce:	e569      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a9d0:	eeb0 0a48 	vmov.f32	s0, s16
 800a9d4:	e566      	b.n	800a4a4 <__ieee754_powf+0x30>
 800a9d6:	2600      	movs	r6, #0
 800a9d8:	e591      	b.n	800a4fe <__ieee754_powf+0x8a>
 800a9da:	bf00      	nop
 800a9dc:	ff800000 	.word	0xff800000
 800a9e0:	3f317218 	.word	0x3f317218
 800a9e4:	3f317200 	.word	0x3f317200
 800a9e8:	35bfbe8c 	.word	0x35bfbe8c
 800a9ec:	b5ddea0e 	.word	0xb5ddea0e
 800a9f0:	3331bb4c 	.word	0x3331bb4c
 800a9f4:	388ab355 	.word	0x388ab355
 800a9f8:	bb360b61 	.word	0xbb360b61
 800a9fc:	3e2aaaab 	.word	0x3e2aaaab
 800aa00:	43160000 	.word	0x43160000
 800aa04:	00000000 	.word	0x00000000

0800aa08 <fabsf>:
 800aa08:	ee10 3a10 	vmov	r3, s0
 800aa0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa10:	ee00 3a10 	vmov	s0, r3
 800aa14:	4770      	bx	lr
	...

0800aa18 <scalbnf>:
 800aa18:	ee10 3a10 	vmov	r3, s0
 800aa1c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800aa20:	d02b      	beq.n	800aa7a <scalbnf+0x62>
 800aa22:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aa26:	d302      	bcc.n	800aa2e <scalbnf+0x16>
 800aa28:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aa2c:	4770      	bx	lr
 800aa2e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800aa32:	d123      	bne.n	800aa7c <scalbnf+0x64>
 800aa34:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <scalbnf+0xb0>)
 800aa36:	eddf 7a25 	vldr	s15, [pc, #148]	; 800aacc <scalbnf+0xb4>
 800aa3a:	4298      	cmp	r0, r3
 800aa3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aa40:	db17      	blt.n	800aa72 <scalbnf+0x5a>
 800aa42:	ee10 3a10 	vmov	r3, s0
 800aa46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aa4a:	3a19      	subs	r2, #25
 800aa4c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800aa50:	4288      	cmp	r0, r1
 800aa52:	dd15      	ble.n	800aa80 <scalbnf+0x68>
 800aa54:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800aad0 <scalbnf+0xb8>
 800aa58:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800aad4 <scalbnf+0xbc>
 800aa5c:	ee10 3a10 	vmov	r3, s0
 800aa60:	eeb0 7a67 	vmov.f32	s14, s15
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bfb8      	it	lt
 800aa68:	eef0 7a66 	vmovlt.f32	s15, s13
 800aa6c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800aa70:	4770      	bx	lr
 800aa72:	eddf 7a19 	vldr	s15, [pc, #100]	; 800aad8 <scalbnf+0xc0>
 800aa76:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa7a:	4770      	bx	lr
 800aa7c:	0dd2      	lsrs	r2, r2, #23
 800aa7e:	e7e5      	b.n	800aa4c <scalbnf+0x34>
 800aa80:	4410      	add	r0, r2
 800aa82:	28fe      	cmp	r0, #254	; 0xfe
 800aa84:	dce6      	bgt.n	800aa54 <scalbnf+0x3c>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	dd06      	ble.n	800aa98 <scalbnf+0x80>
 800aa8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa8e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aa92:	ee00 3a10 	vmov	s0, r3
 800aa96:	4770      	bx	lr
 800aa98:	f110 0f16 	cmn.w	r0, #22
 800aa9c:	da09      	bge.n	800aab2 <scalbnf+0x9a>
 800aa9e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800aad8 <scalbnf+0xc0>
 800aaa2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800aadc <scalbnf+0xc4>
 800aaa6:	ee10 3a10 	vmov	r3, s0
 800aaaa:	eeb0 7a67 	vmov.f32	s14, s15
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	e7d9      	b.n	800aa66 <scalbnf+0x4e>
 800aab2:	3019      	adds	r0, #25
 800aab4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aab8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aabc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800aae0 <scalbnf+0xc8>
 800aac0:	ee07 3a90 	vmov	s15, r3
 800aac4:	e7d7      	b.n	800aa76 <scalbnf+0x5e>
 800aac6:	bf00      	nop
 800aac8:	ffff3cb0 	.word	0xffff3cb0
 800aacc:	4c000000 	.word	0x4c000000
 800aad0:	7149f2ca 	.word	0x7149f2ca
 800aad4:	f149f2ca 	.word	0xf149f2ca
 800aad8:	0da24260 	.word	0x0da24260
 800aadc:	8da24260 	.word	0x8da24260
 800aae0:	33000000 	.word	0x33000000

0800aae4 <with_errnof>:
 800aae4:	b513      	push	{r0, r1, r4, lr}
 800aae6:	4604      	mov	r4, r0
 800aae8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800aaec:	f000 fe12 	bl	800b714 <__errno>
 800aaf0:	ed9d 0a01 	vldr	s0, [sp, #4]
 800aaf4:	6004      	str	r4, [r0, #0]
 800aaf6:	b002      	add	sp, #8
 800aaf8:	bd10      	pop	{r4, pc}

0800aafa <xflowf>:
 800aafa:	b130      	cbz	r0, 800ab0a <xflowf+0x10>
 800aafc:	eef1 7a40 	vneg.f32	s15, s0
 800ab00:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ab04:	2022      	movs	r0, #34	; 0x22
 800ab06:	f7ff bfed 	b.w	800aae4 <with_errnof>
 800ab0a:	eef0 7a40 	vmov.f32	s15, s0
 800ab0e:	e7f7      	b.n	800ab00 <xflowf+0x6>

0800ab10 <__math_uflowf>:
 800ab10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ab18 <__math_uflowf+0x8>
 800ab14:	f7ff bff1 	b.w	800aafa <xflowf>
 800ab18:	10000000 	.word	0x10000000

0800ab1c <__math_oflowf>:
 800ab1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ab24 <__math_oflowf+0x8>
 800ab20:	f7ff bfeb 	b.w	800aafa <xflowf>
 800ab24:	70000000 	.word	0x70000000

0800ab28 <realloc>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <realloc+0xc>)
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	4601      	mov	r1, r0
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	f000 b802 	b.w	800ab38 <_realloc_r>
 800ab34:	20000064 	.word	0x20000064

0800ab38 <_realloc_r>:
 800ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3c:	4680      	mov	r8, r0
 800ab3e:	4614      	mov	r4, r2
 800ab40:	460e      	mov	r6, r1
 800ab42:	b921      	cbnz	r1, 800ab4e <_realloc_r+0x16>
 800ab44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab48:	4611      	mov	r1, r2
 800ab4a:	f001 bd0b 	b.w	800c564 <_malloc_r>
 800ab4e:	b92a      	cbnz	r2, 800ab5c <_realloc_r+0x24>
 800ab50:	f001 fc94 	bl	800c47c <_free_r>
 800ab54:	4625      	mov	r5, r4
 800ab56:	4628      	mov	r0, r5
 800ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5c:	f002 f90a 	bl	800cd74 <_malloc_usable_size_r>
 800ab60:	4284      	cmp	r4, r0
 800ab62:	4607      	mov	r7, r0
 800ab64:	d802      	bhi.n	800ab6c <_realloc_r+0x34>
 800ab66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab6a:	d812      	bhi.n	800ab92 <_realloc_r+0x5a>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4640      	mov	r0, r8
 800ab70:	f001 fcf8 	bl	800c564 <_malloc_r>
 800ab74:	4605      	mov	r5, r0
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d0ed      	beq.n	800ab56 <_realloc_r+0x1e>
 800ab7a:	42bc      	cmp	r4, r7
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	4631      	mov	r1, r6
 800ab80:	bf28      	it	cs
 800ab82:	463a      	movcs	r2, r7
 800ab84:	f000 fdf2 	bl	800b76c <memcpy>
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	f001 fc76 	bl	800c47c <_free_r>
 800ab90:	e7e1      	b.n	800ab56 <_realloc_r+0x1e>
 800ab92:	4635      	mov	r5, r6
 800ab94:	e7df      	b.n	800ab56 <_realloc_r+0x1e>

0800ab96 <__cvt>:
 800ab96:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9a:	ec55 4b10 	vmov	r4, r5, d0
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	460e      	mov	r6, r1
 800aba2:	4619      	mov	r1, r3
 800aba4:	462b      	mov	r3, r5
 800aba6:	bfbb      	ittet	lt
 800aba8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800abac:	461d      	movlt	r5, r3
 800abae:	2300      	movge	r3, #0
 800abb0:	232d      	movlt	r3, #45	; 0x2d
 800abb2:	700b      	strb	r3, [r1, #0]
 800abb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abb6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800abba:	4691      	mov	r9, r2
 800abbc:	f023 0820 	bic.w	r8, r3, #32
 800abc0:	bfbc      	itt	lt
 800abc2:	4622      	movlt	r2, r4
 800abc4:	4614      	movlt	r4, r2
 800abc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abca:	d005      	beq.n	800abd8 <__cvt+0x42>
 800abcc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800abd0:	d100      	bne.n	800abd4 <__cvt+0x3e>
 800abd2:	3601      	adds	r6, #1
 800abd4:	2102      	movs	r1, #2
 800abd6:	e000      	b.n	800abda <__cvt+0x44>
 800abd8:	2103      	movs	r1, #3
 800abda:	ab03      	add	r3, sp, #12
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	ab02      	add	r3, sp, #8
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	ec45 4b10 	vmov	d0, r4, r5
 800abe6:	4653      	mov	r3, sl
 800abe8:	4632      	mov	r2, r6
 800abea:	f000 fe55 	bl	800b898 <_dtoa_r>
 800abee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abf2:	4607      	mov	r7, r0
 800abf4:	d102      	bne.n	800abfc <__cvt+0x66>
 800abf6:	f019 0f01 	tst.w	r9, #1
 800abfa:	d022      	beq.n	800ac42 <__cvt+0xac>
 800abfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac00:	eb07 0906 	add.w	r9, r7, r6
 800ac04:	d110      	bne.n	800ac28 <__cvt+0x92>
 800ac06:	783b      	ldrb	r3, [r7, #0]
 800ac08:	2b30      	cmp	r3, #48	; 0x30
 800ac0a:	d10a      	bne.n	800ac22 <__cvt+0x8c>
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2300      	movs	r3, #0
 800ac10:	4620      	mov	r0, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	f7f5 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac18:	b918      	cbnz	r0, 800ac22 <__cvt+0x8c>
 800ac1a:	f1c6 0601 	rsb	r6, r6, #1
 800ac1e:	f8ca 6000 	str.w	r6, [sl]
 800ac22:	f8da 3000 	ldr.w	r3, [sl]
 800ac26:	4499      	add	r9, r3
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f7f5 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac34:	b108      	cbz	r0, 800ac3a <__cvt+0xa4>
 800ac36:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac3a:	2230      	movs	r2, #48	; 0x30
 800ac3c:	9b03      	ldr	r3, [sp, #12]
 800ac3e:	454b      	cmp	r3, r9
 800ac40:	d307      	bcc.n	800ac52 <__cvt+0xbc>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac46:	1bdb      	subs	r3, r3, r7
 800ac48:	4638      	mov	r0, r7
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	b004      	add	sp, #16
 800ac4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac52:	1c59      	adds	r1, r3, #1
 800ac54:	9103      	str	r1, [sp, #12]
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	e7f0      	b.n	800ac3c <__cvt+0xa6>

0800ac5a <__exponent>:
 800ac5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2900      	cmp	r1, #0
 800ac60:	bfb8      	it	lt
 800ac62:	4249      	neglt	r1, r1
 800ac64:	f803 2b02 	strb.w	r2, [r3], #2
 800ac68:	bfb4      	ite	lt
 800ac6a:	222d      	movlt	r2, #45	; 0x2d
 800ac6c:	222b      	movge	r2, #43	; 0x2b
 800ac6e:	2909      	cmp	r1, #9
 800ac70:	7042      	strb	r2, [r0, #1]
 800ac72:	dd2a      	ble.n	800acca <__exponent+0x70>
 800ac74:	f10d 0207 	add.w	r2, sp, #7
 800ac78:	4617      	mov	r7, r2
 800ac7a:	260a      	movs	r6, #10
 800ac7c:	4694      	mov	ip, r2
 800ac7e:	fb91 f5f6 	sdiv	r5, r1, r6
 800ac82:	fb06 1415 	mls	r4, r6, r5, r1
 800ac86:	3430      	adds	r4, #48	; 0x30
 800ac88:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	2c63      	cmp	r4, #99	; 0x63
 800ac90:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ac94:	4629      	mov	r1, r5
 800ac96:	dcf1      	bgt.n	800ac7c <__exponent+0x22>
 800ac98:	3130      	adds	r1, #48	; 0x30
 800ac9a:	f1ac 0402 	sub.w	r4, ip, #2
 800ac9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aca2:	1c41      	adds	r1, r0, #1
 800aca4:	4622      	mov	r2, r4
 800aca6:	42ba      	cmp	r2, r7
 800aca8:	d30a      	bcc.n	800acc0 <__exponent+0x66>
 800acaa:	f10d 0209 	add.w	r2, sp, #9
 800acae:	eba2 020c 	sub.w	r2, r2, ip
 800acb2:	42bc      	cmp	r4, r7
 800acb4:	bf88      	it	hi
 800acb6:	2200      	movhi	r2, #0
 800acb8:	4413      	add	r3, r2
 800acba:	1a18      	subs	r0, r3, r0
 800acbc:	b003      	add	sp, #12
 800acbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800acc4:	f801 5f01 	strb.w	r5, [r1, #1]!
 800acc8:	e7ed      	b.n	800aca6 <__exponent+0x4c>
 800acca:	2330      	movs	r3, #48	; 0x30
 800accc:	3130      	adds	r1, #48	; 0x30
 800acce:	7083      	strb	r3, [r0, #2]
 800acd0:	70c1      	strb	r1, [r0, #3]
 800acd2:	1d03      	adds	r3, r0, #4
 800acd4:	e7f1      	b.n	800acba <__exponent+0x60>
	...

0800acd8 <_printf_float>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	ed2d 8b02 	vpush	{d8}
 800ace0:	b08d      	sub	sp, #52	; 0x34
 800ace2:	460c      	mov	r4, r1
 800ace4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ace8:	4616      	mov	r6, r2
 800acea:	461f      	mov	r7, r3
 800acec:	4605      	mov	r5, r0
 800acee:	f000 fcc7 	bl	800b680 <_localeconv_r>
 800acf2:	f8d0 a000 	ldr.w	sl, [r0]
 800acf6:	4650      	mov	r0, sl
 800acf8:	f7f5 faba 	bl	8000270 <strlen>
 800acfc:	2300      	movs	r3, #0
 800acfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	9305      	str	r3, [sp, #20]
 800ad04:	f8d8 3000 	ldr.w	r3, [r8]
 800ad08:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ad0c:	3307      	adds	r3, #7
 800ad0e:	f023 0307 	bic.w	r3, r3, #7
 800ad12:	f103 0208 	add.w	r2, r3, #8
 800ad16:	f8c8 2000 	str.w	r2, [r8]
 800ad1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad22:	9307      	str	r3, [sp, #28]
 800ad24:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad28:	ee08 0a10 	vmov	s16, r0
 800ad2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ad30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad34:	4b9e      	ldr	r3, [pc, #632]	; (800afb0 <_printf_float+0x2d8>)
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad3a:	f7f5 fef7 	bl	8000b2c <__aeabi_dcmpun>
 800ad3e:	bb88      	cbnz	r0, 800ada4 <_printf_float+0xcc>
 800ad40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad44:	4b9a      	ldr	r3, [pc, #616]	; (800afb0 <_printf_float+0x2d8>)
 800ad46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad4a:	f7f5 fed1 	bl	8000af0 <__aeabi_dcmple>
 800ad4e:	bb48      	cbnz	r0, 800ada4 <_printf_float+0xcc>
 800ad50:	2200      	movs	r2, #0
 800ad52:	2300      	movs	r3, #0
 800ad54:	4640      	mov	r0, r8
 800ad56:	4649      	mov	r1, r9
 800ad58:	f7f5 fec0 	bl	8000adc <__aeabi_dcmplt>
 800ad5c:	b110      	cbz	r0, 800ad64 <_printf_float+0x8c>
 800ad5e:	232d      	movs	r3, #45	; 0x2d
 800ad60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad64:	4a93      	ldr	r2, [pc, #588]	; (800afb4 <_printf_float+0x2dc>)
 800ad66:	4b94      	ldr	r3, [pc, #592]	; (800afb8 <_printf_float+0x2e0>)
 800ad68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad6c:	bf94      	ite	ls
 800ad6e:	4690      	movls	r8, r2
 800ad70:	4698      	movhi	r8, r3
 800ad72:	2303      	movs	r3, #3
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	9b05      	ldr	r3, [sp, #20]
 800ad78:	f023 0304 	bic.w	r3, r3, #4
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	f04f 0900 	mov.w	r9, #0
 800ad82:	9700      	str	r7, [sp, #0]
 800ad84:	4633      	mov	r3, r6
 800ad86:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad88:	4621      	mov	r1, r4
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f000 f9da 	bl	800b144 <_printf_common>
 800ad90:	3001      	adds	r0, #1
 800ad92:	f040 8090 	bne.w	800aeb6 <_printf_float+0x1de>
 800ad96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad9a:	b00d      	add	sp, #52	; 0x34
 800ad9c:	ecbd 8b02 	vpop	{d8}
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	4642      	mov	r2, r8
 800ada6:	464b      	mov	r3, r9
 800ada8:	4640      	mov	r0, r8
 800adaa:	4649      	mov	r1, r9
 800adac:	f7f5 febe 	bl	8000b2c <__aeabi_dcmpun>
 800adb0:	b140      	cbz	r0, 800adc4 <_printf_float+0xec>
 800adb2:	464b      	mov	r3, r9
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bfbc      	itt	lt
 800adb8:	232d      	movlt	r3, #45	; 0x2d
 800adba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800adbe:	4a7f      	ldr	r2, [pc, #508]	; (800afbc <_printf_float+0x2e4>)
 800adc0:	4b7f      	ldr	r3, [pc, #508]	; (800afc0 <_printf_float+0x2e8>)
 800adc2:	e7d1      	b.n	800ad68 <_printf_float+0x90>
 800adc4:	6863      	ldr	r3, [r4, #4]
 800adc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800adca:	9206      	str	r2, [sp, #24]
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	d13f      	bne.n	800ae50 <_printf_float+0x178>
 800add0:	2306      	movs	r3, #6
 800add2:	6063      	str	r3, [r4, #4]
 800add4:	9b05      	ldr	r3, [sp, #20]
 800add6:	6861      	ldr	r1, [r4, #4]
 800add8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800addc:	2300      	movs	r3, #0
 800adde:	9303      	str	r3, [sp, #12]
 800ade0:	ab0a      	add	r3, sp, #40	; 0x28
 800ade2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ade6:	ab09      	add	r3, sp, #36	; 0x24
 800ade8:	ec49 8b10 	vmov	d0, r8, r9
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	6022      	str	r2, [r4, #0]
 800adf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800adf4:	4628      	mov	r0, r5
 800adf6:	f7ff fece 	bl	800ab96 <__cvt>
 800adfa:	9b06      	ldr	r3, [sp, #24]
 800adfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adfe:	2b47      	cmp	r3, #71	; 0x47
 800ae00:	4680      	mov	r8, r0
 800ae02:	d108      	bne.n	800ae16 <_printf_float+0x13e>
 800ae04:	1cc8      	adds	r0, r1, #3
 800ae06:	db02      	blt.n	800ae0e <_printf_float+0x136>
 800ae08:	6863      	ldr	r3, [r4, #4]
 800ae0a:	4299      	cmp	r1, r3
 800ae0c:	dd41      	ble.n	800ae92 <_printf_float+0x1ba>
 800ae0e:	f1ab 0302 	sub.w	r3, fp, #2
 800ae12:	fa5f fb83 	uxtb.w	fp, r3
 800ae16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae1a:	d820      	bhi.n	800ae5e <_printf_float+0x186>
 800ae1c:	3901      	subs	r1, #1
 800ae1e:	465a      	mov	r2, fp
 800ae20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae24:	9109      	str	r1, [sp, #36]	; 0x24
 800ae26:	f7ff ff18 	bl	800ac5a <__exponent>
 800ae2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae2c:	1813      	adds	r3, r2, r0
 800ae2e:	2a01      	cmp	r2, #1
 800ae30:	4681      	mov	r9, r0
 800ae32:	6123      	str	r3, [r4, #16]
 800ae34:	dc02      	bgt.n	800ae3c <_printf_float+0x164>
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	07d2      	lsls	r2, r2, #31
 800ae3a:	d501      	bpl.n	800ae40 <_printf_float+0x168>
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d09c      	beq.n	800ad82 <_printf_float+0xaa>
 800ae48:	232d      	movs	r3, #45	; 0x2d
 800ae4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae4e:	e798      	b.n	800ad82 <_printf_float+0xaa>
 800ae50:	9a06      	ldr	r2, [sp, #24]
 800ae52:	2a47      	cmp	r2, #71	; 0x47
 800ae54:	d1be      	bne.n	800add4 <_printf_float+0xfc>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1bc      	bne.n	800add4 <_printf_float+0xfc>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e7b9      	b.n	800add2 <_printf_float+0xfa>
 800ae5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ae62:	d118      	bne.n	800ae96 <_printf_float+0x1be>
 800ae64:	2900      	cmp	r1, #0
 800ae66:	6863      	ldr	r3, [r4, #4]
 800ae68:	dd0b      	ble.n	800ae82 <_printf_float+0x1aa>
 800ae6a:	6121      	str	r1, [r4, #16]
 800ae6c:	b913      	cbnz	r3, 800ae74 <_printf_float+0x19c>
 800ae6e:	6822      	ldr	r2, [r4, #0]
 800ae70:	07d0      	lsls	r0, r2, #31
 800ae72:	d502      	bpl.n	800ae7a <_printf_float+0x1a2>
 800ae74:	3301      	adds	r3, #1
 800ae76:	440b      	add	r3, r1
 800ae78:	6123      	str	r3, [r4, #16]
 800ae7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae7c:	f04f 0900 	mov.w	r9, #0
 800ae80:	e7de      	b.n	800ae40 <_printf_float+0x168>
 800ae82:	b913      	cbnz	r3, 800ae8a <_printf_float+0x1b2>
 800ae84:	6822      	ldr	r2, [r4, #0]
 800ae86:	07d2      	lsls	r2, r2, #31
 800ae88:	d501      	bpl.n	800ae8e <_printf_float+0x1b6>
 800ae8a:	3302      	adds	r3, #2
 800ae8c:	e7f4      	b.n	800ae78 <_printf_float+0x1a0>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e7f2      	b.n	800ae78 <_printf_float+0x1a0>
 800ae92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	4299      	cmp	r1, r3
 800ae9a:	db05      	blt.n	800aea8 <_printf_float+0x1d0>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	6121      	str	r1, [r4, #16]
 800aea0:	07d8      	lsls	r0, r3, #31
 800aea2:	d5ea      	bpl.n	800ae7a <_printf_float+0x1a2>
 800aea4:	1c4b      	adds	r3, r1, #1
 800aea6:	e7e7      	b.n	800ae78 <_printf_float+0x1a0>
 800aea8:	2900      	cmp	r1, #0
 800aeaa:	bfd4      	ite	le
 800aeac:	f1c1 0202 	rsble	r2, r1, #2
 800aeb0:	2201      	movgt	r2, #1
 800aeb2:	4413      	add	r3, r2
 800aeb4:	e7e0      	b.n	800ae78 <_printf_float+0x1a0>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	055a      	lsls	r2, r3, #21
 800aeba:	d407      	bmi.n	800aecc <_printf_float+0x1f4>
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	4642      	mov	r2, r8
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	d12c      	bne.n	800af24 <_printf_float+0x24c>
 800aeca:	e764      	b.n	800ad96 <_printf_float+0xbe>
 800aecc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aed0:	f240 80e0 	bls.w	800b094 <_printf_float+0x3bc>
 800aed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aed8:	2200      	movs	r2, #0
 800aeda:	2300      	movs	r3, #0
 800aedc:	f7f5 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d034      	beq.n	800af4e <_printf_float+0x276>
 800aee4:	4a37      	ldr	r2, [pc, #220]	; (800afc4 <_printf_float+0x2ec>)
 800aee6:	2301      	movs	r3, #1
 800aee8:	4631      	mov	r1, r6
 800aeea:	4628      	mov	r0, r5
 800aeec:	47b8      	blx	r7
 800aeee:	3001      	adds	r0, #1
 800aef0:	f43f af51 	beq.w	800ad96 <_printf_float+0xbe>
 800aef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aef8:	429a      	cmp	r2, r3
 800aefa:	db02      	blt.n	800af02 <_printf_float+0x22a>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	07d8      	lsls	r0, r3, #31
 800af00:	d510      	bpl.n	800af24 <_printf_float+0x24c>
 800af02:	ee18 3a10 	vmov	r3, s16
 800af06:	4652      	mov	r2, sl
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	f43f af41 	beq.w	800ad96 <_printf_float+0xbe>
 800af14:	f04f 0800 	mov.w	r8, #0
 800af18:	f104 091a 	add.w	r9, r4, #26
 800af1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af1e:	3b01      	subs	r3, #1
 800af20:	4543      	cmp	r3, r8
 800af22:	dc09      	bgt.n	800af38 <_printf_float+0x260>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	079b      	lsls	r3, r3, #30
 800af28:	f100 8107 	bmi.w	800b13a <_printf_float+0x462>
 800af2c:	68e0      	ldr	r0, [r4, #12]
 800af2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af30:	4298      	cmp	r0, r3
 800af32:	bfb8      	it	lt
 800af34:	4618      	movlt	r0, r3
 800af36:	e730      	b.n	800ad9a <_printf_float+0xc2>
 800af38:	2301      	movs	r3, #1
 800af3a:	464a      	mov	r2, r9
 800af3c:	4631      	mov	r1, r6
 800af3e:	4628      	mov	r0, r5
 800af40:	47b8      	blx	r7
 800af42:	3001      	adds	r0, #1
 800af44:	f43f af27 	beq.w	800ad96 <_printf_float+0xbe>
 800af48:	f108 0801 	add.w	r8, r8, #1
 800af4c:	e7e6      	b.n	800af1c <_printf_float+0x244>
 800af4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af50:	2b00      	cmp	r3, #0
 800af52:	dc39      	bgt.n	800afc8 <_printf_float+0x2f0>
 800af54:	4a1b      	ldr	r2, [pc, #108]	; (800afc4 <_printf_float+0x2ec>)
 800af56:	2301      	movs	r3, #1
 800af58:	4631      	mov	r1, r6
 800af5a:	4628      	mov	r0, r5
 800af5c:	47b8      	blx	r7
 800af5e:	3001      	adds	r0, #1
 800af60:	f43f af19 	beq.w	800ad96 <_printf_float+0xbe>
 800af64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af68:	4313      	orrs	r3, r2
 800af6a:	d102      	bne.n	800af72 <_printf_float+0x29a>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	07d9      	lsls	r1, r3, #31
 800af70:	d5d8      	bpl.n	800af24 <_printf_float+0x24c>
 800af72:	ee18 3a10 	vmov	r3, s16
 800af76:	4652      	mov	r2, sl
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f af09 	beq.w	800ad96 <_printf_float+0xbe>
 800af84:	f04f 0900 	mov.w	r9, #0
 800af88:	f104 0a1a 	add.w	sl, r4, #26
 800af8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8e:	425b      	negs	r3, r3
 800af90:	454b      	cmp	r3, r9
 800af92:	dc01      	bgt.n	800af98 <_printf_float+0x2c0>
 800af94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af96:	e792      	b.n	800aebe <_printf_float+0x1e6>
 800af98:	2301      	movs	r3, #1
 800af9a:	4652      	mov	r2, sl
 800af9c:	4631      	mov	r1, r6
 800af9e:	4628      	mov	r0, r5
 800afa0:	47b8      	blx	r7
 800afa2:	3001      	adds	r0, #1
 800afa4:	f43f aef7 	beq.w	800ad96 <_printf_float+0xbe>
 800afa8:	f109 0901 	add.w	r9, r9, #1
 800afac:	e7ee      	b.n	800af8c <_printf_float+0x2b4>
 800afae:	bf00      	nop
 800afb0:	7fefffff 	.word	0x7fefffff
 800afb4:	0800ecc0 	.word	0x0800ecc0
 800afb8:	0800ecc4 	.word	0x0800ecc4
 800afbc:	0800ecc8 	.word	0x0800ecc8
 800afc0:	0800eccc 	.word	0x0800eccc
 800afc4:	0800ecd0 	.word	0x0800ecd0
 800afc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afcc:	429a      	cmp	r2, r3
 800afce:	bfa8      	it	ge
 800afd0:	461a      	movge	r2, r3
 800afd2:	2a00      	cmp	r2, #0
 800afd4:	4691      	mov	r9, r2
 800afd6:	dc37      	bgt.n	800b048 <_printf_float+0x370>
 800afd8:	f04f 0b00 	mov.w	fp, #0
 800afdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afe0:	f104 021a 	add.w	r2, r4, #26
 800afe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afe6:	9305      	str	r3, [sp, #20]
 800afe8:	eba3 0309 	sub.w	r3, r3, r9
 800afec:	455b      	cmp	r3, fp
 800afee:	dc33      	bgt.n	800b058 <_printf_float+0x380>
 800aff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aff4:	429a      	cmp	r2, r3
 800aff6:	db3b      	blt.n	800b070 <_printf_float+0x398>
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	07da      	lsls	r2, r3, #31
 800affc:	d438      	bmi.n	800b070 <_printf_float+0x398>
 800affe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b002:	eba2 0903 	sub.w	r9, r2, r3
 800b006:	9b05      	ldr	r3, [sp, #20]
 800b008:	1ad2      	subs	r2, r2, r3
 800b00a:	4591      	cmp	r9, r2
 800b00c:	bfa8      	it	ge
 800b00e:	4691      	movge	r9, r2
 800b010:	f1b9 0f00 	cmp.w	r9, #0
 800b014:	dc35      	bgt.n	800b082 <_printf_float+0x3aa>
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b01e:	f104 0a1a 	add.w	sl, r4, #26
 800b022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	eba3 0309 	sub.w	r3, r3, r9
 800b02c:	4543      	cmp	r3, r8
 800b02e:	f77f af79 	ble.w	800af24 <_printf_float+0x24c>
 800b032:	2301      	movs	r3, #1
 800b034:	4652      	mov	r2, sl
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	f43f aeaa 	beq.w	800ad96 <_printf_float+0xbe>
 800b042:	f108 0801 	add.w	r8, r8, #1
 800b046:	e7ec      	b.n	800b022 <_printf_float+0x34a>
 800b048:	4613      	mov	r3, r2
 800b04a:	4631      	mov	r1, r6
 800b04c:	4642      	mov	r2, r8
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	d1c0      	bne.n	800afd8 <_printf_float+0x300>
 800b056:	e69e      	b.n	800ad96 <_printf_float+0xbe>
 800b058:	2301      	movs	r3, #1
 800b05a:	4631      	mov	r1, r6
 800b05c:	4628      	mov	r0, r5
 800b05e:	9205      	str	r2, [sp, #20]
 800b060:	47b8      	blx	r7
 800b062:	3001      	adds	r0, #1
 800b064:	f43f ae97 	beq.w	800ad96 <_printf_float+0xbe>
 800b068:	9a05      	ldr	r2, [sp, #20]
 800b06a:	f10b 0b01 	add.w	fp, fp, #1
 800b06e:	e7b9      	b.n	800afe4 <_printf_float+0x30c>
 800b070:	ee18 3a10 	vmov	r3, s16
 800b074:	4652      	mov	r2, sl
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	d1be      	bne.n	800affe <_printf_float+0x326>
 800b080:	e689      	b.n	800ad96 <_printf_float+0xbe>
 800b082:	9a05      	ldr	r2, [sp, #20]
 800b084:	464b      	mov	r3, r9
 800b086:	4442      	add	r2, r8
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	d1c1      	bne.n	800b016 <_printf_float+0x33e>
 800b092:	e680      	b.n	800ad96 <_printf_float+0xbe>
 800b094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b096:	2a01      	cmp	r2, #1
 800b098:	dc01      	bgt.n	800b09e <_printf_float+0x3c6>
 800b09a:	07db      	lsls	r3, r3, #31
 800b09c:	d53a      	bpl.n	800b114 <_printf_float+0x43c>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b8      	blx	r7
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f43f ae74 	beq.w	800ad96 <_printf_float+0xbe>
 800b0ae:	ee18 3a10 	vmov	r3, s16
 800b0b2:	4652      	mov	r2, sl
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	47b8      	blx	r7
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	f43f ae6b 	beq.w	800ad96 <_printf_float+0xbe>
 800b0c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b0cc:	f7f5 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0d0:	b9d8      	cbnz	r0, 800b10a <_printf_float+0x432>
 800b0d2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b0d6:	f108 0201 	add.w	r2, r8, #1
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4628      	mov	r0, r5
 800b0de:	47b8      	blx	r7
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d10e      	bne.n	800b102 <_printf_float+0x42a>
 800b0e4:	e657      	b.n	800ad96 <_printf_float+0xbe>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b8      	blx	r7
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f43f ae50 	beq.w	800ad96 <_printf_float+0xbe>
 800b0f6:	f108 0801 	add.w	r8, r8, #1
 800b0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	4543      	cmp	r3, r8
 800b100:	dcf1      	bgt.n	800b0e6 <_printf_float+0x40e>
 800b102:	464b      	mov	r3, r9
 800b104:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b108:	e6da      	b.n	800aec0 <_printf_float+0x1e8>
 800b10a:	f04f 0800 	mov.w	r8, #0
 800b10e:	f104 0a1a 	add.w	sl, r4, #26
 800b112:	e7f2      	b.n	800b0fa <_printf_float+0x422>
 800b114:	2301      	movs	r3, #1
 800b116:	4642      	mov	r2, r8
 800b118:	e7df      	b.n	800b0da <_printf_float+0x402>
 800b11a:	2301      	movs	r3, #1
 800b11c:	464a      	mov	r2, r9
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	47b8      	blx	r7
 800b124:	3001      	adds	r0, #1
 800b126:	f43f ae36 	beq.w	800ad96 <_printf_float+0xbe>
 800b12a:	f108 0801 	add.w	r8, r8, #1
 800b12e:	68e3      	ldr	r3, [r4, #12]
 800b130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b132:	1a5b      	subs	r3, r3, r1
 800b134:	4543      	cmp	r3, r8
 800b136:	dcf0      	bgt.n	800b11a <_printf_float+0x442>
 800b138:	e6f8      	b.n	800af2c <_printf_float+0x254>
 800b13a:	f04f 0800 	mov.w	r8, #0
 800b13e:	f104 0919 	add.w	r9, r4, #25
 800b142:	e7f4      	b.n	800b12e <_printf_float+0x456>

0800b144 <_printf_common>:
 800b144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	4616      	mov	r6, r2
 800b14a:	4699      	mov	r9, r3
 800b14c:	688a      	ldr	r2, [r1, #8]
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b154:	4293      	cmp	r3, r2
 800b156:	bfb8      	it	lt
 800b158:	4613      	movlt	r3, r2
 800b15a:	6033      	str	r3, [r6, #0]
 800b15c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b160:	4607      	mov	r7, r0
 800b162:	460c      	mov	r4, r1
 800b164:	b10a      	cbz	r2, 800b16a <_printf_common+0x26>
 800b166:	3301      	adds	r3, #1
 800b168:	6033      	str	r3, [r6, #0]
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	0699      	lsls	r1, r3, #26
 800b16e:	bf42      	ittt	mi
 800b170:	6833      	ldrmi	r3, [r6, #0]
 800b172:	3302      	addmi	r3, #2
 800b174:	6033      	strmi	r3, [r6, #0]
 800b176:	6825      	ldr	r5, [r4, #0]
 800b178:	f015 0506 	ands.w	r5, r5, #6
 800b17c:	d106      	bne.n	800b18c <_printf_common+0x48>
 800b17e:	f104 0a19 	add.w	sl, r4, #25
 800b182:	68e3      	ldr	r3, [r4, #12]
 800b184:	6832      	ldr	r2, [r6, #0]
 800b186:	1a9b      	subs	r3, r3, r2
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dc26      	bgt.n	800b1da <_printf_common+0x96>
 800b18c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b190:	1e13      	subs	r3, r2, #0
 800b192:	6822      	ldr	r2, [r4, #0]
 800b194:	bf18      	it	ne
 800b196:	2301      	movne	r3, #1
 800b198:	0692      	lsls	r2, r2, #26
 800b19a:	d42b      	bmi.n	800b1f4 <_printf_common+0xb0>
 800b19c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	47c0      	blx	r8
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d01e      	beq.n	800b1e8 <_printf_common+0xa4>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	f003 0306 	and.w	r3, r3, #6
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	bf02      	ittt	eq
 800b1b6:	68e5      	ldreq	r5, [r4, #12]
 800b1b8:	6833      	ldreq	r3, [r6, #0]
 800b1ba:	1aed      	subeq	r5, r5, r3
 800b1bc:	68a3      	ldr	r3, [r4, #8]
 800b1be:	bf0c      	ite	eq
 800b1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1c4:	2500      	movne	r5, #0
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	bfc4      	itt	gt
 800b1ca:	1a9b      	subgt	r3, r3, r2
 800b1cc:	18ed      	addgt	r5, r5, r3
 800b1ce:	2600      	movs	r6, #0
 800b1d0:	341a      	adds	r4, #26
 800b1d2:	42b5      	cmp	r5, r6
 800b1d4:	d11a      	bne.n	800b20c <_printf_common+0xc8>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e008      	b.n	800b1ec <_printf_common+0xa8>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4652      	mov	r2, sl
 800b1de:	4649      	mov	r1, r9
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	47c0      	blx	r8
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d103      	bne.n	800b1f0 <_printf_common+0xac>
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f0:	3501      	adds	r5, #1
 800b1f2:	e7c6      	b.n	800b182 <_printf_common+0x3e>
 800b1f4:	18e1      	adds	r1, r4, r3
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	2030      	movs	r0, #48	; 0x30
 800b1fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1fe:	4422      	add	r2, r4
 800b200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b208:	3302      	adds	r3, #2
 800b20a:	e7c7      	b.n	800b19c <_printf_common+0x58>
 800b20c:	2301      	movs	r3, #1
 800b20e:	4622      	mov	r2, r4
 800b210:	4649      	mov	r1, r9
 800b212:	4638      	mov	r0, r7
 800b214:	47c0      	blx	r8
 800b216:	3001      	adds	r0, #1
 800b218:	d0e6      	beq.n	800b1e8 <_printf_common+0xa4>
 800b21a:	3601      	adds	r6, #1
 800b21c:	e7d9      	b.n	800b1d2 <_printf_common+0x8e>
	...

0800b220 <_printf_i>:
 800b220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b224:	7e0f      	ldrb	r7, [r1, #24]
 800b226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b228:	2f78      	cmp	r7, #120	; 0x78
 800b22a:	4691      	mov	r9, r2
 800b22c:	4680      	mov	r8, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	469a      	mov	sl, r3
 800b232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b236:	d807      	bhi.n	800b248 <_printf_i+0x28>
 800b238:	2f62      	cmp	r7, #98	; 0x62
 800b23a:	d80a      	bhi.n	800b252 <_printf_i+0x32>
 800b23c:	2f00      	cmp	r7, #0
 800b23e:	f000 80d4 	beq.w	800b3ea <_printf_i+0x1ca>
 800b242:	2f58      	cmp	r7, #88	; 0x58
 800b244:	f000 80c0 	beq.w	800b3c8 <_printf_i+0x1a8>
 800b248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b24c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b250:	e03a      	b.n	800b2c8 <_printf_i+0xa8>
 800b252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b256:	2b15      	cmp	r3, #21
 800b258:	d8f6      	bhi.n	800b248 <_printf_i+0x28>
 800b25a:	a101      	add	r1, pc, #4	; (adr r1, 800b260 <_printf_i+0x40>)
 800b25c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b260:	0800b2b9 	.word	0x0800b2b9
 800b264:	0800b2cd 	.word	0x0800b2cd
 800b268:	0800b249 	.word	0x0800b249
 800b26c:	0800b249 	.word	0x0800b249
 800b270:	0800b249 	.word	0x0800b249
 800b274:	0800b249 	.word	0x0800b249
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b249 	.word	0x0800b249
 800b280:	0800b249 	.word	0x0800b249
 800b284:	0800b249 	.word	0x0800b249
 800b288:	0800b249 	.word	0x0800b249
 800b28c:	0800b3d1 	.word	0x0800b3d1
 800b290:	0800b2f9 	.word	0x0800b2f9
 800b294:	0800b38b 	.word	0x0800b38b
 800b298:	0800b249 	.word	0x0800b249
 800b29c:	0800b249 	.word	0x0800b249
 800b2a0:	0800b3f3 	.word	0x0800b3f3
 800b2a4:	0800b249 	.word	0x0800b249
 800b2a8:	0800b2f9 	.word	0x0800b2f9
 800b2ac:	0800b249 	.word	0x0800b249
 800b2b0:	0800b249 	.word	0x0800b249
 800b2b4:	0800b393 	.word	0x0800b393
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	602a      	str	r2, [r5, #0]
 800b2c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e09f      	b.n	800b40c <_printf_i+0x1ec>
 800b2cc:	6820      	ldr	r0, [r4, #0]
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	0607      	lsls	r7, r0, #24
 800b2d2:	f103 0104 	add.w	r1, r3, #4
 800b2d6:	6029      	str	r1, [r5, #0]
 800b2d8:	d501      	bpl.n	800b2de <_printf_i+0xbe>
 800b2da:	681e      	ldr	r6, [r3, #0]
 800b2dc:	e003      	b.n	800b2e6 <_printf_i+0xc6>
 800b2de:	0646      	lsls	r6, r0, #25
 800b2e0:	d5fb      	bpl.n	800b2da <_printf_i+0xba>
 800b2e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	da03      	bge.n	800b2f2 <_printf_i+0xd2>
 800b2ea:	232d      	movs	r3, #45	; 0x2d
 800b2ec:	4276      	negs	r6, r6
 800b2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2f2:	485a      	ldr	r0, [pc, #360]	; (800b45c <_printf_i+0x23c>)
 800b2f4:	230a      	movs	r3, #10
 800b2f6:	e012      	b.n	800b31e <_printf_i+0xfe>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	6820      	ldr	r0, [r4, #0]
 800b2fc:	1d19      	adds	r1, r3, #4
 800b2fe:	6029      	str	r1, [r5, #0]
 800b300:	0605      	lsls	r5, r0, #24
 800b302:	d501      	bpl.n	800b308 <_printf_i+0xe8>
 800b304:	681e      	ldr	r6, [r3, #0]
 800b306:	e002      	b.n	800b30e <_printf_i+0xee>
 800b308:	0641      	lsls	r1, r0, #25
 800b30a:	d5fb      	bpl.n	800b304 <_printf_i+0xe4>
 800b30c:	881e      	ldrh	r6, [r3, #0]
 800b30e:	4853      	ldr	r0, [pc, #332]	; (800b45c <_printf_i+0x23c>)
 800b310:	2f6f      	cmp	r7, #111	; 0x6f
 800b312:	bf0c      	ite	eq
 800b314:	2308      	moveq	r3, #8
 800b316:	230a      	movne	r3, #10
 800b318:	2100      	movs	r1, #0
 800b31a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b31e:	6865      	ldr	r5, [r4, #4]
 800b320:	60a5      	str	r5, [r4, #8]
 800b322:	2d00      	cmp	r5, #0
 800b324:	bfa2      	ittt	ge
 800b326:	6821      	ldrge	r1, [r4, #0]
 800b328:	f021 0104 	bicge.w	r1, r1, #4
 800b32c:	6021      	strge	r1, [r4, #0]
 800b32e:	b90e      	cbnz	r6, 800b334 <_printf_i+0x114>
 800b330:	2d00      	cmp	r5, #0
 800b332:	d04b      	beq.n	800b3cc <_printf_i+0x1ac>
 800b334:	4615      	mov	r5, r2
 800b336:	fbb6 f1f3 	udiv	r1, r6, r3
 800b33a:	fb03 6711 	mls	r7, r3, r1, r6
 800b33e:	5dc7      	ldrb	r7, [r0, r7]
 800b340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b344:	4637      	mov	r7, r6
 800b346:	42bb      	cmp	r3, r7
 800b348:	460e      	mov	r6, r1
 800b34a:	d9f4      	bls.n	800b336 <_printf_i+0x116>
 800b34c:	2b08      	cmp	r3, #8
 800b34e:	d10b      	bne.n	800b368 <_printf_i+0x148>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	07de      	lsls	r6, r3, #31
 800b354:	d508      	bpl.n	800b368 <_printf_i+0x148>
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	6861      	ldr	r1, [r4, #4]
 800b35a:	4299      	cmp	r1, r3
 800b35c:	bfde      	ittt	le
 800b35e:	2330      	movle	r3, #48	; 0x30
 800b360:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b364:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b368:	1b52      	subs	r2, r2, r5
 800b36a:	6122      	str	r2, [r4, #16]
 800b36c:	f8cd a000 	str.w	sl, [sp]
 800b370:	464b      	mov	r3, r9
 800b372:	aa03      	add	r2, sp, #12
 800b374:	4621      	mov	r1, r4
 800b376:	4640      	mov	r0, r8
 800b378:	f7ff fee4 	bl	800b144 <_printf_common>
 800b37c:	3001      	adds	r0, #1
 800b37e:	d14a      	bne.n	800b416 <_printf_i+0x1f6>
 800b380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b384:	b004      	add	sp, #16
 800b386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	f043 0320 	orr.w	r3, r3, #32
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	4833      	ldr	r0, [pc, #204]	; (800b460 <_printf_i+0x240>)
 800b394:	2778      	movs	r7, #120	; 0x78
 800b396:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	6829      	ldr	r1, [r5, #0]
 800b39e:	061f      	lsls	r7, r3, #24
 800b3a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3a4:	d402      	bmi.n	800b3ac <_printf_i+0x18c>
 800b3a6:	065f      	lsls	r7, r3, #25
 800b3a8:	bf48      	it	mi
 800b3aa:	b2b6      	uxthmi	r6, r6
 800b3ac:	07df      	lsls	r7, r3, #31
 800b3ae:	bf48      	it	mi
 800b3b0:	f043 0320 	orrmi.w	r3, r3, #32
 800b3b4:	6029      	str	r1, [r5, #0]
 800b3b6:	bf48      	it	mi
 800b3b8:	6023      	strmi	r3, [r4, #0]
 800b3ba:	b91e      	cbnz	r6, 800b3c4 <_printf_i+0x1a4>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	f023 0320 	bic.w	r3, r3, #32
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	2310      	movs	r3, #16
 800b3c6:	e7a7      	b.n	800b318 <_printf_i+0xf8>
 800b3c8:	4824      	ldr	r0, [pc, #144]	; (800b45c <_printf_i+0x23c>)
 800b3ca:	e7e4      	b.n	800b396 <_printf_i+0x176>
 800b3cc:	4615      	mov	r5, r2
 800b3ce:	e7bd      	b.n	800b34c <_printf_i+0x12c>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	6826      	ldr	r6, [r4, #0]
 800b3d4:	6961      	ldr	r1, [r4, #20]
 800b3d6:	1d18      	adds	r0, r3, #4
 800b3d8:	6028      	str	r0, [r5, #0]
 800b3da:	0635      	lsls	r5, r6, #24
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	d501      	bpl.n	800b3e4 <_printf_i+0x1c4>
 800b3e0:	6019      	str	r1, [r3, #0]
 800b3e2:	e002      	b.n	800b3ea <_printf_i+0x1ca>
 800b3e4:	0670      	lsls	r0, r6, #25
 800b3e6:	d5fb      	bpl.n	800b3e0 <_printf_i+0x1c0>
 800b3e8:	8019      	strh	r1, [r3, #0]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6123      	str	r3, [r4, #16]
 800b3ee:	4615      	mov	r5, r2
 800b3f0:	e7bc      	b.n	800b36c <_printf_i+0x14c>
 800b3f2:	682b      	ldr	r3, [r5, #0]
 800b3f4:	1d1a      	adds	r2, r3, #4
 800b3f6:	602a      	str	r2, [r5, #0]
 800b3f8:	681d      	ldr	r5, [r3, #0]
 800b3fa:	6862      	ldr	r2, [r4, #4]
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	4628      	mov	r0, r5
 800b400:	f7f4 fee6 	bl	80001d0 <memchr>
 800b404:	b108      	cbz	r0, 800b40a <_printf_i+0x1ea>
 800b406:	1b40      	subs	r0, r0, r5
 800b408:	6060      	str	r0, [r4, #4]
 800b40a:	6863      	ldr	r3, [r4, #4]
 800b40c:	6123      	str	r3, [r4, #16]
 800b40e:	2300      	movs	r3, #0
 800b410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b414:	e7aa      	b.n	800b36c <_printf_i+0x14c>
 800b416:	6923      	ldr	r3, [r4, #16]
 800b418:	462a      	mov	r2, r5
 800b41a:	4649      	mov	r1, r9
 800b41c:	4640      	mov	r0, r8
 800b41e:	47d0      	blx	sl
 800b420:	3001      	adds	r0, #1
 800b422:	d0ad      	beq.n	800b380 <_printf_i+0x160>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	079b      	lsls	r3, r3, #30
 800b428:	d413      	bmi.n	800b452 <_printf_i+0x232>
 800b42a:	68e0      	ldr	r0, [r4, #12]
 800b42c:	9b03      	ldr	r3, [sp, #12]
 800b42e:	4298      	cmp	r0, r3
 800b430:	bfb8      	it	lt
 800b432:	4618      	movlt	r0, r3
 800b434:	e7a6      	b.n	800b384 <_printf_i+0x164>
 800b436:	2301      	movs	r3, #1
 800b438:	4632      	mov	r2, r6
 800b43a:	4649      	mov	r1, r9
 800b43c:	4640      	mov	r0, r8
 800b43e:	47d0      	blx	sl
 800b440:	3001      	adds	r0, #1
 800b442:	d09d      	beq.n	800b380 <_printf_i+0x160>
 800b444:	3501      	adds	r5, #1
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	9903      	ldr	r1, [sp, #12]
 800b44a:	1a5b      	subs	r3, r3, r1
 800b44c:	42ab      	cmp	r3, r5
 800b44e:	dcf2      	bgt.n	800b436 <_printf_i+0x216>
 800b450:	e7eb      	b.n	800b42a <_printf_i+0x20a>
 800b452:	2500      	movs	r5, #0
 800b454:	f104 0619 	add.w	r6, r4, #25
 800b458:	e7f5      	b.n	800b446 <_printf_i+0x226>
 800b45a:	bf00      	nop
 800b45c:	0800ecd2 	.word	0x0800ecd2
 800b460:	0800ece3 	.word	0x0800ece3

0800b464 <std>:
 800b464:	2300      	movs	r3, #0
 800b466:	b510      	push	{r4, lr}
 800b468:	4604      	mov	r4, r0
 800b46a:	e9c0 3300 	strd	r3, r3, [r0]
 800b46e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b472:	6083      	str	r3, [r0, #8]
 800b474:	8181      	strh	r1, [r0, #12]
 800b476:	6643      	str	r3, [r0, #100]	; 0x64
 800b478:	81c2      	strh	r2, [r0, #14]
 800b47a:	6183      	str	r3, [r0, #24]
 800b47c:	4619      	mov	r1, r3
 800b47e:	2208      	movs	r2, #8
 800b480:	305c      	adds	r0, #92	; 0x5c
 800b482:	f000 f8f4 	bl	800b66e <memset>
 800b486:	4b05      	ldr	r3, [pc, #20]	; (800b49c <std+0x38>)
 800b488:	6263      	str	r3, [r4, #36]	; 0x24
 800b48a:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <std+0x3c>)
 800b48c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <std+0x40>)
 800b490:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b492:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <std+0x44>)
 800b494:	6224      	str	r4, [r4, #32]
 800b496:	6323      	str	r3, [r4, #48]	; 0x30
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	bf00      	nop
 800b49c:	0800b5e9 	.word	0x0800b5e9
 800b4a0:	0800b60b 	.word	0x0800b60b
 800b4a4:	0800b643 	.word	0x0800b643
 800b4a8:	0800b667 	.word	0x0800b667

0800b4ac <stdio_exit_handler>:
 800b4ac:	4a02      	ldr	r2, [pc, #8]	; (800b4b8 <stdio_exit_handler+0xc>)
 800b4ae:	4903      	ldr	r1, [pc, #12]	; (800b4bc <stdio_exit_handler+0x10>)
 800b4b0:	4803      	ldr	r0, [pc, #12]	; (800b4c0 <stdio_exit_handler+0x14>)
 800b4b2:	f000 b869 	b.w	800b588 <_fwalk_sglue>
 800b4b6:	bf00      	nop
 800b4b8:	2000000c 	.word	0x2000000c
 800b4bc:	0800d119 	.word	0x0800d119
 800b4c0:	20000018 	.word	0x20000018

0800b4c4 <cleanup_stdio>:
 800b4c4:	6841      	ldr	r1, [r0, #4]
 800b4c6:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <cleanup_stdio+0x34>)
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	d001      	beq.n	800b4d4 <cleanup_stdio+0x10>
 800b4d0:	f001 fe22 	bl	800d118 <_fflush_r>
 800b4d4:	68a1      	ldr	r1, [r4, #8]
 800b4d6:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <cleanup_stdio+0x38>)
 800b4d8:	4299      	cmp	r1, r3
 800b4da:	d002      	beq.n	800b4e2 <cleanup_stdio+0x1e>
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f001 fe1b 	bl	800d118 <_fflush_r>
 800b4e2:	68e1      	ldr	r1, [r4, #12]
 800b4e4:	4b06      	ldr	r3, [pc, #24]	; (800b500 <cleanup_stdio+0x3c>)
 800b4e6:	4299      	cmp	r1, r3
 800b4e8:	d004      	beq.n	800b4f4 <cleanup_stdio+0x30>
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4f0:	f001 be12 	b.w	800d118 <_fflush_r>
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000dc8 	.word	0x20000dc8
 800b4fc:	20000e30 	.word	0x20000e30
 800b500:	20000e98 	.word	0x20000e98

0800b504 <global_stdio_init.part.0>:
 800b504:	b510      	push	{r4, lr}
 800b506:	4b0b      	ldr	r3, [pc, #44]	; (800b534 <global_stdio_init.part.0+0x30>)
 800b508:	4c0b      	ldr	r4, [pc, #44]	; (800b538 <global_stdio_init.part.0+0x34>)
 800b50a:	4a0c      	ldr	r2, [pc, #48]	; (800b53c <global_stdio_init.part.0+0x38>)
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	4620      	mov	r0, r4
 800b510:	2200      	movs	r2, #0
 800b512:	2104      	movs	r1, #4
 800b514:	f7ff ffa6 	bl	800b464 <std>
 800b518:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b51c:	2201      	movs	r2, #1
 800b51e:	2109      	movs	r1, #9
 800b520:	f7ff ffa0 	bl	800b464 <std>
 800b524:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b528:	2202      	movs	r2, #2
 800b52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b52e:	2112      	movs	r1, #18
 800b530:	f7ff bf98 	b.w	800b464 <std>
 800b534:	20000f00 	.word	0x20000f00
 800b538:	20000dc8 	.word	0x20000dc8
 800b53c:	0800b4ad 	.word	0x0800b4ad

0800b540 <__sfp_lock_acquire>:
 800b540:	4801      	ldr	r0, [pc, #4]	; (800b548 <__sfp_lock_acquire+0x8>)
 800b542:	f000 b911 	b.w	800b768 <__retarget_lock_acquire_recursive>
 800b546:	bf00      	nop
 800b548:	20000f09 	.word	0x20000f09

0800b54c <__sfp_lock_release>:
 800b54c:	4801      	ldr	r0, [pc, #4]	; (800b554 <__sfp_lock_release+0x8>)
 800b54e:	f000 b90c 	b.w	800b76a <__retarget_lock_release_recursive>
 800b552:	bf00      	nop
 800b554:	20000f09 	.word	0x20000f09

0800b558 <__sinit>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	4604      	mov	r4, r0
 800b55c:	f7ff fff0 	bl	800b540 <__sfp_lock_acquire>
 800b560:	6a23      	ldr	r3, [r4, #32]
 800b562:	b11b      	cbz	r3, 800b56c <__sinit+0x14>
 800b564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b568:	f7ff bff0 	b.w	800b54c <__sfp_lock_release>
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <__sinit+0x28>)
 800b56e:	6223      	str	r3, [r4, #32]
 800b570:	4b04      	ldr	r3, [pc, #16]	; (800b584 <__sinit+0x2c>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1f5      	bne.n	800b564 <__sinit+0xc>
 800b578:	f7ff ffc4 	bl	800b504 <global_stdio_init.part.0>
 800b57c:	e7f2      	b.n	800b564 <__sinit+0xc>
 800b57e:	bf00      	nop
 800b580:	0800b4c5 	.word	0x0800b4c5
 800b584:	20000f00 	.word	0x20000f00

0800b588 <_fwalk_sglue>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	4607      	mov	r7, r0
 800b58e:	4688      	mov	r8, r1
 800b590:	4614      	mov	r4, r2
 800b592:	2600      	movs	r6, #0
 800b594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b598:	f1b9 0901 	subs.w	r9, r9, #1
 800b59c:	d505      	bpl.n	800b5aa <_fwalk_sglue+0x22>
 800b59e:	6824      	ldr	r4, [r4, #0]
 800b5a0:	2c00      	cmp	r4, #0
 800b5a2:	d1f7      	bne.n	800b594 <_fwalk_sglue+0xc>
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5aa:	89ab      	ldrh	r3, [r5, #12]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d907      	bls.n	800b5c0 <_fwalk_sglue+0x38>
 800b5b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	d003      	beq.n	800b5c0 <_fwalk_sglue+0x38>
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	47c0      	blx	r8
 800b5be:	4306      	orrs	r6, r0
 800b5c0:	3568      	adds	r5, #104	; 0x68
 800b5c2:	e7e9      	b.n	800b598 <_fwalk_sglue+0x10>

0800b5c4 <iprintf>:
 800b5c4:	b40f      	push	{r0, r1, r2, r3}
 800b5c6:	b507      	push	{r0, r1, r2, lr}
 800b5c8:	4906      	ldr	r1, [pc, #24]	; (800b5e4 <iprintf+0x20>)
 800b5ca:	ab04      	add	r3, sp, #16
 800b5cc:	6808      	ldr	r0, [r1, #0]
 800b5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d2:	6881      	ldr	r1, [r0, #8]
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	f001 fbff 	bl	800cdd8 <_vfiprintf_r>
 800b5da:	b003      	add	sp, #12
 800b5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e0:	b004      	add	sp, #16
 800b5e2:	4770      	bx	lr
 800b5e4:	20000064 	.word	0x20000064

0800b5e8 <__sread>:
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f0:	f000 f86c 	bl	800b6cc <_read_r>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	bfab      	itete	ge
 800b5f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b5fc:	181b      	addge	r3, r3, r0
 800b5fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b602:	bfac      	ite	ge
 800b604:	6563      	strge	r3, [r4, #84]	; 0x54
 800b606:	81a3      	strhlt	r3, [r4, #12]
 800b608:	bd10      	pop	{r4, pc}

0800b60a <__swrite>:
 800b60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60e:	461f      	mov	r7, r3
 800b610:	898b      	ldrh	r3, [r1, #12]
 800b612:	05db      	lsls	r3, r3, #23
 800b614:	4605      	mov	r5, r0
 800b616:	460c      	mov	r4, r1
 800b618:	4616      	mov	r6, r2
 800b61a:	d505      	bpl.n	800b628 <__swrite+0x1e>
 800b61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b620:	2302      	movs	r3, #2
 800b622:	2200      	movs	r2, #0
 800b624:	f000 f840 	bl	800b6a8 <_lseek_r>
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	4628      	mov	r0, r5
 800b63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63e:	f000 b857 	b.w	800b6f0 <_write_r>

0800b642 <__sseek>:
 800b642:	b510      	push	{r4, lr}
 800b644:	460c      	mov	r4, r1
 800b646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64a:	f000 f82d 	bl	800b6a8 <_lseek_r>
 800b64e:	1c43      	adds	r3, r0, #1
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	bf15      	itete	ne
 800b654:	6560      	strne	r0, [r4, #84]	; 0x54
 800b656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b65a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b65e:	81a3      	strheq	r3, [r4, #12]
 800b660:	bf18      	it	ne
 800b662:	81a3      	strhne	r3, [r4, #12]
 800b664:	bd10      	pop	{r4, pc}

0800b666 <__sclose>:
 800b666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b66a:	f000 b80d 	b.w	800b688 <_close_r>

0800b66e <memset>:
 800b66e:	4402      	add	r2, r0
 800b670:	4603      	mov	r3, r0
 800b672:	4293      	cmp	r3, r2
 800b674:	d100      	bne.n	800b678 <memset+0xa>
 800b676:	4770      	bx	lr
 800b678:	f803 1b01 	strb.w	r1, [r3], #1
 800b67c:	e7f9      	b.n	800b672 <memset+0x4>
	...

0800b680 <_localeconv_r>:
 800b680:	4800      	ldr	r0, [pc, #0]	; (800b684 <_localeconv_r+0x4>)
 800b682:	4770      	bx	lr
 800b684:	20000158 	.word	0x20000158

0800b688 <_close_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4d06      	ldr	r5, [pc, #24]	; (800b6a4 <_close_r+0x1c>)
 800b68c:	2300      	movs	r3, #0
 800b68e:	4604      	mov	r4, r0
 800b690:	4608      	mov	r0, r1
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	f7f8 fd71 	bl	800417a <_close>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_close_r+0x1a>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_close_r+0x1a>
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	20000f04 	.word	0x20000f04

0800b6a8 <_lseek_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4d07      	ldr	r5, [pc, #28]	; (800b6c8 <_lseek_r+0x20>)
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	4608      	mov	r0, r1
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	602a      	str	r2, [r5, #0]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f7f8 fd86 	bl	80041c8 <_lseek>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_lseek_r+0x1e>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_lseek_r+0x1e>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	20000f04 	.word	0x20000f04

0800b6cc <_read_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d07      	ldr	r5, [pc, #28]	; (800b6ec <_read_r+0x20>)
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	4608      	mov	r0, r1
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	602a      	str	r2, [r5, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f7f8 fd14 	bl	8004108 <_read>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_read_r+0x1e>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_read_r+0x1e>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	20000f04 	.word	0x20000f04

0800b6f0 <_write_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d07      	ldr	r5, [pc, #28]	; (800b710 <_write_r+0x20>)
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	4608      	mov	r0, r1
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	602a      	str	r2, [r5, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	f7f8 fd1f 	bl	8004142 <_write>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d102      	bne.n	800b70e <_write_r+0x1e>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	b103      	cbz	r3, 800b70e <_write_r+0x1e>
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	20000f04 	.word	0x20000f04

0800b714 <__errno>:
 800b714:	4b01      	ldr	r3, [pc, #4]	; (800b71c <__errno+0x8>)
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	20000064 	.word	0x20000064

0800b720 <__libc_init_array>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	4d0d      	ldr	r5, [pc, #52]	; (800b758 <__libc_init_array+0x38>)
 800b724:	4c0d      	ldr	r4, [pc, #52]	; (800b75c <__libc_init_array+0x3c>)
 800b726:	1b64      	subs	r4, r4, r5
 800b728:	10a4      	asrs	r4, r4, #2
 800b72a:	2600      	movs	r6, #0
 800b72c:	42a6      	cmp	r6, r4
 800b72e:	d109      	bne.n	800b744 <__libc_init_array+0x24>
 800b730:	4d0b      	ldr	r5, [pc, #44]	; (800b760 <__libc_init_array+0x40>)
 800b732:	4c0c      	ldr	r4, [pc, #48]	; (800b764 <__libc_init_array+0x44>)
 800b734:	f001 fef4 	bl	800d520 <_init>
 800b738:	1b64      	subs	r4, r4, r5
 800b73a:	10a4      	asrs	r4, r4, #2
 800b73c:	2600      	movs	r6, #0
 800b73e:	42a6      	cmp	r6, r4
 800b740:	d105      	bne.n	800b74e <__libc_init_array+0x2e>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	f855 3b04 	ldr.w	r3, [r5], #4
 800b748:	4798      	blx	r3
 800b74a:	3601      	adds	r6, #1
 800b74c:	e7ee      	b.n	800b72c <__libc_init_array+0xc>
 800b74e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b752:	4798      	blx	r3
 800b754:	3601      	adds	r6, #1
 800b756:	e7f2      	b.n	800b73e <__libc_init_array+0x1e>
 800b758:	0800f03c 	.word	0x0800f03c
 800b75c:	0800f03c 	.word	0x0800f03c
 800b760:	0800f03c 	.word	0x0800f03c
 800b764:	0800f044 	.word	0x0800f044

0800b768 <__retarget_lock_acquire_recursive>:
 800b768:	4770      	bx	lr

0800b76a <__retarget_lock_release_recursive>:
 800b76a:	4770      	bx	lr

0800b76c <memcpy>:
 800b76c:	440a      	add	r2, r1
 800b76e:	4291      	cmp	r1, r2
 800b770:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b774:	d100      	bne.n	800b778 <memcpy+0xc>
 800b776:	4770      	bx	lr
 800b778:	b510      	push	{r4, lr}
 800b77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b77e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b782:	4291      	cmp	r1, r2
 800b784:	d1f9      	bne.n	800b77a <memcpy+0xe>
 800b786:	bd10      	pop	{r4, pc}

0800b788 <quorem>:
 800b788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	6903      	ldr	r3, [r0, #16]
 800b78e:	690c      	ldr	r4, [r1, #16]
 800b790:	42a3      	cmp	r3, r4
 800b792:	4607      	mov	r7, r0
 800b794:	db7e      	blt.n	800b894 <quorem+0x10c>
 800b796:	3c01      	subs	r4, #1
 800b798:	f101 0814 	add.w	r8, r1, #20
 800b79c:	f100 0514 	add.w	r5, r0, #20
 800b7a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7be:	d331      	bcc.n	800b824 <quorem+0x9c>
 800b7c0:	f04f 0e00 	mov.w	lr, #0
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	46ac      	mov	ip, r5
 800b7c8:	46f2      	mov	sl, lr
 800b7ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7ce:	b293      	uxth	r3, r2
 800b7d0:	fb06 e303 	mla	r3, r6, r3, lr
 800b7d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7d8:	0c1a      	lsrs	r2, r3, #16
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	ebaa 0303 	sub.w	r3, sl, r3
 800b7e0:	f8dc a000 	ldr.w	sl, [ip]
 800b7e4:	fa13 f38a 	uxtah	r3, r3, sl
 800b7e8:	fb06 220e 	mla	r2, r6, lr, r2
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7f4:	b292      	uxth	r2, r2
 800b7f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b7fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800b802:	4581      	cmp	r9, r0
 800b804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b808:	f84c 3b04 	str.w	r3, [ip], #4
 800b80c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b810:	d2db      	bcs.n	800b7ca <quorem+0x42>
 800b812:	f855 300b 	ldr.w	r3, [r5, fp]
 800b816:	b92b      	cbnz	r3, 800b824 <quorem+0x9c>
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	3b04      	subs	r3, #4
 800b81c:	429d      	cmp	r5, r3
 800b81e:	461a      	mov	r2, r3
 800b820:	d32c      	bcc.n	800b87c <quorem+0xf4>
 800b822:	613c      	str	r4, [r7, #16]
 800b824:	4638      	mov	r0, r7
 800b826:	f001 f9a5 	bl	800cb74 <__mcmp>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	db22      	blt.n	800b874 <quorem+0xec>
 800b82e:	3601      	adds	r6, #1
 800b830:	4629      	mov	r1, r5
 800b832:	2000      	movs	r0, #0
 800b834:	f858 2b04 	ldr.w	r2, [r8], #4
 800b838:	f8d1 c000 	ldr.w	ip, [r1]
 800b83c:	b293      	uxth	r3, r2
 800b83e:	1ac3      	subs	r3, r0, r3
 800b840:	0c12      	lsrs	r2, r2, #16
 800b842:	fa13 f38c 	uxtah	r3, r3, ip
 800b846:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b84a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b84e:	b29b      	uxth	r3, r3
 800b850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b854:	45c1      	cmp	r9, r8
 800b856:	f841 3b04 	str.w	r3, [r1], #4
 800b85a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b85e:	d2e9      	bcs.n	800b834 <quorem+0xac>
 800b860:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b864:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b868:	b922      	cbnz	r2, 800b874 <quorem+0xec>
 800b86a:	3b04      	subs	r3, #4
 800b86c:	429d      	cmp	r5, r3
 800b86e:	461a      	mov	r2, r3
 800b870:	d30a      	bcc.n	800b888 <quorem+0x100>
 800b872:	613c      	str	r4, [r7, #16]
 800b874:	4630      	mov	r0, r6
 800b876:	b003      	add	sp, #12
 800b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	6812      	ldr	r2, [r2, #0]
 800b87e:	3b04      	subs	r3, #4
 800b880:	2a00      	cmp	r2, #0
 800b882:	d1ce      	bne.n	800b822 <quorem+0x9a>
 800b884:	3c01      	subs	r4, #1
 800b886:	e7c9      	b.n	800b81c <quorem+0x94>
 800b888:	6812      	ldr	r2, [r2, #0]
 800b88a:	3b04      	subs	r3, #4
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	d1f0      	bne.n	800b872 <quorem+0xea>
 800b890:	3c01      	subs	r4, #1
 800b892:	e7eb      	b.n	800b86c <quorem+0xe4>
 800b894:	2000      	movs	r0, #0
 800b896:	e7ee      	b.n	800b876 <quorem+0xee>

0800b898 <_dtoa_r>:
 800b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	ed2d 8b04 	vpush	{d8-d9}
 800b8a0:	69c5      	ldr	r5, [r0, #28]
 800b8a2:	b093      	sub	sp, #76	; 0x4c
 800b8a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8a8:	ec57 6b10 	vmov	r6, r7, d0
 800b8ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b8b0:	9107      	str	r1, [sp, #28]
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b8b6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8b8:	b975      	cbnz	r5, 800b8d8 <_dtoa_r+0x40>
 800b8ba:	2010      	movs	r0, #16
 800b8bc:	f000 fe2a 	bl	800c514 <malloc>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	61e0      	str	r0, [r4, #28]
 800b8c4:	b920      	cbnz	r0, 800b8d0 <_dtoa_r+0x38>
 800b8c6:	4bae      	ldr	r3, [pc, #696]	; (800bb80 <_dtoa_r+0x2e8>)
 800b8c8:	21ef      	movs	r1, #239	; 0xef
 800b8ca:	48ae      	ldr	r0, [pc, #696]	; (800bb84 <_dtoa_r+0x2ec>)
 800b8cc:	f001 fcf2 	bl	800d2b4 <__assert_func>
 800b8d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8d4:	6005      	str	r5, [r0, #0]
 800b8d6:	60c5      	str	r5, [r0, #12]
 800b8d8:	69e3      	ldr	r3, [r4, #28]
 800b8da:	6819      	ldr	r1, [r3, #0]
 800b8dc:	b151      	cbz	r1, 800b8f4 <_dtoa_r+0x5c>
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	604a      	str	r2, [r1, #4]
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4093      	lsls	r3, r2
 800b8e6:	608b      	str	r3, [r1, #8]
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 ff07 	bl	800c6fc <_Bfree>
 800b8ee:	69e3      	ldr	r3, [r4, #28]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	1e3b      	subs	r3, r7, #0
 800b8f6:	bfbb      	ittet	lt
 800b8f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b8fc:	9303      	strlt	r3, [sp, #12]
 800b8fe:	2300      	movge	r3, #0
 800b900:	2201      	movlt	r2, #1
 800b902:	bfac      	ite	ge
 800b904:	f8c8 3000 	strge.w	r3, [r8]
 800b908:	f8c8 2000 	strlt.w	r2, [r8]
 800b90c:	4b9e      	ldr	r3, [pc, #632]	; (800bb88 <_dtoa_r+0x2f0>)
 800b90e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b912:	ea33 0308 	bics.w	r3, r3, r8
 800b916:	d11b      	bne.n	800b950 <_dtoa_r+0xb8>
 800b918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b91a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b924:	4333      	orrs	r3, r6
 800b926:	f000 8593 	beq.w	800c450 <_dtoa_r+0xbb8>
 800b92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b92c:	b963      	cbnz	r3, 800b948 <_dtoa_r+0xb0>
 800b92e:	4b97      	ldr	r3, [pc, #604]	; (800bb8c <_dtoa_r+0x2f4>)
 800b930:	e027      	b.n	800b982 <_dtoa_r+0xea>
 800b932:	4b97      	ldr	r3, [pc, #604]	; (800bb90 <_dtoa_r+0x2f8>)
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	3308      	adds	r3, #8
 800b938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b93a:	6013      	str	r3, [r2, #0]
 800b93c:	9800      	ldr	r0, [sp, #0]
 800b93e:	b013      	add	sp, #76	; 0x4c
 800b940:	ecbd 8b04 	vpop	{d8-d9}
 800b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b948:	4b90      	ldr	r3, [pc, #576]	; (800bb8c <_dtoa_r+0x2f4>)
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	3303      	adds	r3, #3
 800b94e:	e7f3      	b.n	800b938 <_dtoa_r+0xa0>
 800b950:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b954:	2200      	movs	r2, #0
 800b956:	ec51 0b17 	vmov	r0, r1, d7
 800b95a:	eeb0 8a47 	vmov.f32	s16, s14
 800b95e:	eef0 8a67 	vmov.f32	s17, s15
 800b962:	2300      	movs	r3, #0
 800b964:	f7f5 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b968:	4681      	mov	r9, r0
 800b96a:	b160      	cbz	r0, 800b986 <_dtoa_r+0xee>
 800b96c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b96e:	2301      	movs	r3, #1
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 8568 	beq.w	800c44a <_dtoa_r+0xbb2>
 800b97a:	4b86      	ldr	r3, [pc, #536]	; (800bb94 <_dtoa_r+0x2fc>)
 800b97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b97e:	6013      	str	r3, [r2, #0]
 800b980:	3b01      	subs	r3, #1
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	e7da      	b.n	800b93c <_dtoa_r+0xa4>
 800b986:	aa10      	add	r2, sp, #64	; 0x40
 800b988:	a911      	add	r1, sp, #68	; 0x44
 800b98a:	4620      	mov	r0, r4
 800b98c:	eeb0 0a48 	vmov.f32	s0, s16
 800b990:	eef0 0a68 	vmov.f32	s1, s17
 800b994:	f001 f994 	bl	800ccc0 <__d2b>
 800b998:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b99c:	4682      	mov	sl, r0
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	d07f      	beq.n	800baa2 <_dtoa_r+0x20a>
 800b9a2:	ee18 3a90 	vmov	r3, s17
 800b9a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b9ae:	ec51 0b18 	vmov	r0, r1, d8
 800b9b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b9b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b9be:	4619      	mov	r1, r3
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4b75      	ldr	r3, [pc, #468]	; (800bb98 <_dtoa_r+0x300>)
 800b9c4:	f7f4 fc60 	bl	8000288 <__aeabi_dsub>
 800b9c8:	a367      	add	r3, pc, #412	; (adr r3, 800bb68 <_dtoa_r+0x2d0>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fe13 	bl	80005f8 <__aeabi_dmul>
 800b9d2:	a367      	add	r3, pc, #412	; (adr r3, 800bb70 <_dtoa_r+0x2d8>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7f4 fc58 	bl	800028c <__adddf3>
 800b9dc:	4606      	mov	r6, r0
 800b9de:	4628      	mov	r0, r5
 800b9e0:	460f      	mov	r7, r1
 800b9e2:	f7f4 fd9f 	bl	8000524 <__aeabi_i2d>
 800b9e6:	a364      	add	r3, pc, #400	; (adr r3, 800bb78 <_dtoa_r+0x2e0>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f7f4 fe04 	bl	80005f8 <__aeabi_dmul>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	f7f4 fc48 	bl	800028c <__adddf3>
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	460f      	mov	r7, r1
 800ba00:	f7f5 f8aa 	bl	8000b58 <__aeabi_d2iz>
 800ba04:	2200      	movs	r2, #0
 800ba06:	4683      	mov	fp, r0
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	4639      	mov	r1, r7
 800ba0e:	f7f5 f865 	bl	8000adc <__aeabi_dcmplt>
 800ba12:	b148      	cbz	r0, 800ba28 <_dtoa_r+0x190>
 800ba14:	4658      	mov	r0, fp
 800ba16:	f7f4 fd85 	bl	8000524 <__aeabi_i2d>
 800ba1a:	4632      	mov	r2, r6
 800ba1c:	463b      	mov	r3, r7
 800ba1e:	f7f5 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba22:	b908      	cbnz	r0, 800ba28 <_dtoa_r+0x190>
 800ba24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ba28:	f1bb 0f16 	cmp.w	fp, #22
 800ba2c:	d857      	bhi.n	800bade <_dtoa_r+0x246>
 800ba2e:	4b5b      	ldr	r3, [pc, #364]	; (800bb9c <_dtoa_r+0x304>)
 800ba30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	ec51 0b18 	vmov	r0, r1, d8
 800ba3c:	f7f5 f84e 	bl	8000adc <__aeabi_dcmplt>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d04e      	beq.n	800bae2 <_dtoa_r+0x24a>
 800ba44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ba48:	2300      	movs	r3, #0
 800ba4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba4e:	1b5b      	subs	r3, r3, r5
 800ba50:	1e5a      	subs	r2, r3, #1
 800ba52:	bf45      	ittet	mi
 800ba54:	f1c3 0301 	rsbmi	r3, r3, #1
 800ba58:	9305      	strmi	r3, [sp, #20]
 800ba5a:	2300      	movpl	r3, #0
 800ba5c:	2300      	movmi	r3, #0
 800ba5e:	9206      	str	r2, [sp, #24]
 800ba60:	bf54      	ite	pl
 800ba62:	9305      	strpl	r3, [sp, #20]
 800ba64:	9306      	strmi	r3, [sp, #24]
 800ba66:	f1bb 0f00 	cmp.w	fp, #0
 800ba6a:	db3c      	blt.n	800bae6 <_dtoa_r+0x24e>
 800ba6c:	9b06      	ldr	r3, [sp, #24]
 800ba6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ba72:	445b      	add	r3, fp
 800ba74:	9306      	str	r3, [sp, #24]
 800ba76:	2300      	movs	r3, #0
 800ba78:	9308      	str	r3, [sp, #32]
 800ba7a:	9b07      	ldr	r3, [sp, #28]
 800ba7c:	2b09      	cmp	r3, #9
 800ba7e:	d868      	bhi.n	800bb52 <_dtoa_r+0x2ba>
 800ba80:	2b05      	cmp	r3, #5
 800ba82:	bfc4      	itt	gt
 800ba84:	3b04      	subgt	r3, #4
 800ba86:	9307      	strgt	r3, [sp, #28]
 800ba88:	9b07      	ldr	r3, [sp, #28]
 800ba8a:	f1a3 0302 	sub.w	r3, r3, #2
 800ba8e:	bfcc      	ite	gt
 800ba90:	2500      	movgt	r5, #0
 800ba92:	2501      	movle	r5, #1
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	f200 8085 	bhi.w	800bba4 <_dtoa_r+0x30c>
 800ba9a:	e8df f003 	tbb	[pc, r3]
 800ba9e:	3b2e      	.short	0x3b2e
 800baa0:	5839      	.short	0x5839
 800baa2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800baa6:	441d      	add	r5, r3
 800baa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800baac:	2b20      	cmp	r3, #32
 800baae:	bfc1      	itttt	gt
 800bab0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bab4:	fa08 f803 	lslgt.w	r8, r8, r3
 800bab8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800babc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bac0:	bfd6      	itet	le
 800bac2:	f1c3 0320 	rsble	r3, r3, #32
 800bac6:	ea48 0003 	orrgt.w	r0, r8, r3
 800baca:	fa06 f003 	lslle.w	r0, r6, r3
 800bace:	f7f4 fd19 	bl	8000504 <__aeabi_ui2d>
 800bad2:	2201      	movs	r2, #1
 800bad4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bad8:	3d01      	subs	r5, #1
 800bada:	920e      	str	r2, [sp, #56]	; 0x38
 800badc:	e76f      	b.n	800b9be <_dtoa_r+0x126>
 800bade:	2301      	movs	r3, #1
 800bae0:	e7b3      	b.n	800ba4a <_dtoa_r+0x1b2>
 800bae2:	900c      	str	r0, [sp, #48]	; 0x30
 800bae4:	e7b2      	b.n	800ba4c <_dtoa_r+0x1b4>
 800bae6:	9b05      	ldr	r3, [sp, #20]
 800bae8:	eba3 030b 	sub.w	r3, r3, fp
 800baec:	9305      	str	r3, [sp, #20]
 800baee:	f1cb 0300 	rsb	r3, fp, #0
 800baf2:	9308      	str	r3, [sp, #32]
 800baf4:	2300      	movs	r3, #0
 800baf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800baf8:	e7bf      	b.n	800ba7a <_dtoa_r+0x1e2>
 800bafa:	2300      	movs	r3, #0
 800bafc:	9309      	str	r3, [sp, #36]	; 0x24
 800bafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dc52      	bgt.n	800bbaa <_dtoa_r+0x312>
 800bb04:	2301      	movs	r3, #1
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	9304      	str	r3, [sp, #16]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	920a      	str	r2, [sp, #40]	; 0x28
 800bb0e:	e00b      	b.n	800bb28 <_dtoa_r+0x290>
 800bb10:	2301      	movs	r3, #1
 800bb12:	e7f3      	b.n	800bafc <_dtoa_r+0x264>
 800bb14:	2300      	movs	r3, #0
 800bb16:	9309      	str	r3, [sp, #36]	; 0x24
 800bb18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb1a:	445b      	add	r3, fp
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	bfb8      	it	lt
 800bb26:	2301      	movlt	r3, #1
 800bb28:	69e0      	ldr	r0, [r4, #28]
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	2204      	movs	r2, #4
 800bb2e:	f102 0614 	add.w	r6, r2, #20
 800bb32:	429e      	cmp	r6, r3
 800bb34:	d93d      	bls.n	800bbb2 <_dtoa_r+0x31a>
 800bb36:	6041      	str	r1, [r0, #4]
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fd9f 	bl	800c67c <_Balloc>
 800bb3e:	9000      	str	r0, [sp, #0]
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d139      	bne.n	800bbb8 <_dtoa_r+0x320>
 800bb44:	4b16      	ldr	r3, [pc, #88]	; (800bba0 <_dtoa_r+0x308>)
 800bb46:	4602      	mov	r2, r0
 800bb48:	f240 11af 	movw	r1, #431	; 0x1af
 800bb4c:	e6bd      	b.n	800b8ca <_dtoa_r+0x32>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e7e1      	b.n	800bb16 <_dtoa_r+0x27e>
 800bb52:	2501      	movs	r5, #1
 800bb54:	2300      	movs	r3, #0
 800bb56:	9307      	str	r3, [sp, #28]
 800bb58:	9509      	str	r5, [sp, #36]	; 0x24
 800bb5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	2200      	movs	r2, #0
 800bb64:	2312      	movs	r3, #18
 800bb66:	e7d1      	b.n	800bb0c <_dtoa_r+0x274>
 800bb68:	636f4361 	.word	0x636f4361
 800bb6c:	3fd287a7 	.word	0x3fd287a7
 800bb70:	8b60c8b3 	.word	0x8b60c8b3
 800bb74:	3fc68a28 	.word	0x3fc68a28
 800bb78:	509f79fb 	.word	0x509f79fb
 800bb7c:	3fd34413 	.word	0x3fd34413
 800bb80:	0800ed01 	.word	0x0800ed01
 800bb84:	0800ed18 	.word	0x0800ed18
 800bb88:	7ff00000 	.word	0x7ff00000
 800bb8c:	0800ecfd 	.word	0x0800ecfd
 800bb90:	0800ecf4 	.word	0x0800ecf4
 800bb94:	0800ecd1 	.word	0x0800ecd1
 800bb98:	3ff80000 	.word	0x3ff80000
 800bb9c:	0800ee08 	.word	0x0800ee08
 800bba0:	0800ed70 	.word	0x0800ed70
 800bba4:	2301      	movs	r3, #1
 800bba6:	9309      	str	r3, [sp, #36]	; 0x24
 800bba8:	e7d7      	b.n	800bb5a <_dtoa_r+0x2c2>
 800bbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	9304      	str	r3, [sp, #16]
 800bbb0:	e7ba      	b.n	800bb28 <_dtoa_r+0x290>
 800bbb2:	3101      	adds	r1, #1
 800bbb4:	0052      	lsls	r2, r2, #1
 800bbb6:	e7ba      	b.n	800bb2e <_dtoa_r+0x296>
 800bbb8:	69e3      	ldr	r3, [r4, #28]
 800bbba:	9a00      	ldr	r2, [sp, #0]
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	2b0e      	cmp	r3, #14
 800bbc2:	f200 80a8 	bhi.w	800bd16 <_dtoa_r+0x47e>
 800bbc6:	2d00      	cmp	r5, #0
 800bbc8:	f000 80a5 	beq.w	800bd16 <_dtoa_r+0x47e>
 800bbcc:	f1bb 0f00 	cmp.w	fp, #0
 800bbd0:	dd38      	ble.n	800bc44 <_dtoa_r+0x3ac>
 800bbd2:	4bc0      	ldr	r3, [pc, #768]	; (800bed4 <_dtoa_r+0x63c>)
 800bbd4:	f00b 020f 	and.w	r2, fp, #15
 800bbd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bbe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bbe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bbe8:	d019      	beq.n	800bc1e <_dtoa_r+0x386>
 800bbea:	4bbb      	ldr	r3, [pc, #748]	; (800bed8 <_dtoa_r+0x640>)
 800bbec:	ec51 0b18 	vmov	r0, r1, d8
 800bbf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbf4:	f7f4 fe2a 	bl	800084c <__aeabi_ddiv>
 800bbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbfc:	f008 080f 	and.w	r8, r8, #15
 800bc00:	2503      	movs	r5, #3
 800bc02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bed8 <_dtoa_r+0x640>
 800bc06:	f1b8 0f00 	cmp.w	r8, #0
 800bc0a:	d10a      	bne.n	800bc22 <_dtoa_r+0x38a>
 800bc0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc10:	4632      	mov	r2, r6
 800bc12:	463b      	mov	r3, r7
 800bc14:	f7f4 fe1a 	bl	800084c <__aeabi_ddiv>
 800bc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc1c:	e02b      	b.n	800bc76 <_dtoa_r+0x3de>
 800bc1e:	2502      	movs	r5, #2
 800bc20:	e7ef      	b.n	800bc02 <_dtoa_r+0x36a>
 800bc22:	f018 0f01 	tst.w	r8, #1
 800bc26:	d008      	beq.n	800bc3a <_dtoa_r+0x3a2>
 800bc28:	4630      	mov	r0, r6
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc30:	f7f4 fce2 	bl	80005f8 <__aeabi_dmul>
 800bc34:	3501      	adds	r5, #1
 800bc36:	4606      	mov	r6, r0
 800bc38:	460f      	mov	r7, r1
 800bc3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc3e:	f109 0908 	add.w	r9, r9, #8
 800bc42:	e7e0      	b.n	800bc06 <_dtoa_r+0x36e>
 800bc44:	f000 809f 	beq.w	800bd86 <_dtoa_r+0x4ee>
 800bc48:	f1cb 0600 	rsb	r6, fp, #0
 800bc4c:	4ba1      	ldr	r3, [pc, #644]	; (800bed4 <_dtoa_r+0x63c>)
 800bc4e:	4fa2      	ldr	r7, [pc, #648]	; (800bed8 <_dtoa_r+0x640>)
 800bc50:	f006 020f 	and.w	r2, r6, #15
 800bc54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	ec51 0b18 	vmov	r0, r1, d8
 800bc60:	f7f4 fcca 	bl	80005f8 <__aeabi_dmul>
 800bc64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc68:	1136      	asrs	r6, r6, #4
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2502      	movs	r5, #2
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d17e      	bne.n	800bd70 <_dtoa_r+0x4d8>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1d0      	bne.n	800bc18 <_dtoa_r+0x380>
 800bc76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f000 8084 	beq.w	800bd8a <_dtoa_r+0x4f2>
 800bc82:	4b96      	ldr	r3, [pc, #600]	; (800bedc <_dtoa_r+0x644>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	4640      	mov	r0, r8
 800bc88:	4649      	mov	r1, r9
 800bc8a:	f7f4 ff27 	bl	8000adc <__aeabi_dcmplt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d07b      	beq.n	800bd8a <_dtoa_r+0x4f2>
 800bc92:	9b04      	ldr	r3, [sp, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d078      	beq.n	800bd8a <_dtoa_r+0x4f2>
 800bc98:	9b01      	ldr	r3, [sp, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	dd39      	ble.n	800bd12 <_dtoa_r+0x47a>
 800bc9e:	4b90      	ldr	r3, [pc, #576]	; (800bee0 <_dtoa_r+0x648>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 fca7 	bl	80005f8 <__aeabi_dmul>
 800bcaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcae:	9e01      	ldr	r6, [sp, #4]
 800bcb0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800bcb4:	3501      	adds	r5, #1
 800bcb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f7f4 fc32 	bl	8000524 <__aeabi_i2d>
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	464b      	mov	r3, r9
 800bcc4:	f7f4 fc98 	bl	80005f8 <__aeabi_dmul>
 800bcc8:	4b86      	ldr	r3, [pc, #536]	; (800bee4 <_dtoa_r+0x64c>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	f7f4 fade 	bl	800028c <__adddf3>
 800bcd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bcd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd8:	9303      	str	r3, [sp, #12]
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	d158      	bne.n	800bd90 <_dtoa_r+0x4f8>
 800bcde:	4b82      	ldr	r3, [pc, #520]	; (800bee8 <_dtoa_r+0x650>)
 800bce0:	2200      	movs	r2, #0
 800bce2:	4640      	mov	r0, r8
 800bce4:	4649      	mov	r1, r9
 800bce6:	f7f4 facf 	bl	8000288 <__aeabi_dsub>
 800bcea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4689      	mov	r9, r1
 800bcf2:	f7f4 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f040 8296 	bne.w	800c228 <_dtoa_r+0x990>
 800bcfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd00:	4640      	mov	r0, r8
 800bd02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd06:	4649      	mov	r1, r9
 800bd08:	f7f4 fee8 	bl	8000adc <__aeabi_dcmplt>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	f040 8289 	bne.w	800c224 <_dtoa_r+0x98c>
 800bd12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f2c0 814e 	blt.w	800bfba <_dtoa_r+0x722>
 800bd1e:	f1bb 0f0e 	cmp.w	fp, #14
 800bd22:	f300 814a 	bgt.w	800bfba <_dtoa_r+0x722>
 800bd26:	4b6b      	ldr	r3, [pc, #428]	; (800bed4 <_dtoa_r+0x63c>)
 800bd28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f280 80dc 	bge.w	800bef0 <_dtoa_r+0x658>
 800bd38:	9b04      	ldr	r3, [sp, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f300 80d8 	bgt.w	800bef0 <_dtoa_r+0x658>
 800bd40:	f040 826f 	bne.w	800c222 <_dtoa_r+0x98a>
 800bd44:	4b68      	ldr	r3, [pc, #416]	; (800bee8 <_dtoa_r+0x650>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	4640      	mov	r0, r8
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	f7f4 fc54 	bl	80005f8 <__aeabi_dmul>
 800bd50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd54:	f7f4 fed6 	bl	8000b04 <__aeabi_dcmpge>
 800bd58:	9e04      	ldr	r6, [sp, #16]
 800bd5a:	4637      	mov	r7, r6
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f040 8245 	bne.w	800c1ec <_dtoa_r+0x954>
 800bd62:	9d00      	ldr	r5, [sp, #0]
 800bd64:	2331      	movs	r3, #49	; 0x31
 800bd66:	f805 3b01 	strb.w	r3, [r5], #1
 800bd6a:	f10b 0b01 	add.w	fp, fp, #1
 800bd6e:	e241      	b.n	800c1f4 <_dtoa_r+0x95c>
 800bd70:	07f2      	lsls	r2, r6, #31
 800bd72:	d505      	bpl.n	800bd80 <_dtoa_r+0x4e8>
 800bd74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd78:	f7f4 fc3e 	bl	80005f8 <__aeabi_dmul>
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	2301      	movs	r3, #1
 800bd80:	1076      	asrs	r6, r6, #1
 800bd82:	3708      	adds	r7, #8
 800bd84:	e773      	b.n	800bc6e <_dtoa_r+0x3d6>
 800bd86:	2502      	movs	r5, #2
 800bd88:	e775      	b.n	800bc76 <_dtoa_r+0x3de>
 800bd8a:	9e04      	ldr	r6, [sp, #16]
 800bd8c:	465f      	mov	r7, fp
 800bd8e:	e792      	b.n	800bcb6 <_dtoa_r+0x41e>
 800bd90:	9900      	ldr	r1, [sp, #0]
 800bd92:	4b50      	ldr	r3, [pc, #320]	; (800bed4 <_dtoa_r+0x63c>)
 800bd94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd98:	4431      	add	r1, r6
 800bd9a:	9102      	str	r1, [sp, #8]
 800bd9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd9e:	eeb0 9a47 	vmov.f32	s18, s14
 800bda2:	eef0 9a67 	vmov.f32	s19, s15
 800bda6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdae:	2900      	cmp	r1, #0
 800bdb0:	d044      	beq.n	800be3c <_dtoa_r+0x5a4>
 800bdb2:	494e      	ldr	r1, [pc, #312]	; (800beec <_dtoa_r+0x654>)
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	f7f4 fd49 	bl	800084c <__aeabi_ddiv>
 800bdba:	ec53 2b19 	vmov	r2, r3, d9
 800bdbe:	f7f4 fa63 	bl	8000288 <__aeabi_dsub>
 800bdc2:	9d00      	ldr	r5, [sp, #0]
 800bdc4:	ec41 0b19 	vmov	d9, r0, r1
 800bdc8:	4649      	mov	r1, r9
 800bdca:	4640      	mov	r0, r8
 800bdcc:	f7f4 fec4 	bl	8000b58 <__aeabi_d2iz>
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	f7f4 fba7 	bl	8000524 <__aeabi_i2d>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4640      	mov	r0, r8
 800bddc:	4649      	mov	r1, r9
 800bdde:	f7f4 fa53 	bl	8000288 <__aeabi_dsub>
 800bde2:	3630      	adds	r6, #48	; 0x30
 800bde4:	f805 6b01 	strb.w	r6, [r5], #1
 800bde8:	ec53 2b19 	vmov	r2, r3, d9
 800bdec:	4680      	mov	r8, r0
 800bdee:	4689      	mov	r9, r1
 800bdf0:	f7f4 fe74 	bl	8000adc <__aeabi_dcmplt>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d164      	bne.n	800bec2 <_dtoa_r+0x62a>
 800bdf8:	4642      	mov	r2, r8
 800bdfa:	464b      	mov	r3, r9
 800bdfc:	4937      	ldr	r1, [pc, #220]	; (800bedc <_dtoa_r+0x644>)
 800bdfe:	2000      	movs	r0, #0
 800be00:	f7f4 fa42 	bl	8000288 <__aeabi_dsub>
 800be04:	ec53 2b19 	vmov	r2, r3, d9
 800be08:	f7f4 fe68 	bl	8000adc <__aeabi_dcmplt>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	f040 80b6 	bne.w	800bf7e <_dtoa_r+0x6e6>
 800be12:	9b02      	ldr	r3, [sp, #8]
 800be14:	429d      	cmp	r5, r3
 800be16:	f43f af7c 	beq.w	800bd12 <_dtoa_r+0x47a>
 800be1a:	4b31      	ldr	r3, [pc, #196]	; (800bee0 <_dtoa_r+0x648>)
 800be1c:	ec51 0b19 	vmov	r0, r1, d9
 800be20:	2200      	movs	r2, #0
 800be22:	f7f4 fbe9 	bl	80005f8 <__aeabi_dmul>
 800be26:	4b2e      	ldr	r3, [pc, #184]	; (800bee0 <_dtoa_r+0x648>)
 800be28:	ec41 0b19 	vmov	d9, r0, r1
 800be2c:	2200      	movs	r2, #0
 800be2e:	4640      	mov	r0, r8
 800be30:	4649      	mov	r1, r9
 800be32:	f7f4 fbe1 	bl	80005f8 <__aeabi_dmul>
 800be36:	4680      	mov	r8, r0
 800be38:	4689      	mov	r9, r1
 800be3a:	e7c5      	b.n	800bdc8 <_dtoa_r+0x530>
 800be3c:	ec51 0b17 	vmov	r0, r1, d7
 800be40:	f7f4 fbda 	bl	80005f8 <__aeabi_dmul>
 800be44:	9b02      	ldr	r3, [sp, #8]
 800be46:	9d00      	ldr	r5, [sp, #0]
 800be48:	930f      	str	r3, [sp, #60]	; 0x3c
 800be4a:	ec41 0b19 	vmov	d9, r0, r1
 800be4e:	4649      	mov	r1, r9
 800be50:	4640      	mov	r0, r8
 800be52:	f7f4 fe81 	bl	8000b58 <__aeabi_d2iz>
 800be56:	4606      	mov	r6, r0
 800be58:	f7f4 fb64 	bl	8000524 <__aeabi_i2d>
 800be5c:	3630      	adds	r6, #48	; 0x30
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4640      	mov	r0, r8
 800be64:	4649      	mov	r1, r9
 800be66:	f7f4 fa0f 	bl	8000288 <__aeabi_dsub>
 800be6a:	f805 6b01 	strb.w	r6, [r5], #1
 800be6e:	9b02      	ldr	r3, [sp, #8]
 800be70:	429d      	cmp	r5, r3
 800be72:	4680      	mov	r8, r0
 800be74:	4689      	mov	r9, r1
 800be76:	f04f 0200 	mov.w	r2, #0
 800be7a:	d124      	bne.n	800bec6 <_dtoa_r+0x62e>
 800be7c:	4b1b      	ldr	r3, [pc, #108]	; (800beec <_dtoa_r+0x654>)
 800be7e:	ec51 0b19 	vmov	r0, r1, d9
 800be82:	f7f4 fa03 	bl	800028c <__adddf3>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	4640      	mov	r0, r8
 800be8c:	4649      	mov	r1, r9
 800be8e:	f7f4 fe43 	bl	8000b18 <__aeabi_dcmpgt>
 800be92:	2800      	cmp	r0, #0
 800be94:	d173      	bne.n	800bf7e <_dtoa_r+0x6e6>
 800be96:	ec53 2b19 	vmov	r2, r3, d9
 800be9a:	4914      	ldr	r1, [pc, #80]	; (800beec <_dtoa_r+0x654>)
 800be9c:	2000      	movs	r0, #0
 800be9e:	f7f4 f9f3 	bl	8000288 <__aeabi_dsub>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	4640      	mov	r0, r8
 800bea8:	4649      	mov	r1, r9
 800beaa:	f7f4 fe17 	bl	8000adc <__aeabi_dcmplt>
 800beae:	2800      	cmp	r0, #0
 800beb0:	f43f af2f 	beq.w	800bd12 <_dtoa_r+0x47a>
 800beb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800beb6:	1e6b      	subs	r3, r5, #1
 800beb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800beba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bebe:	2b30      	cmp	r3, #48	; 0x30
 800bec0:	d0f8      	beq.n	800beb4 <_dtoa_r+0x61c>
 800bec2:	46bb      	mov	fp, r7
 800bec4:	e04a      	b.n	800bf5c <_dtoa_r+0x6c4>
 800bec6:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <_dtoa_r+0x648>)
 800bec8:	f7f4 fb96 	bl	80005f8 <__aeabi_dmul>
 800becc:	4680      	mov	r8, r0
 800bece:	4689      	mov	r9, r1
 800bed0:	e7bd      	b.n	800be4e <_dtoa_r+0x5b6>
 800bed2:	bf00      	nop
 800bed4:	0800ee08 	.word	0x0800ee08
 800bed8:	0800ede0 	.word	0x0800ede0
 800bedc:	3ff00000 	.word	0x3ff00000
 800bee0:	40240000 	.word	0x40240000
 800bee4:	401c0000 	.word	0x401c0000
 800bee8:	40140000 	.word	0x40140000
 800beec:	3fe00000 	.word	0x3fe00000
 800bef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bef4:	9d00      	ldr	r5, [sp, #0]
 800bef6:	4642      	mov	r2, r8
 800bef8:	464b      	mov	r3, r9
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 fca5 	bl	800084c <__aeabi_ddiv>
 800bf02:	f7f4 fe29 	bl	8000b58 <__aeabi_d2iz>
 800bf06:	9001      	str	r0, [sp, #4]
 800bf08:	f7f4 fb0c 	bl	8000524 <__aeabi_i2d>
 800bf0c:	4642      	mov	r2, r8
 800bf0e:	464b      	mov	r3, r9
 800bf10:	f7f4 fb72 	bl	80005f8 <__aeabi_dmul>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4630      	mov	r0, r6
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	f7f4 f9b4 	bl	8000288 <__aeabi_dsub>
 800bf20:	9e01      	ldr	r6, [sp, #4]
 800bf22:	9f04      	ldr	r7, [sp, #16]
 800bf24:	3630      	adds	r6, #48	; 0x30
 800bf26:	f805 6b01 	strb.w	r6, [r5], #1
 800bf2a:	9e00      	ldr	r6, [sp, #0]
 800bf2c:	1bae      	subs	r6, r5, r6
 800bf2e:	42b7      	cmp	r7, r6
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	d134      	bne.n	800bfa0 <_dtoa_r+0x708>
 800bf36:	f7f4 f9a9 	bl	800028c <__adddf3>
 800bf3a:	4642      	mov	r2, r8
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460f      	mov	r7, r1
 800bf42:	f7f4 fde9 	bl	8000b18 <__aeabi_dcmpgt>
 800bf46:	b9c8      	cbnz	r0, 800bf7c <_dtoa_r+0x6e4>
 800bf48:	4642      	mov	r2, r8
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf54:	b110      	cbz	r0, 800bf5c <_dtoa_r+0x6c4>
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	07db      	lsls	r3, r3, #31
 800bf5a:	d40f      	bmi.n	800bf7c <_dtoa_r+0x6e4>
 800bf5c:	4651      	mov	r1, sl
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 fbcc 	bl	800c6fc <_Bfree>
 800bf64:	2300      	movs	r3, #0
 800bf66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf68:	702b      	strb	r3, [r5, #0]
 800bf6a:	f10b 0301 	add.w	r3, fp, #1
 800bf6e:	6013      	str	r3, [r2, #0]
 800bf70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f43f ace2 	beq.w	800b93c <_dtoa_r+0xa4>
 800bf78:	601d      	str	r5, [r3, #0]
 800bf7a:	e4df      	b.n	800b93c <_dtoa_r+0xa4>
 800bf7c:	465f      	mov	r7, fp
 800bf7e:	462b      	mov	r3, r5
 800bf80:	461d      	mov	r5, r3
 800bf82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf86:	2a39      	cmp	r2, #57	; 0x39
 800bf88:	d106      	bne.n	800bf98 <_dtoa_r+0x700>
 800bf8a:	9a00      	ldr	r2, [sp, #0]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d1f7      	bne.n	800bf80 <_dtoa_r+0x6e8>
 800bf90:	9900      	ldr	r1, [sp, #0]
 800bf92:	2230      	movs	r2, #48	; 0x30
 800bf94:	3701      	adds	r7, #1
 800bf96:	700a      	strb	r2, [r1, #0]
 800bf98:	781a      	ldrb	r2, [r3, #0]
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	e790      	b.n	800bec2 <_dtoa_r+0x62a>
 800bfa0:	4ba3      	ldr	r3, [pc, #652]	; (800c230 <_dtoa_r+0x998>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f7f4 fb28 	bl	80005f8 <__aeabi_dmul>
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4606      	mov	r6, r0
 800bfae:	460f      	mov	r7, r1
 800bfb0:	f7f4 fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d09e      	beq.n	800bef6 <_dtoa_r+0x65e>
 800bfb8:	e7d0      	b.n	800bf5c <_dtoa_r+0x6c4>
 800bfba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfbc:	2a00      	cmp	r2, #0
 800bfbe:	f000 80ca 	beq.w	800c156 <_dtoa_r+0x8be>
 800bfc2:	9a07      	ldr	r2, [sp, #28]
 800bfc4:	2a01      	cmp	r2, #1
 800bfc6:	f300 80ad 	bgt.w	800c124 <_dtoa_r+0x88c>
 800bfca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfcc:	2a00      	cmp	r2, #0
 800bfce:	f000 80a5 	beq.w	800c11c <_dtoa_r+0x884>
 800bfd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfd6:	9e08      	ldr	r6, [sp, #32]
 800bfd8:	9d05      	ldr	r5, [sp, #20]
 800bfda:	9a05      	ldr	r2, [sp, #20]
 800bfdc:	441a      	add	r2, r3
 800bfde:	9205      	str	r2, [sp, #20]
 800bfe0:	9a06      	ldr	r2, [sp, #24]
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	441a      	add	r2, r3
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	9206      	str	r2, [sp, #24]
 800bfea:	f000 fc3d 	bl	800c868 <__i2b>
 800bfee:	4607      	mov	r7, r0
 800bff0:	b165      	cbz	r5, 800c00c <_dtoa_r+0x774>
 800bff2:	9b06      	ldr	r3, [sp, #24]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd09      	ble.n	800c00c <_dtoa_r+0x774>
 800bff8:	42ab      	cmp	r3, r5
 800bffa:	9a05      	ldr	r2, [sp, #20]
 800bffc:	bfa8      	it	ge
 800bffe:	462b      	movge	r3, r5
 800c000:	1ad2      	subs	r2, r2, r3
 800c002:	9205      	str	r2, [sp, #20]
 800c004:	9a06      	ldr	r2, [sp, #24]
 800c006:	1aed      	subs	r5, r5, r3
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	9306      	str	r3, [sp, #24]
 800c00c:	9b08      	ldr	r3, [sp, #32]
 800c00e:	b1f3      	cbz	r3, 800c04e <_dtoa_r+0x7b6>
 800c010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 80a3 	beq.w	800c15e <_dtoa_r+0x8c6>
 800c018:	2e00      	cmp	r6, #0
 800c01a:	dd10      	ble.n	800c03e <_dtoa_r+0x7a6>
 800c01c:	4639      	mov	r1, r7
 800c01e:	4632      	mov	r2, r6
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fce1 	bl	800c9e8 <__pow5mult>
 800c026:	4652      	mov	r2, sl
 800c028:	4601      	mov	r1, r0
 800c02a:	4607      	mov	r7, r0
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 fc31 	bl	800c894 <__multiply>
 800c032:	4651      	mov	r1, sl
 800c034:	4680      	mov	r8, r0
 800c036:	4620      	mov	r0, r4
 800c038:	f000 fb60 	bl	800c6fc <_Bfree>
 800c03c:	46c2      	mov	sl, r8
 800c03e:	9b08      	ldr	r3, [sp, #32]
 800c040:	1b9a      	subs	r2, r3, r6
 800c042:	d004      	beq.n	800c04e <_dtoa_r+0x7b6>
 800c044:	4651      	mov	r1, sl
 800c046:	4620      	mov	r0, r4
 800c048:	f000 fcce 	bl	800c9e8 <__pow5mult>
 800c04c:	4682      	mov	sl, r0
 800c04e:	2101      	movs	r1, #1
 800c050:	4620      	mov	r0, r4
 800c052:	f000 fc09 	bl	800c868 <__i2b>
 800c056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	4606      	mov	r6, r0
 800c05c:	f340 8081 	ble.w	800c162 <_dtoa_r+0x8ca>
 800c060:	461a      	mov	r2, r3
 800c062:	4601      	mov	r1, r0
 800c064:	4620      	mov	r0, r4
 800c066:	f000 fcbf 	bl	800c9e8 <__pow5mult>
 800c06a:	9b07      	ldr	r3, [sp, #28]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	4606      	mov	r6, r0
 800c070:	dd7a      	ble.n	800c168 <_dtoa_r+0x8d0>
 800c072:	f04f 0800 	mov.w	r8, #0
 800c076:	6933      	ldr	r3, [r6, #16]
 800c078:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c07c:	6918      	ldr	r0, [r3, #16]
 800c07e:	f000 fba5 	bl	800c7cc <__hi0bits>
 800c082:	f1c0 0020 	rsb	r0, r0, #32
 800c086:	9b06      	ldr	r3, [sp, #24]
 800c088:	4418      	add	r0, r3
 800c08a:	f010 001f 	ands.w	r0, r0, #31
 800c08e:	f000 8094 	beq.w	800c1ba <_dtoa_r+0x922>
 800c092:	f1c0 0320 	rsb	r3, r0, #32
 800c096:	2b04      	cmp	r3, #4
 800c098:	f340 8085 	ble.w	800c1a6 <_dtoa_r+0x90e>
 800c09c:	9b05      	ldr	r3, [sp, #20]
 800c09e:	f1c0 001c 	rsb	r0, r0, #28
 800c0a2:	4403      	add	r3, r0
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	9b06      	ldr	r3, [sp, #24]
 800c0a8:	4403      	add	r3, r0
 800c0aa:	4405      	add	r5, r0
 800c0ac:	9306      	str	r3, [sp, #24]
 800c0ae:	9b05      	ldr	r3, [sp, #20]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	dd05      	ble.n	800c0c0 <_dtoa_r+0x828>
 800c0b4:	4651      	mov	r1, sl
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f000 fcef 	bl	800ca9c <__lshift>
 800c0be:	4682      	mov	sl, r0
 800c0c0:	9b06      	ldr	r3, [sp, #24]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dd05      	ble.n	800c0d2 <_dtoa_r+0x83a>
 800c0c6:	4631      	mov	r1, r6
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 fce6 	bl	800ca9c <__lshift>
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d072      	beq.n	800c1be <_dtoa_r+0x926>
 800c0d8:	4631      	mov	r1, r6
 800c0da:	4650      	mov	r0, sl
 800c0dc:	f000 fd4a 	bl	800cb74 <__mcmp>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	da6c      	bge.n	800c1be <_dtoa_r+0x926>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4651      	mov	r1, sl
 800c0e8:	220a      	movs	r2, #10
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f000 fb28 	bl	800c740 <__multadd>
 800c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c0f6:	4682      	mov	sl, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 81b0 	beq.w	800c45e <_dtoa_r+0xbc6>
 800c0fe:	2300      	movs	r3, #0
 800c100:	4639      	mov	r1, r7
 800c102:	220a      	movs	r2, #10
 800c104:	4620      	mov	r0, r4
 800c106:	f000 fb1b 	bl	800c740 <__multadd>
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	4607      	mov	r7, r0
 800c110:	f300 8096 	bgt.w	800c240 <_dtoa_r+0x9a8>
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	2b02      	cmp	r3, #2
 800c118:	dc59      	bgt.n	800c1ce <_dtoa_r+0x936>
 800c11a:	e091      	b.n	800c240 <_dtoa_r+0x9a8>
 800c11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c11e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c122:	e758      	b.n	800bfd6 <_dtoa_r+0x73e>
 800c124:	9b04      	ldr	r3, [sp, #16]
 800c126:	1e5e      	subs	r6, r3, #1
 800c128:	9b08      	ldr	r3, [sp, #32]
 800c12a:	42b3      	cmp	r3, r6
 800c12c:	bfbf      	itttt	lt
 800c12e:	9b08      	ldrlt	r3, [sp, #32]
 800c130:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c132:	9608      	strlt	r6, [sp, #32]
 800c134:	1af3      	sublt	r3, r6, r3
 800c136:	bfb4      	ite	lt
 800c138:	18d2      	addlt	r2, r2, r3
 800c13a:	1b9e      	subge	r6, r3, r6
 800c13c:	9b04      	ldr	r3, [sp, #16]
 800c13e:	bfbc      	itt	lt
 800c140:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c142:	2600      	movlt	r6, #0
 800c144:	2b00      	cmp	r3, #0
 800c146:	bfb7      	itett	lt
 800c148:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c14c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c150:	1a9d      	sublt	r5, r3, r2
 800c152:	2300      	movlt	r3, #0
 800c154:	e741      	b.n	800bfda <_dtoa_r+0x742>
 800c156:	9e08      	ldr	r6, [sp, #32]
 800c158:	9d05      	ldr	r5, [sp, #20]
 800c15a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c15c:	e748      	b.n	800bff0 <_dtoa_r+0x758>
 800c15e:	9a08      	ldr	r2, [sp, #32]
 800c160:	e770      	b.n	800c044 <_dtoa_r+0x7ac>
 800c162:	9b07      	ldr	r3, [sp, #28]
 800c164:	2b01      	cmp	r3, #1
 800c166:	dc19      	bgt.n	800c19c <_dtoa_r+0x904>
 800c168:	9b02      	ldr	r3, [sp, #8]
 800c16a:	b9bb      	cbnz	r3, 800c19c <_dtoa_r+0x904>
 800c16c:	9b03      	ldr	r3, [sp, #12]
 800c16e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c172:	b99b      	cbnz	r3, 800c19c <_dtoa_r+0x904>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c17a:	0d1b      	lsrs	r3, r3, #20
 800c17c:	051b      	lsls	r3, r3, #20
 800c17e:	b183      	cbz	r3, 800c1a2 <_dtoa_r+0x90a>
 800c180:	9b05      	ldr	r3, [sp, #20]
 800c182:	3301      	adds	r3, #1
 800c184:	9305      	str	r3, [sp, #20]
 800c186:	9b06      	ldr	r3, [sp, #24]
 800c188:	3301      	adds	r3, #1
 800c18a:	9306      	str	r3, [sp, #24]
 800c18c:	f04f 0801 	mov.w	r8, #1
 800c190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c192:	2b00      	cmp	r3, #0
 800c194:	f47f af6f 	bne.w	800c076 <_dtoa_r+0x7de>
 800c198:	2001      	movs	r0, #1
 800c19a:	e774      	b.n	800c086 <_dtoa_r+0x7ee>
 800c19c:	f04f 0800 	mov.w	r8, #0
 800c1a0:	e7f6      	b.n	800c190 <_dtoa_r+0x8f8>
 800c1a2:	4698      	mov	r8, r3
 800c1a4:	e7f4      	b.n	800c190 <_dtoa_r+0x8f8>
 800c1a6:	d082      	beq.n	800c0ae <_dtoa_r+0x816>
 800c1a8:	9a05      	ldr	r2, [sp, #20]
 800c1aa:	331c      	adds	r3, #28
 800c1ac:	441a      	add	r2, r3
 800c1ae:	9205      	str	r2, [sp, #20]
 800c1b0:	9a06      	ldr	r2, [sp, #24]
 800c1b2:	441a      	add	r2, r3
 800c1b4:	441d      	add	r5, r3
 800c1b6:	9206      	str	r2, [sp, #24]
 800c1b8:	e779      	b.n	800c0ae <_dtoa_r+0x816>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	e7f4      	b.n	800c1a8 <_dtoa_r+0x910>
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	dc37      	bgt.n	800c234 <_dtoa_r+0x99c>
 800c1c4:	9b07      	ldr	r3, [sp, #28]
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	dd34      	ble.n	800c234 <_dtoa_r+0x99c>
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	9b01      	ldr	r3, [sp, #4]
 800c1d0:	b963      	cbnz	r3, 800c1ec <_dtoa_r+0x954>
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	2205      	movs	r2, #5
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 fab2 	bl	800c740 <__multadd>
 800c1dc:	4601      	mov	r1, r0
 800c1de:	4606      	mov	r6, r0
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	f000 fcc7 	bl	800cb74 <__mcmp>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f73f adbb 	bgt.w	800bd62 <_dtoa_r+0x4ca>
 800c1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ee:	9d00      	ldr	r5, [sp, #0]
 800c1f0:	ea6f 0b03 	mvn.w	fp, r3
 800c1f4:	f04f 0800 	mov.w	r8, #0
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 fa7e 	bl	800c6fc <_Bfree>
 800c200:	2f00      	cmp	r7, #0
 800c202:	f43f aeab 	beq.w	800bf5c <_dtoa_r+0x6c4>
 800c206:	f1b8 0f00 	cmp.w	r8, #0
 800c20a:	d005      	beq.n	800c218 <_dtoa_r+0x980>
 800c20c:	45b8      	cmp	r8, r7
 800c20e:	d003      	beq.n	800c218 <_dtoa_r+0x980>
 800c210:	4641      	mov	r1, r8
 800c212:	4620      	mov	r0, r4
 800c214:	f000 fa72 	bl	800c6fc <_Bfree>
 800c218:	4639      	mov	r1, r7
 800c21a:	4620      	mov	r0, r4
 800c21c:	f000 fa6e 	bl	800c6fc <_Bfree>
 800c220:	e69c      	b.n	800bf5c <_dtoa_r+0x6c4>
 800c222:	2600      	movs	r6, #0
 800c224:	4637      	mov	r7, r6
 800c226:	e7e1      	b.n	800c1ec <_dtoa_r+0x954>
 800c228:	46bb      	mov	fp, r7
 800c22a:	4637      	mov	r7, r6
 800c22c:	e599      	b.n	800bd62 <_dtoa_r+0x4ca>
 800c22e:	bf00      	nop
 800c230:	40240000 	.word	0x40240000
 800c234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 80c8 	beq.w	800c3cc <_dtoa_r+0xb34>
 800c23c:	9b04      	ldr	r3, [sp, #16]
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	2d00      	cmp	r5, #0
 800c242:	dd05      	ble.n	800c250 <_dtoa_r+0x9b8>
 800c244:	4639      	mov	r1, r7
 800c246:	462a      	mov	r2, r5
 800c248:	4620      	mov	r0, r4
 800c24a:	f000 fc27 	bl	800ca9c <__lshift>
 800c24e:	4607      	mov	r7, r0
 800c250:	f1b8 0f00 	cmp.w	r8, #0
 800c254:	d05b      	beq.n	800c30e <_dtoa_r+0xa76>
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fa0f 	bl	800c67c <_Balloc>
 800c25e:	4605      	mov	r5, r0
 800c260:	b928      	cbnz	r0, 800c26e <_dtoa_r+0x9d6>
 800c262:	4b83      	ldr	r3, [pc, #524]	; (800c470 <_dtoa_r+0xbd8>)
 800c264:	4602      	mov	r2, r0
 800c266:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c26a:	f7ff bb2e 	b.w	800b8ca <_dtoa_r+0x32>
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	3202      	adds	r2, #2
 800c272:	0092      	lsls	r2, r2, #2
 800c274:	f107 010c 	add.w	r1, r7, #12
 800c278:	300c      	adds	r0, #12
 800c27a:	f7ff fa77 	bl	800b76c <memcpy>
 800c27e:	2201      	movs	r2, #1
 800c280:	4629      	mov	r1, r5
 800c282:	4620      	mov	r0, r4
 800c284:	f000 fc0a 	bl	800ca9c <__lshift>
 800c288:	9b00      	ldr	r3, [sp, #0]
 800c28a:	3301      	adds	r3, #1
 800c28c:	9304      	str	r3, [sp, #16]
 800c28e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c292:	4413      	add	r3, r2
 800c294:	9308      	str	r3, [sp, #32]
 800c296:	9b02      	ldr	r3, [sp, #8]
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	46b8      	mov	r8, r7
 800c29e:	9306      	str	r3, [sp, #24]
 800c2a0:	4607      	mov	r7, r0
 800c2a2:	9b04      	ldr	r3, [sp, #16]
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	4650      	mov	r0, sl
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	f7ff fa6c 	bl	800b788 <quorem>
 800c2b0:	4641      	mov	r1, r8
 800c2b2:	9002      	str	r0, [sp, #8]
 800c2b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	f000 fc5b 	bl	800cb74 <__mcmp>
 800c2be:	463a      	mov	r2, r7
 800c2c0:	9005      	str	r0, [sp, #20]
 800c2c2:	4631      	mov	r1, r6
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f000 fc71 	bl	800cbac <__mdiff>
 800c2ca:	68c2      	ldr	r2, [r0, #12]
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	bb02      	cbnz	r2, 800c312 <_dtoa_r+0xa7a>
 800c2d0:	4601      	mov	r1, r0
 800c2d2:	4650      	mov	r0, sl
 800c2d4:	f000 fc4e 	bl	800cb74 <__mcmp>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	4629      	mov	r1, r5
 800c2dc:	4620      	mov	r0, r4
 800c2de:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e0:	f000 fa0c 	bl	800c6fc <_Bfree>
 800c2e4:	9b07      	ldr	r3, [sp, #28]
 800c2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e8:	9d04      	ldr	r5, [sp, #16]
 800c2ea:	ea43 0102 	orr.w	r1, r3, r2
 800c2ee:	9b06      	ldr	r3, [sp, #24]
 800c2f0:	4319      	orrs	r1, r3
 800c2f2:	d110      	bne.n	800c316 <_dtoa_r+0xa7e>
 800c2f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2f8:	d029      	beq.n	800c34e <_dtoa_r+0xab6>
 800c2fa:	9b05      	ldr	r3, [sp, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	dd02      	ble.n	800c306 <_dtoa_r+0xa6e>
 800c300:	9b02      	ldr	r3, [sp, #8]
 800c302:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c306:	9b01      	ldr	r3, [sp, #4]
 800c308:	f883 9000 	strb.w	r9, [r3]
 800c30c:	e774      	b.n	800c1f8 <_dtoa_r+0x960>
 800c30e:	4638      	mov	r0, r7
 800c310:	e7ba      	b.n	800c288 <_dtoa_r+0x9f0>
 800c312:	2201      	movs	r2, #1
 800c314:	e7e1      	b.n	800c2da <_dtoa_r+0xa42>
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	db04      	blt.n	800c326 <_dtoa_r+0xa8e>
 800c31c:	9907      	ldr	r1, [sp, #28]
 800c31e:	430b      	orrs	r3, r1
 800c320:	9906      	ldr	r1, [sp, #24]
 800c322:	430b      	orrs	r3, r1
 800c324:	d120      	bne.n	800c368 <_dtoa_r+0xad0>
 800c326:	2a00      	cmp	r2, #0
 800c328:	dded      	ble.n	800c306 <_dtoa_r+0xa6e>
 800c32a:	4651      	mov	r1, sl
 800c32c:	2201      	movs	r2, #1
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 fbb4 	bl	800ca9c <__lshift>
 800c334:	4631      	mov	r1, r6
 800c336:	4682      	mov	sl, r0
 800c338:	f000 fc1c 	bl	800cb74 <__mcmp>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	dc03      	bgt.n	800c348 <_dtoa_r+0xab0>
 800c340:	d1e1      	bne.n	800c306 <_dtoa_r+0xa6e>
 800c342:	f019 0f01 	tst.w	r9, #1
 800c346:	d0de      	beq.n	800c306 <_dtoa_r+0xa6e>
 800c348:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c34c:	d1d8      	bne.n	800c300 <_dtoa_r+0xa68>
 800c34e:	9a01      	ldr	r2, [sp, #4]
 800c350:	2339      	movs	r3, #57	; 0x39
 800c352:	7013      	strb	r3, [r2, #0]
 800c354:	462b      	mov	r3, r5
 800c356:	461d      	mov	r5, r3
 800c358:	3b01      	subs	r3, #1
 800c35a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c35e:	2a39      	cmp	r2, #57	; 0x39
 800c360:	d06c      	beq.n	800c43c <_dtoa_r+0xba4>
 800c362:	3201      	adds	r2, #1
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	e747      	b.n	800c1f8 <_dtoa_r+0x960>
 800c368:	2a00      	cmp	r2, #0
 800c36a:	dd07      	ble.n	800c37c <_dtoa_r+0xae4>
 800c36c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c370:	d0ed      	beq.n	800c34e <_dtoa_r+0xab6>
 800c372:	9a01      	ldr	r2, [sp, #4]
 800c374:	f109 0301 	add.w	r3, r9, #1
 800c378:	7013      	strb	r3, [r2, #0]
 800c37a:	e73d      	b.n	800c1f8 <_dtoa_r+0x960>
 800c37c:	9b04      	ldr	r3, [sp, #16]
 800c37e:	9a08      	ldr	r2, [sp, #32]
 800c380:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c384:	4293      	cmp	r3, r2
 800c386:	d043      	beq.n	800c410 <_dtoa_r+0xb78>
 800c388:	4651      	mov	r1, sl
 800c38a:	2300      	movs	r3, #0
 800c38c:	220a      	movs	r2, #10
 800c38e:	4620      	mov	r0, r4
 800c390:	f000 f9d6 	bl	800c740 <__multadd>
 800c394:	45b8      	cmp	r8, r7
 800c396:	4682      	mov	sl, r0
 800c398:	f04f 0300 	mov.w	r3, #0
 800c39c:	f04f 020a 	mov.w	r2, #10
 800c3a0:	4641      	mov	r1, r8
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	d107      	bne.n	800c3b6 <_dtoa_r+0xb1e>
 800c3a6:	f000 f9cb 	bl	800c740 <__multadd>
 800c3aa:	4680      	mov	r8, r0
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	9b04      	ldr	r3, [sp, #16]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	9304      	str	r3, [sp, #16]
 800c3b4:	e775      	b.n	800c2a2 <_dtoa_r+0xa0a>
 800c3b6:	f000 f9c3 	bl	800c740 <__multadd>
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	4680      	mov	r8, r0
 800c3be:	2300      	movs	r3, #0
 800c3c0:	220a      	movs	r2, #10
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f000 f9bc 	bl	800c740 <__multadd>
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	e7f0      	b.n	800c3ae <_dtoa_r+0xb16>
 800c3cc:	9b04      	ldr	r3, [sp, #16]
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	9d00      	ldr	r5, [sp, #0]
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	f7ff f9d7 	bl	800b788 <quorem>
 800c3da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c3de:	9b00      	ldr	r3, [sp, #0]
 800c3e0:	f805 9b01 	strb.w	r9, [r5], #1
 800c3e4:	1aea      	subs	r2, r5, r3
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	dd07      	ble.n	800c3fc <_dtoa_r+0xb64>
 800c3ec:	4651      	mov	r1, sl
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	220a      	movs	r2, #10
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f000 f9a4 	bl	800c740 <__multadd>
 800c3f8:	4682      	mov	sl, r0
 800c3fa:	e7ea      	b.n	800c3d2 <_dtoa_r+0xb3a>
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	bfc8      	it	gt
 800c402:	461d      	movgt	r5, r3
 800c404:	9b00      	ldr	r3, [sp, #0]
 800c406:	bfd8      	it	le
 800c408:	2501      	movle	r5, #1
 800c40a:	441d      	add	r5, r3
 800c40c:	f04f 0800 	mov.w	r8, #0
 800c410:	4651      	mov	r1, sl
 800c412:	2201      	movs	r2, #1
 800c414:	4620      	mov	r0, r4
 800c416:	f000 fb41 	bl	800ca9c <__lshift>
 800c41a:	4631      	mov	r1, r6
 800c41c:	4682      	mov	sl, r0
 800c41e:	f000 fba9 	bl	800cb74 <__mcmp>
 800c422:	2800      	cmp	r0, #0
 800c424:	dc96      	bgt.n	800c354 <_dtoa_r+0xabc>
 800c426:	d102      	bne.n	800c42e <_dtoa_r+0xb96>
 800c428:	f019 0f01 	tst.w	r9, #1
 800c42c:	d192      	bne.n	800c354 <_dtoa_r+0xabc>
 800c42e:	462b      	mov	r3, r5
 800c430:	461d      	mov	r5, r3
 800c432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c436:	2a30      	cmp	r2, #48	; 0x30
 800c438:	d0fa      	beq.n	800c430 <_dtoa_r+0xb98>
 800c43a:	e6dd      	b.n	800c1f8 <_dtoa_r+0x960>
 800c43c:	9a00      	ldr	r2, [sp, #0]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d189      	bne.n	800c356 <_dtoa_r+0xabe>
 800c442:	f10b 0b01 	add.w	fp, fp, #1
 800c446:	2331      	movs	r3, #49	; 0x31
 800c448:	e796      	b.n	800c378 <_dtoa_r+0xae0>
 800c44a:	4b0a      	ldr	r3, [pc, #40]	; (800c474 <_dtoa_r+0xbdc>)
 800c44c:	f7ff ba99 	b.w	800b982 <_dtoa_r+0xea>
 800c450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c452:	2b00      	cmp	r3, #0
 800c454:	f47f aa6d 	bne.w	800b932 <_dtoa_r+0x9a>
 800c458:	4b07      	ldr	r3, [pc, #28]	; (800c478 <_dtoa_r+0xbe0>)
 800c45a:	f7ff ba92 	b.w	800b982 <_dtoa_r+0xea>
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	dcb5      	bgt.n	800c3d0 <_dtoa_r+0xb38>
 800c464:	9b07      	ldr	r3, [sp, #28]
 800c466:	2b02      	cmp	r3, #2
 800c468:	f73f aeb1 	bgt.w	800c1ce <_dtoa_r+0x936>
 800c46c:	e7b0      	b.n	800c3d0 <_dtoa_r+0xb38>
 800c46e:	bf00      	nop
 800c470:	0800ed70 	.word	0x0800ed70
 800c474:	0800ecd0 	.word	0x0800ecd0
 800c478:	0800ecf4 	.word	0x0800ecf4

0800c47c <_free_r>:
 800c47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c47e:	2900      	cmp	r1, #0
 800c480:	d044      	beq.n	800c50c <_free_r+0x90>
 800c482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c486:	9001      	str	r0, [sp, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f1a1 0404 	sub.w	r4, r1, #4
 800c48e:	bfb8      	it	lt
 800c490:	18e4      	addlt	r4, r4, r3
 800c492:	f000 f8e7 	bl	800c664 <__malloc_lock>
 800c496:	4a1e      	ldr	r2, [pc, #120]	; (800c510 <_free_r+0x94>)
 800c498:	9801      	ldr	r0, [sp, #4]
 800c49a:	6813      	ldr	r3, [r2, #0]
 800c49c:	b933      	cbnz	r3, 800c4ac <_free_r+0x30>
 800c49e:	6063      	str	r3, [r4, #4]
 800c4a0:	6014      	str	r4, [r2, #0]
 800c4a2:	b003      	add	sp, #12
 800c4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4a8:	f000 b8e2 	b.w	800c670 <__malloc_unlock>
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	d908      	bls.n	800c4c2 <_free_r+0x46>
 800c4b0:	6825      	ldr	r5, [r4, #0]
 800c4b2:	1961      	adds	r1, r4, r5
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	bf01      	itttt	eq
 800c4b8:	6819      	ldreq	r1, [r3, #0]
 800c4ba:	685b      	ldreq	r3, [r3, #4]
 800c4bc:	1949      	addeq	r1, r1, r5
 800c4be:	6021      	streq	r1, [r4, #0]
 800c4c0:	e7ed      	b.n	800c49e <_free_r+0x22>
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	b10b      	cbz	r3, 800c4cc <_free_r+0x50>
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d9fa      	bls.n	800c4c2 <_free_r+0x46>
 800c4cc:	6811      	ldr	r1, [r2, #0]
 800c4ce:	1855      	adds	r5, r2, r1
 800c4d0:	42a5      	cmp	r5, r4
 800c4d2:	d10b      	bne.n	800c4ec <_free_r+0x70>
 800c4d4:	6824      	ldr	r4, [r4, #0]
 800c4d6:	4421      	add	r1, r4
 800c4d8:	1854      	adds	r4, r2, r1
 800c4da:	42a3      	cmp	r3, r4
 800c4dc:	6011      	str	r1, [r2, #0]
 800c4de:	d1e0      	bne.n	800c4a2 <_free_r+0x26>
 800c4e0:	681c      	ldr	r4, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	6053      	str	r3, [r2, #4]
 800c4e6:	440c      	add	r4, r1
 800c4e8:	6014      	str	r4, [r2, #0]
 800c4ea:	e7da      	b.n	800c4a2 <_free_r+0x26>
 800c4ec:	d902      	bls.n	800c4f4 <_free_r+0x78>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	6003      	str	r3, [r0, #0]
 800c4f2:	e7d6      	b.n	800c4a2 <_free_r+0x26>
 800c4f4:	6825      	ldr	r5, [r4, #0]
 800c4f6:	1961      	adds	r1, r4, r5
 800c4f8:	428b      	cmp	r3, r1
 800c4fa:	bf04      	itt	eq
 800c4fc:	6819      	ldreq	r1, [r3, #0]
 800c4fe:	685b      	ldreq	r3, [r3, #4]
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	bf04      	itt	eq
 800c504:	1949      	addeq	r1, r1, r5
 800c506:	6021      	streq	r1, [r4, #0]
 800c508:	6054      	str	r4, [r2, #4]
 800c50a:	e7ca      	b.n	800c4a2 <_free_r+0x26>
 800c50c:	b003      	add	sp, #12
 800c50e:	bd30      	pop	{r4, r5, pc}
 800c510:	20000f0c 	.word	0x20000f0c

0800c514 <malloc>:
 800c514:	4b02      	ldr	r3, [pc, #8]	; (800c520 <malloc+0xc>)
 800c516:	4601      	mov	r1, r0
 800c518:	6818      	ldr	r0, [r3, #0]
 800c51a:	f000 b823 	b.w	800c564 <_malloc_r>
 800c51e:	bf00      	nop
 800c520:	20000064 	.word	0x20000064

0800c524 <sbrk_aligned>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4e0e      	ldr	r6, [pc, #56]	; (800c560 <sbrk_aligned+0x3c>)
 800c528:	460c      	mov	r4, r1
 800c52a:	6831      	ldr	r1, [r6, #0]
 800c52c:	4605      	mov	r5, r0
 800c52e:	b911      	cbnz	r1, 800c536 <sbrk_aligned+0x12>
 800c530:	f000 feb0 	bl	800d294 <_sbrk_r>
 800c534:	6030      	str	r0, [r6, #0]
 800c536:	4621      	mov	r1, r4
 800c538:	4628      	mov	r0, r5
 800c53a:	f000 feab 	bl	800d294 <_sbrk_r>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d00a      	beq.n	800c558 <sbrk_aligned+0x34>
 800c542:	1cc4      	adds	r4, r0, #3
 800c544:	f024 0403 	bic.w	r4, r4, #3
 800c548:	42a0      	cmp	r0, r4
 800c54a:	d007      	beq.n	800c55c <sbrk_aligned+0x38>
 800c54c:	1a21      	subs	r1, r4, r0
 800c54e:	4628      	mov	r0, r5
 800c550:	f000 fea0 	bl	800d294 <_sbrk_r>
 800c554:	3001      	adds	r0, #1
 800c556:	d101      	bne.n	800c55c <sbrk_aligned+0x38>
 800c558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c55c:	4620      	mov	r0, r4
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	20000f10 	.word	0x20000f10

0800c564 <_malloc_r>:
 800c564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c568:	1ccd      	adds	r5, r1, #3
 800c56a:	f025 0503 	bic.w	r5, r5, #3
 800c56e:	3508      	adds	r5, #8
 800c570:	2d0c      	cmp	r5, #12
 800c572:	bf38      	it	cc
 800c574:	250c      	movcc	r5, #12
 800c576:	2d00      	cmp	r5, #0
 800c578:	4607      	mov	r7, r0
 800c57a:	db01      	blt.n	800c580 <_malloc_r+0x1c>
 800c57c:	42a9      	cmp	r1, r5
 800c57e:	d905      	bls.n	800c58c <_malloc_r+0x28>
 800c580:	230c      	movs	r3, #12
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	2600      	movs	r6, #0
 800c586:	4630      	mov	r0, r6
 800c588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c58c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c660 <_malloc_r+0xfc>
 800c590:	f000 f868 	bl	800c664 <__malloc_lock>
 800c594:	f8d8 3000 	ldr.w	r3, [r8]
 800c598:	461c      	mov	r4, r3
 800c59a:	bb5c      	cbnz	r4, 800c5f4 <_malloc_r+0x90>
 800c59c:	4629      	mov	r1, r5
 800c59e:	4638      	mov	r0, r7
 800c5a0:	f7ff ffc0 	bl	800c524 <sbrk_aligned>
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	d155      	bne.n	800c656 <_malloc_r+0xf2>
 800c5aa:	f8d8 4000 	ldr.w	r4, [r8]
 800c5ae:	4626      	mov	r6, r4
 800c5b0:	2e00      	cmp	r6, #0
 800c5b2:	d145      	bne.n	800c640 <_malloc_r+0xdc>
 800c5b4:	2c00      	cmp	r4, #0
 800c5b6:	d048      	beq.n	800c64a <_malloc_r+0xe6>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4638      	mov	r0, r7
 800c5be:	eb04 0903 	add.w	r9, r4, r3
 800c5c2:	f000 fe67 	bl	800d294 <_sbrk_r>
 800c5c6:	4581      	cmp	r9, r0
 800c5c8:	d13f      	bne.n	800c64a <_malloc_r+0xe6>
 800c5ca:	6821      	ldr	r1, [r4, #0]
 800c5cc:	1a6d      	subs	r5, r5, r1
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff ffa7 	bl	800c524 <sbrk_aligned>
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	d037      	beq.n	800c64a <_malloc_r+0xe6>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	442b      	add	r3, r5
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d038      	beq.n	800c65a <_malloc_r+0xf6>
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	42a2      	cmp	r2, r4
 800c5ec:	d12b      	bne.n	800c646 <_malloc_r+0xe2>
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	605a      	str	r2, [r3, #4]
 800c5f2:	e00f      	b.n	800c614 <_malloc_r+0xb0>
 800c5f4:	6822      	ldr	r2, [r4, #0]
 800c5f6:	1b52      	subs	r2, r2, r5
 800c5f8:	d41f      	bmi.n	800c63a <_malloc_r+0xd6>
 800c5fa:	2a0b      	cmp	r2, #11
 800c5fc:	d917      	bls.n	800c62e <_malloc_r+0xca>
 800c5fe:	1961      	adds	r1, r4, r5
 800c600:	42a3      	cmp	r3, r4
 800c602:	6025      	str	r5, [r4, #0]
 800c604:	bf18      	it	ne
 800c606:	6059      	strne	r1, [r3, #4]
 800c608:	6863      	ldr	r3, [r4, #4]
 800c60a:	bf08      	it	eq
 800c60c:	f8c8 1000 	streq.w	r1, [r8]
 800c610:	5162      	str	r2, [r4, r5]
 800c612:	604b      	str	r3, [r1, #4]
 800c614:	4638      	mov	r0, r7
 800c616:	f104 060b 	add.w	r6, r4, #11
 800c61a:	f000 f829 	bl	800c670 <__malloc_unlock>
 800c61e:	f026 0607 	bic.w	r6, r6, #7
 800c622:	1d23      	adds	r3, r4, #4
 800c624:	1af2      	subs	r2, r6, r3
 800c626:	d0ae      	beq.n	800c586 <_malloc_r+0x22>
 800c628:	1b9b      	subs	r3, r3, r6
 800c62a:	50a3      	str	r3, [r4, r2]
 800c62c:	e7ab      	b.n	800c586 <_malloc_r+0x22>
 800c62e:	42a3      	cmp	r3, r4
 800c630:	6862      	ldr	r2, [r4, #4]
 800c632:	d1dd      	bne.n	800c5f0 <_malloc_r+0x8c>
 800c634:	f8c8 2000 	str.w	r2, [r8]
 800c638:	e7ec      	b.n	800c614 <_malloc_r+0xb0>
 800c63a:	4623      	mov	r3, r4
 800c63c:	6864      	ldr	r4, [r4, #4]
 800c63e:	e7ac      	b.n	800c59a <_malloc_r+0x36>
 800c640:	4634      	mov	r4, r6
 800c642:	6876      	ldr	r6, [r6, #4]
 800c644:	e7b4      	b.n	800c5b0 <_malloc_r+0x4c>
 800c646:	4613      	mov	r3, r2
 800c648:	e7cc      	b.n	800c5e4 <_malloc_r+0x80>
 800c64a:	230c      	movs	r3, #12
 800c64c:	603b      	str	r3, [r7, #0]
 800c64e:	4638      	mov	r0, r7
 800c650:	f000 f80e 	bl	800c670 <__malloc_unlock>
 800c654:	e797      	b.n	800c586 <_malloc_r+0x22>
 800c656:	6025      	str	r5, [r4, #0]
 800c658:	e7dc      	b.n	800c614 <_malloc_r+0xb0>
 800c65a:	605b      	str	r3, [r3, #4]
 800c65c:	deff      	udf	#255	; 0xff
 800c65e:	bf00      	nop
 800c660:	20000f0c 	.word	0x20000f0c

0800c664 <__malloc_lock>:
 800c664:	4801      	ldr	r0, [pc, #4]	; (800c66c <__malloc_lock+0x8>)
 800c666:	f7ff b87f 	b.w	800b768 <__retarget_lock_acquire_recursive>
 800c66a:	bf00      	nop
 800c66c:	20000f08 	.word	0x20000f08

0800c670 <__malloc_unlock>:
 800c670:	4801      	ldr	r0, [pc, #4]	; (800c678 <__malloc_unlock+0x8>)
 800c672:	f7ff b87a 	b.w	800b76a <__retarget_lock_release_recursive>
 800c676:	bf00      	nop
 800c678:	20000f08 	.word	0x20000f08

0800c67c <_Balloc>:
 800c67c:	b570      	push	{r4, r5, r6, lr}
 800c67e:	69c6      	ldr	r6, [r0, #28]
 800c680:	4604      	mov	r4, r0
 800c682:	460d      	mov	r5, r1
 800c684:	b976      	cbnz	r6, 800c6a4 <_Balloc+0x28>
 800c686:	2010      	movs	r0, #16
 800c688:	f7ff ff44 	bl	800c514 <malloc>
 800c68c:	4602      	mov	r2, r0
 800c68e:	61e0      	str	r0, [r4, #28]
 800c690:	b920      	cbnz	r0, 800c69c <_Balloc+0x20>
 800c692:	4b18      	ldr	r3, [pc, #96]	; (800c6f4 <_Balloc+0x78>)
 800c694:	4818      	ldr	r0, [pc, #96]	; (800c6f8 <_Balloc+0x7c>)
 800c696:	216b      	movs	r1, #107	; 0x6b
 800c698:	f000 fe0c 	bl	800d2b4 <__assert_func>
 800c69c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6a0:	6006      	str	r6, [r0, #0]
 800c6a2:	60c6      	str	r6, [r0, #12]
 800c6a4:	69e6      	ldr	r6, [r4, #28]
 800c6a6:	68f3      	ldr	r3, [r6, #12]
 800c6a8:	b183      	cbz	r3, 800c6cc <_Balloc+0x50>
 800c6aa:	69e3      	ldr	r3, [r4, #28]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6b2:	b9b8      	cbnz	r0, 800c6e4 <_Balloc+0x68>
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	fa01 f605 	lsl.w	r6, r1, r5
 800c6ba:	1d72      	adds	r2, r6, #5
 800c6bc:	0092      	lsls	r2, r2, #2
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 fe16 	bl	800d2f0 <_calloc_r>
 800c6c4:	b160      	cbz	r0, 800c6e0 <_Balloc+0x64>
 800c6c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6ca:	e00e      	b.n	800c6ea <_Balloc+0x6e>
 800c6cc:	2221      	movs	r2, #33	; 0x21
 800c6ce:	2104      	movs	r1, #4
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fe0d 	bl	800d2f0 <_calloc_r>
 800c6d6:	69e3      	ldr	r3, [r4, #28]
 800c6d8:	60f0      	str	r0, [r6, #12]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1e4      	bne.n	800c6aa <_Balloc+0x2e>
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	bd70      	pop	{r4, r5, r6, pc}
 800c6e4:	6802      	ldr	r2, [r0, #0]
 800c6e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6f0:	e7f7      	b.n	800c6e2 <_Balloc+0x66>
 800c6f2:	bf00      	nop
 800c6f4:	0800ed01 	.word	0x0800ed01
 800c6f8:	0800ed81 	.word	0x0800ed81

0800c6fc <_Bfree>:
 800c6fc:	b570      	push	{r4, r5, r6, lr}
 800c6fe:	69c6      	ldr	r6, [r0, #28]
 800c700:	4605      	mov	r5, r0
 800c702:	460c      	mov	r4, r1
 800c704:	b976      	cbnz	r6, 800c724 <_Bfree+0x28>
 800c706:	2010      	movs	r0, #16
 800c708:	f7ff ff04 	bl	800c514 <malloc>
 800c70c:	4602      	mov	r2, r0
 800c70e:	61e8      	str	r0, [r5, #28]
 800c710:	b920      	cbnz	r0, 800c71c <_Bfree+0x20>
 800c712:	4b09      	ldr	r3, [pc, #36]	; (800c738 <_Bfree+0x3c>)
 800c714:	4809      	ldr	r0, [pc, #36]	; (800c73c <_Bfree+0x40>)
 800c716:	218f      	movs	r1, #143	; 0x8f
 800c718:	f000 fdcc 	bl	800d2b4 <__assert_func>
 800c71c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c720:	6006      	str	r6, [r0, #0]
 800c722:	60c6      	str	r6, [r0, #12]
 800c724:	b13c      	cbz	r4, 800c736 <_Bfree+0x3a>
 800c726:	69eb      	ldr	r3, [r5, #28]
 800c728:	6862      	ldr	r2, [r4, #4]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c730:	6021      	str	r1, [r4, #0]
 800c732:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c736:	bd70      	pop	{r4, r5, r6, pc}
 800c738:	0800ed01 	.word	0x0800ed01
 800c73c:	0800ed81 	.word	0x0800ed81

0800c740 <__multadd>:
 800c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c744:	690d      	ldr	r5, [r1, #16]
 800c746:	4607      	mov	r7, r0
 800c748:	460c      	mov	r4, r1
 800c74a:	461e      	mov	r6, r3
 800c74c:	f101 0c14 	add.w	ip, r1, #20
 800c750:	2000      	movs	r0, #0
 800c752:	f8dc 3000 	ldr.w	r3, [ip]
 800c756:	b299      	uxth	r1, r3
 800c758:	fb02 6101 	mla	r1, r2, r1, r6
 800c75c:	0c1e      	lsrs	r6, r3, #16
 800c75e:	0c0b      	lsrs	r3, r1, #16
 800c760:	fb02 3306 	mla	r3, r2, r6, r3
 800c764:	b289      	uxth	r1, r1
 800c766:	3001      	adds	r0, #1
 800c768:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c76c:	4285      	cmp	r5, r0
 800c76e:	f84c 1b04 	str.w	r1, [ip], #4
 800c772:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c776:	dcec      	bgt.n	800c752 <__multadd+0x12>
 800c778:	b30e      	cbz	r6, 800c7be <__multadd+0x7e>
 800c77a:	68a3      	ldr	r3, [r4, #8]
 800c77c:	42ab      	cmp	r3, r5
 800c77e:	dc19      	bgt.n	800c7b4 <__multadd+0x74>
 800c780:	6861      	ldr	r1, [r4, #4]
 800c782:	4638      	mov	r0, r7
 800c784:	3101      	adds	r1, #1
 800c786:	f7ff ff79 	bl	800c67c <_Balloc>
 800c78a:	4680      	mov	r8, r0
 800c78c:	b928      	cbnz	r0, 800c79a <__multadd+0x5a>
 800c78e:	4602      	mov	r2, r0
 800c790:	4b0c      	ldr	r3, [pc, #48]	; (800c7c4 <__multadd+0x84>)
 800c792:	480d      	ldr	r0, [pc, #52]	; (800c7c8 <__multadd+0x88>)
 800c794:	21ba      	movs	r1, #186	; 0xba
 800c796:	f000 fd8d 	bl	800d2b4 <__assert_func>
 800c79a:	6922      	ldr	r2, [r4, #16]
 800c79c:	3202      	adds	r2, #2
 800c79e:	f104 010c 	add.w	r1, r4, #12
 800c7a2:	0092      	lsls	r2, r2, #2
 800c7a4:	300c      	adds	r0, #12
 800c7a6:	f7fe ffe1 	bl	800b76c <memcpy>
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4638      	mov	r0, r7
 800c7ae:	f7ff ffa5 	bl	800c6fc <_Bfree>
 800c7b2:	4644      	mov	r4, r8
 800c7b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7b8:	3501      	adds	r5, #1
 800c7ba:	615e      	str	r6, [r3, #20]
 800c7bc:	6125      	str	r5, [r4, #16]
 800c7be:	4620      	mov	r0, r4
 800c7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c4:	0800ed70 	.word	0x0800ed70
 800c7c8:	0800ed81 	.word	0x0800ed81

0800c7cc <__hi0bits>:
 800c7cc:	0c03      	lsrs	r3, r0, #16
 800c7ce:	041b      	lsls	r3, r3, #16
 800c7d0:	b9d3      	cbnz	r3, 800c808 <__hi0bits+0x3c>
 800c7d2:	0400      	lsls	r0, r0, #16
 800c7d4:	2310      	movs	r3, #16
 800c7d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c7da:	bf04      	itt	eq
 800c7dc:	0200      	lsleq	r0, r0, #8
 800c7de:	3308      	addeq	r3, #8
 800c7e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c7e4:	bf04      	itt	eq
 800c7e6:	0100      	lsleq	r0, r0, #4
 800c7e8:	3304      	addeq	r3, #4
 800c7ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7ee:	bf04      	itt	eq
 800c7f0:	0080      	lsleq	r0, r0, #2
 800c7f2:	3302      	addeq	r3, #2
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	db05      	blt.n	800c804 <__hi0bits+0x38>
 800c7f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7fc:	f103 0301 	add.w	r3, r3, #1
 800c800:	bf08      	it	eq
 800c802:	2320      	moveq	r3, #32
 800c804:	4618      	mov	r0, r3
 800c806:	4770      	bx	lr
 800c808:	2300      	movs	r3, #0
 800c80a:	e7e4      	b.n	800c7d6 <__hi0bits+0xa>

0800c80c <__lo0bits>:
 800c80c:	6803      	ldr	r3, [r0, #0]
 800c80e:	f013 0207 	ands.w	r2, r3, #7
 800c812:	d00c      	beq.n	800c82e <__lo0bits+0x22>
 800c814:	07d9      	lsls	r1, r3, #31
 800c816:	d422      	bmi.n	800c85e <__lo0bits+0x52>
 800c818:	079a      	lsls	r2, r3, #30
 800c81a:	bf49      	itett	mi
 800c81c:	085b      	lsrmi	r3, r3, #1
 800c81e:	089b      	lsrpl	r3, r3, #2
 800c820:	6003      	strmi	r3, [r0, #0]
 800c822:	2201      	movmi	r2, #1
 800c824:	bf5c      	itt	pl
 800c826:	6003      	strpl	r3, [r0, #0]
 800c828:	2202      	movpl	r2, #2
 800c82a:	4610      	mov	r0, r2
 800c82c:	4770      	bx	lr
 800c82e:	b299      	uxth	r1, r3
 800c830:	b909      	cbnz	r1, 800c836 <__lo0bits+0x2a>
 800c832:	0c1b      	lsrs	r3, r3, #16
 800c834:	2210      	movs	r2, #16
 800c836:	b2d9      	uxtb	r1, r3
 800c838:	b909      	cbnz	r1, 800c83e <__lo0bits+0x32>
 800c83a:	3208      	adds	r2, #8
 800c83c:	0a1b      	lsrs	r3, r3, #8
 800c83e:	0719      	lsls	r1, r3, #28
 800c840:	bf04      	itt	eq
 800c842:	091b      	lsreq	r3, r3, #4
 800c844:	3204      	addeq	r2, #4
 800c846:	0799      	lsls	r1, r3, #30
 800c848:	bf04      	itt	eq
 800c84a:	089b      	lsreq	r3, r3, #2
 800c84c:	3202      	addeq	r2, #2
 800c84e:	07d9      	lsls	r1, r3, #31
 800c850:	d403      	bmi.n	800c85a <__lo0bits+0x4e>
 800c852:	085b      	lsrs	r3, r3, #1
 800c854:	f102 0201 	add.w	r2, r2, #1
 800c858:	d003      	beq.n	800c862 <__lo0bits+0x56>
 800c85a:	6003      	str	r3, [r0, #0]
 800c85c:	e7e5      	b.n	800c82a <__lo0bits+0x1e>
 800c85e:	2200      	movs	r2, #0
 800c860:	e7e3      	b.n	800c82a <__lo0bits+0x1e>
 800c862:	2220      	movs	r2, #32
 800c864:	e7e1      	b.n	800c82a <__lo0bits+0x1e>
	...

0800c868 <__i2b>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	460c      	mov	r4, r1
 800c86c:	2101      	movs	r1, #1
 800c86e:	f7ff ff05 	bl	800c67c <_Balloc>
 800c872:	4602      	mov	r2, r0
 800c874:	b928      	cbnz	r0, 800c882 <__i2b+0x1a>
 800c876:	4b05      	ldr	r3, [pc, #20]	; (800c88c <__i2b+0x24>)
 800c878:	4805      	ldr	r0, [pc, #20]	; (800c890 <__i2b+0x28>)
 800c87a:	f240 1145 	movw	r1, #325	; 0x145
 800c87e:	f000 fd19 	bl	800d2b4 <__assert_func>
 800c882:	2301      	movs	r3, #1
 800c884:	6144      	str	r4, [r0, #20]
 800c886:	6103      	str	r3, [r0, #16]
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	bf00      	nop
 800c88c:	0800ed70 	.word	0x0800ed70
 800c890:	0800ed81 	.word	0x0800ed81

0800c894 <__multiply>:
 800c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	4691      	mov	r9, r2
 800c89a:	690a      	ldr	r2, [r1, #16]
 800c89c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	bfb8      	it	lt
 800c8a4:	460b      	movlt	r3, r1
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	bfbc      	itt	lt
 800c8aa:	464c      	movlt	r4, r9
 800c8ac:	4699      	movlt	r9, r3
 800c8ae:	6927      	ldr	r7, [r4, #16]
 800c8b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c8b4:	68a3      	ldr	r3, [r4, #8]
 800c8b6:	6861      	ldr	r1, [r4, #4]
 800c8b8:	eb07 060a 	add.w	r6, r7, sl
 800c8bc:	42b3      	cmp	r3, r6
 800c8be:	b085      	sub	sp, #20
 800c8c0:	bfb8      	it	lt
 800c8c2:	3101      	addlt	r1, #1
 800c8c4:	f7ff feda 	bl	800c67c <_Balloc>
 800c8c8:	b930      	cbnz	r0, 800c8d8 <__multiply+0x44>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	4b44      	ldr	r3, [pc, #272]	; (800c9e0 <__multiply+0x14c>)
 800c8ce:	4845      	ldr	r0, [pc, #276]	; (800c9e4 <__multiply+0x150>)
 800c8d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c8d4:	f000 fcee 	bl	800d2b4 <__assert_func>
 800c8d8:	f100 0514 	add.w	r5, r0, #20
 800c8dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	4543      	cmp	r3, r8
 800c8e6:	d321      	bcc.n	800c92c <__multiply+0x98>
 800c8e8:	f104 0314 	add.w	r3, r4, #20
 800c8ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c8f0:	f109 0314 	add.w	r3, r9, #20
 800c8f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c8f8:	9202      	str	r2, [sp, #8]
 800c8fa:	1b3a      	subs	r2, r7, r4
 800c8fc:	3a15      	subs	r2, #21
 800c8fe:	f022 0203 	bic.w	r2, r2, #3
 800c902:	3204      	adds	r2, #4
 800c904:	f104 0115 	add.w	r1, r4, #21
 800c908:	428f      	cmp	r7, r1
 800c90a:	bf38      	it	cc
 800c90c:	2204      	movcc	r2, #4
 800c90e:	9201      	str	r2, [sp, #4]
 800c910:	9a02      	ldr	r2, [sp, #8]
 800c912:	9303      	str	r3, [sp, #12]
 800c914:	429a      	cmp	r2, r3
 800c916:	d80c      	bhi.n	800c932 <__multiply+0x9e>
 800c918:	2e00      	cmp	r6, #0
 800c91a:	dd03      	ble.n	800c924 <__multiply+0x90>
 800c91c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c920:	2b00      	cmp	r3, #0
 800c922:	d05b      	beq.n	800c9dc <__multiply+0x148>
 800c924:	6106      	str	r6, [r0, #16]
 800c926:	b005      	add	sp, #20
 800c928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92c:	f843 2b04 	str.w	r2, [r3], #4
 800c930:	e7d8      	b.n	800c8e4 <__multiply+0x50>
 800c932:	f8b3 a000 	ldrh.w	sl, [r3]
 800c936:	f1ba 0f00 	cmp.w	sl, #0
 800c93a:	d024      	beq.n	800c986 <__multiply+0xf2>
 800c93c:	f104 0e14 	add.w	lr, r4, #20
 800c940:	46a9      	mov	r9, r5
 800c942:	f04f 0c00 	mov.w	ip, #0
 800c946:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c94a:	f8d9 1000 	ldr.w	r1, [r9]
 800c94e:	fa1f fb82 	uxth.w	fp, r2
 800c952:	b289      	uxth	r1, r1
 800c954:	fb0a 110b 	mla	r1, sl, fp, r1
 800c958:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c95c:	f8d9 2000 	ldr.w	r2, [r9]
 800c960:	4461      	add	r1, ip
 800c962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c966:	fb0a c20b 	mla	r2, sl, fp, ip
 800c96a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c96e:	b289      	uxth	r1, r1
 800c970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c974:	4577      	cmp	r7, lr
 800c976:	f849 1b04 	str.w	r1, [r9], #4
 800c97a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c97e:	d8e2      	bhi.n	800c946 <__multiply+0xb2>
 800c980:	9a01      	ldr	r2, [sp, #4]
 800c982:	f845 c002 	str.w	ip, [r5, r2]
 800c986:	9a03      	ldr	r2, [sp, #12]
 800c988:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c98c:	3304      	adds	r3, #4
 800c98e:	f1b9 0f00 	cmp.w	r9, #0
 800c992:	d021      	beq.n	800c9d8 <__multiply+0x144>
 800c994:	6829      	ldr	r1, [r5, #0]
 800c996:	f104 0c14 	add.w	ip, r4, #20
 800c99a:	46ae      	mov	lr, r5
 800c99c:	f04f 0a00 	mov.w	sl, #0
 800c9a0:	f8bc b000 	ldrh.w	fp, [ip]
 800c9a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c9a8:	fb09 220b 	mla	r2, r9, fp, r2
 800c9ac:	4452      	add	r2, sl
 800c9ae:	b289      	uxth	r1, r1
 800c9b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c9b4:	f84e 1b04 	str.w	r1, [lr], #4
 800c9b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c9bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c9c0:	f8be 1000 	ldrh.w	r1, [lr]
 800c9c4:	fb09 110a 	mla	r1, r9, sl, r1
 800c9c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c9cc:	4567      	cmp	r7, ip
 800c9ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c9d2:	d8e5      	bhi.n	800c9a0 <__multiply+0x10c>
 800c9d4:	9a01      	ldr	r2, [sp, #4]
 800c9d6:	50a9      	str	r1, [r5, r2]
 800c9d8:	3504      	adds	r5, #4
 800c9da:	e799      	b.n	800c910 <__multiply+0x7c>
 800c9dc:	3e01      	subs	r6, #1
 800c9de:	e79b      	b.n	800c918 <__multiply+0x84>
 800c9e0:	0800ed70 	.word	0x0800ed70
 800c9e4:	0800ed81 	.word	0x0800ed81

0800c9e8 <__pow5mult>:
 800c9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ec:	4615      	mov	r5, r2
 800c9ee:	f012 0203 	ands.w	r2, r2, #3
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	d007      	beq.n	800ca08 <__pow5mult+0x20>
 800c9f8:	4c25      	ldr	r4, [pc, #148]	; (800ca90 <__pow5mult+0xa8>)
 800c9fa:	3a01      	subs	r2, #1
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca02:	f7ff fe9d 	bl	800c740 <__multadd>
 800ca06:	4607      	mov	r7, r0
 800ca08:	10ad      	asrs	r5, r5, #2
 800ca0a:	d03d      	beq.n	800ca88 <__pow5mult+0xa0>
 800ca0c:	69f4      	ldr	r4, [r6, #28]
 800ca0e:	b97c      	cbnz	r4, 800ca30 <__pow5mult+0x48>
 800ca10:	2010      	movs	r0, #16
 800ca12:	f7ff fd7f 	bl	800c514 <malloc>
 800ca16:	4602      	mov	r2, r0
 800ca18:	61f0      	str	r0, [r6, #28]
 800ca1a:	b928      	cbnz	r0, 800ca28 <__pow5mult+0x40>
 800ca1c:	4b1d      	ldr	r3, [pc, #116]	; (800ca94 <__pow5mult+0xac>)
 800ca1e:	481e      	ldr	r0, [pc, #120]	; (800ca98 <__pow5mult+0xb0>)
 800ca20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ca24:	f000 fc46 	bl	800d2b4 <__assert_func>
 800ca28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca2c:	6004      	str	r4, [r0, #0]
 800ca2e:	60c4      	str	r4, [r0, #12]
 800ca30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ca34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca38:	b94c      	cbnz	r4, 800ca4e <__pow5mult+0x66>
 800ca3a:	f240 2171 	movw	r1, #625	; 0x271
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7ff ff12 	bl	800c868 <__i2b>
 800ca44:	2300      	movs	r3, #0
 800ca46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	6003      	str	r3, [r0, #0]
 800ca4e:	f04f 0900 	mov.w	r9, #0
 800ca52:	07eb      	lsls	r3, r5, #31
 800ca54:	d50a      	bpl.n	800ca6c <__pow5mult+0x84>
 800ca56:	4639      	mov	r1, r7
 800ca58:	4622      	mov	r2, r4
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff ff1a 	bl	800c894 <__multiply>
 800ca60:	4639      	mov	r1, r7
 800ca62:	4680      	mov	r8, r0
 800ca64:	4630      	mov	r0, r6
 800ca66:	f7ff fe49 	bl	800c6fc <_Bfree>
 800ca6a:	4647      	mov	r7, r8
 800ca6c:	106d      	asrs	r5, r5, #1
 800ca6e:	d00b      	beq.n	800ca88 <__pow5mult+0xa0>
 800ca70:	6820      	ldr	r0, [r4, #0]
 800ca72:	b938      	cbnz	r0, 800ca84 <__pow5mult+0x9c>
 800ca74:	4622      	mov	r2, r4
 800ca76:	4621      	mov	r1, r4
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7ff ff0b 	bl	800c894 <__multiply>
 800ca7e:	6020      	str	r0, [r4, #0]
 800ca80:	f8c0 9000 	str.w	r9, [r0]
 800ca84:	4604      	mov	r4, r0
 800ca86:	e7e4      	b.n	800ca52 <__pow5mult+0x6a>
 800ca88:	4638      	mov	r0, r7
 800ca8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8e:	bf00      	nop
 800ca90:	0800eed0 	.word	0x0800eed0
 800ca94:	0800ed01 	.word	0x0800ed01
 800ca98:	0800ed81 	.word	0x0800ed81

0800ca9c <__lshift>:
 800ca9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa0:	460c      	mov	r4, r1
 800caa2:	6849      	ldr	r1, [r1, #4]
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800caaa:	68a3      	ldr	r3, [r4, #8]
 800caac:	4607      	mov	r7, r0
 800caae:	4691      	mov	r9, r2
 800cab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cab4:	f108 0601 	add.w	r6, r8, #1
 800cab8:	42b3      	cmp	r3, r6
 800caba:	db0b      	blt.n	800cad4 <__lshift+0x38>
 800cabc:	4638      	mov	r0, r7
 800cabe:	f7ff fddd 	bl	800c67c <_Balloc>
 800cac2:	4605      	mov	r5, r0
 800cac4:	b948      	cbnz	r0, 800cada <__lshift+0x3e>
 800cac6:	4602      	mov	r2, r0
 800cac8:	4b28      	ldr	r3, [pc, #160]	; (800cb6c <__lshift+0xd0>)
 800caca:	4829      	ldr	r0, [pc, #164]	; (800cb70 <__lshift+0xd4>)
 800cacc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cad0:	f000 fbf0 	bl	800d2b4 <__assert_func>
 800cad4:	3101      	adds	r1, #1
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	e7ee      	b.n	800cab8 <__lshift+0x1c>
 800cada:	2300      	movs	r3, #0
 800cadc:	f100 0114 	add.w	r1, r0, #20
 800cae0:	f100 0210 	add.w	r2, r0, #16
 800cae4:	4618      	mov	r0, r3
 800cae6:	4553      	cmp	r3, sl
 800cae8:	db33      	blt.n	800cb52 <__lshift+0xb6>
 800caea:	6920      	ldr	r0, [r4, #16]
 800caec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caf0:	f104 0314 	add.w	r3, r4, #20
 800caf4:	f019 091f 	ands.w	r9, r9, #31
 800caf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cafc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb00:	d02b      	beq.n	800cb5a <__lshift+0xbe>
 800cb02:	f1c9 0e20 	rsb	lr, r9, #32
 800cb06:	468a      	mov	sl, r1
 800cb08:	2200      	movs	r2, #0
 800cb0a:	6818      	ldr	r0, [r3, #0]
 800cb0c:	fa00 f009 	lsl.w	r0, r0, r9
 800cb10:	4310      	orrs	r0, r2
 800cb12:	f84a 0b04 	str.w	r0, [sl], #4
 800cb16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1a:	459c      	cmp	ip, r3
 800cb1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb20:	d8f3      	bhi.n	800cb0a <__lshift+0x6e>
 800cb22:	ebac 0304 	sub.w	r3, ip, r4
 800cb26:	3b15      	subs	r3, #21
 800cb28:	f023 0303 	bic.w	r3, r3, #3
 800cb2c:	3304      	adds	r3, #4
 800cb2e:	f104 0015 	add.w	r0, r4, #21
 800cb32:	4584      	cmp	ip, r0
 800cb34:	bf38      	it	cc
 800cb36:	2304      	movcc	r3, #4
 800cb38:	50ca      	str	r2, [r1, r3]
 800cb3a:	b10a      	cbz	r2, 800cb40 <__lshift+0xa4>
 800cb3c:	f108 0602 	add.w	r6, r8, #2
 800cb40:	3e01      	subs	r6, #1
 800cb42:	4638      	mov	r0, r7
 800cb44:	612e      	str	r6, [r5, #16]
 800cb46:	4621      	mov	r1, r4
 800cb48:	f7ff fdd8 	bl	800c6fc <_Bfree>
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb56:	3301      	adds	r3, #1
 800cb58:	e7c5      	b.n	800cae6 <__lshift+0x4a>
 800cb5a:	3904      	subs	r1, #4
 800cb5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb60:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb64:	459c      	cmp	ip, r3
 800cb66:	d8f9      	bhi.n	800cb5c <__lshift+0xc0>
 800cb68:	e7ea      	b.n	800cb40 <__lshift+0xa4>
 800cb6a:	bf00      	nop
 800cb6c:	0800ed70 	.word	0x0800ed70
 800cb70:	0800ed81 	.word	0x0800ed81

0800cb74 <__mcmp>:
 800cb74:	b530      	push	{r4, r5, lr}
 800cb76:	6902      	ldr	r2, [r0, #16]
 800cb78:	690c      	ldr	r4, [r1, #16]
 800cb7a:	1b12      	subs	r2, r2, r4
 800cb7c:	d10e      	bne.n	800cb9c <__mcmp+0x28>
 800cb7e:	f100 0314 	add.w	r3, r0, #20
 800cb82:	3114      	adds	r1, #20
 800cb84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb94:	42a5      	cmp	r5, r4
 800cb96:	d003      	beq.n	800cba0 <__mcmp+0x2c>
 800cb98:	d305      	bcc.n	800cba6 <__mcmp+0x32>
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	bd30      	pop	{r4, r5, pc}
 800cba0:	4283      	cmp	r3, r0
 800cba2:	d3f3      	bcc.n	800cb8c <__mcmp+0x18>
 800cba4:	e7fa      	b.n	800cb9c <__mcmp+0x28>
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbaa:	e7f7      	b.n	800cb9c <__mcmp+0x28>

0800cbac <__mdiff>:
 800cbac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	4690      	mov	r8, r2
 800cbba:	f7ff ffdb 	bl	800cb74 <__mcmp>
 800cbbe:	1e05      	subs	r5, r0, #0
 800cbc0:	d110      	bne.n	800cbe4 <__mdiff+0x38>
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7ff fd59 	bl	800c67c <_Balloc>
 800cbca:	b930      	cbnz	r0, 800cbda <__mdiff+0x2e>
 800cbcc:	4b3a      	ldr	r3, [pc, #232]	; (800ccb8 <__mdiff+0x10c>)
 800cbce:	4602      	mov	r2, r0
 800cbd0:	f240 2137 	movw	r1, #567	; 0x237
 800cbd4:	4839      	ldr	r0, [pc, #228]	; (800ccbc <__mdiff+0x110>)
 800cbd6:	f000 fb6d 	bl	800d2b4 <__assert_func>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	bfa4      	itt	ge
 800cbe6:	4643      	movge	r3, r8
 800cbe8:	46a0      	movge	r8, r4
 800cbea:	4630      	mov	r0, r6
 800cbec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cbf0:	bfa6      	itte	ge
 800cbf2:	461c      	movge	r4, r3
 800cbf4:	2500      	movge	r5, #0
 800cbf6:	2501      	movlt	r5, #1
 800cbf8:	f7ff fd40 	bl	800c67c <_Balloc>
 800cbfc:	b920      	cbnz	r0, 800cc08 <__mdiff+0x5c>
 800cbfe:	4b2e      	ldr	r3, [pc, #184]	; (800ccb8 <__mdiff+0x10c>)
 800cc00:	4602      	mov	r2, r0
 800cc02:	f240 2145 	movw	r1, #581	; 0x245
 800cc06:	e7e5      	b.n	800cbd4 <__mdiff+0x28>
 800cc08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc0c:	6926      	ldr	r6, [r4, #16]
 800cc0e:	60c5      	str	r5, [r0, #12]
 800cc10:	f104 0914 	add.w	r9, r4, #20
 800cc14:	f108 0514 	add.w	r5, r8, #20
 800cc18:	f100 0e14 	add.w	lr, r0, #20
 800cc1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc24:	f108 0210 	add.w	r2, r8, #16
 800cc28:	46f2      	mov	sl, lr
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc34:	fa11 f88b 	uxtah	r8, r1, fp
 800cc38:	b299      	uxth	r1, r3
 800cc3a:	0c1b      	lsrs	r3, r3, #16
 800cc3c:	eba8 0801 	sub.w	r8, r8, r1
 800cc40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc48:	fa1f f888 	uxth.w	r8, r8
 800cc4c:	1419      	asrs	r1, r3, #16
 800cc4e:	454e      	cmp	r6, r9
 800cc50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc54:	f84a 3b04 	str.w	r3, [sl], #4
 800cc58:	d8e8      	bhi.n	800cc2c <__mdiff+0x80>
 800cc5a:	1b33      	subs	r3, r6, r4
 800cc5c:	3b15      	subs	r3, #21
 800cc5e:	f023 0303 	bic.w	r3, r3, #3
 800cc62:	3304      	adds	r3, #4
 800cc64:	3415      	adds	r4, #21
 800cc66:	42a6      	cmp	r6, r4
 800cc68:	bf38      	it	cc
 800cc6a:	2304      	movcc	r3, #4
 800cc6c:	441d      	add	r5, r3
 800cc6e:	4473      	add	r3, lr
 800cc70:	469e      	mov	lr, r3
 800cc72:	462e      	mov	r6, r5
 800cc74:	4566      	cmp	r6, ip
 800cc76:	d30e      	bcc.n	800cc96 <__mdiff+0xea>
 800cc78:	f10c 0203 	add.w	r2, ip, #3
 800cc7c:	1b52      	subs	r2, r2, r5
 800cc7e:	f022 0203 	bic.w	r2, r2, #3
 800cc82:	3d03      	subs	r5, #3
 800cc84:	45ac      	cmp	ip, r5
 800cc86:	bf38      	it	cc
 800cc88:	2200      	movcc	r2, #0
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cc90:	b17a      	cbz	r2, 800ccb2 <__mdiff+0x106>
 800cc92:	6107      	str	r7, [r0, #16]
 800cc94:	e7a4      	b.n	800cbe0 <__mdiff+0x34>
 800cc96:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc9a:	fa11 f288 	uxtah	r2, r1, r8
 800cc9e:	1414      	asrs	r4, r2, #16
 800cca0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cca4:	b292      	uxth	r2, r2
 800cca6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ccaa:	f84e 2b04 	str.w	r2, [lr], #4
 800ccae:	1421      	asrs	r1, r4, #16
 800ccb0:	e7e0      	b.n	800cc74 <__mdiff+0xc8>
 800ccb2:	3f01      	subs	r7, #1
 800ccb4:	e7ea      	b.n	800cc8c <__mdiff+0xe0>
 800ccb6:	bf00      	nop
 800ccb8:	0800ed70 	.word	0x0800ed70
 800ccbc:	0800ed81 	.word	0x0800ed81

0800ccc0 <__d2b>:
 800ccc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccc4:	460f      	mov	r7, r1
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	ec59 8b10 	vmov	r8, r9, d0
 800cccc:	4616      	mov	r6, r2
 800ccce:	f7ff fcd5 	bl	800c67c <_Balloc>
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	b930      	cbnz	r0, 800cce4 <__d2b+0x24>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	4b24      	ldr	r3, [pc, #144]	; (800cd6c <__d2b+0xac>)
 800ccda:	4825      	ldr	r0, [pc, #148]	; (800cd70 <__d2b+0xb0>)
 800ccdc:	f240 310f 	movw	r1, #783	; 0x30f
 800cce0:	f000 fae8 	bl	800d2b4 <__assert_func>
 800cce4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccec:	bb2d      	cbnz	r5, 800cd3a <__d2b+0x7a>
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	f1b8 0300 	subs.w	r3, r8, #0
 800ccf4:	d026      	beq.n	800cd44 <__d2b+0x84>
 800ccf6:	4668      	mov	r0, sp
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	f7ff fd87 	bl	800c80c <__lo0bits>
 800ccfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd02:	b1e8      	cbz	r0, 800cd40 <__d2b+0x80>
 800cd04:	f1c0 0320 	rsb	r3, r0, #32
 800cd08:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0c:	430b      	orrs	r3, r1
 800cd0e:	40c2      	lsrs	r2, r0
 800cd10:	6163      	str	r3, [r4, #20]
 800cd12:	9201      	str	r2, [sp, #4]
 800cd14:	9b01      	ldr	r3, [sp, #4]
 800cd16:	61a3      	str	r3, [r4, #24]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	bf14      	ite	ne
 800cd1c:	2202      	movne	r2, #2
 800cd1e:	2201      	moveq	r2, #1
 800cd20:	6122      	str	r2, [r4, #16]
 800cd22:	b1bd      	cbz	r5, 800cd54 <__d2b+0x94>
 800cd24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd28:	4405      	add	r5, r0
 800cd2a:	603d      	str	r5, [r7, #0]
 800cd2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd30:	6030      	str	r0, [r6, #0]
 800cd32:	4620      	mov	r0, r4
 800cd34:	b003      	add	sp, #12
 800cd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd3e:	e7d6      	b.n	800ccee <__d2b+0x2e>
 800cd40:	6161      	str	r1, [r4, #20]
 800cd42:	e7e7      	b.n	800cd14 <__d2b+0x54>
 800cd44:	a801      	add	r0, sp, #4
 800cd46:	f7ff fd61 	bl	800c80c <__lo0bits>
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	6163      	str	r3, [r4, #20]
 800cd4e:	3020      	adds	r0, #32
 800cd50:	2201      	movs	r2, #1
 800cd52:	e7e5      	b.n	800cd20 <__d2b+0x60>
 800cd54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd5c:	6038      	str	r0, [r7, #0]
 800cd5e:	6918      	ldr	r0, [r3, #16]
 800cd60:	f7ff fd34 	bl	800c7cc <__hi0bits>
 800cd64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd68:	e7e2      	b.n	800cd30 <__d2b+0x70>
 800cd6a:	bf00      	nop
 800cd6c:	0800ed70 	.word	0x0800ed70
 800cd70:	0800ed81 	.word	0x0800ed81

0800cd74 <_malloc_usable_size_r>:
 800cd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd78:	1f18      	subs	r0, r3, #4
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	bfbc      	itt	lt
 800cd7e:	580b      	ldrlt	r3, [r1, r0]
 800cd80:	18c0      	addlt	r0, r0, r3
 800cd82:	4770      	bx	lr

0800cd84 <__sfputc_r>:
 800cd84:	6893      	ldr	r3, [r2, #8]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	b410      	push	{r4}
 800cd8c:	6093      	str	r3, [r2, #8]
 800cd8e:	da08      	bge.n	800cda2 <__sfputc_r+0x1e>
 800cd90:	6994      	ldr	r4, [r2, #24]
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	db01      	blt.n	800cd9a <__sfputc_r+0x16>
 800cd96:	290a      	cmp	r1, #10
 800cd98:	d103      	bne.n	800cda2 <__sfputc_r+0x1e>
 800cd9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd9e:	f000 b9e3 	b.w	800d168 <__swbuf_r>
 800cda2:	6813      	ldr	r3, [r2, #0]
 800cda4:	1c58      	adds	r0, r3, #1
 800cda6:	6010      	str	r0, [r2, #0]
 800cda8:	7019      	strb	r1, [r3, #0]
 800cdaa:	4608      	mov	r0, r1
 800cdac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <__sfputs_r>:
 800cdb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	4614      	mov	r4, r2
 800cdba:	18d5      	adds	r5, r2, r3
 800cdbc:	42ac      	cmp	r4, r5
 800cdbe:	d101      	bne.n	800cdc4 <__sfputs_r+0x12>
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	e007      	b.n	800cdd4 <__sfputs_r+0x22>
 800cdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc8:	463a      	mov	r2, r7
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7ff ffda 	bl	800cd84 <__sfputc_r>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	d1f3      	bne.n	800cdbc <__sfputs_r+0xa>
 800cdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdd8 <_vfiprintf_r>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	460d      	mov	r5, r1
 800cdde:	b09d      	sub	sp, #116	; 0x74
 800cde0:	4614      	mov	r4, r2
 800cde2:	4698      	mov	r8, r3
 800cde4:	4606      	mov	r6, r0
 800cde6:	b118      	cbz	r0, 800cdf0 <_vfiprintf_r+0x18>
 800cde8:	6a03      	ldr	r3, [r0, #32]
 800cdea:	b90b      	cbnz	r3, 800cdf0 <_vfiprintf_r+0x18>
 800cdec:	f7fe fbb4 	bl	800b558 <__sinit>
 800cdf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdf2:	07d9      	lsls	r1, r3, #31
 800cdf4:	d405      	bmi.n	800ce02 <_vfiprintf_r+0x2a>
 800cdf6:	89ab      	ldrh	r3, [r5, #12]
 800cdf8:	059a      	lsls	r2, r3, #22
 800cdfa:	d402      	bmi.n	800ce02 <_vfiprintf_r+0x2a>
 800cdfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdfe:	f7fe fcb3 	bl	800b768 <__retarget_lock_acquire_recursive>
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	071b      	lsls	r3, r3, #28
 800ce06:	d501      	bpl.n	800ce0c <_vfiprintf_r+0x34>
 800ce08:	692b      	ldr	r3, [r5, #16]
 800ce0a:	b99b      	cbnz	r3, 800ce34 <_vfiprintf_r+0x5c>
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f000 f9e8 	bl	800d1e4 <__swsetup_r>
 800ce14:	b170      	cbz	r0, 800ce34 <_vfiprintf_r+0x5c>
 800ce16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce18:	07dc      	lsls	r4, r3, #31
 800ce1a:	d504      	bpl.n	800ce26 <_vfiprintf_r+0x4e>
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce20:	b01d      	add	sp, #116	; 0x74
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	0598      	lsls	r0, r3, #22
 800ce2a:	d4f7      	bmi.n	800ce1c <_vfiprintf_r+0x44>
 800ce2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce2e:	f7fe fc9c 	bl	800b76a <__retarget_lock_release_recursive>
 800ce32:	e7f3      	b.n	800ce1c <_vfiprintf_r+0x44>
 800ce34:	2300      	movs	r3, #0
 800ce36:	9309      	str	r3, [sp, #36]	; 0x24
 800ce38:	2320      	movs	r3, #32
 800ce3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce42:	2330      	movs	r3, #48	; 0x30
 800ce44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cff8 <_vfiprintf_r+0x220>
 800ce48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce4c:	f04f 0901 	mov.w	r9, #1
 800ce50:	4623      	mov	r3, r4
 800ce52:	469a      	mov	sl, r3
 800ce54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce58:	b10a      	cbz	r2, 800ce5e <_vfiprintf_r+0x86>
 800ce5a:	2a25      	cmp	r2, #37	; 0x25
 800ce5c:	d1f9      	bne.n	800ce52 <_vfiprintf_r+0x7a>
 800ce5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce62:	d00b      	beq.n	800ce7c <_vfiprintf_r+0xa4>
 800ce64:	465b      	mov	r3, fp
 800ce66:	4622      	mov	r2, r4
 800ce68:	4629      	mov	r1, r5
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f7ff ffa1 	bl	800cdb2 <__sfputs_r>
 800ce70:	3001      	adds	r0, #1
 800ce72:	f000 80a9 	beq.w	800cfc8 <_vfiprintf_r+0x1f0>
 800ce76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce78:	445a      	add	r2, fp
 800ce7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 80a1 	beq.w	800cfc8 <_vfiprintf_r+0x1f0>
 800ce86:	2300      	movs	r3, #0
 800ce88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce90:	f10a 0a01 	add.w	sl, sl, #1
 800ce94:	9304      	str	r3, [sp, #16]
 800ce96:	9307      	str	r3, [sp, #28]
 800ce98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ce9e:	4654      	mov	r4, sl
 800cea0:	2205      	movs	r2, #5
 800cea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea6:	4854      	ldr	r0, [pc, #336]	; (800cff8 <_vfiprintf_r+0x220>)
 800cea8:	f7f3 f992 	bl	80001d0 <memchr>
 800ceac:	9a04      	ldr	r2, [sp, #16]
 800ceae:	b9d8      	cbnz	r0, 800cee8 <_vfiprintf_r+0x110>
 800ceb0:	06d1      	lsls	r1, r2, #27
 800ceb2:	bf44      	itt	mi
 800ceb4:	2320      	movmi	r3, #32
 800ceb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceba:	0713      	lsls	r3, r2, #28
 800cebc:	bf44      	itt	mi
 800cebe:	232b      	movmi	r3, #43	; 0x2b
 800cec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec4:	f89a 3000 	ldrb.w	r3, [sl]
 800cec8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceca:	d015      	beq.n	800cef8 <_vfiprintf_r+0x120>
 800cecc:	9a07      	ldr	r2, [sp, #28]
 800cece:	4654      	mov	r4, sl
 800ced0:	2000      	movs	r0, #0
 800ced2:	f04f 0c0a 	mov.w	ip, #10
 800ced6:	4621      	mov	r1, r4
 800ced8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cedc:	3b30      	subs	r3, #48	; 0x30
 800cede:	2b09      	cmp	r3, #9
 800cee0:	d94d      	bls.n	800cf7e <_vfiprintf_r+0x1a6>
 800cee2:	b1b0      	cbz	r0, 800cf12 <_vfiprintf_r+0x13a>
 800cee4:	9207      	str	r2, [sp, #28]
 800cee6:	e014      	b.n	800cf12 <_vfiprintf_r+0x13a>
 800cee8:	eba0 0308 	sub.w	r3, r0, r8
 800ceec:	fa09 f303 	lsl.w	r3, r9, r3
 800cef0:	4313      	orrs	r3, r2
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	46a2      	mov	sl, r4
 800cef6:	e7d2      	b.n	800ce9e <_vfiprintf_r+0xc6>
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	1d19      	adds	r1, r3, #4
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	9103      	str	r1, [sp, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	bfbb      	ittet	lt
 800cf04:	425b      	neglt	r3, r3
 800cf06:	f042 0202 	orrlt.w	r2, r2, #2
 800cf0a:	9307      	strge	r3, [sp, #28]
 800cf0c:	9307      	strlt	r3, [sp, #28]
 800cf0e:	bfb8      	it	lt
 800cf10:	9204      	strlt	r2, [sp, #16]
 800cf12:	7823      	ldrb	r3, [r4, #0]
 800cf14:	2b2e      	cmp	r3, #46	; 0x2e
 800cf16:	d10c      	bne.n	800cf32 <_vfiprintf_r+0x15a>
 800cf18:	7863      	ldrb	r3, [r4, #1]
 800cf1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf1c:	d134      	bne.n	800cf88 <_vfiprintf_r+0x1b0>
 800cf1e:	9b03      	ldr	r3, [sp, #12]
 800cf20:	1d1a      	adds	r2, r3, #4
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	9203      	str	r2, [sp, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	bfb8      	it	lt
 800cf2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf2e:	3402      	adds	r4, #2
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d008 <_vfiprintf_r+0x230>
 800cf36:	7821      	ldrb	r1, [r4, #0]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	f7f3 f948 	bl	80001d0 <memchr>
 800cf40:	b138      	cbz	r0, 800cf52 <_vfiprintf_r+0x17a>
 800cf42:	9b04      	ldr	r3, [sp, #16]
 800cf44:	eba0 000a 	sub.w	r0, r0, sl
 800cf48:	2240      	movs	r2, #64	; 0x40
 800cf4a:	4082      	lsls	r2, r0
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	3401      	adds	r4, #1
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf56:	4829      	ldr	r0, [pc, #164]	; (800cffc <_vfiprintf_r+0x224>)
 800cf58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf5c:	2206      	movs	r2, #6
 800cf5e:	f7f3 f937 	bl	80001d0 <memchr>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d03f      	beq.n	800cfe6 <_vfiprintf_r+0x20e>
 800cf66:	4b26      	ldr	r3, [pc, #152]	; (800d000 <_vfiprintf_r+0x228>)
 800cf68:	bb1b      	cbnz	r3, 800cfb2 <_vfiprintf_r+0x1da>
 800cf6a:	9b03      	ldr	r3, [sp, #12]
 800cf6c:	3307      	adds	r3, #7
 800cf6e:	f023 0307 	bic.w	r3, r3, #7
 800cf72:	3308      	adds	r3, #8
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf78:	443b      	add	r3, r7
 800cf7a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf7c:	e768      	b.n	800ce50 <_vfiprintf_r+0x78>
 800cf7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf82:	460c      	mov	r4, r1
 800cf84:	2001      	movs	r0, #1
 800cf86:	e7a6      	b.n	800ced6 <_vfiprintf_r+0xfe>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	3401      	adds	r4, #1
 800cf8c:	9305      	str	r3, [sp, #20]
 800cf8e:	4619      	mov	r1, r3
 800cf90:	f04f 0c0a 	mov.w	ip, #10
 800cf94:	4620      	mov	r0, r4
 800cf96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf9a:	3a30      	subs	r2, #48	; 0x30
 800cf9c:	2a09      	cmp	r2, #9
 800cf9e:	d903      	bls.n	800cfa8 <_vfiprintf_r+0x1d0>
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d0c6      	beq.n	800cf32 <_vfiprintf_r+0x15a>
 800cfa4:	9105      	str	r1, [sp, #20]
 800cfa6:	e7c4      	b.n	800cf32 <_vfiprintf_r+0x15a>
 800cfa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfac:	4604      	mov	r4, r0
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e7f0      	b.n	800cf94 <_vfiprintf_r+0x1bc>
 800cfb2:	ab03      	add	r3, sp, #12
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	4b12      	ldr	r3, [pc, #72]	; (800d004 <_vfiprintf_r+0x22c>)
 800cfba:	a904      	add	r1, sp, #16
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7fd fe8b 	bl	800acd8 <_printf_float>
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	1c78      	adds	r0, r7, #1
 800cfc6:	d1d6      	bne.n	800cf76 <_vfiprintf_r+0x19e>
 800cfc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfca:	07d9      	lsls	r1, r3, #31
 800cfcc:	d405      	bmi.n	800cfda <_vfiprintf_r+0x202>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	059a      	lsls	r2, r3, #22
 800cfd2:	d402      	bmi.n	800cfda <_vfiprintf_r+0x202>
 800cfd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd6:	f7fe fbc8 	bl	800b76a <__retarget_lock_release_recursive>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	065b      	lsls	r3, r3, #25
 800cfde:	f53f af1d 	bmi.w	800ce1c <_vfiprintf_r+0x44>
 800cfe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe4:	e71c      	b.n	800ce20 <_vfiprintf_r+0x48>
 800cfe6:	ab03      	add	r3, sp, #12
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4b05      	ldr	r3, [pc, #20]	; (800d004 <_vfiprintf_r+0x22c>)
 800cfee:	a904      	add	r1, sp, #16
 800cff0:	4630      	mov	r0, r6
 800cff2:	f7fe f915 	bl	800b220 <_printf_i>
 800cff6:	e7e4      	b.n	800cfc2 <_vfiprintf_r+0x1ea>
 800cff8:	0800eedc 	.word	0x0800eedc
 800cffc:	0800eee6 	.word	0x0800eee6
 800d000:	0800acd9 	.word	0x0800acd9
 800d004:	0800cdb3 	.word	0x0800cdb3
 800d008:	0800eee2 	.word	0x0800eee2

0800d00c <__sflush_r>:
 800d00c:	898a      	ldrh	r2, [r1, #12]
 800d00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d012:	4605      	mov	r5, r0
 800d014:	0710      	lsls	r0, r2, #28
 800d016:	460c      	mov	r4, r1
 800d018:	d458      	bmi.n	800d0cc <__sflush_r+0xc0>
 800d01a:	684b      	ldr	r3, [r1, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dc05      	bgt.n	800d02c <__sflush_r+0x20>
 800d020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d022:	2b00      	cmp	r3, #0
 800d024:	dc02      	bgt.n	800d02c <__sflush_r+0x20>
 800d026:	2000      	movs	r0, #0
 800d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d02e:	2e00      	cmp	r6, #0
 800d030:	d0f9      	beq.n	800d026 <__sflush_r+0x1a>
 800d032:	2300      	movs	r3, #0
 800d034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d038:	682f      	ldr	r7, [r5, #0]
 800d03a:	6a21      	ldr	r1, [r4, #32]
 800d03c:	602b      	str	r3, [r5, #0]
 800d03e:	d032      	beq.n	800d0a6 <__sflush_r+0x9a>
 800d040:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d042:	89a3      	ldrh	r3, [r4, #12]
 800d044:	075a      	lsls	r2, r3, #29
 800d046:	d505      	bpl.n	800d054 <__sflush_r+0x48>
 800d048:	6863      	ldr	r3, [r4, #4]
 800d04a:	1ac0      	subs	r0, r0, r3
 800d04c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d04e:	b10b      	cbz	r3, 800d054 <__sflush_r+0x48>
 800d050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d052:	1ac0      	subs	r0, r0, r3
 800d054:	2300      	movs	r3, #0
 800d056:	4602      	mov	r2, r0
 800d058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d05a:	6a21      	ldr	r1, [r4, #32]
 800d05c:	4628      	mov	r0, r5
 800d05e:	47b0      	blx	r6
 800d060:	1c43      	adds	r3, r0, #1
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	d106      	bne.n	800d074 <__sflush_r+0x68>
 800d066:	6829      	ldr	r1, [r5, #0]
 800d068:	291d      	cmp	r1, #29
 800d06a:	d82b      	bhi.n	800d0c4 <__sflush_r+0xb8>
 800d06c:	4a29      	ldr	r2, [pc, #164]	; (800d114 <__sflush_r+0x108>)
 800d06e:	410a      	asrs	r2, r1
 800d070:	07d6      	lsls	r6, r2, #31
 800d072:	d427      	bmi.n	800d0c4 <__sflush_r+0xb8>
 800d074:	2200      	movs	r2, #0
 800d076:	6062      	str	r2, [r4, #4]
 800d078:	04d9      	lsls	r1, r3, #19
 800d07a:	6922      	ldr	r2, [r4, #16]
 800d07c:	6022      	str	r2, [r4, #0]
 800d07e:	d504      	bpl.n	800d08a <__sflush_r+0x7e>
 800d080:	1c42      	adds	r2, r0, #1
 800d082:	d101      	bne.n	800d088 <__sflush_r+0x7c>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b903      	cbnz	r3, 800d08a <__sflush_r+0x7e>
 800d088:	6560      	str	r0, [r4, #84]	; 0x54
 800d08a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d08c:	602f      	str	r7, [r5, #0]
 800d08e:	2900      	cmp	r1, #0
 800d090:	d0c9      	beq.n	800d026 <__sflush_r+0x1a>
 800d092:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d096:	4299      	cmp	r1, r3
 800d098:	d002      	beq.n	800d0a0 <__sflush_r+0x94>
 800d09a:	4628      	mov	r0, r5
 800d09c:	f7ff f9ee 	bl	800c47c <_free_r>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	6360      	str	r0, [r4, #52]	; 0x34
 800d0a4:	e7c0      	b.n	800d028 <__sflush_r+0x1c>
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	47b0      	blx	r6
 800d0ac:	1c41      	adds	r1, r0, #1
 800d0ae:	d1c8      	bne.n	800d042 <__sflush_r+0x36>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0c5      	beq.n	800d042 <__sflush_r+0x36>
 800d0b6:	2b1d      	cmp	r3, #29
 800d0b8:	d001      	beq.n	800d0be <__sflush_r+0xb2>
 800d0ba:	2b16      	cmp	r3, #22
 800d0bc:	d101      	bne.n	800d0c2 <__sflush_r+0xb6>
 800d0be:	602f      	str	r7, [r5, #0]
 800d0c0:	e7b1      	b.n	800d026 <__sflush_r+0x1a>
 800d0c2:	89a3      	ldrh	r3, [r4, #12]
 800d0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c8:	81a3      	strh	r3, [r4, #12]
 800d0ca:	e7ad      	b.n	800d028 <__sflush_r+0x1c>
 800d0cc:	690f      	ldr	r7, [r1, #16]
 800d0ce:	2f00      	cmp	r7, #0
 800d0d0:	d0a9      	beq.n	800d026 <__sflush_r+0x1a>
 800d0d2:	0793      	lsls	r3, r2, #30
 800d0d4:	680e      	ldr	r6, [r1, #0]
 800d0d6:	bf08      	it	eq
 800d0d8:	694b      	ldreq	r3, [r1, #20]
 800d0da:	600f      	str	r7, [r1, #0]
 800d0dc:	bf18      	it	ne
 800d0de:	2300      	movne	r3, #0
 800d0e0:	eba6 0807 	sub.w	r8, r6, r7
 800d0e4:	608b      	str	r3, [r1, #8]
 800d0e6:	f1b8 0f00 	cmp.w	r8, #0
 800d0ea:	dd9c      	ble.n	800d026 <__sflush_r+0x1a>
 800d0ec:	6a21      	ldr	r1, [r4, #32]
 800d0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0f0:	4643      	mov	r3, r8
 800d0f2:	463a      	mov	r2, r7
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	47b0      	blx	r6
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	dc06      	bgt.n	800d10a <__sflush_r+0xfe>
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d102:	81a3      	strh	r3, [r4, #12]
 800d104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d108:	e78e      	b.n	800d028 <__sflush_r+0x1c>
 800d10a:	4407      	add	r7, r0
 800d10c:	eba8 0800 	sub.w	r8, r8, r0
 800d110:	e7e9      	b.n	800d0e6 <__sflush_r+0xda>
 800d112:	bf00      	nop
 800d114:	dfbffffe 	.word	0xdfbffffe

0800d118 <_fflush_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	690b      	ldr	r3, [r1, #16]
 800d11c:	4605      	mov	r5, r0
 800d11e:	460c      	mov	r4, r1
 800d120:	b913      	cbnz	r3, 800d128 <_fflush_r+0x10>
 800d122:	2500      	movs	r5, #0
 800d124:	4628      	mov	r0, r5
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	b118      	cbz	r0, 800d132 <_fflush_r+0x1a>
 800d12a:	6a03      	ldr	r3, [r0, #32]
 800d12c:	b90b      	cbnz	r3, 800d132 <_fflush_r+0x1a>
 800d12e:	f7fe fa13 	bl	800b558 <__sinit>
 800d132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0f3      	beq.n	800d122 <_fflush_r+0xa>
 800d13a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d13c:	07d0      	lsls	r0, r2, #31
 800d13e:	d404      	bmi.n	800d14a <_fflush_r+0x32>
 800d140:	0599      	lsls	r1, r3, #22
 800d142:	d402      	bmi.n	800d14a <_fflush_r+0x32>
 800d144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d146:	f7fe fb0f 	bl	800b768 <__retarget_lock_acquire_recursive>
 800d14a:	4628      	mov	r0, r5
 800d14c:	4621      	mov	r1, r4
 800d14e:	f7ff ff5d 	bl	800d00c <__sflush_r>
 800d152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d154:	07da      	lsls	r2, r3, #31
 800d156:	4605      	mov	r5, r0
 800d158:	d4e4      	bmi.n	800d124 <_fflush_r+0xc>
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	059b      	lsls	r3, r3, #22
 800d15e:	d4e1      	bmi.n	800d124 <_fflush_r+0xc>
 800d160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d162:	f7fe fb02 	bl	800b76a <__retarget_lock_release_recursive>
 800d166:	e7dd      	b.n	800d124 <_fflush_r+0xc>

0800d168 <__swbuf_r>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	460e      	mov	r6, r1
 800d16c:	4614      	mov	r4, r2
 800d16e:	4605      	mov	r5, r0
 800d170:	b118      	cbz	r0, 800d17a <__swbuf_r+0x12>
 800d172:	6a03      	ldr	r3, [r0, #32]
 800d174:	b90b      	cbnz	r3, 800d17a <__swbuf_r+0x12>
 800d176:	f7fe f9ef 	bl	800b558 <__sinit>
 800d17a:	69a3      	ldr	r3, [r4, #24]
 800d17c:	60a3      	str	r3, [r4, #8]
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	071a      	lsls	r2, r3, #28
 800d182:	d525      	bpl.n	800d1d0 <__swbuf_r+0x68>
 800d184:	6923      	ldr	r3, [r4, #16]
 800d186:	b31b      	cbz	r3, 800d1d0 <__swbuf_r+0x68>
 800d188:	6823      	ldr	r3, [r4, #0]
 800d18a:	6922      	ldr	r2, [r4, #16]
 800d18c:	1a98      	subs	r0, r3, r2
 800d18e:	6963      	ldr	r3, [r4, #20]
 800d190:	b2f6      	uxtb	r6, r6
 800d192:	4283      	cmp	r3, r0
 800d194:	4637      	mov	r7, r6
 800d196:	dc04      	bgt.n	800d1a2 <__swbuf_r+0x3a>
 800d198:	4621      	mov	r1, r4
 800d19a:	4628      	mov	r0, r5
 800d19c:	f7ff ffbc 	bl	800d118 <_fflush_r>
 800d1a0:	b9e0      	cbnz	r0, 800d1dc <__swbuf_r+0x74>
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	60a3      	str	r3, [r4, #8]
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	6022      	str	r2, [r4, #0]
 800d1ae:	701e      	strb	r6, [r3, #0]
 800d1b0:	6962      	ldr	r2, [r4, #20]
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d004      	beq.n	800d1c2 <__swbuf_r+0x5a>
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	07db      	lsls	r3, r3, #31
 800d1bc:	d506      	bpl.n	800d1cc <__swbuf_r+0x64>
 800d1be:	2e0a      	cmp	r6, #10
 800d1c0:	d104      	bne.n	800d1cc <__swbuf_r+0x64>
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f7ff ffa7 	bl	800d118 <_fflush_r>
 800d1ca:	b938      	cbnz	r0, 800d1dc <__swbuf_r+0x74>
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f000 f806 	bl	800d1e4 <__swsetup_r>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d0d5      	beq.n	800d188 <__swbuf_r+0x20>
 800d1dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d1e0:	e7f4      	b.n	800d1cc <__swbuf_r+0x64>
	...

0800d1e4 <__swsetup_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4b2a      	ldr	r3, [pc, #168]	; (800d290 <__swsetup_r+0xac>)
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	6818      	ldr	r0, [r3, #0]
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	b118      	cbz	r0, 800d1f8 <__swsetup_r+0x14>
 800d1f0:	6a03      	ldr	r3, [r0, #32]
 800d1f2:	b90b      	cbnz	r3, 800d1f8 <__swsetup_r+0x14>
 800d1f4:	f7fe f9b0 	bl	800b558 <__sinit>
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1fe:	0718      	lsls	r0, r3, #28
 800d200:	d422      	bmi.n	800d248 <__swsetup_r+0x64>
 800d202:	06d9      	lsls	r1, r3, #27
 800d204:	d407      	bmi.n	800d216 <__swsetup_r+0x32>
 800d206:	2309      	movs	r3, #9
 800d208:	602b      	str	r3, [r5, #0]
 800d20a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d20e:	81a3      	strh	r3, [r4, #12]
 800d210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d214:	e034      	b.n	800d280 <__swsetup_r+0x9c>
 800d216:	0758      	lsls	r0, r3, #29
 800d218:	d512      	bpl.n	800d240 <__swsetup_r+0x5c>
 800d21a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d21c:	b141      	cbz	r1, 800d230 <__swsetup_r+0x4c>
 800d21e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d222:	4299      	cmp	r1, r3
 800d224:	d002      	beq.n	800d22c <__swsetup_r+0x48>
 800d226:	4628      	mov	r0, r5
 800d228:	f7ff f928 	bl	800c47c <_free_r>
 800d22c:	2300      	movs	r3, #0
 800d22e:	6363      	str	r3, [r4, #52]	; 0x34
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	2300      	movs	r3, #0
 800d23a:	6063      	str	r3, [r4, #4]
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	f043 0308 	orr.w	r3, r3, #8
 800d246:	81a3      	strh	r3, [r4, #12]
 800d248:	6923      	ldr	r3, [r4, #16]
 800d24a:	b94b      	cbnz	r3, 800d260 <__swsetup_r+0x7c>
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d256:	d003      	beq.n	800d260 <__swsetup_r+0x7c>
 800d258:	4621      	mov	r1, r4
 800d25a:	4628      	mov	r0, r5
 800d25c:	f000 f8b6 	bl	800d3cc <__smakebuf_r>
 800d260:	89a0      	ldrh	r0, [r4, #12]
 800d262:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d266:	f010 0301 	ands.w	r3, r0, #1
 800d26a:	d00a      	beq.n	800d282 <__swsetup_r+0x9e>
 800d26c:	2300      	movs	r3, #0
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	6963      	ldr	r3, [r4, #20]
 800d272:	425b      	negs	r3, r3
 800d274:	61a3      	str	r3, [r4, #24]
 800d276:	6923      	ldr	r3, [r4, #16]
 800d278:	b943      	cbnz	r3, 800d28c <__swsetup_r+0xa8>
 800d27a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d27e:	d1c4      	bne.n	800d20a <__swsetup_r+0x26>
 800d280:	bd38      	pop	{r3, r4, r5, pc}
 800d282:	0781      	lsls	r1, r0, #30
 800d284:	bf58      	it	pl
 800d286:	6963      	ldrpl	r3, [r4, #20]
 800d288:	60a3      	str	r3, [r4, #8]
 800d28a:	e7f4      	b.n	800d276 <__swsetup_r+0x92>
 800d28c:	2000      	movs	r0, #0
 800d28e:	e7f7      	b.n	800d280 <__swsetup_r+0x9c>
 800d290:	20000064 	.word	0x20000064

0800d294 <_sbrk_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d06      	ldr	r5, [pc, #24]	; (800d2b0 <_sbrk_r+0x1c>)
 800d298:	2300      	movs	r3, #0
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	602b      	str	r3, [r5, #0]
 800d2a0:	f7f6 ffa0 	bl	80041e4 <_sbrk>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_sbrk_r+0x1a>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_sbrk_r+0x1a>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	20000f04 	.word	0x20000f04

0800d2b4 <__assert_func>:
 800d2b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2b6:	4614      	mov	r4, r2
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	4b09      	ldr	r3, [pc, #36]	; (800d2e0 <__assert_func+0x2c>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4605      	mov	r5, r0
 800d2c0:	68d8      	ldr	r0, [r3, #12]
 800d2c2:	b14c      	cbz	r4, 800d2d8 <__assert_func+0x24>
 800d2c4:	4b07      	ldr	r3, [pc, #28]	; (800d2e4 <__assert_func+0x30>)
 800d2c6:	9100      	str	r1, [sp, #0]
 800d2c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2cc:	4906      	ldr	r1, [pc, #24]	; (800d2e8 <__assert_func+0x34>)
 800d2ce:	462b      	mov	r3, r5
 800d2d0:	f000 f844 	bl	800d35c <fiprintf>
 800d2d4:	f000 f8d8 	bl	800d488 <abort>
 800d2d8:	4b04      	ldr	r3, [pc, #16]	; (800d2ec <__assert_func+0x38>)
 800d2da:	461c      	mov	r4, r3
 800d2dc:	e7f3      	b.n	800d2c6 <__assert_func+0x12>
 800d2de:	bf00      	nop
 800d2e0:	20000064 	.word	0x20000064
 800d2e4:	0800eef7 	.word	0x0800eef7
 800d2e8:	0800ef04 	.word	0x0800ef04
 800d2ec:	0800ef32 	.word	0x0800ef32

0800d2f0 <_calloc_r>:
 800d2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2f2:	fba1 2402 	umull	r2, r4, r1, r2
 800d2f6:	b94c      	cbnz	r4, 800d30c <_calloc_r+0x1c>
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	9201      	str	r2, [sp, #4]
 800d2fc:	f7ff f932 	bl	800c564 <_malloc_r>
 800d300:	9a01      	ldr	r2, [sp, #4]
 800d302:	4605      	mov	r5, r0
 800d304:	b930      	cbnz	r0, 800d314 <_calloc_r+0x24>
 800d306:	4628      	mov	r0, r5
 800d308:	b003      	add	sp, #12
 800d30a:	bd30      	pop	{r4, r5, pc}
 800d30c:	220c      	movs	r2, #12
 800d30e:	6002      	str	r2, [r0, #0]
 800d310:	2500      	movs	r5, #0
 800d312:	e7f8      	b.n	800d306 <_calloc_r+0x16>
 800d314:	4621      	mov	r1, r4
 800d316:	f7fe f9aa 	bl	800b66e <memset>
 800d31a:	e7f4      	b.n	800d306 <_calloc_r+0x16>

0800d31c <__ascii_mbtowc>:
 800d31c:	b082      	sub	sp, #8
 800d31e:	b901      	cbnz	r1, 800d322 <__ascii_mbtowc+0x6>
 800d320:	a901      	add	r1, sp, #4
 800d322:	b142      	cbz	r2, 800d336 <__ascii_mbtowc+0x1a>
 800d324:	b14b      	cbz	r3, 800d33a <__ascii_mbtowc+0x1e>
 800d326:	7813      	ldrb	r3, [r2, #0]
 800d328:	600b      	str	r3, [r1, #0]
 800d32a:	7812      	ldrb	r2, [r2, #0]
 800d32c:	1e10      	subs	r0, r2, #0
 800d32e:	bf18      	it	ne
 800d330:	2001      	movne	r0, #1
 800d332:	b002      	add	sp, #8
 800d334:	4770      	bx	lr
 800d336:	4610      	mov	r0, r2
 800d338:	e7fb      	b.n	800d332 <__ascii_mbtowc+0x16>
 800d33a:	f06f 0001 	mvn.w	r0, #1
 800d33e:	e7f8      	b.n	800d332 <__ascii_mbtowc+0x16>

0800d340 <__ascii_wctomb>:
 800d340:	b149      	cbz	r1, 800d356 <__ascii_wctomb+0x16>
 800d342:	2aff      	cmp	r2, #255	; 0xff
 800d344:	bf85      	ittet	hi
 800d346:	238a      	movhi	r3, #138	; 0x8a
 800d348:	6003      	strhi	r3, [r0, #0]
 800d34a:	700a      	strbls	r2, [r1, #0]
 800d34c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d350:	bf98      	it	ls
 800d352:	2001      	movls	r0, #1
 800d354:	4770      	bx	lr
 800d356:	4608      	mov	r0, r1
 800d358:	4770      	bx	lr
	...

0800d35c <fiprintf>:
 800d35c:	b40e      	push	{r1, r2, r3}
 800d35e:	b503      	push	{r0, r1, lr}
 800d360:	4601      	mov	r1, r0
 800d362:	ab03      	add	r3, sp, #12
 800d364:	4805      	ldr	r0, [pc, #20]	; (800d37c <fiprintf+0x20>)
 800d366:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36a:	6800      	ldr	r0, [r0, #0]
 800d36c:	9301      	str	r3, [sp, #4]
 800d36e:	f7ff fd33 	bl	800cdd8 <_vfiprintf_r>
 800d372:	b002      	add	sp, #8
 800d374:	f85d eb04 	ldr.w	lr, [sp], #4
 800d378:	b003      	add	sp, #12
 800d37a:	4770      	bx	lr
 800d37c:	20000064 	.word	0x20000064

0800d380 <__swhatbuf_r>:
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	460c      	mov	r4, r1
 800d384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d388:	2900      	cmp	r1, #0
 800d38a:	b096      	sub	sp, #88	; 0x58
 800d38c:	4615      	mov	r5, r2
 800d38e:	461e      	mov	r6, r3
 800d390:	da0d      	bge.n	800d3ae <__swhatbuf_r+0x2e>
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d398:	f04f 0100 	mov.w	r1, #0
 800d39c:	bf0c      	ite	eq
 800d39e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d3a2:	2340      	movne	r3, #64	; 0x40
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	6031      	str	r1, [r6, #0]
 800d3a8:	602b      	str	r3, [r5, #0]
 800d3aa:	b016      	add	sp, #88	; 0x58
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}
 800d3ae:	466a      	mov	r2, sp
 800d3b0:	f000 f848 	bl	800d444 <_fstat_r>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	dbec      	blt.n	800d392 <__swhatbuf_r+0x12>
 800d3b8:	9901      	ldr	r1, [sp, #4]
 800d3ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d3be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d3c2:	4259      	negs	r1, r3
 800d3c4:	4159      	adcs	r1, r3
 800d3c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ca:	e7eb      	b.n	800d3a4 <__swhatbuf_r+0x24>

0800d3cc <__smakebuf_r>:
 800d3cc:	898b      	ldrh	r3, [r1, #12]
 800d3ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3d0:	079d      	lsls	r5, r3, #30
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	d507      	bpl.n	800d3e8 <__smakebuf_r+0x1c>
 800d3d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	6123      	str	r3, [r4, #16]
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	6163      	str	r3, [r4, #20]
 800d3e4:	b002      	add	sp, #8
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	ab01      	add	r3, sp, #4
 800d3ea:	466a      	mov	r2, sp
 800d3ec:	f7ff ffc8 	bl	800d380 <__swhatbuf_r>
 800d3f0:	9900      	ldr	r1, [sp, #0]
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f7ff f8b5 	bl	800c564 <_malloc_r>
 800d3fa:	b948      	cbnz	r0, 800d410 <__smakebuf_r+0x44>
 800d3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d400:	059a      	lsls	r2, r3, #22
 800d402:	d4ef      	bmi.n	800d3e4 <__smakebuf_r+0x18>
 800d404:	f023 0303 	bic.w	r3, r3, #3
 800d408:	f043 0302 	orr.w	r3, r3, #2
 800d40c:	81a3      	strh	r3, [r4, #12]
 800d40e:	e7e3      	b.n	800d3d8 <__smakebuf_r+0xc>
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	6020      	str	r0, [r4, #0]
 800d414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d418:	81a3      	strh	r3, [r4, #12]
 800d41a:	9b00      	ldr	r3, [sp, #0]
 800d41c:	6163      	str	r3, [r4, #20]
 800d41e:	9b01      	ldr	r3, [sp, #4]
 800d420:	6120      	str	r0, [r4, #16]
 800d422:	b15b      	cbz	r3, 800d43c <__smakebuf_r+0x70>
 800d424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d428:	4630      	mov	r0, r6
 800d42a:	f000 f81d 	bl	800d468 <_isatty_r>
 800d42e:	b128      	cbz	r0, 800d43c <__smakebuf_r+0x70>
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	f023 0303 	bic.w	r3, r3, #3
 800d436:	f043 0301 	orr.w	r3, r3, #1
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	89a3      	ldrh	r3, [r4, #12]
 800d43e:	431d      	orrs	r5, r3
 800d440:	81a5      	strh	r5, [r4, #12]
 800d442:	e7cf      	b.n	800d3e4 <__smakebuf_r+0x18>

0800d444 <_fstat_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4d07      	ldr	r5, [pc, #28]	; (800d464 <_fstat_r+0x20>)
 800d448:	2300      	movs	r3, #0
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	4611      	mov	r1, r2
 800d450:	602b      	str	r3, [r5, #0]
 800d452:	f7f6 fe9e 	bl	8004192 <_fstat>
 800d456:	1c43      	adds	r3, r0, #1
 800d458:	d102      	bne.n	800d460 <_fstat_r+0x1c>
 800d45a:	682b      	ldr	r3, [r5, #0]
 800d45c:	b103      	cbz	r3, 800d460 <_fstat_r+0x1c>
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	bd38      	pop	{r3, r4, r5, pc}
 800d462:	bf00      	nop
 800d464:	20000f04 	.word	0x20000f04

0800d468 <_isatty_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4d06      	ldr	r5, [pc, #24]	; (800d484 <_isatty_r+0x1c>)
 800d46c:	2300      	movs	r3, #0
 800d46e:	4604      	mov	r4, r0
 800d470:	4608      	mov	r0, r1
 800d472:	602b      	str	r3, [r5, #0]
 800d474:	f7f6 fe9d 	bl	80041b2 <_isatty>
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	d102      	bne.n	800d482 <_isatty_r+0x1a>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	b103      	cbz	r3, 800d482 <_isatty_r+0x1a>
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	20000f04 	.word	0x20000f04

0800d488 <abort>:
 800d488:	b508      	push	{r3, lr}
 800d48a:	2006      	movs	r0, #6
 800d48c:	f000 f82c 	bl	800d4e8 <raise>
 800d490:	2001      	movs	r0, #1
 800d492:	f7f6 fe2f 	bl	80040f4 <_exit>

0800d496 <_raise_r>:
 800d496:	291f      	cmp	r1, #31
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4604      	mov	r4, r0
 800d49c:	460d      	mov	r5, r1
 800d49e:	d904      	bls.n	800d4aa <_raise_r+0x14>
 800d4a0:	2316      	movs	r3, #22
 800d4a2:	6003      	str	r3, [r0, #0]
 800d4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4a8:	bd38      	pop	{r3, r4, r5, pc}
 800d4aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d4ac:	b112      	cbz	r2, 800d4b4 <_raise_r+0x1e>
 800d4ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4b2:	b94b      	cbnz	r3, 800d4c8 <_raise_r+0x32>
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f000 f831 	bl	800d51c <_getpid_r>
 800d4ba:	462a      	mov	r2, r5
 800d4bc:	4601      	mov	r1, r0
 800d4be:	4620      	mov	r0, r4
 800d4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c4:	f000 b818 	b.w	800d4f8 <_kill_r>
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d00a      	beq.n	800d4e2 <_raise_r+0x4c>
 800d4cc:	1c59      	adds	r1, r3, #1
 800d4ce:	d103      	bne.n	800d4d8 <_raise_r+0x42>
 800d4d0:	2316      	movs	r3, #22
 800d4d2:	6003      	str	r3, [r0, #0]
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	e7e7      	b.n	800d4a8 <_raise_r+0x12>
 800d4d8:	2400      	movs	r4, #0
 800d4da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4de:	4628      	mov	r0, r5
 800d4e0:	4798      	blx	r3
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	e7e0      	b.n	800d4a8 <_raise_r+0x12>
	...

0800d4e8 <raise>:
 800d4e8:	4b02      	ldr	r3, [pc, #8]	; (800d4f4 <raise+0xc>)
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	6818      	ldr	r0, [r3, #0]
 800d4ee:	f7ff bfd2 	b.w	800d496 <_raise_r>
 800d4f2:	bf00      	nop
 800d4f4:	20000064 	.word	0x20000064

0800d4f8 <_kill_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	; (800d518 <_kill_r+0x20>)
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	4608      	mov	r0, r1
 800d502:	4611      	mov	r1, r2
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	f7f6 fde5 	bl	80040d4 <_kill>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	d102      	bne.n	800d514 <_kill_r+0x1c>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	b103      	cbz	r3, 800d514 <_kill_r+0x1c>
 800d512:	6023      	str	r3, [r4, #0]
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	bf00      	nop
 800d518:	20000f04 	.word	0x20000f04

0800d51c <_getpid_r>:
 800d51c:	f7f6 bdd2 	b.w	80040c4 <_getpid>

0800d520 <_init>:
 800d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d522:	bf00      	nop
 800d524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d526:	bc08      	pop	{r3}
 800d528:	469e      	mov	lr, r3
 800d52a:	4770      	bx	lr

0800d52c <_fini>:
 800d52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52e:	bf00      	nop
 800d530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d532:	bc08      	pop	{r3}
 800d534:	469e      	mov	lr, r3
 800d536:	4770      	bx	lr
