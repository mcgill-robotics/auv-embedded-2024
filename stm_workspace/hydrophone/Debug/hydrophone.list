
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08008478  08008478  00018478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008864  08008864  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800886c  0800886c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800886c  0800886c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  08008a48  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08008a48  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012cb5  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d8  00000000  00000000  00032efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000354d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd0  00000000  00000000  00036690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025676  00000000  00000000  00037460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138a1  00000000  00000000  0005cad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8e4a  00000000  00000000  00070377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c00  00000000  00000000  001591c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0015edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800845c 	.word	0x0800845c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800845c 	.word	0x0800845c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <__io_putchar+0x20>)
 8000eb6:	f004 f91b 	bl	80050f0 <HAL_UART_Transmit>
  return ch;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200002e8 	.word	0x200002e8

08000ec8 <calculateVoltage>:
	float32_t point;
	point = amplitude * arm_sin_f32((2*M_PI*frequency)*time) + offset;
	*pOut = point;
}

void calculateVoltage(uint16_t VREFINT_DATA, uint16_t ADC_DATA, float32_t *pOut) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	603a      	str	r2, [r7, #0]
 8000ed2:	80fb      	strh	r3, [r7, #6]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	80bb      	strh	r3, [r7, #4]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <calculateVoltage+0x6c>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t Vdda = 3.0 * (VREFINT_CAL / (float32_t) VREFINT_DATA);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	edc7 7a02 	vstr	s15, [r7, #8]
	*pOut = (Vdda / 4095) * (float32_t) ADC_DATA;
 8000f06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f38 <calculateVoltage+0x70>
 8000f0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	edc3 7a00 	vstr	s15, [r3]
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	1fff75aa 	.word	0x1fff75aa
 8000f38:	457ff000 	.word	0x457ff000

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f000 fd08 	bl	8001958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f860 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f9e0 	bl	8001310 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f50:	f000 f9c0 	bl	80012d4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f54:	f000 f940 	bl	80011d8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f58:	f000 f98c 	bl	8001274 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f5c:	f000 f8a8 	bl	80010b0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 8000f60:	2204      	movs	r2, #4
 8000f62:	4926      	ldr	r1, [pc, #152]	; (8000ffc <main+0xc0>)
 8000f64:	4826      	ldr	r0, [pc, #152]	; (8001000 <main+0xc4>)
 8000f66:	f001 f8a1 	bl	80020ac <HAL_ADC_Start_DMA>
	  while (conversionComplete == 0) {
 8000f6a:	e000      	b.n	8000f6e <main+0x32>
		  continue;
 8000f6c:	bf00      	nop
	  while (conversionComplete == 0) {
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <main+0xc8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0fa      	beq.n	8000f6c <main+0x30>
	  }
	  	conversionComplete = 0;
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <main+0xc8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
		calculateVoltage(adcChannels[0], adcChannels[1], &V2);
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <main+0xc0>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <main+0xc0>)
 8000f84:	8852      	ldrh	r2, [r2, #2]
 8000f86:	b291      	uxth	r1, r2
 8000f88:	f107 020c 	add.w	r2, r7, #12
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff9b 	bl	8000ec8 <calculateVoltage>
		calculateVoltage(adcChannels[0], adcChannels[2], &V3);
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <main+0xc0>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <main+0xc0>)
 8000f9a:	8892      	ldrh	r2, [r2, #4]
 8000f9c:	b291      	uxth	r1, r2
 8000f9e:	f107 0208 	add.w	r2, r7, #8
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff90 	bl	8000ec8 <calculateVoltage>
		calculateVoltage(adcChannels[0], adcChannels[3], &V4);
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <main+0xc0>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <main+0xc0>)
 8000fb0:	88d2      	ldrh	r2, [r2, #6]
 8000fb2:	b291      	uxth	r1, r2
 8000fb4:	1d3a      	adds	r2, r7, #4
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff86 	bl	8000ec8 <calculateVoltage>
		printf("CH2: %f, CH3: %f, CH4: %f\r\n", V2, V3, V4);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fac2 	bl	8000548 <__aeabi_f2d>
 8000fc4:	4680      	mov	r8, r0
 8000fc6:	4689      	mov	r9, r1
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fabc 	bl	8000548 <__aeabi_f2d>
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fe4:	e9cd 4500 	strd	r4, r5, [sp]
 8000fe8:	4642      	mov	r2, r8
 8000fea:	464b      	mov	r3, r9
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <main+0xcc>)
 8000fee:	f005 fa8f 	bl	8006510 <iprintf>
		HAL_Delay(100);
 8000ff2:	2064      	movs	r0, #100	; 0x64
 8000ff4:	f000 fd2c 	bl	8001a50 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 8000ff8:	e7b2      	b.n	8000f60 <main+0x24>
 8000ffa:	bf00      	nop
 8000ffc:	20000374 	.word	0x20000374
 8001000:	200001f0 	.word	0x200001f0
 8001004:	2000037c 	.word	0x2000037c
 8001008:	08008478 	.word	0x08008478

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b096      	sub	sp, #88	; 0x58
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2244      	movs	r2, #68	; 0x44
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f005 facd 	bl	80065ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800102e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001032:	f002 fa79 	bl	8003528 <HAL_PWREx_ControlVoltageScaling>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800103c:	f000 f9f6 	bl	800142c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001052:	2302      	movs	r3, #2
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800105a:	230a      	movs	r3, #10
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800105e:	2307      	movs	r3, #7
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fab0 	bl	80035d4 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800107a:	f000 f9d7 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2303      	movs	r3, #3
 8001084:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f002 feb0 	bl	8003dfc <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010a2:	f000 f9c3 	bl	800142c <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3758      	adds	r7, #88	; 0x58
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010c6:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010c8:	4a3e      	ldr	r2, [pc, #248]	; (80011c4 <MX_ADC1_Init+0x114>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010cc:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010f8:	2204      	movs	r2, #4
 80010fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <MX_ADC1_Init+0x110>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <MX_ADC1_Init+0x110>)
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_ADC1_Init+0x110>)
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_ADC1_Init+0x110>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <MX_ADC1_Init+0x110>)
 800111a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_ADC1_Init+0x110>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001128:	4825      	ldr	r0, [pc, #148]	; (80011c0 <MX_ADC1_Init+0x110>)
 800112a:	f000 fe7d 	bl	8001e28 <HAL_ADC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001134:	f000 f97a 	bl	800142c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_ADC1_Init+0x118>)
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113c:	2306      	movs	r3, #6
 800113e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001144:	237f      	movs	r3, #127	; 0x7f
 8001146:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001148:	2304      	movs	r3, #4
 800114a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <MX_ADC1_Init+0x110>)
 8001156:	f001 f841 	bl	80021dc <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001160:	f000 f964 	bl	800142c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_ADC1_Init+0x11c>)
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001168:	230c      	movs	r3, #12
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <MX_ADC1_Init+0x110>)
 8001172:	f001 f833 	bl	80021dc <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800117c:	f000 f956 	bl	800142c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_ADC1_Init+0x120>)
 8001182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001184:	2312      	movs	r3, #18
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_ADC1_Init+0x110>)
 800118e:	f001 f825 	bl	80021dc <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001198:	f000 f948 	bl	800142c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <MX_ADC1_Init+0x124>)
 800119e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011a0:	2318      	movs	r3, #24
 80011a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_ADC1_Init+0x110>)
 80011aa:	f001 f817 	bl	80021dc <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80011b4:	f000 f93a 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001f0 	.word	0x200001f0
 80011c4:	50040000 	.word	0x50040000
 80011c8:	80000001 	.word	0x80000001
 80011cc:	43210000 	.word	0x43210000
 80011d0:	2e300800 	.word	0x2e300800
 80011d4:	25b00200 	.word	0x25b00200

080011d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_TIM2_Init+0x94>)
 80011f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_TIM2_Init+0x94>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM2_Init+0x94>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000000;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_TIM2_Init+0x94>)
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_TIM2_Init+0x98>)
 800120e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_TIM2_Init+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_TIM2_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800121c:	4813      	ldr	r0, [pc, #76]	; (800126c <MX_TIM2_Init+0x94>)
 800121e:	f003 fb4d 	bl	80048bc <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001228:	f000 f900 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_TIM2_Init+0x94>)
 800123a:	f003 fc98 	bl	8004b6e <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001244:	f000 f8f2 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_TIM2_Init+0x94>)
 8001256:	f003 fe79 	bl	8004f4c <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001260:	f000 f8e4 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000029c 	.word	0x2000029c
 8001270:	04c4b400 	.word	0x04c4b400

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <MX_USART2_UART_Init+0x5c>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b8:	f003 fecc 	bl	8005054 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 f8b3 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002e8 	.word	0x200002e8
 80012d0:	40004400 	.word	0x40004400

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_DMA_Init+0x38>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <MX_DMA_Init+0x38>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6493      	str	r3, [r2, #72]	; 0x48
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_DMA_Init+0x38>)
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	200b      	movs	r0, #11
 80012f8:	f001 fd47 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012fc:	200b      	movs	r0, #11
 80012fe:	f001 fd60 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <MX_GPIO_Init+0xc4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_GPIO_Init+0xc4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	21a0      	movs	r1, #160	; 0xa0
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f002 f8a5 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001398:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <MX_GPIO_Init+0xc8>)
 80013aa:	f001 ff1d 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 80013ae:	23a0      	movs	r3, #160	; 0xa0
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f001 ff0e 	bl	80031e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000800 	.word	0x48000800

080013dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	sec++;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013ec:	6013      	str	r3, [r2, #0]
	printf("%d microseconds\r\n", sec);
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013f6:	f005 f88b 	bl	8006510 <iprintf>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000370 	.word	0x20000370
 8001408:	08008494 	.word	0x08008494

0800140c <HAL_ADC_ConvCpltCallback>:

/*void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc) {
}*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	conversionComplete = 1;
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2000037c 	.word	0x2000037c

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x44>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_MspInit+0x44>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6613      	str	r3, [r2, #96]	; 0x60
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x44>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x44>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x44>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x44>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0a2      	sub	sp, #136	; 0x88
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2260      	movs	r2, #96	; 0x60
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 f88a 	bl	80065ba <memset>
  if(hadc->Instance==ADC1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a47      	ldr	r2, [pc, #284]	; (80015c8 <HAL_ADC_MspInit+0x148>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f040 8087 	bne.w	80015c0 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014bc:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014c6:	2308      	movs	r3, #8
 80014c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014ca:	2307      	movs	r3, #7
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 feaf 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80014ec:	f7ff ff9e 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	4a35      	ldr	r2, [pc, #212]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	4a29      	ldr	r2, [pc, #164]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_ADC_MspInit+0x14c>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001538:	2350      	movs	r3, #80	; 0x50
 800153a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800153c:	230b      	movs	r3, #11
 800153e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f001 fe4b 	bl	80031e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001552:	2302      	movs	r3, #2
 8001554:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001556:	230b      	movs	r3, #11
 8001558:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001562:	4619      	mov	r1, r3
 8001564:	481a      	ldr	r0, [pc, #104]	; (80015d0 <HAL_ADC_MspInit+0x150>)
 8001566:	f001 fe3f 	bl	80031e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_ADC_MspInit+0x158>)
 800156e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 8001592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001596:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 80015a6:	f001 fc27 	bl	8002df8 <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80015b0:	f7ff ff3c 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 80015b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80015ba:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_ADC_MspInit+0x154>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3788      	adds	r7, #136	; 0x88
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	50040000 	.word	0x50040000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000400 	.word	0x48000400
 80015d4:	20000254 	.word	0x20000254
 80015d8:	40020008 	.word	0x40020008

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d113      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	201c      	movs	r0, #28
 800160c:	f001 fbbd 	bl	8002d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001610:	201c      	movs	r0, #28
 8001612:	f001 fbd6 	bl	8002dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b0a2      	sub	sp, #136	; 0x88
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2260      	movs	r2, #96	; 0x60
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f004 ffb8 	bl	80065ba <memset>
  if(huart->Instance==USART2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <HAL_UART_MspInit+0xac>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d138      	bne.n	80016c6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001654:	2302      	movs	r3, #2
 8001656:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fdef 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800166c:	f7ff fede 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0xb0>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0xb0>)
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167a:	6593      	str	r3, [r2, #88]	; 0x58
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0xb0>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_UART_MspInit+0xb0>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0xb0>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_UART_MspInit+0xb0>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a0:	230c      	movs	r3, #12
 80016a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f001 fd91 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3788      	adds	r7, #136	; 0x88
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40021000 	.word	0x40021000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f974 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA1_Channel1_IRQHandler+0x10>)
 8001732:	f001 fc79 	bl	8003028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000254 	.word	0x20000254

08001740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM2_IRQHandler+0x10>)
 8001746:	f003 f910 	bl	800496a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000029c 	.word	0x2000029c

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_kill>:

int _kill(int pid, int sig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176e:	f004 ff77 	bl	8006660 <__errno>
 8001772:	4603      	mov	r3, r0
 8001774:	2216      	movs	r2, #22
 8001776:	601a      	str	r2, [r3, #0]
  return -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_exit>:

void _exit (int status)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe7 	bl	8001764 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001796:	e7fe      	b.n	8001796 <_exit+0x12>

08001798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
  }

  return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e009      	b.n	80017f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fb59 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf1      	blt.n	80017e4 <_write+0x12>
  }
  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001832:	605a      	str	r2, [r3, #4]
  return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_isatty>:

int _isatty(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f004 fedc 	bl	8006660 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20010000 	.word	0x20010000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	20000380 	.word	0x20000380
 80018dc:	200004d8 	.word	0x200004d8

080018e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001908:	f7ff ffea 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <LoopForever+0x6>)
  ldr r1, =_edata
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <LoopForever+0xe>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001924:	4c0a      	ldr	r4, [pc, #40]	; (8001950 <LoopForever+0x16>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001932:	f004 fe9b 	bl	800666c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001936:	f7ff fb01 	bl	8000f3c <main>

0800193a <LoopForever>:

LoopForever:
    b LoopForever
 800193a:	e7fe      	b.n	800193a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800193c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001948:	08008874 	.word	0x08008874
  ldr r2, =_sbss
 800194c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001950:	200004d4 	.word	0x200004d4

08001954 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC1_IRQHandler>
	...

08001958 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_Init+0x3c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_Init+0x3c>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196e:	2003      	movs	r0, #3
 8001970:	f001 fa00 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f80f 	bl	8001998 <HAL_InitTick>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	e001      	b.n	800198a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001986:	f7ff fd57 	bl	8001438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198a:	79fb      	ldrb	r3, [r7, #7]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_InitTick+0x6c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d023      	beq.n	80019f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_InitTick+0x70>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_InitTick+0x6c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fa0b 	bl	8002dde <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d809      	bhi.n	80019e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	f001 f9d5 	bl	8002d8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_InitTick+0x74>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e007      	b.n	80019f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e004      	b.n	80019f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e001      	b.n	80019f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000384 	.word	0x20000384

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000384 	.word	0x20000384

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3360      	adds	r3, #96	; 0x60
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <LL_ADC_SetOffset+0x44>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	03fff000 	.word	0x03fff000

08001b48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3360      	adds	r3, #96	; 0x60
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3360      	adds	r3, #96	; 0x60
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3330      	adds	r3, #48	; 0x30
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	211f      	movs	r1, #31
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	f003 011f 	and.w	r1, r3, #31
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	431a      	orrs	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3314      	adds	r3, #20
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0e5b      	lsrs	r3, r3, #25
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0d1b      	lsrs	r3, r3, #20
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2107      	movs	r1, #7
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	0d1b      	lsrs	r3, r3, #20
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c72:	bf00      	nop
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0318 	and.w	r3, r3, #24
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ca4:	40d9      	lsrs	r1, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	400b      	ands	r3, r1
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	0007ffff 	.word	0x0007ffff

08001cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6093      	str	r3, [r2, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_IsEnabled+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_IsEnabled+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e126      	b.n	8002090 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fb15 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff3f 	bl	8001cec <LL_ADC_IsDeepPowerDownEnabled>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff25 	bl	8001cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff5a 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff3e 	bl	8001d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e98:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <HAL_ADC_Init+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	4a7f      	ldr	r2, [pc, #508]	; (800209c <HAL_ADC_Init+0x274>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff3c 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff75 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8001ef0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80bf 	bne.w	800207e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 80bb 	bne.w	800207e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f28:	485d      	ldr	r0, [pc, #372]	; (80020a0 <HAL_ADC_Init+0x278>)
 8001f2a:	f7ff ff2f 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	485a      	ldr	r0, [pc, #360]	; (80020a4 <HAL_ADC_Init+0x27c>)
 8001f3c:	f7ff fdac 	bl	8001a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7e5b      	ldrb	r3, [r3, #25]
 8001f44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d106      	bne.n	8001f7c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	3b01      	subs	r3, #1
 8001f74:	045b      	lsls	r3, r3, #17
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <HAL_ADC_Init+0x280>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff25 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 8001fb6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d13d      	bne.n	800203a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d13a      	bne.n	800203a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fd0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fe0:	f023 0302 	bic.w	r3, r3, #2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	69b9      	ldr	r1, [r7, #24]
 8001fea:	430b      	orrs	r3, r1
 8001fec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d118      	bne.n	800202a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002002:	f023 0304 	bic.w	r3, r3, #4
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002014:	4311      	orrs	r1, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800201a:	430a      	orrs	r2, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	e007      	b.n	800203a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10c      	bne.n	800205c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f023 010f 	bic.w	r1, r3, #15
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	1e5a      	subs	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
 800205a:	e007      	b.n	800206c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 020f 	bic.w	r2, r2, #15
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f023 0303 	bic.w	r3, r3, #3
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
 800207c:	e007      	b.n	800208e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800208e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000000 	.word	0x20000000
 800209c:	053e2d63 	.word	0x053e2d63
 80020a0:	50040000 	.word	0x50040000
 80020a4:	50040300 	.word	0x50040300
 80020a8:	fff0c007 	.word	0xfff0c007

080020ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fe8c 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d167      	bne.n	8002198 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Start_DMA+0x2a>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e063      	b.n	800219e <HAL_ADC_Start_DMA+0xf2>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fc5e 	bl	80029a0 <ADC_Enable>
 80020e4:	4603      	mov	r3, r0
 80020e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d14f      	bne.n	800218e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f023 0206 	bic.w	r2, r3, #6
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
 800211a:	e002      	b.n	8002122 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <HAL_ADC_Start_DMA+0xfc>)
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_ADC_Start_DMA+0x100>)
 8002130:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_ADC_Start_DMA+0x104>)
 8002138:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	221c      	movs	r2, #28
 8002140:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0210 	orr.w	r2, r2, #16
 8002158:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3340      	adds	r3, #64	; 0x40
 8002174:	4619      	mov	r1, r3
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f000 fef5 	bl	8002f68 <HAL_DMA_Start_IT>
 800217e:	4603      	mov	r3, r0
 8002180:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fe13 	bl	8001db2 <LL_ADC_REG_StartConversion>
 800218c:	e006      	b.n	800219c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002196:	e001      	b.n	800219c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002198:	2302      	movs	r3, #2
 800219a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	08002aad 	.word	0x08002aad
 80021ac:	08002b85 	.word	0x08002b85
 80021b0:	08002ba1 	.word	0x08002ba1

080021b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0b6      	sub	sp, #216	; 0xd8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x22>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e3bb      	b.n	8002976 <HAL_ADC_ConfigChannel+0x79a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fde5 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 83a0 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d824      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	3b02      	subs	r3, #2
 800222e:	2b03      	cmp	r3, #3
 8002230:	d81b      	bhi.n	800226a <HAL_ADC_ConfigChannel+0x8e>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <HAL_ADC_ConfigChannel+0x5c>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	08002251 	.word	0x08002251
 8002240:	08002259 	.word	0x08002259
 8002244:	08002261 	.word	0x08002261
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002248:	230c      	movs	r3, #12
 800224a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800224e:	e010      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002250:	2312      	movs	r3, #18
 8002252:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002256:	e00c      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002258:	2318      	movs	r3, #24
 800225a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800225e:	e008      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800226a:	2306      	movs	r3, #6
 800226c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002270:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002280:	f7ff fca6 	bl	8001bd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fda6 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 800228e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fdb2 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 800229c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 81a4 	bne.w	80025f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 819f 	bne.w	80025f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f7ff fcb1 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	08db      	lsrs	r3, r3, #3
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d00a      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f8:	f7ff fc02 	bl	8001b00 <LL_ADC_SetOffset>
 80022fc:	e179      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fc1f 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <HAL_ADC_ConfigChannel+0x14e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc14 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	e01e      	b.n	8002368 <HAL_ADC_ConfigChannel+0x18c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc09 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002348:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800234c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e004      	b.n	8002366 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800235c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1a4>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	e018      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x1d6>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800239c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e004      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80023a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d106      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fbd8 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fbbc 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x214>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fbb1 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	f003 021f 	and.w	r2, r3, #31
 80023ee:	e01e      	b.n	800242e <HAL_ADC_ConfigChannel+0x252>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fba6 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800240e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e004      	b.n	800242c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x26a>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	0e9b      	lsrs	r3, r3, #26
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	e018      	b.n	8002478 <HAL_ADC_ConfigChannel+0x29c>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800245a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800245e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e004      	b.n	8002478 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800246e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	2101      	movs	r1, #1
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb75 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fb59 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x2da>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fb4e 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	e01e      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x318>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fb43 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80024d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80024dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e004      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80024e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_ConfigChannel+0x330>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	e014      	b.n	8002536 <HAL_ADC_ConfigChannel+0x35a>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800251a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800251c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e004      	b.n	8002536 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800252c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002536:	429a      	cmp	r2, r3
 8002538:	d106      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fb16 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2103      	movs	r1, #3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fafa 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x398>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2103      	movs	r1, #3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff faef 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 021f 	and.w	r2, r3, #31
 8002572:	e017      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x3c8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2103      	movs	r1, #3
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fae4 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800258c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e003      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800259a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x3e0>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	e011      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x404>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80025ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80025ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2103      	movs	r1, #3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fac1 	bl	8001b74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fbc8 	bl	8001d8c <LL_ADC_IsEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8140 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	461a      	mov	r2, r3
 8002612:	f7ff fb35 	bl	8001c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a8f      	ldr	r2, [pc, #572]	; (8002858 <HAL_ADC_ConfigChannel+0x67c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	f040 8131 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10b      	bne.n	800264a <HAL_ADC_ConfigChannel+0x46e>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	3301      	adds	r3, #1
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2b09      	cmp	r3, #9
 8002640:	bf94      	ite	ls
 8002642:	2301      	movls	r3, #1
 8002644:	2300      	movhi	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e019      	b.n	800267e <HAL_ADC_ConfigChannel+0x4a2>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800265c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b09      	cmp	r3, #9
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267e:	2b00      	cmp	r3, #0
 8002680:	d079      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	2b00      	cmp	r3, #0
 800268c:	d107      	bne.n	800269e <HAL_ADC_ConfigChannel+0x4c2>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0e9b      	lsrs	r3, r3, #26
 8002694:	3301      	adds	r3, #1
 8002696:	069b      	lsls	r3, r3, #26
 8002698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269c:	e015      	b.n	80026ca <HAL_ADC_ConfigChannel+0x4ee>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80026ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80026b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e003      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80026ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	069b      	lsls	r3, r3, #26
 80026c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x50e>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	e017      	b.n	800271a <HAL_ADC_ConfigChannel+0x53e>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80026f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e003      	b.n	800270e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	ea42 0103 	orr.w	r1, r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x564>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	051b      	lsls	r3, r3, #20
 800273e:	e018      	b.n	8002772 <HAL_ADC_ConfigChannel+0x596>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002772:	430b      	orrs	r3, r1
 8002774:	e081      	b.n	800287a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x5b6>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	3301      	adds	r3, #1
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002790:	e015      	b.n	80027be <HAL_ADC_ConfigChannel+0x5e2>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	069b      	lsls	r3, r3, #26
 80027ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_ADC_ConfigChannel+0x602>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	e017      	b.n	800280e <HAL_ADC_ConfigChannel+0x632>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	61bb      	str	r3, [r7, #24]
  return result;
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	ea42 0103 	orr.w	r1, r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <HAL_ADC_ConfigChannel+0x65e>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	3301      	adds	r3, #1
 8002826:	f003 021f 	and.w	r2, r3, #31
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	3b1e      	subs	r3, #30
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002838:	e01e      	b.n	8002878 <HAL_ADC_ConfigChannel+0x69c>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	60fb      	str	r3, [r7, #12]
  return result;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002852:	2320      	movs	r3, #32
 8002854:	e006      	b.n	8002864 <HAL_ADC_ConfigChannel+0x688>
 8002856:	bf00      	nop
 8002858:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	3b1e      	subs	r3, #30
 8002872:	051b      	lsls	r3, r3, #20
 8002874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002878:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800287e:	4619      	mov	r1, r3
 8002880:	f7ff f9d2 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <HAL_ADC_ConfigChannel+0x7a4>)
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d06c      	beq.n	800296a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002890:	483c      	ldr	r0, [pc, #240]	; (8002984 <HAL_ADC_ConfigChannel+0x7a8>)
 8002892:	f7ff f927 	bl	8001ae4 <LL_ADC_GetCommonPathInternalCh>
 8002896:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <HAL_ADC_ConfigChannel+0x7ac>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d127      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d121      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a35      	ldr	r2, [pc, #212]	; (800298c <HAL_ADC_ConfigChannel+0x7b0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d157      	bne.n	800296a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c2:	4619      	mov	r1, r3
 80028c4:	482f      	ldr	r0, [pc, #188]	; (8002984 <HAL_ADC_ConfigChannel+0x7a8>)
 80028c6:	f7ff f8fa 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_ADC_ConfigChannel+0x7b4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	4a30      	ldr	r2, [pc, #192]	; (8002994 <HAL_ADC_ConfigChannel+0x7b8>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028e4:	e002      	b.n	80028ec <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f9      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028f2:	e03a      	b.n	800296a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_ADC_ConfigChannel+0x7bc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d113      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10d      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_ADC_ConfigChannel+0x7b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d12a      	bne.n	800296a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291c:	4619      	mov	r1, r3
 800291e:	4819      	ldr	r0, [pc, #100]	; (8002984 <HAL_ADC_ConfigChannel+0x7a8>)
 8002920:	f7ff f8cd 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002924:	e021      	b.n	800296a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_ADC_ConfigChannel+0x7c0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d11c      	bne.n	800296a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d116      	bne.n	800296a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_ADC_ConfigChannel+0x7b0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d111      	bne.n	800296a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800294a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294e:	4619      	mov	r1, r3
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <HAL_ADC_ConfigChannel+0x7a8>)
 8002952:	f7ff f8b4 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
 8002956:	e008      	b.n	800296a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002972:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002976:	4618      	mov	r0, r3
 8002978:	37d8      	adds	r7, #216	; 0xd8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	80080000 	.word	0x80080000
 8002984:	50040300 	.word	0x50040300
 8002988:	c7520000 	.word	0xc7520000
 800298c:	50040000 	.word	0x50040000
 8002990:	20000000 	.word	0x20000000
 8002994:	053e2d63 	.word	0x053e2d63
 8002998:	cb840000 	.word	0xcb840000
 800299c:	80000001 	.word	0x80000001

080029a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f9eb 	bl	8001d8c <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d169      	bne.n	8002a90 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <ADC_Enable+0xfc>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e055      	b.n	8002a92 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f9ba 	bl	8001d64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029f0:	482b      	ldr	r0, [pc, #172]	; (8002aa0 <ADC_Enable+0x100>)
 80029f2:	f7ff f877 	bl	8001ae4 <LL_ADC_GetCommonPathInternalCh>
 80029f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <ADC_Enable+0x104>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <ADC_Enable+0x108>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a1a:	e002      	b.n	8002a22 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f9      	bne.n	8002a1c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a28:	f7ff f806 	bl	8001a38 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a2e:	e028      	b.n	8002a82 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f9a9 	bl	8001d8c <LL_ADC_IsEnabled>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f98d 	bl	8001d64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a4a:	f7fe fff5 	bl	8001a38 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d914      	bls.n	8002a82 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d00d      	beq.n	8002a82 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e007      	b.n	8002a92 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1cf      	bne.n	8002a30 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	8000003f 	.word	0x8000003f
 8002aa0:	50040300 	.word	0x50040300
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	053e2d63 	.word	0x053e2d63

08002aac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d14b      	bne.n	8002b5e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff f860 	bl	8001baa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d032      	beq.n	8002b56 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d12b      	bne.n	8002b56 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11f      	bne.n	8002b56 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
 8002b22:	e018      	b.n	8002b56 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d111      	bne.n	8002b56 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7fe fc58 	bl	800140c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b5c:	e00e      	b.n	8002b7c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff fb2c 	bl	80021c8 <HAL_ADC_ErrorCallback>
}
 8002b70:	e004      	b.n	8002b7c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff fb0e 	bl	80021b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f043 0204 	orr.w	r2, r3, #4
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fafe 	bl	80021c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0307 	and.w	r3, r3, #7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
         );
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff29 	bl	8002bd4 <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff3e 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff31 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffa2 	bl	8002d30 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e098      	b.n	8002f3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_DMA_Init+0x150>)
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d80f      	bhi.n	8002e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <HAL_DMA_Init+0x154>)
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a4b      	ldr	r2, [pc, #300]	; (8002f50 <HAL_DMA_Init+0x158>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a48      	ldr	r2, [pc, #288]	; (8002f54 <HAL_DMA_Init+0x15c>)
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
 8002e34:	e00e      	b.n	8002e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_DMA_Init+0x160>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a43      	ldr	r2, [pc, #268]	; (8002f50 <HAL_DMA_Init+0x158>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	009a      	lsls	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a42      	ldr	r2, [pc, #264]	; (8002f5c <HAL_DMA_Init+0x164>)
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eae:	d039      	beq.n	8002f24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_DMA_Init+0x15c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_DMA_Init+0x168>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f003 031c 	and.w	r3, r3, #28
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4924      	ldr	r1, [pc, #144]	; (8002f60 <HAL_DMA_Init+0x168>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_DMA_Init+0x168>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f003 031c 	and.w	r3, r3, #28
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	491d      	ldr	r1, [pc, #116]	; (8002f60 <HAL_DMA_Init+0x168>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
 8002eee:	e019      	b.n	8002f24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_DMA_Init+0x16c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f003 031c 	and.w	r3, r3, #28
 8002efc:	210f      	movs	r1, #15
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4917      	ldr	r1, [pc, #92]	; (8002f64 <HAL_DMA_Init+0x16c>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_DMA_Init+0x16c>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f003 031c 	and.w	r3, r3, #28
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	4911      	ldr	r1, [pc, #68]	; (8002f64 <HAL_DMA_Init+0x16c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40020407 	.word	0x40020407
 8002f4c:	bffdfff8 	.word	0xbffdfff8
 8002f50:	cccccccd 	.word	0xcccccccd
 8002f54:	40020000 	.word	0x40020000
 8002f58:	bffdfbf8 	.word	0xbffdfbf8
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	400200a8 	.word	0x400200a8
 8002f64:	400204a8 	.word	0x400204a8

08002f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_DMA_Start_IT+0x20>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e04b      	b.n	8003020 <HAL_DMA_Start_IT+0xb8>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d13a      	bne.n	8003012 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8e0 	bl	8003186 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 020e 	orr.w	r2, r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e00f      	b.n	8003000 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 020a 	orr.w	r2, r2, #10
 8002ffe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e005      	b.n	800301e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f003 031c 	and.w	r3, r3, #28
 8003048:	2204      	movs	r2, #4
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d026      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x7a>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d021      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f003 021c 	and.w	r2, r3, #28
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2104      	movs	r1, #4
 800308a:	fa01 f202 	lsl.w	r2, r1, r2
 800308e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d071      	beq.n	800317c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030a0:	e06c      	b.n	800317c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f003 031c 	and.w	r3, r3, #28
 80030aa:	2202      	movs	r2, #2
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02e      	beq.n	8003114 <HAL_DMA_IRQHandler+0xec>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d029      	beq.n	8003114 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 020a 	bic.w	r2, r2, #10
 80030dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f003 021c 	and.w	r2, r3, #28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2102      	movs	r1, #2
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d038      	beq.n	800317c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003112:	e033      	b.n	800317c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	f003 031c 	and.w	r3, r3, #28
 800311c:	2208      	movs	r2, #8
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d02a      	beq.n	800317e <HAL_DMA_IRQHandler+0x156>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d025      	beq.n	800317e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020e 	bic.w	r2, r2, #14
 8003140:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f003 021c 	and.w	r2, r3, #28
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800317c:	bf00      	nop
 800317e:	bf00      	nop
}
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	f003 021c 	and.w	r2, r3, #28
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d108      	bne.n	80031ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031c8:	e007      	b.n	80031da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	60da      	str	r2, [r3, #12]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f6:	e154      	b.n	80034a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8146 	beq.w	800349c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d005      	beq.n	8003228 <HAL_GPIO_Init+0x40>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d130      	bne.n	800328a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800325e:	2201      	movs	r2, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0201 	and.w	r2, r3, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b03      	cmp	r3, #3
 8003294:	d017      	beq.n	80032c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d123      	bne.n	800331a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	6939      	ldr	r1, [r7, #16]
 8003316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0203 	and.w	r2, r3, #3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a0 	beq.w	800349c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335c:	4b58      	ldr	r3, [pc, #352]	; (80034c0 <HAL_GPIO_Init+0x2d8>)
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_GPIO_Init+0x2d8>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6613      	str	r3, [r2, #96]	; 0x60
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_GPIO_Init+0x2d8>)
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003374:	4a53      	ldr	r2, [pc, #332]	; (80034c4 <HAL_GPIO_Init+0x2dc>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800339e:	d019      	beq.n	80033d4 <HAL_GPIO_Init+0x1ec>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a49      	ldr	r2, [pc, #292]	; (80034c8 <HAL_GPIO_Init+0x2e0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_GPIO_Init+0x1e8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a48      	ldr	r2, [pc, #288]	; (80034cc <HAL_GPIO_Init+0x2e4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00d      	beq.n	80033cc <HAL_GPIO_Init+0x1e4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a47      	ldr	r2, [pc, #284]	; (80034d0 <HAL_GPIO_Init+0x2e8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <HAL_GPIO_Init+0x1e0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a46      	ldr	r2, [pc, #280]	; (80034d4 <HAL_GPIO_Init+0x2ec>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_GPIO_Init+0x1dc>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e008      	b.n	80033d6 <HAL_GPIO_Init+0x1ee>
 80033c4:	2307      	movs	r3, #7
 80033c6:	e006      	b.n	80033d6 <HAL_GPIO_Init+0x1ee>
 80033c8:	2303      	movs	r3, #3
 80033ca:	e004      	b.n	80033d6 <HAL_GPIO_Init+0x1ee>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e002      	b.n	80033d6 <HAL_GPIO_Init+0x1ee>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_GPIO_Init+0x1ee>
 80033d4:	2300      	movs	r3, #0
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	f002 0203 	and.w	r2, r2, #3
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	4093      	lsls	r3, r2
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033e6:	4937      	ldr	r1, [pc, #220]	; (80034c4 <HAL_GPIO_Init+0x2dc>)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	3302      	adds	r3, #2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033f4:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003418:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800341e:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800346c:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3301      	adds	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f aea3 	bne.w	80031f8 <HAL_GPIO_Init+0x10>
  }
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000
 80034c8:	48000400 	.word	0x48000400
 80034cc:	48000800 	.word	0x48000800
 80034d0:	48000c00 	.word	0x48000c00
 80034d4:	48001000 	.word	0x48001000
 80034d8:	40010400 	.word	0x40010400

080034dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
 80034e8:	4613      	mov	r3, r2
 80034ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034ec:	787b      	ldrb	r3, [r7, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f8:	e002      	b.n	8003500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_PWREx_GetVoltageRange+0x18>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40007000 	.word	0x40007000

08003528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003536:	d130      	bne.n	800359a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003538:	4b23      	ldr	r3, [pc, #140]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003544:	d038      	beq.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800354e:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2232      	movs	r2, #50	; 0x32
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0c9b      	lsrs	r3, r3, #18
 8003568:	3301      	adds	r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800356c:	e002      	b.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3b01      	subs	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d102      	bne.n	8003588 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f2      	bne.n	800356e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d110      	bne.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e00f      	b.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d007      	beq.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035a8:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035b0:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40007000 	.word	0x40007000
 80035cc:	20000000 	.word	0x20000000
 80035d0:	431bde83 	.word	0x431bde83

080035d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f000 bc02 	b.w	8003dec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e8:	4b96      	ldr	r3, [pc, #600]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f2:	4b94      	ldr	r3, [pc, #592]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80e4 	beq.w	80037d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_RCC_OscConfig+0x4c>
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	f040 808b 	bne.w	800372e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b01      	cmp	r3, #1
 800361c:	f040 8087 	bne.w	800372e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003620:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x64>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e3d9      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	4b81      	ldr	r3, [pc, #516]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <HAL_RCC_OscConfig+0x7e>
 8003648:	4b7e      	ldr	r3, [pc, #504]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003650:	e005      	b.n	800365e <HAL_RCC_OscConfig+0x8a>
 8003652:	4b7c      	ldr	r3, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365e:	4293      	cmp	r3, r2
 8003660:	d223      	bcs.n	80036aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fd8c 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e3ba      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800367c:	f043 0308 	orr.w	r3, r3, #8
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	496d      	ldr	r1, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003694:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	4968      	ldr	r1, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
 80036a8:	e025      	b.n	80036f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036aa:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a65      	ldr	r2, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4960      	ldr	r1, [pc, #384]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c8:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	495b      	ldr	r1, [pc, #364]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fd4c 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e37a      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f6:	f000 fc81 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	4950      	ldr	r1, [pc, #320]	; (8003848 <HAL_RCC_OscConfig+0x274>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	4a4e      	ldr	r2, [pc, #312]	; (800384c <HAL_RCC_OscConfig+0x278>)
 8003714:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003716:	4b4e      	ldr	r3, [pc, #312]	; (8003850 <HAL_RCC_OscConfig+0x27c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe f93c 	bl	8001998 <HAL_InitTick>
 8003720:	4603      	mov	r3, r0
 8003722:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d052      	beq.n	80037d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	e35e      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d032      	beq.n	800379c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003736:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a42      	ldr	r2, [pc, #264]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003742:	f7fe f979 	bl	8001a38 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800374a:	f7fe f975 	bl	8001a38 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e347      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a35      	ldr	r2, [pc, #212]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800376e:	f043 0308 	orr.w	r3, r3, #8
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4930      	ldr	r1, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	492b      	ldr	r1, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
 800379a:	e01a      	b.n	80037d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800379c:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a28      	ldr	r2, [pc, #160]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037a8:	f7fe f946 	bl	8001a38 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037b0:	f7fe f942 	bl	8001a38 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e314      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1dc>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d073      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_OscConfig+0x21c>
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d10e      	bne.n	8003808 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d10b      	bne.n	8003808 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d063      	beq.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d15f      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e2f1      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x24c>
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e025      	b.n	800386c <HAL_RCC_OscConfig+0x298>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d114      	bne.n	8003854 <HAL_RCC_OscConfig+0x280>
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a02      	ldr	r2, [pc, #8]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e013      	b.n	800386c <HAL_RCC_OscConfig+0x298>
 8003844:	40021000 	.word	0x40021000
 8003848:	080084a8 	.word	0x080084a8
 800384c:	20000000 	.word	0x20000000
 8003850:	20000004 	.word	0x20000004
 8003854:	4ba0      	ldr	r3, [pc, #640]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a9f      	ldr	r2, [pc, #636]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b9d      	ldr	r3, [pc, #628]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a9c      	ldr	r2, [pc, #624]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f8e0 	bl	8001a38 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe f8dc 	bl	8001a38 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e2ae      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388e:	4b92      	ldr	r3, [pc, #584]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x2a8>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe f8cc 	bl	8001a38 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fe f8c8 	bl	8001a38 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e29a      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b6:	4b88      	ldr	r3, [pc, #544]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2d0>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d060      	beq.n	8003994 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_OscConfig+0x310>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d119      	bne.n	8003912 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d116      	bne.n	8003912 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e4:	4b7c      	ldr	r3, [pc, #496]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_OscConfig+0x328>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e277      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b76      	ldr	r3, [pc, #472]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	4973      	ldr	r1, [pc, #460]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003910:	e040      	b.n	8003994 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d023      	beq.n	8003962 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391a:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6e      	ldr	r2, [pc, #440]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fe f887 	bl	8001a38 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392e:	f7fe f883 	bl	8001a38 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e255      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003940:	4b65      	ldr	r3, [pc, #404]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	495f      	ldr	r1, [pc, #380]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
 8003960:	e018      	b.n	8003994 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b5d      	ldr	r3, [pc, #372]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a5c      	ldr	r2, [pc, #368]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe f863 	bl	8001a38 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe f85f 	bl	8001a38 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e231      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f0      	bne.n	8003976 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d03c      	beq.n	8003a1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01c      	beq.n	80039e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a8:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	4a4a      	ldr	r2, [pc, #296]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe f83e 	bl	8001a38 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fe f83a 	bl	8001a38 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e20c      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80039d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ef      	beq.n	80039c0 <HAL_RCC_OscConfig+0x3ec>
 80039e0:	e01b      	b.n	8003a1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e2:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80039e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e8:	4a3b      	ldr	r2, [pc, #236]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f2:	f7fe f821 	bl	8001a38 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fa:	f7fe f81d 	bl	8001a38 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1ef      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ef      	bne.n	80039fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80a6 	beq.w	8003b74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	; 0x58
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a54:	4b21      	ldr	r3, [pc, #132]	; (8003adc <HAL_RCC_OscConfig+0x508>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d118      	bne.n	8003a92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a60:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HAL_RCC_OscConfig+0x508>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <HAL_RCC_OscConfig+0x508>)
 8003a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd ffe4 	bl	8001a38 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a74:	f7fd ffe0 	bl	8001a38 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e1b2      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_RCC_OscConfig+0x508>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <HAL_RCC_OscConfig+0x4d8>
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aaa:	e029      	b.n	8003b00 <HAL_RCC_OscConfig+0x52c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d115      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x50c>
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	4a03      	ldr	r2, [pc, #12]	; (8003ad8 <HAL_RCC_OscConfig+0x504>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad4:	e014      	b.n	8003b00 <HAL_RCC_OscConfig+0x52c>
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	4b9a      	ldr	r3, [pc, #616]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	4a99      	ldr	r2, [pc, #612]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af0:	4b96      	ldr	r3, [pc, #600]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	4a95      	ldr	r2, [pc, #596]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d016      	beq.n	8003b36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd ff96 	bl	8001a38 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd ff92 	bl	8001a38 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e162      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b26:	4b89      	ldr	r3, [pc, #548]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ed      	beq.n	8003b10 <HAL_RCC_OscConfig+0x53c>
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd ff7f 	bl	8001a38 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fd ff7b 	bl	8001a38 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e14b      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b54:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ed      	bne.n	8003b3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b68:	4b78      	ldr	r3, [pc, #480]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	4a77      	ldr	r2, [pc, #476]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b88:	4b70      	ldr	r3, [pc, #448]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8e:	4a6f      	ldr	r2, [pc, #444]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd ff4e 	bl	8001a38 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba0:	f7fd ff4a 	bl	8001a38 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e11c      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bb2:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x5cc>
 8003bc0:	e01b      	b.n	8003bfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bc2:	4b62      	ldr	r3, [pc, #392]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc8:	4a60      	ldr	r2, [pc, #384]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd ff31 	bl	8001a38 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bda:	f7fd ff2d 	bl	8001a38 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e0ff      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bec:	4b57      	ldr	r3, [pc, #348]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ef      	bne.n	8003bda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80f3 	beq.w	8003dea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	f040 80c9 	bne.w	8003da0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c0e:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0203 	and.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d12c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d123      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d11b      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d113      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	3b01      	subs	r3, #1
 8003c62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d109      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d06b      	beq.n	8003d54 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d062      	beq.n	8003d48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0ac      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c92:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c9e:	f7fd fecb 	bl	8001a38 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fd fec7 	bl	8001a38 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e099      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc4:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_RCC_OscConfig+0x77c>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cde:	0212      	lsls	r2, r2, #8
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ce6:	0852      	lsrs	r2, r2, #1
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	0552      	lsls	r2, r2, #21
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf2:	0852      	lsrs	r2, r2, #1
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0652      	lsls	r2, r2, #25
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cfe:	06d2      	lsls	r2, r2, #27
 8003d00:	430a      	orrs	r2, r1
 8003d02:	4912      	ldr	r1, [pc, #72]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a0c      	ldr	r2, [pc, #48]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d20:	f7fd fe8a 	bl	8001a38 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fd fe86 	bl	8001a38 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e058      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_RCC_OscConfig+0x778>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d46:	e050      	b.n	8003dea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e04f      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d144      	bne.n	8003dea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d78:	f7fd fe5e 	bl	8001a38 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fd fe5a 	bl	8001a38 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e02c      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x7ac>
 8003d9e:	e024      	b.n	8003dea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d01f      	beq.n	8003de6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fd fe41 	bl	8001a38 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fd fe3d 	bl	8001a38 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e00f      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	4905      	ldr	r1, [pc, #20]	; (8003df4 <HAL_RCC_OscConfig+0x820>)
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_OscConfig+0x824>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	60cb      	str	r3, [r1, #12]
 8003de4:	e001      	b.n	8003dea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	feeefffc 	.word	0xfeeefffc

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0e7      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b75      	ldr	r3, [pc, #468]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d910      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b72      	ldr	r3, [pc, #456]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 0207 	bic.w	r2, r3, #7
 8003e26:	4970      	ldr	r1, [pc, #448]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b6e      	ldr	r3, [pc, #440]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cf      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b66      	ldr	r3, [pc, #408]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d908      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4960      	ldr	r1, [pc, #384]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04c      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d121      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0a6      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9a:	4b54      	ldr	r3, [pc, #336]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d115      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e09a      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08e      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e086      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4943      	ldr	r1, [pc, #268]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fda8 	bl	8001a38 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fd fda4 	bl	8001a38 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e06e      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b3a      	ldr	r3, [pc, #232]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d208      	bcs.n	8003f42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	492b      	ldr	r1, [pc, #172]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d210      	bcs.n	8003f72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 0207 	bic.w	r2, r3, #7
 8003f58:	4923      	ldr	r1, [pc, #140]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f60:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e036      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4918      	ldr	r1, [pc, #96]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9c:	4b13      	ldr	r3, [pc, #76]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4910      	ldr	r1, [pc, #64]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb0:	f000 f824 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	490b      	ldr	r1, [pc, #44]	; (8003ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_ClockConfig+0x1fc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fd fcdf 	bl	8001998 <HAL_InitTick>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fde:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	080084a8 	.word	0x080084a8
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	20000004 	.word	0x20000004

08003ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400a:	4b3e      	ldr	r3, [pc, #248]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004014:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x34>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d121      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d11e      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004030:	4b34      	ldr	r3, [pc, #208]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e005      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800404c:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004058:	4a2b      	ldr	r2, [pc, #172]	; (8004108 <HAL_RCC_GetSysClockFreq+0x10c>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d102      	bne.n	800407a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_RCC_GetSysClockFreq+0x110>)
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e004      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d101      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004080:	4b23      	ldr	r3, [pc, #140]	; (8004110 <HAL_RCC_GetSysClockFreq+0x114>)
 8004082:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d134      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800408a:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d003      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0xac>
 80040a0:	e005      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_RCC_GetSysClockFreq+0x110>)
 80040a4:	617b      	str	r3, [r7, #20]
      break;
 80040a6:	e005      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_RCC_GetSysClockFreq+0x114>)
 80040aa:	617b      	str	r3, [r7, #20]
      break;
 80040ac:	e002      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	617b      	str	r3, [r7, #20]
      break;
 80040b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	3301      	adds	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	fb03 f202 	mul.w	r2, r3, r2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	0e5b      	lsrs	r3, r3, #25
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	3301      	adds	r3, #1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040f4:	69bb      	ldr	r3, [r7, #24]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	; 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	080084c0 	.word	0x080084c0
 800410c:	00f42400 	.word	0x00f42400
 8004110:	007a1200 	.word	0x007a1200

08004114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_RCC_GetHCLKFreq+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000000 	.word	0x20000000

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004130:	f7ff fff0 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	080084b8 	.word	0x080084b8

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800415c:	f7ff ffda 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0adb      	lsrs	r3, r3, #11
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4904      	ldr	r1, [pc, #16]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	080084b8 	.word	0x080084b8

08004184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800419c:	f7ff f9b6 	bl	800350c <HAL_PWREx_GetVoltageRange>
 80041a0:	6178      	str	r0, [r7, #20]
 80041a2:	e014      	b.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	4a24      	ldr	r2, [pc, #144]	; (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6593      	str	r3, [r2, #88]	; 0x58
 80041b0:	4b22      	ldr	r3, [pc, #136]	; (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041bc:	f7ff f9a6 	bl	800350c <HAL_PWREx_GetVoltageRange>
 80041c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d10b      	bne.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d919      	bls.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2ba0      	cmp	r3, #160	; 0xa0
 80041e0:	d902      	bls.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e2:	2302      	movs	r3, #2
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e013      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e8:	2301      	movs	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	e010      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d902      	bls.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041f4:	2303      	movs	r3, #3
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e00a      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d102      	bne.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004200:	2302      	movs	r3, #2
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e004      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b70      	cmp	r3, #112	; 0x70
 800420a:	d101      	bne.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800420c:	2301      	movs	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 0207 	bic.w	r2, r3, #7
 8004218:	4909      	ldr	r1, [pc, #36]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	429a      	cmp	r2, r3
 800422c:	d001      	beq.n	8004232 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	40022000 	.word	0x40022000

08004244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800424c:	2300      	movs	r3, #0
 800424e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004250:	2300      	movs	r3, #0
 8004252:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425c:	2b00      	cmp	r3, #0
 800425e:	d031      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004268:	d01a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800426a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800426e:	d814      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004278:	d10f      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800427a:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4a5c      	ldr	r2, [pc, #368]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004286:	e00c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fa22 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	74fb      	strb	r3, [r7, #19]
      break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80042a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a8:	4b51      	ldr	r3, [pc, #324]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	494e      	ldr	r1, [pc, #312]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 809e 	beq.w	800440e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042d6:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	4a3f      	ldr	r2, [pc, #252]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6593      	str	r3, [r2, #88]	; 0x58
 80042f8:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004304:	2301      	movs	r3, #1
 8004306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004308:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a39      	ldr	r2, [pc, #228]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004314:	f7fd fb90 	bl	8001a38 <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800431a:	e009      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fd fb8c 	bl	8001a38 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	74fb      	strb	r3, [r7, #19]
        break;
 800432e:	e005      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004330:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d15a      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01e      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	429a      	cmp	r2, r3
 800435c:	d019      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800436a:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800438a:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d016      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd fb4c 	bl	8001a38 <HAL_GetTick>
 80043a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	e00b      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fb48 	bl	8001a38 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d902      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	74fb      	strb	r3, [r7, #19]
            break;
 80043ba:	e006      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ec      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80043ca:	7cfb      	ldrb	r3, [r7, #19]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	4904      	ldr	r1, [pc, #16]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043e6:	e009      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
 80043ec:	e006      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043fc:	7c7b      	ldrb	r3, [r7, #17]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d105      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004402:	4b8d      	ldr	r3, [pc, #564]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	4a8c      	ldr	r2, [pc, #560]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800441a:	4b87      	ldr	r3, [pc, #540]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	f023 0203 	bic.w	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4983      	ldr	r1, [pc, #524]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800443c:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f023 020c 	bic.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	497b      	ldr	r1, [pc, #492]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800445e:	4b76      	ldr	r3, [pc, #472]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	4972      	ldr	r1, [pc, #456]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004480:	4b6d      	ldr	r3, [pc, #436]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	496a      	ldr	r1, [pc, #424]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044a2:	4b65      	ldr	r3, [pc, #404]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	4961      	ldr	r1, [pc, #388]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044c4:	4b5c      	ldr	r3, [pc, #368]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	4959      	ldr	r1, [pc, #356]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e6:	4b54      	ldr	r3, [pc, #336]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4950      	ldr	r1, [pc, #320]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004508:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	4948      	ldr	r1, [pc, #288]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800452a:	4b43      	ldr	r3, [pc, #268]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	493f      	ldr	r1, [pc, #252]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d028      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800454c:	4b3a      	ldr	r3, [pc, #232]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	4937      	ldr	r1, [pc, #220]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456a:	d106      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800456c:	4b32      	ldr	r3, [pc, #200]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a31      	ldr	r2, [pc, #196]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004576:	60d3      	str	r3, [r2, #12]
 8004578:	e011      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004582:	d10c      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f8a4 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d028      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045aa:	4b23      	ldr	r3, [pc, #140]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b8:	491f      	ldr	r1, [pc, #124]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4a1a      	ldr	r2, [pc, #104]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d4:	60d3      	str	r3, [r2, #12]
 80045d6:	e011      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f875 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02b      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004616:	4908      	ldr	r1, [pc, #32]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004626:	d109      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004628:	4b03      	ldr	r3, [pc, #12]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4a02      	ldr	r2, [pc, #8]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800462e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004632:	60d3      	str	r3, [r2, #12]
 8004634:	e014      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004644:	d10c      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	2101      	movs	r1, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f843 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	4916      	ldr	r1, [pc, #88]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468a:	d10c      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2102      	movs	r1, #2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f820 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	4904      	ldr	r1, [pc, #16]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000

080046d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046e6:	4b74      	ldr	r3, [pc, #464]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d018      	beq.n	8004724 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f2:	4b71      	ldr	r3, [pc, #452]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0203 	and.w	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d10d      	bne.n	800471e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
       ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800470a:	4b6b      	ldr	r3, [pc, #428]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
       ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d047      	beq.n	80047ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	e044      	b.n	80047ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d018      	beq.n	800475e <RCCEx_PLLSAI1_Config+0x86>
 800472c:	2b03      	cmp	r3, #3
 800472e:	d825      	bhi.n	800477c <RCCEx_PLLSAI1_Config+0xa4>
 8004730:	2b01      	cmp	r3, #1
 8004732:	d002      	beq.n	800473a <RCCEx_PLLSAI1_Config+0x62>
 8004734:	2b02      	cmp	r3, #2
 8004736:	d009      	beq.n	800474c <RCCEx_PLLSAI1_Config+0x74>
 8004738:	e020      	b.n	800477c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800473a:	4b5f      	ldr	r3, [pc, #380]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d11d      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474a:	e01a      	b.n	8004782 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800474c:	4b5a      	ldr	r3, [pc, #360]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d116      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475c:	e013      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800475e:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476a:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800477a:	e006      	b.n	800478a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e004      	b.n	800478c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
    }

    if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004792:	4b49      	ldr	r3, [pc, #292]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	430b      	orrs	r3, r1
 80047a8:	4943      	ldr	r1, [pc, #268]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d17c      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b4:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c0:	f7fd f93a 	bl	8001a38 <HAL_GetTick>
 80047c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047c6:	e009      	b.n	80047dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c8:	f7fd f936 	bl	8001a38 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d902      	bls.n	80047dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	73fb      	strb	r3, [r7, #15]
        break;
 80047da:	e005      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047dc:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1ef      	bne.n	80047c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d15f      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d110      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f4:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80047fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6892      	ldr	r2, [r2, #8]
 8004804:	0211      	lsls	r1, r2, #8
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68d2      	ldr	r2, [r2, #12]
 800480a:	06d2      	lsls	r2, r2, #27
 800480c:	430a      	orrs	r2, r1
 800480e:	492a      	ldr	r1, [pc, #168]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	610b      	str	r3, [r1, #16]
 8004814:	e027      	b.n	8004866 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d112      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6892      	ldr	r2, [r2, #8]
 800482c:	0211      	lsls	r1, r2, #8
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6912      	ldr	r2, [r2, #16]
 8004832:	0852      	lsrs	r2, r2, #1
 8004834:	3a01      	subs	r2, #1
 8004836:	0552      	lsls	r2, r2, #21
 8004838:	430a      	orrs	r2, r1
 800483a:	491f      	ldr	r1, [pc, #124]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	610b      	str	r3, [r1, #16]
 8004840:	e011      	b.n	8004866 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004842:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800484a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	0211      	lsls	r1, r2, #8
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6952      	ldr	r2, [r2, #20]
 8004858:	0852      	lsrs	r2, r2, #1
 800485a:	3a01      	subs	r2, #1
 800485c:	0652      	lsls	r2, r2, #25
 800485e:	430a      	orrs	r2, r1
 8004860:	4915      	ldr	r1, [pc, #84]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004870:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fd f8e1 	bl	8001a38 <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004878:	e009      	b.n	800488e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800487a:	f7fd f8dd 	bl	8001a38 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	73fb      	strb	r3, [r7, #15]
          break;
 800488c:	e005      	b.n	800489a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ef      	beq.n	800487a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	4903      	ldr	r1, [pc, #12]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e049      	b.n	8004962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc fe7a 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f000 fa28 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01b      	beq.n	80049ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0202 	mvn.w	r2, #2
 800499e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f9ad 	bl	8004d14 <HAL_TIM_IC_CaptureCallback>
 80049ba:	e005      	b.n	80049c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f99f 	bl	8004d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f9b0 	bl	8004d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01b      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0204 	mvn.w	r2, #4
 80049ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f987 	bl	8004d14 <HAL_TIM_IC_CaptureCallback>
 8004a06:	e005      	b.n	8004a14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f979 	bl	8004d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f98a 	bl	8004d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01b      	beq.n	8004a66 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0208 	mvn.w	r2, #8
 8004a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f961 	bl	8004d14 <HAL_TIM_IC_CaptureCallback>
 8004a52:	e005      	b.n	8004a60 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f953 	bl	8004d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f964 	bl	8004d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01b      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0210 	mvn.w	r2, #16
 8004a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2208      	movs	r2, #8
 8004a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f93b 	bl	8004d14 <HAL_TIM_IC_CaptureCallback>
 8004a9e:	e005      	b.n	8004aac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f92d 	bl	8004d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f93e 	bl	8004d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00c      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0201 	mvn.w	r2, #1
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fc fc83 	bl	80013dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00c      	beq.n	8004afa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa99 	bl	800502c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa91 	bl	8005040 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8fd 	bl	8004d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0220 	mvn.w	r2, #32
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa59 	bl	8005018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_ConfigClockSource+0x1c>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e0b6      	b.n	8004cf8 <HAL_TIM_ConfigClockSource+0x18a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc6:	d03e      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0xd8>
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bcc:	f200 8087 	bhi.w	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd4:	f000 8086 	beq.w	8004ce4 <HAL_TIM_ConfigClockSource+0x176>
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d87f      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004bde:	2b70      	cmp	r3, #112	; 0x70
 8004be0:	d01a      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0xaa>
 8004be2:	2b70      	cmp	r3, #112	; 0x70
 8004be4:	d87b      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004be6:	2b60      	cmp	r3, #96	; 0x60
 8004be8:	d050      	beq.n	8004c8c <HAL_TIM_ConfigClockSource+0x11e>
 8004bea:	2b60      	cmp	r3, #96	; 0x60
 8004bec:	d877      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004bee:	2b50      	cmp	r3, #80	; 0x50
 8004bf0:	d03c      	beq.n	8004c6c <HAL_TIM_ConfigClockSource+0xfe>
 8004bf2:	2b50      	cmp	r3, #80	; 0x50
 8004bf4:	d873      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d058      	beq.n	8004cac <HAL_TIM_ConfigClockSource+0x13e>
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d86f      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004bfe:	2b30      	cmp	r3, #48	; 0x30
 8004c00:	d064      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0x15e>
 8004c02:	2b30      	cmp	r3, #48	; 0x30
 8004c04:	d86b      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d060      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0x15e>
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d867      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d05c      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0x15e>
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d05a      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0x15e>
 8004c16:	e062      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c28:	f000 f970 	bl	8004f0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	609a      	str	r2, [r3, #8]
      break;
 8004c44:	e04f      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c56:	f000 f959 	bl	8004f0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c68:	609a      	str	r2, [r3, #8]
      break;
 8004c6a:	e03c      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f000 f8cd 	bl	8004e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2150      	movs	r1, #80	; 0x50
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f926 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004c8a:	e02c      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f000 f8ec 	bl	8004e76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2160      	movs	r1, #96	; 0x60
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f916 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004caa:	e01c      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f000 f8ad 	bl	8004e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2140      	movs	r1, #64	; 0x40
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f906 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004cca:	e00c      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f000 f8fd 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004cdc:	e003      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ce4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <TIM_Base_SetConfig+0xbc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_Base_SetConfig+0x20>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d108      	bne.n	8004d82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <TIM_Base_SetConfig+0xbc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_Base_SetConfig+0x52>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d007      	beq.n	8004da2 <TIM_Base_SetConfig+0x52>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <TIM_Base_SetConfig+0xc0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0x52>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <TIM_Base_SetConfig+0xc4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <TIM_Base_SetConfig+0xbc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0xa0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a0b      	ldr	r2, [pc, #44]	; (8004e10 <TIM_Base_SetConfig+0xc0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0xa0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <TIM_Base_SetConfig+0xc4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d103      	bne.n	8004df8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400

08004e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f023 0201 	bic.w	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f023 030a 	bic.w	r3, r3, #10
 8004e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0210 	bic.w	r2, r3, #16
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	031b      	lsls	r3, r3, #12
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f043 0307 	orr.w	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	021a      	lsls	r2, r3, #8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	609a      	str	r2, [r3, #8]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e04f      	b.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d108      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a14      	ldr	r2, [pc, #80]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d10c      	bne.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40014000 	.word	0x40014000

08005018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e040      	b.n	80050e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc fad4 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fb0c 	bl	80056b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f8af 	bl	8005204 <UART_SetConfig>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e01b      	b.n	80050e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fb8b 	bl	80057fc <UART_CheckIdleState>
 80050e6:	4603      	mov	r3, r0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005104:	2b20      	cmp	r3, #32
 8005106:	d178      	bne.n	80051fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Transmit+0x24>
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e071      	b.n	80051fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2221      	movs	r2, #33	; 0x21
 8005124:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005126:	f7fc fc87 	bl	8001a38 <HAL_GetTick>
 800512a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005144:	d108      	bne.n	8005158 <HAL_UART_Transmit+0x68>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e003      	b.n	8005160 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005160:	e030      	b.n	80051c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fbed 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e03c      	b.n	80051fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005194:	b292      	uxth	r2, r2
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3302      	adds	r3, #2
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e008      	b.n	80051b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	781a      	ldrb	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	b292      	uxth	r2, r2
 80051aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3301      	adds	r3, #1
 80051b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1c8      	bne.n	8005162 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2200      	movs	r2, #0
 80051d8:	2140      	movs	r1, #64	; 0x40
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fbb6 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e005      	b.n	80051fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e000      	b.n	80051fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80051fa:	2302      	movs	r3, #2
  }
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b08a      	sub	sp, #40	; 0x28
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	431a      	orrs	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	431a      	orrs	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	4313      	orrs	r3, r2
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b9e      	ldr	r3, [pc, #632]	; (80054ac <UART_SetConfig+0x2a8>)
 8005234:	4013      	ands	r3, r2
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523c:	430b      	orrs	r3, r1
 800523e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a93      	ldr	r2, [pc, #588]	; (80054b0 <UART_SetConfig+0x2ac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	4313      	orrs	r3, r2
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a8a      	ldr	r2, [pc, #552]	; (80054b4 <UART_SetConfig+0x2b0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d126      	bne.n	80052dc <UART_SetConfig+0xd8>
 800528e:	4b8a      	ldr	r3, [pc, #552]	; (80054b8 <UART_SetConfig+0x2b4>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b03      	cmp	r3, #3
 800529a:	d81b      	bhi.n	80052d4 <UART_SetConfig+0xd0>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0xa0>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c5 	.word	0x080052c5
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	e0ab      	b.n	8005414 <UART_SetConfig+0x210>
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e0a7      	b.n	8005414 <UART_SetConfig+0x210>
 80052c4:	2304      	movs	r3, #4
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e0a3      	b.n	8005414 <UART_SetConfig+0x210>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e09f      	b.n	8005414 <UART_SetConfig+0x210>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e09b      	b.n	8005414 <UART_SetConfig+0x210>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a76      	ldr	r2, [pc, #472]	; (80054bc <UART_SetConfig+0x2b8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d138      	bne.n	8005358 <UART_SetConfig+0x154>
 80052e6:	4b74      	ldr	r3, [pc, #464]	; (80054b8 <UART_SetConfig+0x2b4>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d82d      	bhi.n	8005350 <UART_SetConfig+0x14c>
 80052f4:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <UART_SetConfig+0xf8>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005351 	.word	0x08005351
 8005304:	08005351 	.word	0x08005351
 8005308:	08005351 	.word	0x08005351
 800530c:	08005341 	.word	0x08005341
 8005310:	08005351 	.word	0x08005351
 8005314:	08005351 	.word	0x08005351
 8005318:	08005351 	.word	0x08005351
 800531c:	08005339 	.word	0x08005339
 8005320:	08005351 	.word	0x08005351
 8005324:	08005351 	.word	0x08005351
 8005328:	08005351 	.word	0x08005351
 800532c:	08005349 	.word	0x08005349
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e06d      	b.n	8005414 <UART_SetConfig+0x210>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e069      	b.n	8005414 <UART_SetConfig+0x210>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e065      	b.n	8005414 <UART_SetConfig+0x210>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e061      	b.n	8005414 <UART_SetConfig+0x210>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e05d      	b.n	8005414 <UART_SetConfig+0x210>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a58      	ldr	r2, [pc, #352]	; (80054c0 <UART_SetConfig+0x2bc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d125      	bne.n	80053ae <UART_SetConfig+0x1aa>
 8005362:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <UART_SetConfig+0x2b4>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d016      	beq.n	800539e <UART_SetConfig+0x19a>
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d818      	bhi.n	80053a6 <UART_SetConfig+0x1a2>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d00a      	beq.n	800538e <UART_SetConfig+0x18a>
 8005378:	2b20      	cmp	r3, #32
 800537a:	d814      	bhi.n	80053a6 <UART_SetConfig+0x1a2>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <UART_SetConfig+0x182>
 8005380:	2b10      	cmp	r3, #16
 8005382:	d008      	beq.n	8005396 <UART_SetConfig+0x192>
 8005384:	e00f      	b.n	80053a6 <UART_SetConfig+0x1a2>
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538c:	e042      	b.n	8005414 <UART_SetConfig+0x210>
 800538e:	2302      	movs	r3, #2
 8005390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005394:	e03e      	b.n	8005414 <UART_SetConfig+0x210>
 8005396:	2304      	movs	r3, #4
 8005398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539c:	e03a      	b.n	8005414 <UART_SetConfig+0x210>
 800539e:	2308      	movs	r3, #8
 80053a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a4:	e036      	b.n	8005414 <UART_SetConfig+0x210>
 80053a6:	2310      	movs	r3, #16
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ac:	e032      	b.n	8005414 <UART_SetConfig+0x210>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3f      	ldr	r2, [pc, #252]	; (80054b0 <UART_SetConfig+0x2ac>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d12a      	bne.n	800540e <UART_SetConfig+0x20a>
 80053b8:	4b3f      	ldr	r3, [pc, #252]	; (80054b8 <UART_SetConfig+0x2b4>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c6:	d01a      	beq.n	80053fe <UART_SetConfig+0x1fa>
 80053c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053cc:	d81b      	bhi.n	8005406 <UART_SetConfig+0x202>
 80053ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d2:	d00c      	beq.n	80053ee <UART_SetConfig+0x1ea>
 80053d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d8:	d815      	bhi.n	8005406 <UART_SetConfig+0x202>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <UART_SetConfig+0x1e2>
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d008      	beq.n	80053f6 <UART_SetConfig+0x1f2>
 80053e4:	e00f      	b.n	8005406 <UART_SetConfig+0x202>
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ec:	e012      	b.n	8005414 <UART_SetConfig+0x210>
 80053ee:	2302      	movs	r3, #2
 80053f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f4:	e00e      	b.n	8005414 <UART_SetConfig+0x210>
 80053f6:	2304      	movs	r3, #4
 80053f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fc:	e00a      	b.n	8005414 <UART_SetConfig+0x210>
 80053fe:	2308      	movs	r3, #8
 8005400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005404:	e006      	b.n	8005414 <UART_SetConfig+0x210>
 8005406:	2310      	movs	r3, #16
 8005408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540c:	e002      	b.n	8005414 <UART_SetConfig+0x210>
 800540e:	2310      	movs	r3, #16
 8005410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <UART_SetConfig+0x2ac>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f040 808a 	bne.w	8005534 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005424:	2b08      	cmp	r3, #8
 8005426:	d824      	bhi.n	8005472 <UART_SetConfig+0x26e>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x22c>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005455 	.word	0x08005455
 8005434:	08005473 	.word	0x08005473
 8005438:	0800545d 	.word	0x0800545d
 800543c:	08005473 	.word	0x08005473
 8005440:	08005463 	.word	0x08005463
 8005444:	08005473 	.word	0x08005473
 8005448:	08005473 	.word	0x08005473
 800544c:	08005473 	.word	0x08005473
 8005450:	0800546b 	.word	0x0800546b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fe fe6a 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e010      	b.n	800547e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545c:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <UART_SetConfig+0x2c0>)
 800545e:	61fb      	str	r3, [r7, #28]
        break;
 8005460:	e00d      	b.n	800547e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005462:	f7fe fdcb 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8005466:	61f8      	str	r0, [r7, #28]
        break;
 8005468:	e009      	b.n	800547e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
        break;
 8005470:	e005      	b.n	800547e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800547c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8109 	beq.w	8005698 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	429a      	cmp	r2, r3
 8005494:	d305      	bcc.n	80054a2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d912      	bls.n	80054c8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054a8:	e0f6      	b.n	8005698 <UART_SetConfig+0x494>
 80054aa:	bf00      	nop
 80054ac:	efff69f3 	.word	0xefff69f3
 80054b0:	40008000 	.word	0x40008000
 80054b4:	40013800 	.word	0x40013800
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40004400 	.word	0x40004400
 80054c0:	40004800 	.word	0x40004800
 80054c4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2200      	movs	r2, #0
 80054cc:	461c      	mov	r4, r3
 80054ce:	4615      	mov	r5, r2
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	022b      	lsls	r3, r5, #8
 80054da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054de:	0222      	lsls	r2, r4, #8
 80054e0:	68f9      	ldr	r1, [r7, #12]
 80054e2:	6849      	ldr	r1, [r1, #4]
 80054e4:	0849      	lsrs	r1, r1, #1
 80054e6:	2000      	movs	r0, #0
 80054e8:	4688      	mov	r8, r1
 80054ea:	4681      	mov	r9, r0
 80054ec:	eb12 0a08 	adds.w	sl, r2, r8
 80054f0:	eb43 0b09 	adc.w	fp, r3, r9
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005502:	4650      	mov	r0, sl
 8005504:	4659      	mov	r1, fp
 8005506:	f7fb fb4f 	bl	8000ba8 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4613      	mov	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005518:	d308      	bcc.n	800552c <UART_SetConfig+0x328>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d204      	bcs.n	800552c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	e0b5      	b.n	8005698 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005532:	e0b1      	b.n	8005698 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553c:	d15d      	bne.n	80055fa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800553e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005542:	2b08      	cmp	r3, #8
 8005544:	d827      	bhi.n	8005596 <UART_SetConfig+0x392>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x348>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	08005597 	.word	0x08005597
 800555c:	08005587 	.word	0x08005587
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
 800556c:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fe fddc 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005574:	61f8      	str	r0, [r7, #28]
        break;
 8005576:	e014      	b.n	80055a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fe fdee 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 800557c:	61f8      	str	r0, [r7, #28]
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b4c      	ldr	r3, [pc, #304]	; (80056b4 <UART_SetConfig+0x4b0>)
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fe fd39 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 800558a:	61f8      	str	r0, [r7, #28]
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d077      	beq.n	8005698 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	005a      	lsls	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	441a      	add	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d916      	bls.n	80055f2 <UART_SetConfig+0x3ee>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ca:	d212      	bcs.n	80055f2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f023 030f 	bic.w	r3, r3, #15
 80055d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	8afa      	ldrh	r2, [r7, #22]
 80055ee:	60da      	str	r2, [r3, #12]
 80055f0:	e052      	b.n	8005698 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055f8:	e04e      	b.n	8005698 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d827      	bhi.n	8005652 <UART_SetConfig+0x44e>
 8005602:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <UART_SetConfig+0x404>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005635 	.word	0x08005635
 8005610:	0800563d 	.word	0x0800563d
 8005614:	08005653 	.word	0x08005653
 8005618:	08005643 	.word	0x08005643
 800561c:	08005653 	.word	0x08005653
 8005620:	08005653 	.word	0x08005653
 8005624:	08005653 	.word	0x08005653
 8005628:	0800564b 	.word	0x0800564b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800562c:	f7fe fd7e 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005630:	61f8      	str	r0, [r7, #28]
        break;
 8005632:	e014      	b.n	800565e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe fd90 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8005638:	61f8      	str	r0, [r7, #28]
        break;
 800563a:	e010      	b.n	800565e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800563c:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <UART_SetConfig+0x4b0>)
 800563e:	61fb      	str	r3, [r7, #28]
        break;
 8005640:	e00d      	b.n	800565e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005642:	f7fe fcdb 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8005646:	61f8      	str	r0, [r7, #28]
        break;
 8005648:	e009      	b.n	800565e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	61fb      	str	r3, [r7, #28]
        break;
 8005650:	e005      	b.n	800565e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800565c:	bf00      	nop
    }

    if (pclk != 0U)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d019      	beq.n	8005698 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	085a      	lsrs	r2, r3, #1
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d909      	bls.n	8005692 <UART_SetConfig+0x48e>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d205      	bcs.n	8005692 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	e002      	b.n	8005698 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3728      	adds	r7, #40	; 0x28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	00f42400 	.word	0x00f42400

080056b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01a      	beq.n	80057ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b6:	d10a      	bne.n	80057ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
  }
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b098      	sub	sp, #96	; 0x60
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800580c:	f7fc f914 	bl	8001a38 <HAL_GetTick>
 8005810:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d12e      	bne.n	800587e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005828:	2200      	movs	r2, #0
 800582a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f88c 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d021      	beq.n	800587e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800584e:	653b      	str	r3, [r7, #80]	; 0x50
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005858:	647b      	str	r3, [r7, #68]	; 0x44
 800585a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800585e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e062      	b.n	8005944 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d149      	bne.n	8005920 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f856 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03c      	beq.n	8005920 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	623b      	str	r3, [r7, #32]
   return(result);
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30
 80058c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e6      	bne.n	80058a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f8:	61fa      	str	r2, [r7, #28]
 80058fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	617b      	str	r3, [r7, #20]
   return(result);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e5      	bne.n	80058d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e011      	b.n	8005944 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3758      	adds	r7, #88	; 0x58
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595c:	e049      	b.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005964:	d045      	beq.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005966:	f7fc f867 	bl	8001a38 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <UART_WaitOnFlagUntilTimeout+0x30>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e048      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d031      	beq.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b08      	cmp	r3, #8
 800599a:	d110      	bne.n	80059be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2208      	movs	r2, #8
 80059a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f838 	bl	8005a1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2208      	movs	r2, #8
 80059ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e029      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059cc:	d111      	bne.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f81e 	bl	8005a1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e00f      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d0a6      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b095      	sub	sp, #84	; 0x54
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	643b      	str	r3, [r7, #64]	; 0x40
 8005a42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e6      	bne.n	8005a22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d118      	bne.n	8005ac2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f023 0310 	bic.w	r3, r3, #16
 8005aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	613b      	str	r3, [r7, #16]
   return(result);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e6      	bne.n	8005a90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ad6:	bf00      	nop
 8005ad8:	3754      	adds	r7, #84	; 0x54
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <__cvt>:
 8005ae2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae6:	ec55 4b10 	vmov	r4, r5, d0
 8005aea:	2d00      	cmp	r5, #0
 8005aec:	460e      	mov	r6, r1
 8005aee:	4619      	mov	r1, r3
 8005af0:	462b      	mov	r3, r5
 8005af2:	bfbb      	ittet	lt
 8005af4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005af8:	461d      	movlt	r5, r3
 8005afa:	2300      	movge	r3, #0
 8005afc:	232d      	movlt	r3, #45	; 0x2d
 8005afe:	700b      	strb	r3, [r1, #0]
 8005b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b06:	4691      	mov	r9, r2
 8005b08:	f023 0820 	bic.w	r8, r3, #32
 8005b0c:	bfbc      	itt	lt
 8005b0e:	4622      	movlt	r2, r4
 8005b10:	4614      	movlt	r4, r2
 8005b12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b16:	d005      	beq.n	8005b24 <__cvt+0x42>
 8005b18:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b1c:	d100      	bne.n	8005b20 <__cvt+0x3e>
 8005b1e:	3601      	adds	r6, #1
 8005b20:	2102      	movs	r1, #2
 8005b22:	e000      	b.n	8005b26 <__cvt+0x44>
 8005b24:	2103      	movs	r1, #3
 8005b26:	ab03      	add	r3, sp, #12
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	ab02      	add	r3, sp, #8
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	ec45 4b10 	vmov	d0, r4, r5
 8005b32:	4653      	mov	r3, sl
 8005b34:	4632      	mov	r2, r6
 8005b36:	f000 fe47 	bl	80067c8 <_dtoa_r>
 8005b3a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b3e:	4607      	mov	r7, r0
 8005b40:	d102      	bne.n	8005b48 <__cvt+0x66>
 8005b42:	f019 0f01 	tst.w	r9, #1
 8005b46:	d022      	beq.n	8005b8e <__cvt+0xac>
 8005b48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b4c:	eb07 0906 	add.w	r9, r7, r6
 8005b50:	d110      	bne.n	8005b74 <__cvt+0x92>
 8005b52:	783b      	ldrb	r3, [r7, #0]
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d10a      	bne.n	8005b6e <__cvt+0x8c>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4629      	mov	r1, r5
 8005b60:	f7fa ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b64:	b918      	cbnz	r0, 8005b6e <__cvt+0x8c>
 8005b66:	f1c6 0601 	rsb	r6, r6, #1
 8005b6a:	f8ca 6000 	str.w	r6, [sl]
 8005b6e:	f8da 3000 	ldr.w	r3, [sl]
 8005b72:	4499      	add	r9, r3
 8005b74:	2200      	movs	r2, #0
 8005b76:	2300      	movs	r3, #0
 8005b78:	4620      	mov	r0, r4
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	f7fa ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b80:	b108      	cbz	r0, 8005b86 <__cvt+0xa4>
 8005b82:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b86:	2230      	movs	r2, #48	; 0x30
 8005b88:	9b03      	ldr	r3, [sp, #12]
 8005b8a:	454b      	cmp	r3, r9
 8005b8c:	d307      	bcc.n	8005b9e <__cvt+0xbc>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b92:	1bdb      	subs	r3, r3, r7
 8005b94:	4638      	mov	r0, r7
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	b004      	add	sp, #16
 8005b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9e:	1c59      	adds	r1, r3, #1
 8005ba0:	9103      	str	r1, [sp, #12]
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e7f0      	b.n	8005b88 <__cvt+0xa6>

08005ba6 <__exponent>:
 8005ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2900      	cmp	r1, #0
 8005bac:	bfb8      	it	lt
 8005bae:	4249      	neglt	r1, r1
 8005bb0:	f803 2b02 	strb.w	r2, [r3], #2
 8005bb4:	bfb4      	ite	lt
 8005bb6:	222d      	movlt	r2, #45	; 0x2d
 8005bb8:	222b      	movge	r2, #43	; 0x2b
 8005bba:	2909      	cmp	r1, #9
 8005bbc:	7042      	strb	r2, [r0, #1]
 8005bbe:	dd2a      	ble.n	8005c16 <__exponent+0x70>
 8005bc0:	f10d 0207 	add.w	r2, sp, #7
 8005bc4:	4617      	mov	r7, r2
 8005bc6:	260a      	movs	r6, #10
 8005bc8:	4694      	mov	ip, r2
 8005bca:	fb91 f5f6 	sdiv	r5, r1, r6
 8005bce:	fb06 1415 	mls	r4, r6, r5, r1
 8005bd2:	3430      	adds	r4, #48	; 0x30
 8005bd4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005bd8:	460c      	mov	r4, r1
 8005bda:	2c63      	cmp	r4, #99	; 0x63
 8005bdc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005be0:	4629      	mov	r1, r5
 8005be2:	dcf1      	bgt.n	8005bc8 <__exponent+0x22>
 8005be4:	3130      	adds	r1, #48	; 0x30
 8005be6:	f1ac 0402 	sub.w	r4, ip, #2
 8005bea:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bee:	1c41      	adds	r1, r0, #1
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	42ba      	cmp	r2, r7
 8005bf4:	d30a      	bcc.n	8005c0c <__exponent+0x66>
 8005bf6:	f10d 0209 	add.w	r2, sp, #9
 8005bfa:	eba2 020c 	sub.w	r2, r2, ip
 8005bfe:	42bc      	cmp	r4, r7
 8005c00:	bf88      	it	hi
 8005c02:	2200      	movhi	r2, #0
 8005c04:	4413      	add	r3, r2
 8005c06:	1a18      	subs	r0, r3, r0
 8005c08:	b003      	add	sp, #12
 8005c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005c10:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005c14:	e7ed      	b.n	8005bf2 <__exponent+0x4c>
 8005c16:	2330      	movs	r3, #48	; 0x30
 8005c18:	3130      	adds	r1, #48	; 0x30
 8005c1a:	7083      	strb	r3, [r0, #2]
 8005c1c:	70c1      	strb	r1, [r0, #3]
 8005c1e:	1d03      	adds	r3, r0, #4
 8005c20:	e7f1      	b.n	8005c06 <__exponent+0x60>
	...

08005c24 <_printf_float>:
 8005c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	ed2d 8b02 	vpush	{d8}
 8005c2c:	b08d      	sub	sp, #52	; 0x34
 8005c2e:	460c      	mov	r4, r1
 8005c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c34:	4616      	mov	r6, r2
 8005c36:	461f      	mov	r7, r3
 8005c38:	4605      	mov	r5, r0
 8005c3a:	f000 fcc7 	bl	80065cc <_localeconv_r>
 8005c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8005c42:	4650      	mov	r0, sl
 8005c44:	f7fa fb14 	bl	8000270 <strlen>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	9305      	str	r3, [sp, #20]
 8005c50:	f8d8 3000 	ldr.w	r3, [r8]
 8005c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c58:	3307      	adds	r3, #7
 8005c5a:	f023 0307 	bic.w	r3, r3, #7
 8005c5e:	f103 0208 	add.w	r2, r3, #8
 8005c62:	f8c8 2000 	str.w	r2, [r8]
 8005c66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c6e:	9307      	str	r3, [sp, #28]
 8005c70:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c74:	ee08 0a10 	vmov	s16, r0
 8005c78:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c80:	4b9e      	ldr	r3, [pc, #632]	; (8005efc <_printf_float+0x2d8>)
 8005c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c86:	f7fa ff51 	bl	8000b2c <__aeabi_dcmpun>
 8005c8a:	bb88      	cbnz	r0, 8005cf0 <_printf_float+0xcc>
 8005c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c90:	4b9a      	ldr	r3, [pc, #616]	; (8005efc <_printf_float+0x2d8>)
 8005c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c96:	f7fa ff2b 	bl	8000af0 <__aeabi_dcmple>
 8005c9a:	bb48      	cbnz	r0, 8005cf0 <_printf_float+0xcc>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	f7fa ff1a 	bl	8000adc <__aeabi_dcmplt>
 8005ca8:	b110      	cbz	r0, 8005cb0 <_printf_float+0x8c>
 8005caa:	232d      	movs	r3, #45	; 0x2d
 8005cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb0:	4a93      	ldr	r2, [pc, #588]	; (8005f00 <_printf_float+0x2dc>)
 8005cb2:	4b94      	ldr	r3, [pc, #592]	; (8005f04 <_printf_float+0x2e0>)
 8005cb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005cb8:	bf94      	ite	ls
 8005cba:	4690      	movls	r8, r2
 8005cbc:	4698      	movhi	r8, r3
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	6123      	str	r3, [r4, #16]
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	f04f 0900 	mov.w	r9, #0
 8005cce:	9700      	str	r7, [sp, #0]
 8005cd0:	4633      	mov	r3, r6
 8005cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f000 f9da 	bl	8006090 <_printf_common>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f040 8090 	bne.w	8005e02 <_printf_float+0x1de>
 8005ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ce6:	b00d      	add	sp, #52	; 0x34
 8005ce8:	ecbd 8b02 	vpop	{d8}
 8005cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	f7fa ff18 	bl	8000b2c <__aeabi_dcmpun>
 8005cfc:	b140      	cbz	r0, 8005d10 <_printf_float+0xec>
 8005cfe:	464b      	mov	r3, r9
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bfbc      	itt	lt
 8005d04:	232d      	movlt	r3, #45	; 0x2d
 8005d06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d0a:	4a7f      	ldr	r2, [pc, #508]	; (8005f08 <_printf_float+0x2e4>)
 8005d0c:	4b7f      	ldr	r3, [pc, #508]	; (8005f0c <_printf_float+0x2e8>)
 8005d0e:	e7d1      	b.n	8005cb4 <_printf_float+0x90>
 8005d10:	6863      	ldr	r3, [r4, #4]
 8005d12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d16:	9206      	str	r2, [sp, #24]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	d13f      	bne.n	8005d9c <_printf_float+0x178>
 8005d1c:	2306      	movs	r3, #6
 8005d1e:	6063      	str	r3, [r4, #4]
 8005d20:	9b05      	ldr	r3, [sp, #20]
 8005d22:	6861      	ldr	r1, [r4, #4]
 8005d24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	ab0a      	add	r3, sp, #40	; 0x28
 8005d2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d32:	ab09      	add	r3, sp, #36	; 0x24
 8005d34:	ec49 8b10 	vmov	d0, r8, r9
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	6022      	str	r2, [r4, #0]
 8005d3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d40:	4628      	mov	r0, r5
 8005d42:	f7ff fece 	bl	8005ae2 <__cvt>
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d4a:	2b47      	cmp	r3, #71	; 0x47
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	d108      	bne.n	8005d62 <_printf_float+0x13e>
 8005d50:	1cc8      	adds	r0, r1, #3
 8005d52:	db02      	blt.n	8005d5a <_printf_float+0x136>
 8005d54:	6863      	ldr	r3, [r4, #4]
 8005d56:	4299      	cmp	r1, r3
 8005d58:	dd41      	ble.n	8005dde <_printf_float+0x1ba>
 8005d5a:	f1ab 0302 	sub.w	r3, fp, #2
 8005d5e:	fa5f fb83 	uxtb.w	fp, r3
 8005d62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d66:	d820      	bhi.n	8005daa <_printf_float+0x186>
 8005d68:	3901      	subs	r1, #1
 8005d6a:	465a      	mov	r2, fp
 8005d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d70:	9109      	str	r1, [sp, #36]	; 0x24
 8005d72:	f7ff ff18 	bl	8005ba6 <__exponent>
 8005d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d78:	1813      	adds	r3, r2, r0
 8005d7a:	2a01      	cmp	r2, #1
 8005d7c:	4681      	mov	r9, r0
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	dc02      	bgt.n	8005d88 <_printf_float+0x164>
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	07d2      	lsls	r2, r2, #31
 8005d86:	d501      	bpl.n	8005d8c <_printf_float+0x168>
 8005d88:	3301      	adds	r3, #1
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d09c      	beq.n	8005cce <_printf_float+0xaa>
 8005d94:	232d      	movs	r3, #45	; 0x2d
 8005d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d9a:	e798      	b.n	8005cce <_printf_float+0xaa>
 8005d9c:	9a06      	ldr	r2, [sp, #24]
 8005d9e:	2a47      	cmp	r2, #71	; 0x47
 8005da0:	d1be      	bne.n	8005d20 <_printf_float+0xfc>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1bc      	bne.n	8005d20 <_printf_float+0xfc>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e7b9      	b.n	8005d1e <_printf_float+0xfa>
 8005daa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005dae:	d118      	bne.n	8005de2 <_printf_float+0x1be>
 8005db0:	2900      	cmp	r1, #0
 8005db2:	6863      	ldr	r3, [r4, #4]
 8005db4:	dd0b      	ble.n	8005dce <_printf_float+0x1aa>
 8005db6:	6121      	str	r1, [r4, #16]
 8005db8:	b913      	cbnz	r3, 8005dc0 <_printf_float+0x19c>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	07d0      	lsls	r0, r2, #31
 8005dbe:	d502      	bpl.n	8005dc6 <_printf_float+0x1a2>
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	440b      	add	r3, r1
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dc8:	f04f 0900 	mov.w	r9, #0
 8005dcc:	e7de      	b.n	8005d8c <_printf_float+0x168>
 8005dce:	b913      	cbnz	r3, 8005dd6 <_printf_float+0x1b2>
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	07d2      	lsls	r2, r2, #31
 8005dd4:	d501      	bpl.n	8005dda <_printf_float+0x1b6>
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	e7f4      	b.n	8005dc4 <_printf_float+0x1a0>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e7f2      	b.n	8005dc4 <_printf_float+0x1a0>
 8005dde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de4:	4299      	cmp	r1, r3
 8005de6:	db05      	blt.n	8005df4 <_printf_float+0x1d0>
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	6121      	str	r1, [r4, #16]
 8005dec:	07d8      	lsls	r0, r3, #31
 8005dee:	d5ea      	bpl.n	8005dc6 <_printf_float+0x1a2>
 8005df0:	1c4b      	adds	r3, r1, #1
 8005df2:	e7e7      	b.n	8005dc4 <_printf_float+0x1a0>
 8005df4:	2900      	cmp	r1, #0
 8005df6:	bfd4      	ite	le
 8005df8:	f1c1 0202 	rsble	r2, r1, #2
 8005dfc:	2201      	movgt	r2, #1
 8005dfe:	4413      	add	r3, r2
 8005e00:	e7e0      	b.n	8005dc4 <_printf_float+0x1a0>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	055a      	lsls	r2, r3, #21
 8005e06:	d407      	bmi.n	8005e18 <_printf_float+0x1f4>
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	4642      	mov	r2, r8
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	d12c      	bne.n	8005e70 <_printf_float+0x24c>
 8005e16:	e764      	b.n	8005ce2 <_printf_float+0xbe>
 8005e18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e1c:	f240 80e0 	bls.w	8005fe0 <_printf_float+0x3bc>
 8005e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e24:	2200      	movs	r2, #0
 8005e26:	2300      	movs	r3, #0
 8005e28:	f7fa fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d034      	beq.n	8005e9a <_printf_float+0x276>
 8005e30:	4a37      	ldr	r2, [pc, #220]	; (8005f10 <_printf_float+0x2ec>)
 8005e32:	2301      	movs	r3, #1
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af51 	beq.w	8005ce2 <_printf_float+0xbe>
 8005e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e44:	429a      	cmp	r2, r3
 8005e46:	db02      	blt.n	8005e4e <_printf_float+0x22a>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07d8      	lsls	r0, r3, #31
 8005e4c:	d510      	bpl.n	8005e70 <_printf_float+0x24c>
 8005e4e:	ee18 3a10 	vmov	r3, s16
 8005e52:	4652      	mov	r2, sl
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af41 	beq.w	8005ce2 <_printf_float+0xbe>
 8005e60:	f04f 0800 	mov.w	r8, #0
 8005e64:	f104 091a 	add.w	r9, r4, #26
 8005e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	4543      	cmp	r3, r8
 8005e6e:	dc09      	bgt.n	8005e84 <_printf_float+0x260>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	079b      	lsls	r3, r3, #30
 8005e74:	f100 8107 	bmi.w	8006086 <_printf_float+0x462>
 8005e78:	68e0      	ldr	r0, [r4, #12]
 8005e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e7c:	4298      	cmp	r0, r3
 8005e7e:	bfb8      	it	lt
 8005e80:	4618      	movlt	r0, r3
 8005e82:	e730      	b.n	8005ce6 <_printf_float+0xc2>
 8005e84:	2301      	movs	r3, #1
 8005e86:	464a      	mov	r2, r9
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f af27 	beq.w	8005ce2 <_printf_float+0xbe>
 8005e94:	f108 0801 	add.w	r8, r8, #1
 8005e98:	e7e6      	b.n	8005e68 <_printf_float+0x244>
 8005e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	dc39      	bgt.n	8005f14 <_printf_float+0x2f0>
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <_printf_float+0x2ec>)
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f af19 	beq.w	8005ce2 <_printf_float+0xbe>
 8005eb0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	d102      	bne.n	8005ebe <_printf_float+0x29a>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	07d9      	lsls	r1, r3, #31
 8005ebc:	d5d8      	bpl.n	8005e70 <_printf_float+0x24c>
 8005ebe:	ee18 3a10 	vmov	r3, s16
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af09 	beq.w	8005ce2 <_printf_float+0xbe>
 8005ed0:	f04f 0900 	mov.w	r9, #0
 8005ed4:	f104 0a1a 	add.w	sl, r4, #26
 8005ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eda:	425b      	negs	r3, r3
 8005edc:	454b      	cmp	r3, r9
 8005ede:	dc01      	bgt.n	8005ee4 <_printf_float+0x2c0>
 8005ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee2:	e792      	b.n	8005e0a <_printf_float+0x1e6>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4652      	mov	r2, sl
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4628      	mov	r0, r5
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f43f aef7 	beq.w	8005ce2 <_printf_float+0xbe>
 8005ef4:	f109 0901 	add.w	r9, r9, #1
 8005ef8:	e7ee      	b.n	8005ed8 <_printf_float+0x2b4>
 8005efa:	bf00      	nop
 8005efc:	7fefffff 	.word	0x7fefffff
 8005f00:	080084f0 	.word	0x080084f0
 8005f04:	080084f4 	.word	0x080084f4
 8005f08:	080084f8 	.word	0x080084f8
 8005f0c:	080084fc 	.word	0x080084fc
 8005f10:	08008500 	.word	0x08008500
 8005f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	bfa8      	it	ge
 8005f1c:	461a      	movge	r2, r3
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	4691      	mov	r9, r2
 8005f22:	dc37      	bgt.n	8005f94 <_printf_float+0x370>
 8005f24:	f04f 0b00 	mov.w	fp, #0
 8005f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f2c:	f104 021a 	add.w	r2, r4, #26
 8005f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f32:	9305      	str	r3, [sp, #20]
 8005f34:	eba3 0309 	sub.w	r3, r3, r9
 8005f38:	455b      	cmp	r3, fp
 8005f3a:	dc33      	bgt.n	8005fa4 <_printf_float+0x380>
 8005f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f40:	429a      	cmp	r2, r3
 8005f42:	db3b      	blt.n	8005fbc <_printf_float+0x398>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	07da      	lsls	r2, r3, #31
 8005f48:	d438      	bmi.n	8005fbc <_printf_float+0x398>
 8005f4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f4e:	eba2 0903 	sub.w	r9, r2, r3
 8005f52:	9b05      	ldr	r3, [sp, #20]
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	4591      	cmp	r9, r2
 8005f58:	bfa8      	it	ge
 8005f5a:	4691      	movge	r9, r2
 8005f5c:	f1b9 0f00 	cmp.w	r9, #0
 8005f60:	dc35      	bgt.n	8005fce <_printf_float+0x3aa>
 8005f62:	f04f 0800 	mov.w	r8, #0
 8005f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f6a:	f104 0a1a 	add.w	sl, r4, #26
 8005f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	eba3 0309 	sub.w	r3, r3, r9
 8005f78:	4543      	cmp	r3, r8
 8005f7a:	f77f af79 	ble.w	8005e70 <_printf_float+0x24c>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4652      	mov	r2, sl
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f aeaa 	beq.w	8005ce2 <_printf_float+0xbe>
 8005f8e:	f108 0801 	add.w	r8, r8, #1
 8005f92:	e7ec      	b.n	8005f6e <_printf_float+0x34a>
 8005f94:	4613      	mov	r3, r2
 8005f96:	4631      	mov	r1, r6
 8005f98:	4642      	mov	r2, r8
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d1c0      	bne.n	8005f24 <_printf_float+0x300>
 8005fa2:	e69e      	b.n	8005ce2 <_printf_float+0xbe>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	9205      	str	r2, [sp, #20]
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f ae97 	beq.w	8005ce2 <_printf_float+0xbe>
 8005fb4:	9a05      	ldr	r2, [sp, #20]
 8005fb6:	f10b 0b01 	add.w	fp, fp, #1
 8005fba:	e7b9      	b.n	8005f30 <_printf_float+0x30c>
 8005fbc:	ee18 3a10 	vmov	r3, s16
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d1be      	bne.n	8005f4a <_printf_float+0x326>
 8005fcc:	e689      	b.n	8005ce2 <_printf_float+0xbe>
 8005fce:	9a05      	ldr	r2, [sp, #20]
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	4442      	add	r2, r8
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d1c1      	bne.n	8005f62 <_printf_float+0x33e>
 8005fde:	e680      	b.n	8005ce2 <_printf_float+0xbe>
 8005fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	dc01      	bgt.n	8005fea <_printf_float+0x3c6>
 8005fe6:	07db      	lsls	r3, r3, #31
 8005fe8:	d53a      	bpl.n	8006060 <_printf_float+0x43c>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4642      	mov	r2, r8
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f ae74 	beq.w	8005ce2 <_printf_float+0xbe>
 8005ffa:	ee18 3a10 	vmov	r3, s16
 8005ffe:	4652      	mov	r2, sl
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f ae6b 	beq.w	8005ce2 <_printf_float+0xbe>
 800600c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006018:	f7fa fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800601c:	b9d8      	cbnz	r0, 8006056 <_printf_float+0x432>
 800601e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006022:	f108 0201 	add.w	r2, r8, #1
 8006026:	4631      	mov	r1, r6
 8006028:	4628      	mov	r0, r5
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	d10e      	bne.n	800604e <_printf_float+0x42a>
 8006030:	e657      	b.n	8005ce2 <_printf_float+0xbe>
 8006032:	2301      	movs	r3, #1
 8006034:	4652      	mov	r2, sl
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f ae50 	beq.w	8005ce2 <_printf_float+0xbe>
 8006042:	f108 0801 	add.w	r8, r8, #1
 8006046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006048:	3b01      	subs	r3, #1
 800604a:	4543      	cmp	r3, r8
 800604c:	dcf1      	bgt.n	8006032 <_printf_float+0x40e>
 800604e:	464b      	mov	r3, r9
 8006050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006054:	e6da      	b.n	8005e0c <_printf_float+0x1e8>
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	f104 0a1a 	add.w	sl, r4, #26
 800605e:	e7f2      	b.n	8006046 <_printf_float+0x422>
 8006060:	2301      	movs	r3, #1
 8006062:	4642      	mov	r2, r8
 8006064:	e7df      	b.n	8006026 <_printf_float+0x402>
 8006066:	2301      	movs	r3, #1
 8006068:	464a      	mov	r2, r9
 800606a:	4631      	mov	r1, r6
 800606c:	4628      	mov	r0, r5
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	f43f ae36 	beq.w	8005ce2 <_printf_float+0xbe>
 8006076:	f108 0801 	add.w	r8, r8, #1
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800607e:	1a5b      	subs	r3, r3, r1
 8006080:	4543      	cmp	r3, r8
 8006082:	dcf0      	bgt.n	8006066 <_printf_float+0x442>
 8006084:	e6f8      	b.n	8005e78 <_printf_float+0x254>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	f104 0919 	add.w	r9, r4, #25
 800608e:	e7f4      	b.n	800607a <_printf_float+0x456>

08006090 <_printf_common>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	4616      	mov	r6, r2
 8006096:	4699      	mov	r9, r3
 8006098:	688a      	ldr	r2, [r1, #8]
 800609a:	690b      	ldr	r3, [r1, #16]
 800609c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bfb8      	it	lt
 80060a4:	4613      	movlt	r3, r2
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060ac:	4607      	mov	r7, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b10a      	cbz	r2, 80060b6 <_printf_common+0x26>
 80060b2:	3301      	adds	r3, #1
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	0699      	lsls	r1, r3, #26
 80060ba:	bf42      	ittt	mi
 80060bc:	6833      	ldrmi	r3, [r6, #0]
 80060be:	3302      	addmi	r3, #2
 80060c0:	6033      	strmi	r3, [r6, #0]
 80060c2:	6825      	ldr	r5, [r4, #0]
 80060c4:	f015 0506 	ands.w	r5, r5, #6
 80060c8:	d106      	bne.n	80060d8 <_printf_common+0x48>
 80060ca:	f104 0a19 	add.w	sl, r4, #25
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	6832      	ldr	r2, [r6, #0]
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	dc26      	bgt.n	8006126 <_printf_common+0x96>
 80060d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060dc:	1e13      	subs	r3, r2, #0
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	bf18      	it	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	0692      	lsls	r2, r2, #26
 80060e6:	d42b      	bmi.n	8006140 <_printf_common+0xb0>
 80060e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	3001      	adds	r0, #1
 80060f4:	d01e      	beq.n	8006134 <_printf_common+0xa4>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	6922      	ldr	r2, [r4, #16]
 80060fa:	f003 0306 	and.w	r3, r3, #6
 80060fe:	2b04      	cmp	r3, #4
 8006100:	bf02      	ittt	eq
 8006102:	68e5      	ldreq	r5, [r4, #12]
 8006104:	6833      	ldreq	r3, [r6, #0]
 8006106:	1aed      	subeq	r5, r5, r3
 8006108:	68a3      	ldr	r3, [r4, #8]
 800610a:	bf0c      	ite	eq
 800610c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006110:	2500      	movne	r5, #0
 8006112:	4293      	cmp	r3, r2
 8006114:	bfc4      	itt	gt
 8006116:	1a9b      	subgt	r3, r3, r2
 8006118:	18ed      	addgt	r5, r5, r3
 800611a:	2600      	movs	r6, #0
 800611c:	341a      	adds	r4, #26
 800611e:	42b5      	cmp	r5, r6
 8006120:	d11a      	bne.n	8006158 <_printf_common+0xc8>
 8006122:	2000      	movs	r0, #0
 8006124:	e008      	b.n	8006138 <_printf_common+0xa8>
 8006126:	2301      	movs	r3, #1
 8006128:	4652      	mov	r2, sl
 800612a:	4649      	mov	r1, r9
 800612c:	4638      	mov	r0, r7
 800612e:	47c0      	blx	r8
 8006130:	3001      	adds	r0, #1
 8006132:	d103      	bne.n	800613c <_printf_common+0xac>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613c:	3501      	adds	r5, #1
 800613e:	e7c6      	b.n	80060ce <_printf_common+0x3e>
 8006140:	18e1      	adds	r1, r4, r3
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	2030      	movs	r0, #48	; 0x30
 8006146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614a:	4422      	add	r2, r4
 800614c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006154:	3302      	adds	r3, #2
 8006156:	e7c7      	b.n	80060e8 <_printf_common+0x58>
 8006158:	2301      	movs	r3, #1
 800615a:	4622      	mov	r2, r4
 800615c:	4649      	mov	r1, r9
 800615e:	4638      	mov	r0, r7
 8006160:	47c0      	blx	r8
 8006162:	3001      	adds	r0, #1
 8006164:	d0e6      	beq.n	8006134 <_printf_common+0xa4>
 8006166:	3601      	adds	r6, #1
 8006168:	e7d9      	b.n	800611e <_printf_common+0x8e>
	...

0800616c <_printf_i>:
 800616c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	7e0f      	ldrb	r7, [r1, #24]
 8006172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006174:	2f78      	cmp	r7, #120	; 0x78
 8006176:	4691      	mov	r9, r2
 8006178:	4680      	mov	r8, r0
 800617a:	460c      	mov	r4, r1
 800617c:	469a      	mov	sl, r3
 800617e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006182:	d807      	bhi.n	8006194 <_printf_i+0x28>
 8006184:	2f62      	cmp	r7, #98	; 0x62
 8006186:	d80a      	bhi.n	800619e <_printf_i+0x32>
 8006188:	2f00      	cmp	r7, #0
 800618a:	f000 80d4 	beq.w	8006336 <_printf_i+0x1ca>
 800618e:	2f58      	cmp	r7, #88	; 0x58
 8006190:	f000 80c0 	beq.w	8006314 <_printf_i+0x1a8>
 8006194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800619c:	e03a      	b.n	8006214 <_printf_i+0xa8>
 800619e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a2:	2b15      	cmp	r3, #21
 80061a4:	d8f6      	bhi.n	8006194 <_printf_i+0x28>
 80061a6:	a101      	add	r1, pc, #4	; (adr r1, 80061ac <_printf_i+0x40>)
 80061a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006195 	.word	0x08006195
 80061b8:	08006195 	.word	0x08006195
 80061bc:	08006195 	.word	0x08006195
 80061c0:	08006195 	.word	0x08006195
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006195 	.word	0x08006195
 80061cc:	08006195 	.word	0x08006195
 80061d0:	08006195 	.word	0x08006195
 80061d4:	08006195 	.word	0x08006195
 80061d8:	0800631d 	.word	0x0800631d
 80061dc:	08006245 	.word	0x08006245
 80061e0:	080062d7 	.word	0x080062d7
 80061e4:	08006195 	.word	0x08006195
 80061e8:	08006195 	.word	0x08006195
 80061ec:	0800633f 	.word	0x0800633f
 80061f0:	08006195 	.word	0x08006195
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006195 	.word	0x08006195
 80061fc:	08006195 	.word	0x08006195
 8006200:	080062df 	.word	0x080062df
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	1d1a      	adds	r2, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	602a      	str	r2, [r5, #0]
 800620c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e09f      	b.n	8006358 <_printf_i+0x1ec>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	0607      	lsls	r7, r0, #24
 800621e:	f103 0104 	add.w	r1, r3, #4
 8006222:	6029      	str	r1, [r5, #0]
 8006224:	d501      	bpl.n	800622a <_printf_i+0xbe>
 8006226:	681e      	ldr	r6, [r3, #0]
 8006228:	e003      	b.n	8006232 <_printf_i+0xc6>
 800622a:	0646      	lsls	r6, r0, #25
 800622c:	d5fb      	bpl.n	8006226 <_printf_i+0xba>
 800622e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006232:	2e00      	cmp	r6, #0
 8006234:	da03      	bge.n	800623e <_printf_i+0xd2>
 8006236:	232d      	movs	r3, #45	; 0x2d
 8006238:	4276      	negs	r6, r6
 800623a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623e:	485a      	ldr	r0, [pc, #360]	; (80063a8 <_printf_i+0x23c>)
 8006240:	230a      	movs	r3, #10
 8006242:	e012      	b.n	800626a <_printf_i+0xfe>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	6820      	ldr	r0, [r4, #0]
 8006248:	1d19      	adds	r1, r3, #4
 800624a:	6029      	str	r1, [r5, #0]
 800624c:	0605      	lsls	r5, r0, #24
 800624e:	d501      	bpl.n	8006254 <_printf_i+0xe8>
 8006250:	681e      	ldr	r6, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0xee>
 8006254:	0641      	lsls	r1, r0, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0xe4>
 8006258:	881e      	ldrh	r6, [r3, #0]
 800625a:	4853      	ldr	r0, [pc, #332]	; (80063a8 <_printf_i+0x23c>)
 800625c:	2f6f      	cmp	r7, #111	; 0x6f
 800625e:	bf0c      	ite	eq
 8006260:	2308      	moveq	r3, #8
 8006262:	230a      	movne	r3, #10
 8006264:	2100      	movs	r1, #0
 8006266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626a:	6865      	ldr	r5, [r4, #4]
 800626c:	60a5      	str	r5, [r4, #8]
 800626e:	2d00      	cmp	r5, #0
 8006270:	bfa2      	ittt	ge
 8006272:	6821      	ldrge	r1, [r4, #0]
 8006274:	f021 0104 	bicge.w	r1, r1, #4
 8006278:	6021      	strge	r1, [r4, #0]
 800627a:	b90e      	cbnz	r6, 8006280 <_printf_i+0x114>
 800627c:	2d00      	cmp	r5, #0
 800627e:	d04b      	beq.n	8006318 <_printf_i+0x1ac>
 8006280:	4615      	mov	r5, r2
 8006282:	fbb6 f1f3 	udiv	r1, r6, r3
 8006286:	fb03 6711 	mls	r7, r3, r1, r6
 800628a:	5dc7      	ldrb	r7, [r0, r7]
 800628c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006290:	4637      	mov	r7, r6
 8006292:	42bb      	cmp	r3, r7
 8006294:	460e      	mov	r6, r1
 8006296:	d9f4      	bls.n	8006282 <_printf_i+0x116>
 8006298:	2b08      	cmp	r3, #8
 800629a:	d10b      	bne.n	80062b4 <_printf_i+0x148>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	07de      	lsls	r6, r3, #31
 80062a0:	d508      	bpl.n	80062b4 <_printf_i+0x148>
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	6861      	ldr	r1, [r4, #4]
 80062a6:	4299      	cmp	r1, r3
 80062a8:	bfde      	ittt	le
 80062aa:	2330      	movle	r3, #48	; 0x30
 80062ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062b4:	1b52      	subs	r2, r2, r5
 80062b6:	6122      	str	r2, [r4, #16]
 80062b8:	f8cd a000 	str.w	sl, [sp]
 80062bc:	464b      	mov	r3, r9
 80062be:	aa03      	add	r2, sp, #12
 80062c0:	4621      	mov	r1, r4
 80062c2:	4640      	mov	r0, r8
 80062c4:	f7ff fee4 	bl	8006090 <_printf_common>
 80062c8:	3001      	adds	r0, #1
 80062ca:	d14a      	bne.n	8006362 <_printf_i+0x1f6>
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d0:	b004      	add	sp, #16
 80062d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	f043 0320 	orr.w	r3, r3, #32
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	4833      	ldr	r0, [pc, #204]	; (80063ac <_printf_i+0x240>)
 80062e0:	2778      	movs	r7, #120	; 0x78
 80062e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	6829      	ldr	r1, [r5, #0]
 80062ea:	061f      	lsls	r7, r3, #24
 80062ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80062f0:	d402      	bmi.n	80062f8 <_printf_i+0x18c>
 80062f2:	065f      	lsls	r7, r3, #25
 80062f4:	bf48      	it	mi
 80062f6:	b2b6      	uxthmi	r6, r6
 80062f8:	07df      	lsls	r7, r3, #31
 80062fa:	bf48      	it	mi
 80062fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006300:	6029      	str	r1, [r5, #0]
 8006302:	bf48      	it	mi
 8006304:	6023      	strmi	r3, [r4, #0]
 8006306:	b91e      	cbnz	r6, 8006310 <_printf_i+0x1a4>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	f023 0320 	bic.w	r3, r3, #32
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	2310      	movs	r3, #16
 8006312:	e7a7      	b.n	8006264 <_printf_i+0xf8>
 8006314:	4824      	ldr	r0, [pc, #144]	; (80063a8 <_printf_i+0x23c>)
 8006316:	e7e4      	b.n	80062e2 <_printf_i+0x176>
 8006318:	4615      	mov	r5, r2
 800631a:	e7bd      	b.n	8006298 <_printf_i+0x12c>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	6826      	ldr	r6, [r4, #0]
 8006320:	6961      	ldr	r1, [r4, #20]
 8006322:	1d18      	adds	r0, r3, #4
 8006324:	6028      	str	r0, [r5, #0]
 8006326:	0635      	lsls	r5, r6, #24
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	d501      	bpl.n	8006330 <_printf_i+0x1c4>
 800632c:	6019      	str	r1, [r3, #0]
 800632e:	e002      	b.n	8006336 <_printf_i+0x1ca>
 8006330:	0670      	lsls	r0, r6, #25
 8006332:	d5fb      	bpl.n	800632c <_printf_i+0x1c0>
 8006334:	8019      	strh	r1, [r3, #0]
 8006336:	2300      	movs	r3, #0
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	4615      	mov	r5, r2
 800633c:	e7bc      	b.n	80062b8 <_printf_i+0x14c>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	1d1a      	adds	r2, r3, #4
 8006342:	602a      	str	r2, [r5, #0]
 8006344:	681d      	ldr	r5, [r3, #0]
 8006346:	6862      	ldr	r2, [r4, #4]
 8006348:	2100      	movs	r1, #0
 800634a:	4628      	mov	r0, r5
 800634c:	f7f9 ff40 	bl	80001d0 <memchr>
 8006350:	b108      	cbz	r0, 8006356 <_printf_i+0x1ea>
 8006352:	1b40      	subs	r0, r0, r5
 8006354:	6060      	str	r0, [r4, #4]
 8006356:	6863      	ldr	r3, [r4, #4]
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	2300      	movs	r3, #0
 800635c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006360:	e7aa      	b.n	80062b8 <_printf_i+0x14c>
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	462a      	mov	r2, r5
 8006366:	4649      	mov	r1, r9
 8006368:	4640      	mov	r0, r8
 800636a:	47d0      	blx	sl
 800636c:	3001      	adds	r0, #1
 800636e:	d0ad      	beq.n	80062cc <_printf_i+0x160>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	079b      	lsls	r3, r3, #30
 8006374:	d413      	bmi.n	800639e <_printf_i+0x232>
 8006376:	68e0      	ldr	r0, [r4, #12]
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	4298      	cmp	r0, r3
 800637c:	bfb8      	it	lt
 800637e:	4618      	movlt	r0, r3
 8006380:	e7a6      	b.n	80062d0 <_printf_i+0x164>
 8006382:	2301      	movs	r3, #1
 8006384:	4632      	mov	r2, r6
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	47d0      	blx	sl
 800638c:	3001      	adds	r0, #1
 800638e:	d09d      	beq.n	80062cc <_printf_i+0x160>
 8006390:	3501      	adds	r5, #1
 8006392:	68e3      	ldr	r3, [r4, #12]
 8006394:	9903      	ldr	r1, [sp, #12]
 8006396:	1a5b      	subs	r3, r3, r1
 8006398:	42ab      	cmp	r3, r5
 800639a:	dcf2      	bgt.n	8006382 <_printf_i+0x216>
 800639c:	e7eb      	b.n	8006376 <_printf_i+0x20a>
 800639e:	2500      	movs	r5, #0
 80063a0:	f104 0619 	add.w	r6, r4, #25
 80063a4:	e7f5      	b.n	8006392 <_printf_i+0x226>
 80063a6:	bf00      	nop
 80063a8:	08008502 	.word	0x08008502
 80063ac:	08008513 	.word	0x08008513

080063b0 <std>:
 80063b0:	2300      	movs	r3, #0
 80063b2:	b510      	push	{r4, lr}
 80063b4:	4604      	mov	r4, r0
 80063b6:	e9c0 3300 	strd	r3, r3, [r0]
 80063ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063be:	6083      	str	r3, [r0, #8]
 80063c0:	8181      	strh	r1, [r0, #12]
 80063c2:	6643      	str	r3, [r0, #100]	; 0x64
 80063c4:	81c2      	strh	r2, [r0, #14]
 80063c6:	6183      	str	r3, [r0, #24]
 80063c8:	4619      	mov	r1, r3
 80063ca:	2208      	movs	r2, #8
 80063cc:	305c      	adds	r0, #92	; 0x5c
 80063ce:	f000 f8f4 	bl	80065ba <memset>
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <std+0x38>)
 80063d4:	6263      	str	r3, [r4, #36]	; 0x24
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <std+0x3c>)
 80063d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <std+0x40>)
 80063dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063de:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <std+0x44>)
 80063e0:	6224      	str	r4, [r4, #32]
 80063e2:	6323      	str	r3, [r4, #48]	; 0x30
 80063e4:	bd10      	pop	{r4, pc}
 80063e6:	bf00      	nop
 80063e8:	08006535 	.word	0x08006535
 80063ec:	08006557 	.word	0x08006557
 80063f0:	0800658f 	.word	0x0800658f
 80063f4:	080065b3 	.word	0x080065b3

080063f8 <stdio_exit_handler>:
 80063f8:	4a02      	ldr	r2, [pc, #8]	; (8006404 <stdio_exit_handler+0xc>)
 80063fa:	4903      	ldr	r1, [pc, #12]	; (8006408 <stdio_exit_handler+0x10>)
 80063fc:	4803      	ldr	r0, [pc, #12]	; (800640c <stdio_exit_handler+0x14>)
 80063fe:	f000 b869 	b.w	80064d4 <_fwalk_sglue>
 8006402:	bf00      	nop
 8006404:	2000000c 	.word	0x2000000c
 8006408:	08008039 	.word	0x08008039
 800640c:	20000018 	.word	0x20000018

08006410 <cleanup_stdio>:
 8006410:	6841      	ldr	r1, [r0, #4]
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <cleanup_stdio+0x34>)
 8006414:	4299      	cmp	r1, r3
 8006416:	b510      	push	{r4, lr}
 8006418:	4604      	mov	r4, r0
 800641a:	d001      	beq.n	8006420 <cleanup_stdio+0x10>
 800641c:	f001 fe0c 	bl	8008038 <_fflush_r>
 8006420:	68a1      	ldr	r1, [r4, #8]
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <cleanup_stdio+0x38>)
 8006424:	4299      	cmp	r1, r3
 8006426:	d002      	beq.n	800642e <cleanup_stdio+0x1e>
 8006428:	4620      	mov	r0, r4
 800642a:	f001 fe05 	bl	8008038 <_fflush_r>
 800642e:	68e1      	ldr	r1, [r4, #12]
 8006430:	4b06      	ldr	r3, [pc, #24]	; (800644c <cleanup_stdio+0x3c>)
 8006432:	4299      	cmp	r1, r3
 8006434:	d004      	beq.n	8006440 <cleanup_stdio+0x30>
 8006436:	4620      	mov	r0, r4
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f001 bdfc 	b.w	8008038 <_fflush_r>
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	20000388 	.word	0x20000388
 8006448:	200003f0 	.word	0x200003f0
 800644c:	20000458 	.word	0x20000458

08006450 <global_stdio_init.part.0>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <global_stdio_init.part.0+0x30>)
 8006454:	4c0b      	ldr	r4, [pc, #44]	; (8006484 <global_stdio_init.part.0+0x34>)
 8006456:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <global_stdio_init.part.0+0x38>)
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	4620      	mov	r0, r4
 800645c:	2200      	movs	r2, #0
 800645e:	2104      	movs	r1, #4
 8006460:	f7ff ffa6 	bl	80063b0 <std>
 8006464:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006468:	2201      	movs	r2, #1
 800646a:	2109      	movs	r1, #9
 800646c:	f7ff ffa0 	bl	80063b0 <std>
 8006470:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006474:	2202      	movs	r2, #2
 8006476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800647a:	2112      	movs	r1, #18
 800647c:	f7ff bf98 	b.w	80063b0 <std>
 8006480:	200004c0 	.word	0x200004c0
 8006484:	20000388 	.word	0x20000388
 8006488:	080063f9 	.word	0x080063f9

0800648c <__sfp_lock_acquire>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__sfp_lock_acquire+0x8>)
 800648e:	f000 b911 	b.w	80066b4 <__retarget_lock_acquire_recursive>
 8006492:	bf00      	nop
 8006494:	200004c9 	.word	0x200004c9

08006498 <__sfp_lock_release>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__sfp_lock_release+0x8>)
 800649a:	f000 b90c 	b.w	80066b6 <__retarget_lock_release_recursive>
 800649e:	bf00      	nop
 80064a0:	200004c9 	.word	0x200004c9

080064a4 <__sinit>:
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4604      	mov	r4, r0
 80064a8:	f7ff fff0 	bl	800648c <__sfp_lock_acquire>
 80064ac:	6a23      	ldr	r3, [r4, #32]
 80064ae:	b11b      	cbz	r3, 80064b8 <__sinit+0x14>
 80064b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b4:	f7ff bff0 	b.w	8006498 <__sfp_lock_release>
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <__sinit+0x28>)
 80064ba:	6223      	str	r3, [r4, #32]
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <__sinit+0x2c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f5      	bne.n	80064b0 <__sinit+0xc>
 80064c4:	f7ff ffc4 	bl	8006450 <global_stdio_init.part.0>
 80064c8:	e7f2      	b.n	80064b0 <__sinit+0xc>
 80064ca:	bf00      	nop
 80064cc:	08006411 	.word	0x08006411
 80064d0:	200004c0 	.word	0x200004c0

080064d4 <_fwalk_sglue>:
 80064d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d8:	4607      	mov	r7, r0
 80064da:	4688      	mov	r8, r1
 80064dc:	4614      	mov	r4, r2
 80064de:	2600      	movs	r6, #0
 80064e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064e4:	f1b9 0901 	subs.w	r9, r9, #1
 80064e8:	d505      	bpl.n	80064f6 <_fwalk_sglue+0x22>
 80064ea:	6824      	ldr	r4, [r4, #0]
 80064ec:	2c00      	cmp	r4, #0
 80064ee:	d1f7      	bne.n	80064e0 <_fwalk_sglue+0xc>
 80064f0:	4630      	mov	r0, r6
 80064f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f6:	89ab      	ldrh	r3, [r5, #12]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d907      	bls.n	800650c <_fwalk_sglue+0x38>
 80064fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006500:	3301      	adds	r3, #1
 8006502:	d003      	beq.n	800650c <_fwalk_sglue+0x38>
 8006504:	4629      	mov	r1, r5
 8006506:	4638      	mov	r0, r7
 8006508:	47c0      	blx	r8
 800650a:	4306      	orrs	r6, r0
 800650c:	3568      	adds	r5, #104	; 0x68
 800650e:	e7e9      	b.n	80064e4 <_fwalk_sglue+0x10>

08006510 <iprintf>:
 8006510:	b40f      	push	{r0, r1, r2, r3}
 8006512:	b507      	push	{r0, r1, r2, lr}
 8006514:	4906      	ldr	r1, [pc, #24]	; (8006530 <iprintf+0x20>)
 8006516:	ab04      	add	r3, sp, #16
 8006518:	6808      	ldr	r0, [r1, #0]
 800651a:	f853 2b04 	ldr.w	r2, [r3], #4
 800651e:	6881      	ldr	r1, [r0, #8]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	f001 fbe9 	bl	8007cf8 <_vfiprintf_r>
 8006526:	b003      	add	sp, #12
 8006528:	f85d eb04 	ldr.w	lr, [sp], #4
 800652c:	b004      	add	sp, #16
 800652e:	4770      	bx	lr
 8006530:	20000064 	.word	0x20000064

08006534 <__sread>:
 8006534:	b510      	push	{r4, lr}
 8006536:	460c      	mov	r4, r1
 8006538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800653c:	f000 f86c 	bl	8006618 <_read_r>
 8006540:	2800      	cmp	r0, #0
 8006542:	bfab      	itete	ge
 8006544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006546:	89a3      	ldrhlt	r3, [r4, #12]
 8006548:	181b      	addge	r3, r3, r0
 800654a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800654e:	bfac      	ite	ge
 8006550:	6563      	strge	r3, [r4, #84]	; 0x54
 8006552:	81a3      	strhlt	r3, [r4, #12]
 8006554:	bd10      	pop	{r4, pc}

08006556 <__swrite>:
 8006556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800655a:	461f      	mov	r7, r3
 800655c:	898b      	ldrh	r3, [r1, #12]
 800655e:	05db      	lsls	r3, r3, #23
 8006560:	4605      	mov	r5, r0
 8006562:	460c      	mov	r4, r1
 8006564:	4616      	mov	r6, r2
 8006566:	d505      	bpl.n	8006574 <__swrite+0x1e>
 8006568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656c:	2302      	movs	r3, #2
 800656e:	2200      	movs	r2, #0
 8006570:	f000 f840 	bl	80065f4 <_lseek_r>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800657a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	4632      	mov	r2, r6
 8006582:	463b      	mov	r3, r7
 8006584:	4628      	mov	r0, r5
 8006586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800658a:	f000 b857 	b.w	800663c <_write_r>

0800658e <__sseek>:
 800658e:	b510      	push	{r4, lr}
 8006590:	460c      	mov	r4, r1
 8006592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006596:	f000 f82d 	bl	80065f4 <_lseek_r>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	bf15      	itete	ne
 80065a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80065a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065aa:	81a3      	strheq	r3, [r4, #12]
 80065ac:	bf18      	it	ne
 80065ae:	81a3      	strhne	r3, [r4, #12]
 80065b0:	bd10      	pop	{r4, pc}

080065b2 <__sclose>:
 80065b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b6:	f000 b80d 	b.w	80065d4 <_close_r>

080065ba <memset>:
 80065ba:	4402      	add	r2, r0
 80065bc:	4603      	mov	r3, r0
 80065be:	4293      	cmp	r3, r2
 80065c0:	d100      	bne.n	80065c4 <memset+0xa>
 80065c2:	4770      	bx	lr
 80065c4:	f803 1b01 	strb.w	r1, [r3], #1
 80065c8:	e7f9      	b.n	80065be <memset+0x4>
	...

080065cc <_localeconv_r>:
 80065cc:	4800      	ldr	r0, [pc, #0]	; (80065d0 <_localeconv_r+0x4>)
 80065ce:	4770      	bx	lr
 80065d0:	20000158 	.word	0x20000158

080065d4 <_close_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d06      	ldr	r5, [pc, #24]	; (80065f0 <_close_r+0x1c>)
 80065d8:	2300      	movs	r3, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	f7fb f913 	bl	800180a <_close>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_close_r+0x1a>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_close_r+0x1a>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	200004c4 	.word	0x200004c4

080065f4 <_lseek_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d07      	ldr	r5, [pc, #28]	; (8006614 <_lseek_r+0x20>)
 80065f8:	4604      	mov	r4, r0
 80065fa:	4608      	mov	r0, r1
 80065fc:	4611      	mov	r1, r2
 80065fe:	2200      	movs	r2, #0
 8006600:	602a      	str	r2, [r5, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	f7fb f928 	bl	8001858 <_lseek>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d102      	bne.n	8006612 <_lseek_r+0x1e>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b103      	cbz	r3, 8006612 <_lseek_r+0x1e>
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	200004c4 	.word	0x200004c4

08006618 <_read_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d07      	ldr	r5, [pc, #28]	; (8006638 <_read_r+0x20>)
 800661c:	4604      	mov	r4, r0
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	2200      	movs	r2, #0
 8006624:	602a      	str	r2, [r5, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f7fb f8b6 	bl	8001798 <_read>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_read_r+0x1e>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_read_r+0x1e>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	200004c4 	.word	0x200004c4

0800663c <_write_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d07      	ldr	r5, [pc, #28]	; (800665c <_write_r+0x20>)
 8006640:	4604      	mov	r4, r0
 8006642:	4608      	mov	r0, r1
 8006644:	4611      	mov	r1, r2
 8006646:	2200      	movs	r2, #0
 8006648:	602a      	str	r2, [r5, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	f7fb f8c1 	bl	80017d2 <_write>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d102      	bne.n	800665a <_write_r+0x1e>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b103      	cbz	r3, 800665a <_write_r+0x1e>
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	200004c4 	.word	0x200004c4

08006660 <__errno>:
 8006660:	4b01      	ldr	r3, [pc, #4]	; (8006668 <__errno+0x8>)
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000064 	.word	0x20000064

0800666c <__libc_init_array>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4d0d      	ldr	r5, [pc, #52]	; (80066a4 <__libc_init_array+0x38>)
 8006670:	4c0d      	ldr	r4, [pc, #52]	; (80066a8 <__libc_init_array+0x3c>)
 8006672:	1b64      	subs	r4, r4, r5
 8006674:	10a4      	asrs	r4, r4, #2
 8006676:	2600      	movs	r6, #0
 8006678:	42a6      	cmp	r6, r4
 800667a:	d109      	bne.n	8006690 <__libc_init_array+0x24>
 800667c:	4d0b      	ldr	r5, [pc, #44]	; (80066ac <__libc_init_array+0x40>)
 800667e:	4c0c      	ldr	r4, [pc, #48]	; (80066b0 <__libc_init_array+0x44>)
 8006680:	f001 feec 	bl	800845c <_init>
 8006684:	1b64      	subs	r4, r4, r5
 8006686:	10a4      	asrs	r4, r4, #2
 8006688:	2600      	movs	r6, #0
 800668a:	42a6      	cmp	r6, r4
 800668c:	d105      	bne.n	800669a <__libc_init_array+0x2e>
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	f855 3b04 	ldr.w	r3, [r5], #4
 8006694:	4798      	blx	r3
 8006696:	3601      	adds	r6, #1
 8006698:	e7ee      	b.n	8006678 <__libc_init_array+0xc>
 800669a:	f855 3b04 	ldr.w	r3, [r5], #4
 800669e:	4798      	blx	r3
 80066a0:	3601      	adds	r6, #1
 80066a2:	e7f2      	b.n	800668a <__libc_init_array+0x1e>
 80066a4:	0800886c 	.word	0x0800886c
 80066a8:	0800886c 	.word	0x0800886c
 80066ac:	0800886c 	.word	0x0800886c
 80066b0:	08008870 	.word	0x08008870

080066b4 <__retarget_lock_acquire_recursive>:
 80066b4:	4770      	bx	lr

080066b6 <__retarget_lock_release_recursive>:
 80066b6:	4770      	bx	lr

080066b8 <quorem>:
 80066b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	6903      	ldr	r3, [r0, #16]
 80066be:	690c      	ldr	r4, [r1, #16]
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	4607      	mov	r7, r0
 80066c4:	db7e      	blt.n	80067c4 <quorem+0x10c>
 80066c6:	3c01      	subs	r4, #1
 80066c8:	f101 0814 	add.w	r8, r1, #20
 80066cc:	f100 0514 	add.w	r5, r0, #20
 80066d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066de:	3301      	adds	r3, #1
 80066e0:	429a      	cmp	r2, r3
 80066e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80066ee:	d331      	bcc.n	8006754 <quorem+0x9c>
 80066f0:	f04f 0e00 	mov.w	lr, #0
 80066f4:	4640      	mov	r0, r8
 80066f6:	46ac      	mov	ip, r5
 80066f8:	46f2      	mov	sl, lr
 80066fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80066fe:	b293      	uxth	r3, r2
 8006700:	fb06 e303 	mla	r3, r6, r3, lr
 8006704:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006708:	0c1a      	lsrs	r2, r3, #16
 800670a:	b29b      	uxth	r3, r3
 800670c:	ebaa 0303 	sub.w	r3, sl, r3
 8006710:	f8dc a000 	ldr.w	sl, [ip]
 8006714:	fa13 f38a 	uxtah	r3, r3, sl
 8006718:	fb06 220e 	mla	r2, r6, lr, r2
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	9b00      	ldr	r3, [sp, #0]
 8006720:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006724:	b292      	uxth	r2, r2
 8006726:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800672a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800672e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006732:	4581      	cmp	r9, r0
 8006734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006738:	f84c 3b04 	str.w	r3, [ip], #4
 800673c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006740:	d2db      	bcs.n	80066fa <quorem+0x42>
 8006742:	f855 300b 	ldr.w	r3, [r5, fp]
 8006746:	b92b      	cbnz	r3, 8006754 <quorem+0x9c>
 8006748:	9b01      	ldr	r3, [sp, #4]
 800674a:	3b04      	subs	r3, #4
 800674c:	429d      	cmp	r5, r3
 800674e:	461a      	mov	r2, r3
 8006750:	d32c      	bcc.n	80067ac <quorem+0xf4>
 8006752:	613c      	str	r4, [r7, #16]
 8006754:	4638      	mov	r0, r7
 8006756:	f001 f9a5 	bl	8007aa4 <__mcmp>
 800675a:	2800      	cmp	r0, #0
 800675c:	db22      	blt.n	80067a4 <quorem+0xec>
 800675e:	3601      	adds	r6, #1
 8006760:	4629      	mov	r1, r5
 8006762:	2000      	movs	r0, #0
 8006764:	f858 2b04 	ldr.w	r2, [r8], #4
 8006768:	f8d1 c000 	ldr.w	ip, [r1]
 800676c:	b293      	uxth	r3, r2
 800676e:	1ac3      	subs	r3, r0, r3
 8006770:	0c12      	lsrs	r2, r2, #16
 8006772:	fa13 f38c 	uxtah	r3, r3, ip
 8006776:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800677a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800677e:	b29b      	uxth	r3, r3
 8006780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006784:	45c1      	cmp	r9, r8
 8006786:	f841 3b04 	str.w	r3, [r1], #4
 800678a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800678e:	d2e9      	bcs.n	8006764 <quorem+0xac>
 8006790:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006794:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006798:	b922      	cbnz	r2, 80067a4 <quorem+0xec>
 800679a:	3b04      	subs	r3, #4
 800679c:	429d      	cmp	r5, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	d30a      	bcc.n	80067b8 <quorem+0x100>
 80067a2:	613c      	str	r4, [r7, #16]
 80067a4:	4630      	mov	r0, r6
 80067a6:	b003      	add	sp, #12
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	3b04      	subs	r3, #4
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	d1ce      	bne.n	8006752 <quorem+0x9a>
 80067b4:	3c01      	subs	r4, #1
 80067b6:	e7c9      	b.n	800674c <quorem+0x94>
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	3b04      	subs	r3, #4
 80067bc:	2a00      	cmp	r2, #0
 80067be:	d1f0      	bne.n	80067a2 <quorem+0xea>
 80067c0:	3c01      	subs	r4, #1
 80067c2:	e7eb      	b.n	800679c <quorem+0xe4>
 80067c4:	2000      	movs	r0, #0
 80067c6:	e7ee      	b.n	80067a6 <quorem+0xee>

080067c8 <_dtoa_r>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	ed2d 8b04 	vpush	{d8-d9}
 80067d0:	69c5      	ldr	r5, [r0, #28]
 80067d2:	b093      	sub	sp, #76	; 0x4c
 80067d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067d8:	ec57 6b10 	vmov	r6, r7, d0
 80067dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80067e0:	9107      	str	r1, [sp, #28]
 80067e2:	4604      	mov	r4, r0
 80067e4:	920a      	str	r2, [sp, #40]	; 0x28
 80067e6:	930d      	str	r3, [sp, #52]	; 0x34
 80067e8:	b975      	cbnz	r5, 8006808 <_dtoa_r+0x40>
 80067ea:	2010      	movs	r0, #16
 80067ec:	f000 fe2a 	bl	8007444 <malloc>
 80067f0:	4602      	mov	r2, r0
 80067f2:	61e0      	str	r0, [r4, #28]
 80067f4:	b920      	cbnz	r0, 8006800 <_dtoa_r+0x38>
 80067f6:	4bae      	ldr	r3, [pc, #696]	; (8006ab0 <_dtoa_r+0x2e8>)
 80067f8:	21ef      	movs	r1, #239	; 0xef
 80067fa:	48ae      	ldr	r0, [pc, #696]	; (8006ab4 <_dtoa_r+0x2ec>)
 80067fc:	f001 fcf8 	bl	80081f0 <__assert_func>
 8006800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006804:	6005      	str	r5, [r0, #0]
 8006806:	60c5      	str	r5, [r0, #12]
 8006808:	69e3      	ldr	r3, [r4, #28]
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	b151      	cbz	r1, 8006824 <_dtoa_r+0x5c>
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	604a      	str	r2, [r1, #4]
 8006812:	2301      	movs	r3, #1
 8006814:	4093      	lsls	r3, r2
 8006816:	608b      	str	r3, [r1, #8]
 8006818:	4620      	mov	r0, r4
 800681a:	f000 ff07 	bl	800762c <_Bfree>
 800681e:	69e3      	ldr	r3, [r4, #28]
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	1e3b      	subs	r3, r7, #0
 8006826:	bfbb      	ittet	lt
 8006828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800682c:	9303      	strlt	r3, [sp, #12]
 800682e:	2300      	movge	r3, #0
 8006830:	2201      	movlt	r2, #1
 8006832:	bfac      	ite	ge
 8006834:	f8c8 3000 	strge.w	r3, [r8]
 8006838:	f8c8 2000 	strlt.w	r2, [r8]
 800683c:	4b9e      	ldr	r3, [pc, #632]	; (8006ab8 <_dtoa_r+0x2f0>)
 800683e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006842:	ea33 0308 	bics.w	r3, r3, r8
 8006846:	d11b      	bne.n	8006880 <_dtoa_r+0xb8>
 8006848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800684a:	f242 730f 	movw	r3, #9999	; 0x270f
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006854:	4333      	orrs	r3, r6
 8006856:	f000 8593 	beq.w	8007380 <_dtoa_r+0xbb8>
 800685a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800685c:	b963      	cbnz	r3, 8006878 <_dtoa_r+0xb0>
 800685e:	4b97      	ldr	r3, [pc, #604]	; (8006abc <_dtoa_r+0x2f4>)
 8006860:	e027      	b.n	80068b2 <_dtoa_r+0xea>
 8006862:	4b97      	ldr	r3, [pc, #604]	; (8006ac0 <_dtoa_r+0x2f8>)
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	9800      	ldr	r0, [sp, #0]
 800686e:	b013      	add	sp, #76	; 0x4c
 8006870:	ecbd 8b04 	vpop	{d8-d9}
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	4b90      	ldr	r3, [pc, #576]	; (8006abc <_dtoa_r+0x2f4>)
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	3303      	adds	r3, #3
 800687e:	e7f3      	b.n	8006868 <_dtoa_r+0xa0>
 8006880:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006884:	2200      	movs	r2, #0
 8006886:	ec51 0b17 	vmov	r0, r1, d7
 800688a:	eeb0 8a47 	vmov.f32	s16, s14
 800688e:	eef0 8a67 	vmov.f32	s17, s15
 8006892:	2300      	movs	r3, #0
 8006894:	f7fa f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8006898:	4681      	mov	r9, r0
 800689a:	b160      	cbz	r0, 80068b6 <_dtoa_r+0xee>
 800689c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800689e:	2301      	movs	r3, #1
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8568 	beq.w	800737a <_dtoa_r+0xbb2>
 80068aa:	4b86      	ldr	r3, [pc, #536]	; (8006ac4 <_dtoa_r+0x2fc>)
 80068ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	e7da      	b.n	800686c <_dtoa_r+0xa4>
 80068b6:	aa10      	add	r2, sp, #64	; 0x40
 80068b8:	a911      	add	r1, sp, #68	; 0x44
 80068ba:	4620      	mov	r0, r4
 80068bc:	eeb0 0a48 	vmov.f32	s0, s16
 80068c0:	eef0 0a68 	vmov.f32	s1, s17
 80068c4:	f001 f994 	bl	8007bf0 <__d2b>
 80068c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80068cc:	4682      	mov	sl, r0
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	d07f      	beq.n	80069d2 <_dtoa_r+0x20a>
 80068d2:	ee18 3a90 	vmov	r3, s17
 80068d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80068de:	ec51 0b18 	vmov	r0, r1, d8
 80068e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80068e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80068ee:	4619      	mov	r1, r3
 80068f0:	2200      	movs	r2, #0
 80068f2:	4b75      	ldr	r3, [pc, #468]	; (8006ac8 <_dtoa_r+0x300>)
 80068f4:	f7f9 fcc8 	bl	8000288 <__aeabi_dsub>
 80068f8:	a367      	add	r3, pc, #412	; (adr r3, 8006a98 <_dtoa_r+0x2d0>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fe7b 	bl	80005f8 <__aeabi_dmul>
 8006902:	a367      	add	r3, pc, #412	; (adr r3, 8006aa0 <_dtoa_r+0x2d8>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fcc0 	bl	800028c <__adddf3>
 800690c:	4606      	mov	r6, r0
 800690e:	4628      	mov	r0, r5
 8006910:	460f      	mov	r7, r1
 8006912:	f7f9 fe07 	bl	8000524 <__aeabi_i2d>
 8006916:	a364      	add	r3, pc, #400	; (adr r3, 8006aa8 <_dtoa_r+0x2e0>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7f9 fe6c 	bl	80005f8 <__aeabi_dmul>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7f9 fcb0 	bl	800028c <__adddf3>
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
 8006930:	f7fa f912 	bl	8000b58 <__aeabi_d2iz>
 8006934:	2200      	movs	r2, #0
 8006936:	4683      	mov	fp, r0
 8006938:	2300      	movs	r3, #0
 800693a:	4630      	mov	r0, r6
 800693c:	4639      	mov	r1, r7
 800693e:	f7fa f8cd 	bl	8000adc <__aeabi_dcmplt>
 8006942:	b148      	cbz	r0, 8006958 <_dtoa_r+0x190>
 8006944:	4658      	mov	r0, fp
 8006946:	f7f9 fded 	bl	8000524 <__aeabi_i2d>
 800694a:	4632      	mov	r2, r6
 800694c:	463b      	mov	r3, r7
 800694e:	f7fa f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006952:	b908      	cbnz	r0, 8006958 <_dtoa_r+0x190>
 8006954:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006958:	f1bb 0f16 	cmp.w	fp, #22
 800695c:	d857      	bhi.n	8006a0e <_dtoa_r+0x246>
 800695e:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <_dtoa_r+0x304>)
 8006960:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	ec51 0b18 	vmov	r0, r1, d8
 800696c:	f7fa f8b6 	bl	8000adc <__aeabi_dcmplt>
 8006970:	2800      	cmp	r0, #0
 8006972:	d04e      	beq.n	8006a12 <_dtoa_r+0x24a>
 8006974:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006978:	2300      	movs	r3, #0
 800697a:	930c      	str	r3, [sp, #48]	; 0x30
 800697c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800697e:	1b5b      	subs	r3, r3, r5
 8006980:	1e5a      	subs	r2, r3, #1
 8006982:	bf45      	ittet	mi
 8006984:	f1c3 0301 	rsbmi	r3, r3, #1
 8006988:	9305      	strmi	r3, [sp, #20]
 800698a:	2300      	movpl	r3, #0
 800698c:	2300      	movmi	r3, #0
 800698e:	9206      	str	r2, [sp, #24]
 8006990:	bf54      	ite	pl
 8006992:	9305      	strpl	r3, [sp, #20]
 8006994:	9306      	strmi	r3, [sp, #24]
 8006996:	f1bb 0f00 	cmp.w	fp, #0
 800699a:	db3c      	blt.n	8006a16 <_dtoa_r+0x24e>
 800699c:	9b06      	ldr	r3, [sp, #24]
 800699e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80069a2:	445b      	add	r3, fp
 80069a4:	9306      	str	r3, [sp, #24]
 80069a6:	2300      	movs	r3, #0
 80069a8:	9308      	str	r3, [sp, #32]
 80069aa:	9b07      	ldr	r3, [sp, #28]
 80069ac:	2b09      	cmp	r3, #9
 80069ae:	d868      	bhi.n	8006a82 <_dtoa_r+0x2ba>
 80069b0:	2b05      	cmp	r3, #5
 80069b2:	bfc4      	itt	gt
 80069b4:	3b04      	subgt	r3, #4
 80069b6:	9307      	strgt	r3, [sp, #28]
 80069b8:	9b07      	ldr	r3, [sp, #28]
 80069ba:	f1a3 0302 	sub.w	r3, r3, #2
 80069be:	bfcc      	ite	gt
 80069c0:	2500      	movgt	r5, #0
 80069c2:	2501      	movle	r5, #1
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	f200 8085 	bhi.w	8006ad4 <_dtoa_r+0x30c>
 80069ca:	e8df f003 	tbb	[pc, r3]
 80069ce:	3b2e      	.short	0x3b2e
 80069d0:	5839      	.short	0x5839
 80069d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80069d6:	441d      	add	r5, r3
 80069d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069dc:	2b20      	cmp	r3, #32
 80069de:	bfc1      	itttt	gt
 80069e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80069e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80069ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80069f0:	bfd6      	itet	le
 80069f2:	f1c3 0320 	rsble	r3, r3, #32
 80069f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80069fa:	fa06 f003 	lslle.w	r0, r6, r3
 80069fe:	f7f9 fd81 	bl	8000504 <__aeabi_ui2d>
 8006a02:	2201      	movs	r2, #1
 8006a04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006a08:	3d01      	subs	r5, #1
 8006a0a:	920e      	str	r2, [sp, #56]	; 0x38
 8006a0c:	e76f      	b.n	80068ee <_dtoa_r+0x126>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e7b3      	b.n	800697a <_dtoa_r+0x1b2>
 8006a12:	900c      	str	r0, [sp, #48]	; 0x30
 8006a14:	e7b2      	b.n	800697c <_dtoa_r+0x1b4>
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	eba3 030b 	sub.w	r3, r3, fp
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	f1cb 0300 	rsb	r3, fp, #0
 8006a22:	9308      	str	r3, [sp, #32]
 8006a24:	2300      	movs	r3, #0
 8006a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a28:	e7bf      	b.n	80069aa <_dtoa_r+0x1e2>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	dc52      	bgt.n	8006ada <_dtoa_r+0x312>
 8006a34:	2301      	movs	r3, #1
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a3e:	e00b      	b.n	8006a58 <_dtoa_r+0x290>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e7f3      	b.n	8006a2c <_dtoa_r+0x264>
 8006a44:	2300      	movs	r3, #0
 8006a46:	9309      	str	r3, [sp, #36]	; 0x24
 8006a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4a:	445b      	add	r3, fp
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	9304      	str	r3, [sp, #16]
 8006a54:	bfb8      	it	lt
 8006a56:	2301      	movlt	r3, #1
 8006a58:	69e0      	ldr	r0, [r4, #28]
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	2204      	movs	r2, #4
 8006a5e:	f102 0614 	add.w	r6, r2, #20
 8006a62:	429e      	cmp	r6, r3
 8006a64:	d93d      	bls.n	8006ae2 <_dtoa_r+0x31a>
 8006a66:	6041      	str	r1, [r0, #4]
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fd9f 	bl	80075ac <_Balloc>
 8006a6e:	9000      	str	r0, [sp, #0]
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d139      	bne.n	8006ae8 <_dtoa_r+0x320>
 8006a74:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <_dtoa_r+0x308>)
 8006a76:	4602      	mov	r2, r0
 8006a78:	f240 11af 	movw	r1, #431	; 0x1af
 8006a7c:	e6bd      	b.n	80067fa <_dtoa_r+0x32>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e7e1      	b.n	8006a46 <_dtoa_r+0x27e>
 8006a82:	2501      	movs	r5, #1
 8006a84:	2300      	movs	r3, #0
 8006a86:	9307      	str	r3, [sp, #28]
 8006a88:	9509      	str	r5, [sp, #36]	; 0x24
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	2200      	movs	r2, #0
 8006a94:	2312      	movs	r3, #18
 8006a96:	e7d1      	b.n	8006a3c <_dtoa_r+0x274>
 8006a98:	636f4361 	.word	0x636f4361
 8006a9c:	3fd287a7 	.word	0x3fd287a7
 8006aa0:	8b60c8b3 	.word	0x8b60c8b3
 8006aa4:	3fc68a28 	.word	0x3fc68a28
 8006aa8:	509f79fb 	.word	0x509f79fb
 8006aac:	3fd34413 	.word	0x3fd34413
 8006ab0:	08008531 	.word	0x08008531
 8006ab4:	08008548 	.word	0x08008548
 8006ab8:	7ff00000 	.word	0x7ff00000
 8006abc:	0800852d 	.word	0x0800852d
 8006ac0:	08008524 	.word	0x08008524
 8006ac4:	08008501 	.word	0x08008501
 8006ac8:	3ff80000 	.word	0x3ff80000
 8006acc:	08008638 	.word	0x08008638
 8006ad0:	080085a0 	.word	0x080085a0
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad8:	e7d7      	b.n	8006a8a <_dtoa_r+0x2c2>
 8006ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	e7ba      	b.n	8006a58 <_dtoa_r+0x290>
 8006ae2:	3101      	adds	r1, #1
 8006ae4:	0052      	lsls	r2, r2, #1
 8006ae6:	e7ba      	b.n	8006a5e <_dtoa_r+0x296>
 8006ae8:	69e3      	ldr	r3, [r4, #28]
 8006aea:	9a00      	ldr	r2, [sp, #0]
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	9b04      	ldr	r3, [sp, #16]
 8006af0:	2b0e      	cmp	r3, #14
 8006af2:	f200 80a8 	bhi.w	8006c46 <_dtoa_r+0x47e>
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	f000 80a5 	beq.w	8006c46 <_dtoa_r+0x47e>
 8006afc:	f1bb 0f00 	cmp.w	fp, #0
 8006b00:	dd38      	ble.n	8006b74 <_dtoa_r+0x3ac>
 8006b02:	4bc0      	ldr	r3, [pc, #768]	; (8006e04 <_dtoa_r+0x63c>)
 8006b04:	f00b 020f 	and.w	r2, fp, #15
 8006b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006b14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006b18:	d019      	beq.n	8006b4e <_dtoa_r+0x386>
 8006b1a:	4bbb      	ldr	r3, [pc, #748]	; (8006e08 <_dtoa_r+0x640>)
 8006b1c:	ec51 0b18 	vmov	r0, r1, d8
 8006b20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b24:	f7f9 fe92 	bl	800084c <__aeabi_ddiv>
 8006b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2c:	f008 080f 	and.w	r8, r8, #15
 8006b30:	2503      	movs	r5, #3
 8006b32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006e08 <_dtoa_r+0x640>
 8006b36:	f1b8 0f00 	cmp.w	r8, #0
 8006b3a:	d10a      	bne.n	8006b52 <_dtoa_r+0x38a>
 8006b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b40:	4632      	mov	r2, r6
 8006b42:	463b      	mov	r3, r7
 8006b44:	f7f9 fe82 	bl	800084c <__aeabi_ddiv>
 8006b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b4c:	e02b      	b.n	8006ba6 <_dtoa_r+0x3de>
 8006b4e:	2502      	movs	r5, #2
 8006b50:	e7ef      	b.n	8006b32 <_dtoa_r+0x36a>
 8006b52:	f018 0f01 	tst.w	r8, #1
 8006b56:	d008      	beq.n	8006b6a <_dtoa_r+0x3a2>
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b60:	f7f9 fd4a 	bl	80005f8 <__aeabi_dmul>
 8006b64:	3501      	adds	r5, #1
 8006b66:	4606      	mov	r6, r0
 8006b68:	460f      	mov	r7, r1
 8006b6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b6e:	f109 0908 	add.w	r9, r9, #8
 8006b72:	e7e0      	b.n	8006b36 <_dtoa_r+0x36e>
 8006b74:	f000 809f 	beq.w	8006cb6 <_dtoa_r+0x4ee>
 8006b78:	f1cb 0600 	rsb	r6, fp, #0
 8006b7c:	4ba1      	ldr	r3, [pc, #644]	; (8006e04 <_dtoa_r+0x63c>)
 8006b7e:	4fa2      	ldr	r7, [pc, #648]	; (8006e08 <_dtoa_r+0x640>)
 8006b80:	f006 020f 	and.w	r2, r6, #15
 8006b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	ec51 0b18 	vmov	r0, r1, d8
 8006b90:	f7f9 fd32 	bl	80005f8 <__aeabi_dmul>
 8006b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b98:	1136      	asrs	r6, r6, #4
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2502      	movs	r5, #2
 8006b9e:	2e00      	cmp	r6, #0
 8006ba0:	d17e      	bne.n	8006ca0 <_dtoa_r+0x4d8>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1d0      	bne.n	8006b48 <_dtoa_r+0x380>
 8006ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8084 	beq.w	8006cba <_dtoa_r+0x4f2>
 8006bb2:	4b96      	ldr	r3, [pc, #600]	; (8006e0c <_dtoa_r+0x644>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	4649      	mov	r1, r9
 8006bba:	f7f9 ff8f 	bl	8000adc <__aeabi_dcmplt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d07b      	beq.n	8006cba <_dtoa_r+0x4f2>
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d078      	beq.n	8006cba <_dtoa_r+0x4f2>
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dd39      	ble.n	8006c42 <_dtoa_r+0x47a>
 8006bce:	4b90      	ldr	r3, [pc, #576]	; (8006e10 <_dtoa_r+0x648>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4640      	mov	r0, r8
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	f7f9 fd0f 	bl	80005f8 <__aeabi_dmul>
 8006bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bde:	9e01      	ldr	r6, [sp, #4]
 8006be0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006be4:	3501      	adds	r5, #1
 8006be6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006bea:	4628      	mov	r0, r5
 8006bec:	f7f9 fc9a 	bl	8000524 <__aeabi_i2d>
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	f7f9 fd00 	bl	80005f8 <__aeabi_dmul>
 8006bf8:	4b86      	ldr	r3, [pc, #536]	; (8006e14 <_dtoa_r+0x64c>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f7f9 fb46 	bl	800028c <__adddf3>
 8006c00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c08:	9303      	str	r3, [sp, #12]
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	d158      	bne.n	8006cc0 <_dtoa_r+0x4f8>
 8006c0e:	4b82      	ldr	r3, [pc, #520]	; (8006e18 <_dtoa_r+0x650>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f7f9 fb37 	bl	8000288 <__aeabi_dsub>
 8006c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c1e:	4680      	mov	r8, r0
 8006c20:	4689      	mov	r9, r1
 8006c22:	f7f9 ff79 	bl	8000b18 <__aeabi_dcmpgt>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f040 8296 	bne.w	8007158 <_dtoa_r+0x990>
 8006c2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c30:	4640      	mov	r0, r8
 8006c32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c36:	4649      	mov	r1, r9
 8006c38:	f7f9 ff50 	bl	8000adc <__aeabi_dcmplt>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	f040 8289 	bne.w	8007154 <_dtoa_r+0x98c>
 8006c42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f2c0 814e 	blt.w	8006eea <_dtoa_r+0x722>
 8006c4e:	f1bb 0f0e 	cmp.w	fp, #14
 8006c52:	f300 814a 	bgt.w	8006eea <_dtoa_r+0x722>
 8006c56:	4b6b      	ldr	r3, [pc, #428]	; (8006e04 <_dtoa_r+0x63c>)
 8006c58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f280 80dc 	bge.w	8006e20 <_dtoa_r+0x658>
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f300 80d8 	bgt.w	8006e20 <_dtoa_r+0x658>
 8006c70:	f040 826f 	bne.w	8007152 <_dtoa_r+0x98a>
 8006c74:	4b68      	ldr	r3, [pc, #416]	; (8006e18 <_dtoa_r+0x650>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	4640      	mov	r0, r8
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	f7f9 fcbc 	bl	80005f8 <__aeabi_dmul>
 8006c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c84:	f7f9 ff3e 	bl	8000b04 <__aeabi_dcmpge>
 8006c88:	9e04      	ldr	r6, [sp, #16]
 8006c8a:	4637      	mov	r7, r6
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	f040 8245 	bne.w	800711c <_dtoa_r+0x954>
 8006c92:	9d00      	ldr	r5, [sp, #0]
 8006c94:	2331      	movs	r3, #49	; 0x31
 8006c96:	f805 3b01 	strb.w	r3, [r5], #1
 8006c9a:	f10b 0b01 	add.w	fp, fp, #1
 8006c9e:	e241      	b.n	8007124 <_dtoa_r+0x95c>
 8006ca0:	07f2      	lsls	r2, r6, #31
 8006ca2:	d505      	bpl.n	8006cb0 <_dtoa_r+0x4e8>
 8006ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca8:	f7f9 fca6 	bl	80005f8 <__aeabi_dmul>
 8006cac:	3501      	adds	r5, #1
 8006cae:	2301      	movs	r3, #1
 8006cb0:	1076      	asrs	r6, r6, #1
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	e773      	b.n	8006b9e <_dtoa_r+0x3d6>
 8006cb6:	2502      	movs	r5, #2
 8006cb8:	e775      	b.n	8006ba6 <_dtoa_r+0x3de>
 8006cba:	9e04      	ldr	r6, [sp, #16]
 8006cbc:	465f      	mov	r7, fp
 8006cbe:	e792      	b.n	8006be6 <_dtoa_r+0x41e>
 8006cc0:	9900      	ldr	r1, [sp, #0]
 8006cc2:	4b50      	ldr	r3, [pc, #320]	; (8006e04 <_dtoa_r+0x63c>)
 8006cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cc8:	4431      	add	r1, r6
 8006cca:	9102      	str	r1, [sp, #8]
 8006ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cce:	eeb0 9a47 	vmov.f32	s18, s14
 8006cd2:	eef0 9a67 	vmov.f32	s19, s15
 8006cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	d044      	beq.n	8006d6c <_dtoa_r+0x5a4>
 8006ce2:	494e      	ldr	r1, [pc, #312]	; (8006e1c <_dtoa_r+0x654>)
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f7f9 fdb1 	bl	800084c <__aeabi_ddiv>
 8006cea:	ec53 2b19 	vmov	r2, r3, d9
 8006cee:	f7f9 facb 	bl	8000288 <__aeabi_dsub>
 8006cf2:	9d00      	ldr	r5, [sp, #0]
 8006cf4:	ec41 0b19 	vmov	d9, r0, r1
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	f7f9 ff2c 	bl	8000b58 <__aeabi_d2iz>
 8006d00:	4606      	mov	r6, r0
 8006d02:	f7f9 fc0f 	bl	8000524 <__aeabi_i2d>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f7f9 fabb 	bl	8000288 <__aeabi_dsub>
 8006d12:	3630      	adds	r6, #48	; 0x30
 8006d14:	f805 6b01 	strb.w	r6, [r5], #1
 8006d18:	ec53 2b19 	vmov	r2, r3, d9
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4689      	mov	r9, r1
 8006d20:	f7f9 fedc 	bl	8000adc <__aeabi_dcmplt>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d164      	bne.n	8006df2 <_dtoa_r+0x62a>
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	4937      	ldr	r1, [pc, #220]	; (8006e0c <_dtoa_r+0x644>)
 8006d2e:	2000      	movs	r0, #0
 8006d30:	f7f9 faaa 	bl	8000288 <__aeabi_dsub>
 8006d34:	ec53 2b19 	vmov	r2, r3, d9
 8006d38:	f7f9 fed0 	bl	8000adc <__aeabi_dcmplt>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f040 80b6 	bne.w	8006eae <_dtoa_r+0x6e6>
 8006d42:	9b02      	ldr	r3, [sp, #8]
 8006d44:	429d      	cmp	r5, r3
 8006d46:	f43f af7c 	beq.w	8006c42 <_dtoa_r+0x47a>
 8006d4a:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <_dtoa_r+0x648>)
 8006d4c:	ec51 0b19 	vmov	r0, r1, d9
 8006d50:	2200      	movs	r2, #0
 8006d52:	f7f9 fc51 	bl	80005f8 <__aeabi_dmul>
 8006d56:	4b2e      	ldr	r3, [pc, #184]	; (8006e10 <_dtoa_r+0x648>)
 8006d58:	ec41 0b19 	vmov	d9, r0, r1
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	4680      	mov	r8, r0
 8006d68:	4689      	mov	r9, r1
 8006d6a:	e7c5      	b.n	8006cf8 <_dtoa_r+0x530>
 8006d6c:	ec51 0b17 	vmov	r0, r1, d7
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	9d00      	ldr	r5, [sp, #0]
 8006d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d7a:	ec41 0b19 	vmov	d9, r0, r1
 8006d7e:	4649      	mov	r1, r9
 8006d80:	4640      	mov	r0, r8
 8006d82:	f7f9 fee9 	bl	8000b58 <__aeabi_d2iz>
 8006d86:	4606      	mov	r6, r0
 8006d88:	f7f9 fbcc 	bl	8000524 <__aeabi_i2d>
 8006d8c:	3630      	adds	r6, #48	; 0x30
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4640      	mov	r0, r8
 8006d94:	4649      	mov	r1, r9
 8006d96:	f7f9 fa77 	bl	8000288 <__aeabi_dsub>
 8006d9a:	f805 6b01 	strb.w	r6, [r5], #1
 8006d9e:	9b02      	ldr	r3, [sp, #8]
 8006da0:	429d      	cmp	r5, r3
 8006da2:	4680      	mov	r8, r0
 8006da4:	4689      	mov	r9, r1
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	d124      	bne.n	8006df6 <_dtoa_r+0x62e>
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <_dtoa_r+0x654>)
 8006dae:	ec51 0b19 	vmov	r0, r1, d9
 8006db2:	f7f9 fa6b 	bl	800028c <__adddf3>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4640      	mov	r0, r8
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	f7f9 feab 	bl	8000b18 <__aeabi_dcmpgt>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d173      	bne.n	8006eae <_dtoa_r+0x6e6>
 8006dc6:	ec53 2b19 	vmov	r2, r3, d9
 8006dca:	4914      	ldr	r1, [pc, #80]	; (8006e1c <_dtoa_r+0x654>)
 8006dcc:	2000      	movs	r0, #0
 8006dce:	f7f9 fa5b 	bl	8000288 <__aeabi_dsub>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	4649      	mov	r1, r9
 8006dda:	f7f9 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f43f af2f 	beq.w	8006c42 <_dtoa_r+0x47a>
 8006de4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006de6:	1e6b      	subs	r3, r5, #1
 8006de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dee:	2b30      	cmp	r3, #48	; 0x30
 8006df0:	d0f8      	beq.n	8006de4 <_dtoa_r+0x61c>
 8006df2:	46bb      	mov	fp, r7
 8006df4:	e04a      	b.n	8006e8c <_dtoa_r+0x6c4>
 8006df6:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <_dtoa_r+0x648>)
 8006df8:	f7f9 fbfe 	bl	80005f8 <__aeabi_dmul>
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	4689      	mov	r9, r1
 8006e00:	e7bd      	b.n	8006d7e <_dtoa_r+0x5b6>
 8006e02:	bf00      	nop
 8006e04:	08008638 	.word	0x08008638
 8006e08:	08008610 	.word	0x08008610
 8006e0c:	3ff00000 	.word	0x3ff00000
 8006e10:	40240000 	.word	0x40240000
 8006e14:	401c0000 	.word	0x401c0000
 8006e18:	40140000 	.word	0x40140000
 8006e1c:	3fe00000 	.word	0x3fe00000
 8006e20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e24:	9d00      	ldr	r5, [sp, #0]
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	f7f9 fd0d 	bl	800084c <__aeabi_ddiv>
 8006e32:	f7f9 fe91 	bl	8000b58 <__aeabi_d2iz>
 8006e36:	9001      	str	r0, [sp, #4]
 8006e38:	f7f9 fb74 	bl	8000524 <__aeabi_i2d>
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	464b      	mov	r3, r9
 8006e40:	f7f9 fbda 	bl	80005f8 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fa1c 	bl	8000288 <__aeabi_dsub>
 8006e50:	9e01      	ldr	r6, [sp, #4]
 8006e52:	9f04      	ldr	r7, [sp, #16]
 8006e54:	3630      	adds	r6, #48	; 0x30
 8006e56:	f805 6b01 	strb.w	r6, [r5], #1
 8006e5a:	9e00      	ldr	r6, [sp, #0]
 8006e5c:	1bae      	subs	r6, r5, r6
 8006e5e:	42b7      	cmp	r7, r6
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	d134      	bne.n	8006ed0 <_dtoa_r+0x708>
 8006e66:	f7f9 fa11 	bl	800028c <__adddf3>
 8006e6a:	4642      	mov	r2, r8
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460f      	mov	r7, r1
 8006e72:	f7f9 fe51 	bl	8000b18 <__aeabi_dcmpgt>
 8006e76:	b9c8      	cbnz	r0, 8006eac <_dtoa_r+0x6e4>
 8006e78:	4642      	mov	r2, r8
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	4639      	mov	r1, r7
 8006e80:	f7f9 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e84:	b110      	cbz	r0, 8006e8c <_dtoa_r+0x6c4>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	07db      	lsls	r3, r3, #31
 8006e8a:	d40f      	bmi.n	8006eac <_dtoa_r+0x6e4>
 8006e8c:	4651      	mov	r1, sl
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 fbcc 	bl	800762c <_Bfree>
 8006e94:	2300      	movs	r3, #0
 8006e96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e98:	702b      	strb	r3, [r5, #0]
 8006e9a:	f10b 0301 	add.w	r3, fp, #1
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f43f ace2 	beq.w	800686c <_dtoa_r+0xa4>
 8006ea8:	601d      	str	r5, [r3, #0]
 8006eaa:	e4df      	b.n	800686c <_dtoa_r+0xa4>
 8006eac:	465f      	mov	r7, fp
 8006eae:	462b      	mov	r3, r5
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eb6:	2a39      	cmp	r2, #57	; 0x39
 8006eb8:	d106      	bne.n	8006ec8 <_dtoa_r+0x700>
 8006eba:	9a00      	ldr	r2, [sp, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d1f7      	bne.n	8006eb0 <_dtoa_r+0x6e8>
 8006ec0:	9900      	ldr	r1, [sp, #0]
 8006ec2:	2230      	movs	r2, #48	; 0x30
 8006ec4:	3701      	adds	r7, #1
 8006ec6:	700a      	strb	r2, [r1, #0]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	3201      	adds	r2, #1
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e790      	b.n	8006df2 <_dtoa_r+0x62a>
 8006ed0:	4ba3      	ldr	r3, [pc, #652]	; (8007160 <_dtoa_r+0x998>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f7f9 fb90 	bl	80005f8 <__aeabi_dmul>
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2300      	movs	r3, #0
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
 8006ee0:	f7f9 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d09e      	beq.n	8006e26 <_dtoa_r+0x65e>
 8006ee8:	e7d0      	b.n	8006e8c <_dtoa_r+0x6c4>
 8006eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	f000 80ca 	beq.w	8007086 <_dtoa_r+0x8be>
 8006ef2:	9a07      	ldr	r2, [sp, #28]
 8006ef4:	2a01      	cmp	r2, #1
 8006ef6:	f300 80ad 	bgt.w	8007054 <_dtoa_r+0x88c>
 8006efa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	f000 80a5 	beq.w	800704c <_dtoa_r+0x884>
 8006f02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f06:	9e08      	ldr	r6, [sp, #32]
 8006f08:	9d05      	ldr	r5, [sp, #20]
 8006f0a:	9a05      	ldr	r2, [sp, #20]
 8006f0c:	441a      	add	r2, r3
 8006f0e:	9205      	str	r2, [sp, #20]
 8006f10:	9a06      	ldr	r2, [sp, #24]
 8006f12:	2101      	movs	r1, #1
 8006f14:	441a      	add	r2, r3
 8006f16:	4620      	mov	r0, r4
 8006f18:	9206      	str	r2, [sp, #24]
 8006f1a:	f000 fc3d 	bl	8007798 <__i2b>
 8006f1e:	4607      	mov	r7, r0
 8006f20:	b165      	cbz	r5, 8006f3c <_dtoa_r+0x774>
 8006f22:	9b06      	ldr	r3, [sp, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dd09      	ble.n	8006f3c <_dtoa_r+0x774>
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	9a05      	ldr	r2, [sp, #20]
 8006f2c:	bfa8      	it	ge
 8006f2e:	462b      	movge	r3, r5
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	9205      	str	r2, [sp, #20]
 8006f34:	9a06      	ldr	r2, [sp, #24]
 8006f36:	1aed      	subs	r5, r5, r3
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	9306      	str	r3, [sp, #24]
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	b1f3      	cbz	r3, 8006f7e <_dtoa_r+0x7b6>
 8006f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80a3 	beq.w	800708e <_dtoa_r+0x8c6>
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	dd10      	ble.n	8006f6e <_dtoa_r+0x7a6>
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	4632      	mov	r2, r6
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fce1 	bl	8007918 <__pow5mult>
 8006f56:	4652      	mov	r2, sl
 8006f58:	4601      	mov	r1, r0
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 fc31 	bl	80077c4 <__multiply>
 8006f62:	4651      	mov	r1, sl
 8006f64:	4680      	mov	r8, r0
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 fb60 	bl	800762c <_Bfree>
 8006f6c:	46c2      	mov	sl, r8
 8006f6e:	9b08      	ldr	r3, [sp, #32]
 8006f70:	1b9a      	subs	r2, r3, r6
 8006f72:	d004      	beq.n	8006f7e <_dtoa_r+0x7b6>
 8006f74:	4651      	mov	r1, sl
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 fcce 	bl	8007918 <__pow5mult>
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	2101      	movs	r1, #1
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 fc09 	bl	8007798 <__i2b>
 8006f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	f340 8081 	ble.w	8007092 <_dtoa_r+0x8ca>
 8006f90:	461a      	mov	r2, r3
 8006f92:	4601      	mov	r1, r0
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fcbf 	bl	8007918 <__pow5mult>
 8006f9a:	9b07      	ldr	r3, [sp, #28]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	dd7a      	ble.n	8007098 <_dtoa_r+0x8d0>
 8006fa2:	f04f 0800 	mov.w	r8, #0
 8006fa6:	6933      	ldr	r3, [r6, #16]
 8006fa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006fac:	6918      	ldr	r0, [r3, #16]
 8006fae:	f000 fba5 	bl	80076fc <__hi0bits>
 8006fb2:	f1c0 0020 	rsb	r0, r0, #32
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	4418      	add	r0, r3
 8006fba:	f010 001f 	ands.w	r0, r0, #31
 8006fbe:	f000 8094 	beq.w	80070ea <_dtoa_r+0x922>
 8006fc2:	f1c0 0320 	rsb	r3, r0, #32
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	f340 8085 	ble.w	80070d6 <_dtoa_r+0x90e>
 8006fcc:	9b05      	ldr	r3, [sp, #20]
 8006fce:	f1c0 001c 	rsb	r0, r0, #28
 8006fd2:	4403      	add	r3, r0
 8006fd4:	9305      	str	r3, [sp, #20]
 8006fd6:	9b06      	ldr	r3, [sp, #24]
 8006fd8:	4403      	add	r3, r0
 8006fda:	4405      	add	r5, r0
 8006fdc:	9306      	str	r3, [sp, #24]
 8006fde:	9b05      	ldr	r3, [sp, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dd05      	ble.n	8006ff0 <_dtoa_r+0x828>
 8006fe4:	4651      	mov	r1, sl
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 fcef 	bl	80079cc <__lshift>
 8006fee:	4682      	mov	sl, r0
 8006ff0:	9b06      	ldr	r3, [sp, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dd05      	ble.n	8007002 <_dtoa_r+0x83a>
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 fce6 	bl	80079cc <__lshift>
 8007000:	4606      	mov	r6, r0
 8007002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007004:	2b00      	cmp	r3, #0
 8007006:	d072      	beq.n	80070ee <_dtoa_r+0x926>
 8007008:	4631      	mov	r1, r6
 800700a:	4650      	mov	r0, sl
 800700c:	f000 fd4a 	bl	8007aa4 <__mcmp>
 8007010:	2800      	cmp	r0, #0
 8007012:	da6c      	bge.n	80070ee <_dtoa_r+0x926>
 8007014:	2300      	movs	r3, #0
 8007016:	4651      	mov	r1, sl
 8007018:	220a      	movs	r2, #10
 800701a:	4620      	mov	r0, r4
 800701c:	f000 fb28 	bl	8007670 <__multadd>
 8007020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007022:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007026:	4682      	mov	sl, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 81b0 	beq.w	800738e <_dtoa_r+0xbc6>
 800702e:	2300      	movs	r3, #0
 8007030:	4639      	mov	r1, r7
 8007032:	220a      	movs	r2, #10
 8007034:	4620      	mov	r0, r4
 8007036:	f000 fb1b 	bl	8007670 <__multadd>
 800703a:	9b01      	ldr	r3, [sp, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	4607      	mov	r7, r0
 8007040:	f300 8096 	bgt.w	8007170 <_dtoa_r+0x9a8>
 8007044:	9b07      	ldr	r3, [sp, #28]
 8007046:	2b02      	cmp	r3, #2
 8007048:	dc59      	bgt.n	80070fe <_dtoa_r+0x936>
 800704a:	e091      	b.n	8007170 <_dtoa_r+0x9a8>
 800704c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800704e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007052:	e758      	b.n	8006f06 <_dtoa_r+0x73e>
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	1e5e      	subs	r6, r3, #1
 8007058:	9b08      	ldr	r3, [sp, #32]
 800705a:	42b3      	cmp	r3, r6
 800705c:	bfbf      	itttt	lt
 800705e:	9b08      	ldrlt	r3, [sp, #32]
 8007060:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007062:	9608      	strlt	r6, [sp, #32]
 8007064:	1af3      	sublt	r3, r6, r3
 8007066:	bfb4      	ite	lt
 8007068:	18d2      	addlt	r2, r2, r3
 800706a:	1b9e      	subge	r6, r3, r6
 800706c:	9b04      	ldr	r3, [sp, #16]
 800706e:	bfbc      	itt	lt
 8007070:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007072:	2600      	movlt	r6, #0
 8007074:	2b00      	cmp	r3, #0
 8007076:	bfb7      	itett	lt
 8007078:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800707c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007080:	1a9d      	sublt	r5, r3, r2
 8007082:	2300      	movlt	r3, #0
 8007084:	e741      	b.n	8006f0a <_dtoa_r+0x742>
 8007086:	9e08      	ldr	r6, [sp, #32]
 8007088:	9d05      	ldr	r5, [sp, #20]
 800708a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800708c:	e748      	b.n	8006f20 <_dtoa_r+0x758>
 800708e:	9a08      	ldr	r2, [sp, #32]
 8007090:	e770      	b.n	8006f74 <_dtoa_r+0x7ac>
 8007092:	9b07      	ldr	r3, [sp, #28]
 8007094:	2b01      	cmp	r3, #1
 8007096:	dc19      	bgt.n	80070cc <_dtoa_r+0x904>
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	b9bb      	cbnz	r3, 80070cc <_dtoa_r+0x904>
 800709c:	9b03      	ldr	r3, [sp, #12]
 800709e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a2:	b99b      	cbnz	r3, 80070cc <_dtoa_r+0x904>
 80070a4:	9b03      	ldr	r3, [sp, #12]
 80070a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070aa:	0d1b      	lsrs	r3, r3, #20
 80070ac:	051b      	lsls	r3, r3, #20
 80070ae:	b183      	cbz	r3, 80070d2 <_dtoa_r+0x90a>
 80070b0:	9b05      	ldr	r3, [sp, #20]
 80070b2:	3301      	adds	r3, #1
 80070b4:	9305      	str	r3, [sp, #20]
 80070b6:	9b06      	ldr	r3, [sp, #24]
 80070b8:	3301      	adds	r3, #1
 80070ba:	9306      	str	r3, [sp, #24]
 80070bc:	f04f 0801 	mov.w	r8, #1
 80070c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f47f af6f 	bne.w	8006fa6 <_dtoa_r+0x7de>
 80070c8:	2001      	movs	r0, #1
 80070ca:	e774      	b.n	8006fb6 <_dtoa_r+0x7ee>
 80070cc:	f04f 0800 	mov.w	r8, #0
 80070d0:	e7f6      	b.n	80070c0 <_dtoa_r+0x8f8>
 80070d2:	4698      	mov	r8, r3
 80070d4:	e7f4      	b.n	80070c0 <_dtoa_r+0x8f8>
 80070d6:	d082      	beq.n	8006fde <_dtoa_r+0x816>
 80070d8:	9a05      	ldr	r2, [sp, #20]
 80070da:	331c      	adds	r3, #28
 80070dc:	441a      	add	r2, r3
 80070de:	9205      	str	r2, [sp, #20]
 80070e0:	9a06      	ldr	r2, [sp, #24]
 80070e2:	441a      	add	r2, r3
 80070e4:	441d      	add	r5, r3
 80070e6:	9206      	str	r2, [sp, #24]
 80070e8:	e779      	b.n	8006fde <_dtoa_r+0x816>
 80070ea:	4603      	mov	r3, r0
 80070ec:	e7f4      	b.n	80070d8 <_dtoa_r+0x910>
 80070ee:	9b04      	ldr	r3, [sp, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	dc37      	bgt.n	8007164 <_dtoa_r+0x99c>
 80070f4:	9b07      	ldr	r3, [sp, #28]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	dd34      	ble.n	8007164 <_dtoa_r+0x99c>
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	b963      	cbnz	r3, 800711c <_dtoa_r+0x954>
 8007102:	4631      	mov	r1, r6
 8007104:	2205      	movs	r2, #5
 8007106:	4620      	mov	r0, r4
 8007108:	f000 fab2 	bl	8007670 <__multadd>
 800710c:	4601      	mov	r1, r0
 800710e:	4606      	mov	r6, r0
 8007110:	4650      	mov	r0, sl
 8007112:	f000 fcc7 	bl	8007aa4 <__mcmp>
 8007116:	2800      	cmp	r0, #0
 8007118:	f73f adbb 	bgt.w	8006c92 <_dtoa_r+0x4ca>
 800711c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800711e:	9d00      	ldr	r5, [sp, #0]
 8007120:	ea6f 0b03 	mvn.w	fp, r3
 8007124:	f04f 0800 	mov.w	r8, #0
 8007128:	4631      	mov	r1, r6
 800712a:	4620      	mov	r0, r4
 800712c:	f000 fa7e 	bl	800762c <_Bfree>
 8007130:	2f00      	cmp	r7, #0
 8007132:	f43f aeab 	beq.w	8006e8c <_dtoa_r+0x6c4>
 8007136:	f1b8 0f00 	cmp.w	r8, #0
 800713a:	d005      	beq.n	8007148 <_dtoa_r+0x980>
 800713c:	45b8      	cmp	r8, r7
 800713e:	d003      	beq.n	8007148 <_dtoa_r+0x980>
 8007140:	4641      	mov	r1, r8
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fa72 	bl	800762c <_Bfree>
 8007148:	4639      	mov	r1, r7
 800714a:	4620      	mov	r0, r4
 800714c:	f000 fa6e 	bl	800762c <_Bfree>
 8007150:	e69c      	b.n	8006e8c <_dtoa_r+0x6c4>
 8007152:	2600      	movs	r6, #0
 8007154:	4637      	mov	r7, r6
 8007156:	e7e1      	b.n	800711c <_dtoa_r+0x954>
 8007158:	46bb      	mov	fp, r7
 800715a:	4637      	mov	r7, r6
 800715c:	e599      	b.n	8006c92 <_dtoa_r+0x4ca>
 800715e:	bf00      	nop
 8007160:	40240000 	.word	0x40240000
 8007164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80c8 	beq.w	80072fc <_dtoa_r+0xb34>
 800716c:	9b04      	ldr	r3, [sp, #16]
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	2d00      	cmp	r5, #0
 8007172:	dd05      	ble.n	8007180 <_dtoa_r+0x9b8>
 8007174:	4639      	mov	r1, r7
 8007176:	462a      	mov	r2, r5
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fc27 	bl	80079cc <__lshift>
 800717e:	4607      	mov	r7, r0
 8007180:	f1b8 0f00 	cmp.w	r8, #0
 8007184:	d05b      	beq.n	800723e <_dtoa_r+0xa76>
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fa0f 	bl	80075ac <_Balloc>
 800718e:	4605      	mov	r5, r0
 8007190:	b928      	cbnz	r0, 800719e <_dtoa_r+0x9d6>
 8007192:	4b83      	ldr	r3, [pc, #524]	; (80073a0 <_dtoa_r+0xbd8>)
 8007194:	4602      	mov	r2, r0
 8007196:	f240 21ef 	movw	r1, #751	; 0x2ef
 800719a:	f7ff bb2e 	b.w	80067fa <_dtoa_r+0x32>
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	3202      	adds	r2, #2
 80071a2:	0092      	lsls	r2, r2, #2
 80071a4:	f107 010c 	add.w	r1, r7, #12
 80071a8:	300c      	adds	r0, #12
 80071aa:	f001 f813 	bl	80081d4 <memcpy>
 80071ae:	2201      	movs	r2, #1
 80071b0:	4629      	mov	r1, r5
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 fc0a 	bl	80079cc <__lshift>
 80071b8:	9b00      	ldr	r3, [sp, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071c2:	4413      	add	r3, r2
 80071c4:	9308      	str	r3, [sp, #32]
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	46b8      	mov	r8, r7
 80071ce:	9306      	str	r3, [sp, #24]
 80071d0:	4607      	mov	r7, r0
 80071d2:	9b04      	ldr	r3, [sp, #16]
 80071d4:	4631      	mov	r1, r6
 80071d6:	3b01      	subs	r3, #1
 80071d8:	4650      	mov	r0, sl
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	f7ff fa6c 	bl	80066b8 <quorem>
 80071e0:	4641      	mov	r1, r8
 80071e2:	9002      	str	r0, [sp, #8]
 80071e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80071e8:	4650      	mov	r0, sl
 80071ea:	f000 fc5b 	bl	8007aa4 <__mcmp>
 80071ee:	463a      	mov	r2, r7
 80071f0:	9005      	str	r0, [sp, #20]
 80071f2:	4631      	mov	r1, r6
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 fc71 	bl	8007adc <__mdiff>
 80071fa:	68c2      	ldr	r2, [r0, #12]
 80071fc:	4605      	mov	r5, r0
 80071fe:	bb02      	cbnz	r2, 8007242 <_dtoa_r+0xa7a>
 8007200:	4601      	mov	r1, r0
 8007202:	4650      	mov	r0, sl
 8007204:	f000 fc4e 	bl	8007aa4 <__mcmp>
 8007208:	4602      	mov	r2, r0
 800720a:	4629      	mov	r1, r5
 800720c:	4620      	mov	r0, r4
 800720e:	9209      	str	r2, [sp, #36]	; 0x24
 8007210:	f000 fa0c 	bl	800762c <_Bfree>
 8007214:	9b07      	ldr	r3, [sp, #28]
 8007216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007218:	9d04      	ldr	r5, [sp, #16]
 800721a:	ea43 0102 	orr.w	r1, r3, r2
 800721e:	9b06      	ldr	r3, [sp, #24]
 8007220:	4319      	orrs	r1, r3
 8007222:	d110      	bne.n	8007246 <_dtoa_r+0xa7e>
 8007224:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007228:	d029      	beq.n	800727e <_dtoa_r+0xab6>
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	dd02      	ble.n	8007236 <_dtoa_r+0xa6e>
 8007230:	9b02      	ldr	r3, [sp, #8]
 8007232:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	f883 9000 	strb.w	r9, [r3]
 800723c:	e774      	b.n	8007128 <_dtoa_r+0x960>
 800723e:	4638      	mov	r0, r7
 8007240:	e7ba      	b.n	80071b8 <_dtoa_r+0x9f0>
 8007242:	2201      	movs	r2, #1
 8007244:	e7e1      	b.n	800720a <_dtoa_r+0xa42>
 8007246:	9b05      	ldr	r3, [sp, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	db04      	blt.n	8007256 <_dtoa_r+0xa8e>
 800724c:	9907      	ldr	r1, [sp, #28]
 800724e:	430b      	orrs	r3, r1
 8007250:	9906      	ldr	r1, [sp, #24]
 8007252:	430b      	orrs	r3, r1
 8007254:	d120      	bne.n	8007298 <_dtoa_r+0xad0>
 8007256:	2a00      	cmp	r2, #0
 8007258:	dded      	ble.n	8007236 <_dtoa_r+0xa6e>
 800725a:	4651      	mov	r1, sl
 800725c:	2201      	movs	r2, #1
 800725e:	4620      	mov	r0, r4
 8007260:	f000 fbb4 	bl	80079cc <__lshift>
 8007264:	4631      	mov	r1, r6
 8007266:	4682      	mov	sl, r0
 8007268:	f000 fc1c 	bl	8007aa4 <__mcmp>
 800726c:	2800      	cmp	r0, #0
 800726e:	dc03      	bgt.n	8007278 <_dtoa_r+0xab0>
 8007270:	d1e1      	bne.n	8007236 <_dtoa_r+0xa6e>
 8007272:	f019 0f01 	tst.w	r9, #1
 8007276:	d0de      	beq.n	8007236 <_dtoa_r+0xa6e>
 8007278:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800727c:	d1d8      	bne.n	8007230 <_dtoa_r+0xa68>
 800727e:	9a01      	ldr	r2, [sp, #4]
 8007280:	2339      	movs	r3, #57	; 0x39
 8007282:	7013      	strb	r3, [r2, #0]
 8007284:	462b      	mov	r3, r5
 8007286:	461d      	mov	r5, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800728e:	2a39      	cmp	r2, #57	; 0x39
 8007290:	d06c      	beq.n	800736c <_dtoa_r+0xba4>
 8007292:	3201      	adds	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e747      	b.n	8007128 <_dtoa_r+0x960>
 8007298:	2a00      	cmp	r2, #0
 800729a:	dd07      	ble.n	80072ac <_dtoa_r+0xae4>
 800729c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072a0:	d0ed      	beq.n	800727e <_dtoa_r+0xab6>
 80072a2:	9a01      	ldr	r2, [sp, #4]
 80072a4:	f109 0301 	add.w	r3, r9, #1
 80072a8:	7013      	strb	r3, [r2, #0]
 80072aa:	e73d      	b.n	8007128 <_dtoa_r+0x960>
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	9a08      	ldr	r2, [sp, #32]
 80072b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d043      	beq.n	8007340 <_dtoa_r+0xb78>
 80072b8:	4651      	mov	r1, sl
 80072ba:	2300      	movs	r3, #0
 80072bc:	220a      	movs	r2, #10
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f9d6 	bl	8007670 <__multadd>
 80072c4:	45b8      	cmp	r8, r7
 80072c6:	4682      	mov	sl, r0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	f04f 020a 	mov.w	r2, #10
 80072d0:	4641      	mov	r1, r8
 80072d2:	4620      	mov	r0, r4
 80072d4:	d107      	bne.n	80072e6 <_dtoa_r+0xb1e>
 80072d6:	f000 f9cb 	bl	8007670 <__multadd>
 80072da:	4680      	mov	r8, r0
 80072dc:	4607      	mov	r7, r0
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	3301      	adds	r3, #1
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	e775      	b.n	80071d2 <_dtoa_r+0xa0a>
 80072e6:	f000 f9c3 	bl	8007670 <__multadd>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4680      	mov	r8, r0
 80072ee:	2300      	movs	r3, #0
 80072f0:	220a      	movs	r2, #10
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f9bc 	bl	8007670 <__multadd>
 80072f8:	4607      	mov	r7, r0
 80072fa:	e7f0      	b.n	80072de <_dtoa_r+0xb16>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	9d00      	ldr	r5, [sp, #0]
 8007302:	4631      	mov	r1, r6
 8007304:	4650      	mov	r0, sl
 8007306:	f7ff f9d7 	bl	80066b8 <quorem>
 800730a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	f805 9b01 	strb.w	r9, [r5], #1
 8007314:	1aea      	subs	r2, r5, r3
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	4293      	cmp	r3, r2
 800731a:	dd07      	ble.n	800732c <_dtoa_r+0xb64>
 800731c:	4651      	mov	r1, sl
 800731e:	2300      	movs	r3, #0
 8007320:	220a      	movs	r2, #10
 8007322:	4620      	mov	r0, r4
 8007324:	f000 f9a4 	bl	8007670 <__multadd>
 8007328:	4682      	mov	sl, r0
 800732a:	e7ea      	b.n	8007302 <_dtoa_r+0xb3a>
 800732c:	9b01      	ldr	r3, [sp, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfc8      	it	gt
 8007332:	461d      	movgt	r5, r3
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	bfd8      	it	le
 8007338:	2501      	movle	r5, #1
 800733a:	441d      	add	r5, r3
 800733c:	f04f 0800 	mov.w	r8, #0
 8007340:	4651      	mov	r1, sl
 8007342:	2201      	movs	r2, #1
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fb41 	bl	80079cc <__lshift>
 800734a:	4631      	mov	r1, r6
 800734c:	4682      	mov	sl, r0
 800734e:	f000 fba9 	bl	8007aa4 <__mcmp>
 8007352:	2800      	cmp	r0, #0
 8007354:	dc96      	bgt.n	8007284 <_dtoa_r+0xabc>
 8007356:	d102      	bne.n	800735e <_dtoa_r+0xb96>
 8007358:	f019 0f01 	tst.w	r9, #1
 800735c:	d192      	bne.n	8007284 <_dtoa_r+0xabc>
 800735e:	462b      	mov	r3, r5
 8007360:	461d      	mov	r5, r3
 8007362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007366:	2a30      	cmp	r2, #48	; 0x30
 8007368:	d0fa      	beq.n	8007360 <_dtoa_r+0xb98>
 800736a:	e6dd      	b.n	8007128 <_dtoa_r+0x960>
 800736c:	9a00      	ldr	r2, [sp, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d189      	bne.n	8007286 <_dtoa_r+0xabe>
 8007372:	f10b 0b01 	add.w	fp, fp, #1
 8007376:	2331      	movs	r3, #49	; 0x31
 8007378:	e796      	b.n	80072a8 <_dtoa_r+0xae0>
 800737a:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <_dtoa_r+0xbdc>)
 800737c:	f7ff ba99 	b.w	80068b2 <_dtoa_r+0xea>
 8007380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007382:	2b00      	cmp	r3, #0
 8007384:	f47f aa6d 	bne.w	8006862 <_dtoa_r+0x9a>
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <_dtoa_r+0xbe0>)
 800738a:	f7ff ba92 	b.w	80068b2 <_dtoa_r+0xea>
 800738e:	9b01      	ldr	r3, [sp, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dcb5      	bgt.n	8007300 <_dtoa_r+0xb38>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	2b02      	cmp	r3, #2
 8007398:	f73f aeb1 	bgt.w	80070fe <_dtoa_r+0x936>
 800739c:	e7b0      	b.n	8007300 <_dtoa_r+0xb38>
 800739e:	bf00      	nop
 80073a0:	080085a0 	.word	0x080085a0
 80073a4:	08008500 	.word	0x08008500
 80073a8:	08008524 	.word	0x08008524

080073ac <_free_r>:
 80073ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ae:	2900      	cmp	r1, #0
 80073b0:	d044      	beq.n	800743c <_free_r+0x90>
 80073b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b6:	9001      	str	r0, [sp, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f1a1 0404 	sub.w	r4, r1, #4
 80073be:	bfb8      	it	lt
 80073c0:	18e4      	addlt	r4, r4, r3
 80073c2:	f000 f8e7 	bl	8007594 <__malloc_lock>
 80073c6:	4a1e      	ldr	r2, [pc, #120]	; (8007440 <_free_r+0x94>)
 80073c8:	9801      	ldr	r0, [sp, #4]
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	b933      	cbnz	r3, 80073dc <_free_r+0x30>
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	6014      	str	r4, [r2, #0]
 80073d2:	b003      	add	sp, #12
 80073d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073d8:	f000 b8e2 	b.w	80075a0 <__malloc_unlock>
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d908      	bls.n	80073f2 <_free_r+0x46>
 80073e0:	6825      	ldr	r5, [r4, #0]
 80073e2:	1961      	adds	r1, r4, r5
 80073e4:	428b      	cmp	r3, r1
 80073e6:	bf01      	itttt	eq
 80073e8:	6819      	ldreq	r1, [r3, #0]
 80073ea:	685b      	ldreq	r3, [r3, #4]
 80073ec:	1949      	addeq	r1, r1, r5
 80073ee:	6021      	streq	r1, [r4, #0]
 80073f0:	e7ed      	b.n	80073ce <_free_r+0x22>
 80073f2:	461a      	mov	r2, r3
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	b10b      	cbz	r3, 80073fc <_free_r+0x50>
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	d9fa      	bls.n	80073f2 <_free_r+0x46>
 80073fc:	6811      	ldr	r1, [r2, #0]
 80073fe:	1855      	adds	r5, r2, r1
 8007400:	42a5      	cmp	r5, r4
 8007402:	d10b      	bne.n	800741c <_free_r+0x70>
 8007404:	6824      	ldr	r4, [r4, #0]
 8007406:	4421      	add	r1, r4
 8007408:	1854      	adds	r4, r2, r1
 800740a:	42a3      	cmp	r3, r4
 800740c:	6011      	str	r1, [r2, #0]
 800740e:	d1e0      	bne.n	80073d2 <_free_r+0x26>
 8007410:	681c      	ldr	r4, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	6053      	str	r3, [r2, #4]
 8007416:	440c      	add	r4, r1
 8007418:	6014      	str	r4, [r2, #0]
 800741a:	e7da      	b.n	80073d2 <_free_r+0x26>
 800741c:	d902      	bls.n	8007424 <_free_r+0x78>
 800741e:	230c      	movs	r3, #12
 8007420:	6003      	str	r3, [r0, #0]
 8007422:	e7d6      	b.n	80073d2 <_free_r+0x26>
 8007424:	6825      	ldr	r5, [r4, #0]
 8007426:	1961      	adds	r1, r4, r5
 8007428:	428b      	cmp	r3, r1
 800742a:	bf04      	itt	eq
 800742c:	6819      	ldreq	r1, [r3, #0]
 800742e:	685b      	ldreq	r3, [r3, #4]
 8007430:	6063      	str	r3, [r4, #4]
 8007432:	bf04      	itt	eq
 8007434:	1949      	addeq	r1, r1, r5
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	6054      	str	r4, [r2, #4]
 800743a:	e7ca      	b.n	80073d2 <_free_r+0x26>
 800743c:	b003      	add	sp, #12
 800743e:	bd30      	pop	{r4, r5, pc}
 8007440:	200004cc 	.word	0x200004cc

08007444 <malloc>:
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <malloc+0xc>)
 8007446:	4601      	mov	r1, r0
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	f000 b823 	b.w	8007494 <_malloc_r>
 800744e:	bf00      	nop
 8007450:	20000064 	.word	0x20000064

08007454 <sbrk_aligned>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4e0e      	ldr	r6, [pc, #56]	; (8007490 <sbrk_aligned+0x3c>)
 8007458:	460c      	mov	r4, r1
 800745a:	6831      	ldr	r1, [r6, #0]
 800745c:	4605      	mov	r5, r0
 800745e:	b911      	cbnz	r1, 8007466 <sbrk_aligned+0x12>
 8007460:	f000 fea8 	bl	80081b4 <_sbrk_r>
 8007464:	6030      	str	r0, [r6, #0]
 8007466:	4621      	mov	r1, r4
 8007468:	4628      	mov	r0, r5
 800746a:	f000 fea3 	bl	80081b4 <_sbrk_r>
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	d00a      	beq.n	8007488 <sbrk_aligned+0x34>
 8007472:	1cc4      	adds	r4, r0, #3
 8007474:	f024 0403 	bic.w	r4, r4, #3
 8007478:	42a0      	cmp	r0, r4
 800747a:	d007      	beq.n	800748c <sbrk_aligned+0x38>
 800747c:	1a21      	subs	r1, r4, r0
 800747e:	4628      	mov	r0, r5
 8007480:	f000 fe98 	bl	80081b4 <_sbrk_r>
 8007484:	3001      	adds	r0, #1
 8007486:	d101      	bne.n	800748c <sbrk_aligned+0x38>
 8007488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800748c:	4620      	mov	r0, r4
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	200004d0 	.word	0x200004d0

08007494 <_malloc_r>:
 8007494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007498:	1ccd      	adds	r5, r1, #3
 800749a:	f025 0503 	bic.w	r5, r5, #3
 800749e:	3508      	adds	r5, #8
 80074a0:	2d0c      	cmp	r5, #12
 80074a2:	bf38      	it	cc
 80074a4:	250c      	movcc	r5, #12
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	4607      	mov	r7, r0
 80074aa:	db01      	blt.n	80074b0 <_malloc_r+0x1c>
 80074ac:	42a9      	cmp	r1, r5
 80074ae:	d905      	bls.n	80074bc <_malloc_r+0x28>
 80074b0:	230c      	movs	r3, #12
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	2600      	movs	r6, #0
 80074b6:	4630      	mov	r0, r6
 80074b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007590 <_malloc_r+0xfc>
 80074c0:	f000 f868 	bl	8007594 <__malloc_lock>
 80074c4:	f8d8 3000 	ldr.w	r3, [r8]
 80074c8:	461c      	mov	r4, r3
 80074ca:	bb5c      	cbnz	r4, 8007524 <_malloc_r+0x90>
 80074cc:	4629      	mov	r1, r5
 80074ce:	4638      	mov	r0, r7
 80074d0:	f7ff ffc0 	bl	8007454 <sbrk_aligned>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	4604      	mov	r4, r0
 80074d8:	d155      	bne.n	8007586 <_malloc_r+0xf2>
 80074da:	f8d8 4000 	ldr.w	r4, [r8]
 80074de:	4626      	mov	r6, r4
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	d145      	bne.n	8007570 <_malloc_r+0xdc>
 80074e4:	2c00      	cmp	r4, #0
 80074e6:	d048      	beq.n	800757a <_malloc_r+0xe6>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	4631      	mov	r1, r6
 80074ec:	4638      	mov	r0, r7
 80074ee:	eb04 0903 	add.w	r9, r4, r3
 80074f2:	f000 fe5f 	bl	80081b4 <_sbrk_r>
 80074f6:	4581      	cmp	r9, r0
 80074f8:	d13f      	bne.n	800757a <_malloc_r+0xe6>
 80074fa:	6821      	ldr	r1, [r4, #0]
 80074fc:	1a6d      	subs	r5, r5, r1
 80074fe:	4629      	mov	r1, r5
 8007500:	4638      	mov	r0, r7
 8007502:	f7ff ffa7 	bl	8007454 <sbrk_aligned>
 8007506:	3001      	adds	r0, #1
 8007508:	d037      	beq.n	800757a <_malloc_r+0xe6>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	442b      	add	r3, r5
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	f8d8 3000 	ldr.w	r3, [r8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d038      	beq.n	800758a <_malloc_r+0xf6>
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	42a2      	cmp	r2, r4
 800751c:	d12b      	bne.n	8007576 <_malloc_r+0xe2>
 800751e:	2200      	movs	r2, #0
 8007520:	605a      	str	r2, [r3, #4]
 8007522:	e00f      	b.n	8007544 <_malloc_r+0xb0>
 8007524:	6822      	ldr	r2, [r4, #0]
 8007526:	1b52      	subs	r2, r2, r5
 8007528:	d41f      	bmi.n	800756a <_malloc_r+0xd6>
 800752a:	2a0b      	cmp	r2, #11
 800752c:	d917      	bls.n	800755e <_malloc_r+0xca>
 800752e:	1961      	adds	r1, r4, r5
 8007530:	42a3      	cmp	r3, r4
 8007532:	6025      	str	r5, [r4, #0]
 8007534:	bf18      	it	ne
 8007536:	6059      	strne	r1, [r3, #4]
 8007538:	6863      	ldr	r3, [r4, #4]
 800753a:	bf08      	it	eq
 800753c:	f8c8 1000 	streq.w	r1, [r8]
 8007540:	5162      	str	r2, [r4, r5]
 8007542:	604b      	str	r3, [r1, #4]
 8007544:	4638      	mov	r0, r7
 8007546:	f104 060b 	add.w	r6, r4, #11
 800754a:	f000 f829 	bl	80075a0 <__malloc_unlock>
 800754e:	f026 0607 	bic.w	r6, r6, #7
 8007552:	1d23      	adds	r3, r4, #4
 8007554:	1af2      	subs	r2, r6, r3
 8007556:	d0ae      	beq.n	80074b6 <_malloc_r+0x22>
 8007558:	1b9b      	subs	r3, r3, r6
 800755a:	50a3      	str	r3, [r4, r2]
 800755c:	e7ab      	b.n	80074b6 <_malloc_r+0x22>
 800755e:	42a3      	cmp	r3, r4
 8007560:	6862      	ldr	r2, [r4, #4]
 8007562:	d1dd      	bne.n	8007520 <_malloc_r+0x8c>
 8007564:	f8c8 2000 	str.w	r2, [r8]
 8007568:	e7ec      	b.n	8007544 <_malloc_r+0xb0>
 800756a:	4623      	mov	r3, r4
 800756c:	6864      	ldr	r4, [r4, #4]
 800756e:	e7ac      	b.n	80074ca <_malloc_r+0x36>
 8007570:	4634      	mov	r4, r6
 8007572:	6876      	ldr	r6, [r6, #4]
 8007574:	e7b4      	b.n	80074e0 <_malloc_r+0x4c>
 8007576:	4613      	mov	r3, r2
 8007578:	e7cc      	b.n	8007514 <_malloc_r+0x80>
 800757a:	230c      	movs	r3, #12
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4638      	mov	r0, r7
 8007580:	f000 f80e 	bl	80075a0 <__malloc_unlock>
 8007584:	e797      	b.n	80074b6 <_malloc_r+0x22>
 8007586:	6025      	str	r5, [r4, #0]
 8007588:	e7dc      	b.n	8007544 <_malloc_r+0xb0>
 800758a:	605b      	str	r3, [r3, #4]
 800758c:	deff      	udf	#255	; 0xff
 800758e:	bf00      	nop
 8007590:	200004cc 	.word	0x200004cc

08007594 <__malloc_lock>:
 8007594:	4801      	ldr	r0, [pc, #4]	; (800759c <__malloc_lock+0x8>)
 8007596:	f7ff b88d 	b.w	80066b4 <__retarget_lock_acquire_recursive>
 800759a:	bf00      	nop
 800759c:	200004c8 	.word	0x200004c8

080075a0 <__malloc_unlock>:
 80075a0:	4801      	ldr	r0, [pc, #4]	; (80075a8 <__malloc_unlock+0x8>)
 80075a2:	f7ff b888 	b.w	80066b6 <__retarget_lock_release_recursive>
 80075a6:	bf00      	nop
 80075a8:	200004c8 	.word	0x200004c8

080075ac <_Balloc>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	69c6      	ldr	r6, [r0, #28]
 80075b0:	4604      	mov	r4, r0
 80075b2:	460d      	mov	r5, r1
 80075b4:	b976      	cbnz	r6, 80075d4 <_Balloc+0x28>
 80075b6:	2010      	movs	r0, #16
 80075b8:	f7ff ff44 	bl	8007444 <malloc>
 80075bc:	4602      	mov	r2, r0
 80075be:	61e0      	str	r0, [r4, #28]
 80075c0:	b920      	cbnz	r0, 80075cc <_Balloc+0x20>
 80075c2:	4b18      	ldr	r3, [pc, #96]	; (8007624 <_Balloc+0x78>)
 80075c4:	4818      	ldr	r0, [pc, #96]	; (8007628 <_Balloc+0x7c>)
 80075c6:	216b      	movs	r1, #107	; 0x6b
 80075c8:	f000 fe12 	bl	80081f0 <__assert_func>
 80075cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075d0:	6006      	str	r6, [r0, #0]
 80075d2:	60c6      	str	r6, [r0, #12]
 80075d4:	69e6      	ldr	r6, [r4, #28]
 80075d6:	68f3      	ldr	r3, [r6, #12]
 80075d8:	b183      	cbz	r3, 80075fc <_Balloc+0x50>
 80075da:	69e3      	ldr	r3, [r4, #28]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075e2:	b9b8      	cbnz	r0, 8007614 <_Balloc+0x68>
 80075e4:	2101      	movs	r1, #1
 80075e6:	fa01 f605 	lsl.w	r6, r1, r5
 80075ea:	1d72      	adds	r2, r6, #5
 80075ec:	0092      	lsls	r2, r2, #2
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 fe1c 	bl	800822c <_calloc_r>
 80075f4:	b160      	cbz	r0, 8007610 <_Balloc+0x64>
 80075f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075fa:	e00e      	b.n	800761a <_Balloc+0x6e>
 80075fc:	2221      	movs	r2, #33	; 0x21
 80075fe:	2104      	movs	r1, #4
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fe13 	bl	800822c <_calloc_r>
 8007606:	69e3      	ldr	r3, [r4, #28]
 8007608:	60f0      	str	r0, [r6, #12]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e4      	bne.n	80075da <_Balloc+0x2e>
 8007610:	2000      	movs	r0, #0
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	6802      	ldr	r2, [r0, #0]
 8007616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800761a:	2300      	movs	r3, #0
 800761c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007620:	e7f7      	b.n	8007612 <_Balloc+0x66>
 8007622:	bf00      	nop
 8007624:	08008531 	.word	0x08008531
 8007628:	080085b1 	.word	0x080085b1

0800762c <_Bfree>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	69c6      	ldr	r6, [r0, #28]
 8007630:	4605      	mov	r5, r0
 8007632:	460c      	mov	r4, r1
 8007634:	b976      	cbnz	r6, 8007654 <_Bfree+0x28>
 8007636:	2010      	movs	r0, #16
 8007638:	f7ff ff04 	bl	8007444 <malloc>
 800763c:	4602      	mov	r2, r0
 800763e:	61e8      	str	r0, [r5, #28]
 8007640:	b920      	cbnz	r0, 800764c <_Bfree+0x20>
 8007642:	4b09      	ldr	r3, [pc, #36]	; (8007668 <_Bfree+0x3c>)
 8007644:	4809      	ldr	r0, [pc, #36]	; (800766c <_Bfree+0x40>)
 8007646:	218f      	movs	r1, #143	; 0x8f
 8007648:	f000 fdd2 	bl	80081f0 <__assert_func>
 800764c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007650:	6006      	str	r6, [r0, #0]
 8007652:	60c6      	str	r6, [r0, #12]
 8007654:	b13c      	cbz	r4, 8007666 <_Bfree+0x3a>
 8007656:	69eb      	ldr	r3, [r5, #28]
 8007658:	6862      	ldr	r2, [r4, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007660:	6021      	str	r1, [r4, #0]
 8007662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	08008531 	.word	0x08008531
 800766c:	080085b1 	.word	0x080085b1

08007670 <__multadd>:
 8007670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007674:	690d      	ldr	r5, [r1, #16]
 8007676:	4607      	mov	r7, r0
 8007678:	460c      	mov	r4, r1
 800767a:	461e      	mov	r6, r3
 800767c:	f101 0c14 	add.w	ip, r1, #20
 8007680:	2000      	movs	r0, #0
 8007682:	f8dc 3000 	ldr.w	r3, [ip]
 8007686:	b299      	uxth	r1, r3
 8007688:	fb02 6101 	mla	r1, r2, r1, r6
 800768c:	0c1e      	lsrs	r6, r3, #16
 800768e:	0c0b      	lsrs	r3, r1, #16
 8007690:	fb02 3306 	mla	r3, r2, r6, r3
 8007694:	b289      	uxth	r1, r1
 8007696:	3001      	adds	r0, #1
 8007698:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800769c:	4285      	cmp	r5, r0
 800769e:	f84c 1b04 	str.w	r1, [ip], #4
 80076a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076a6:	dcec      	bgt.n	8007682 <__multadd+0x12>
 80076a8:	b30e      	cbz	r6, 80076ee <__multadd+0x7e>
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	42ab      	cmp	r3, r5
 80076ae:	dc19      	bgt.n	80076e4 <__multadd+0x74>
 80076b0:	6861      	ldr	r1, [r4, #4]
 80076b2:	4638      	mov	r0, r7
 80076b4:	3101      	adds	r1, #1
 80076b6:	f7ff ff79 	bl	80075ac <_Balloc>
 80076ba:	4680      	mov	r8, r0
 80076bc:	b928      	cbnz	r0, 80076ca <__multadd+0x5a>
 80076be:	4602      	mov	r2, r0
 80076c0:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <__multadd+0x84>)
 80076c2:	480d      	ldr	r0, [pc, #52]	; (80076f8 <__multadd+0x88>)
 80076c4:	21ba      	movs	r1, #186	; 0xba
 80076c6:	f000 fd93 	bl	80081f0 <__assert_func>
 80076ca:	6922      	ldr	r2, [r4, #16]
 80076cc:	3202      	adds	r2, #2
 80076ce:	f104 010c 	add.w	r1, r4, #12
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	300c      	adds	r0, #12
 80076d6:	f000 fd7d 	bl	80081d4 <memcpy>
 80076da:	4621      	mov	r1, r4
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff ffa5 	bl	800762c <_Bfree>
 80076e2:	4644      	mov	r4, r8
 80076e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076e8:	3501      	adds	r5, #1
 80076ea:	615e      	str	r6, [r3, #20]
 80076ec:	6125      	str	r5, [r4, #16]
 80076ee:	4620      	mov	r0, r4
 80076f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f4:	080085a0 	.word	0x080085a0
 80076f8:	080085b1 	.word	0x080085b1

080076fc <__hi0bits>:
 80076fc:	0c03      	lsrs	r3, r0, #16
 80076fe:	041b      	lsls	r3, r3, #16
 8007700:	b9d3      	cbnz	r3, 8007738 <__hi0bits+0x3c>
 8007702:	0400      	lsls	r0, r0, #16
 8007704:	2310      	movs	r3, #16
 8007706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800770a:	bf04      	itt	eq
 800770c:	0200      	lsleq	r0, r0, #8
 800770e:	3308      	addeq	r3, #8
 8007710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007714:	bf04      	itt	eq
 8007716:	0100      	lsleq	r0, r0, #4
 8007718:	3304      	addeq	r3, #4
 800771a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800771e:	bf04      	itt	eq
 8007720:	0080      	lsleq	r0, r0, #2
 8007722:	3302      	addeq	r3, #2
 8007724:	2800      	cmp	r0, #0
 8007726:	db05      	blt.n	8007734 <__hi0bits+0x38>
 8007728:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800772c:	f103 0301 	add.w	r3, r3, #1
 8007730:	bf08      	it	eq
 8007732:	2320      	moveq	r3, #32
 8007734:	4618      	mov	r0, r3
 8007736:	4770      	bx	lr
 8007738:	2300      	movs	r3, #0
 800773a:	e7e4      	b.n	8007706 <__hi0bits+0xa>

0800773c <__lo0bits>:
 800773c:	6803      	ldr	r3, [r0, #0]
 800773e:	f013 0207 	ands.w	r2, r3, #7
 8007742:	d00c      	beq.n	800775e <__lo0bits+0x22>
 8007744:	07d9      	lsls	r1, r3, #31
 8007746:	d422      	bmi.n	800778e <__lo0bits+0x52>
 8007748:	079a      	lsls	r2, r3, #30
 800774a:	bf49      	itett	mi
 800774c:	085b      	lsrmi	r3, r3, #1
 800774e:	089b      	lsrpl	r3, r3, #2
 8007750:	6003      	strmi	r3, [r0, #0]
 8007752:	2201      	movmi	r2, #1
 8007754:	bf5c      	itt	pl
 8007756:	6003      	strpl	r3, [r0, #0]
 8007758:	2202      	movpl	r2, #2
 800775a:	4610      	mov	r0, r2
 800775c:	4770      	bx	lr
 800775e:	b299      	uxth	r1, r3
 8007760:	b909      	cbnz	r1, 8007766 <__lo0bits+0x2a>
 8007762:	0c1b      	lsrs	r3, r3, #16
 8007764:	2210      	movs	r2, #16
 8007766:	b2d9      	uxtb	r1, r3
 8007768:	b909      	cbnz	r1, 800776e <__lo0bits+0x32>
 800776a:	3208      	adds	r2, #8
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	0719      	lsls	r1, r3, #28
 8007770:	bf04      	itt	eq
 8007772:	091b      	lsreq	r3, r3, #4
 8007774:	3204      	addeq	r2, #4
 8007776:	0799      	lsls	r1, r3, #30
 8007778:	bf04      	itt	eq
 800777a:	089b      	lsreq	r3, r3, #2
 800777c:	3202      	addeq	r2, #2
 800777e:	07d9      	lsls	r1, r3, #31
 8007780:	d403      	bmi.n	800778a <__lo0bits+0x4e>
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	f102 0201 	add.w	r2, r2, #1
 8007788:	d003      	beq.n	8007792 <__lo0bits+0x56>
 800778a:	6003      	str	r3, [r0, #0]
 800778c:	e7e5      	b.n	800775a <__lo0bits+0x1e>
 800778e:	2200      	movs	r2, #0
 8007790:	e7e3      	b.n	800775a <__lo0bits+0x1e>
 8007792:	2220      	movs	r2, #32
 8007794:	e7e1      	b.n	800775a <__lo0bits+0x1e>
	...

08007798 <__i2b>:
 8007798:	b510      	push	{r4, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	2101      	movs	r1, #1
 800779e:	f7ff ff05 	bl	80075ac <_Balloc>
 80077a2:	4602      	mov	r2, r0
 80077a4:	b928      	cbnz	r0, 80077b2 <__i2b+0x1a>
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <__i2b+0x24>)
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <__i2b+0x28>)
 80077aa:	f240 1145 	movw	r1, #325	; 0x145
 80077ae:	f000 fd1f 	bl	80081f0 <__assert_func>
 80077b2:	2301      	movs	r3, #1
 80077b4:	6144      	str	r4, [r0, #20]
 80077b6:	6103      	str	r3, [r0, #16]
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	080085a0 	.word	0x080085a0
 80077c0:	080085b1 	.word	0x080085b1

080077c4 <__multiply>:
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	4691      	mov	r9, r2
 80077ca:	690a      	ldr	r2, [r1, #16]
 80077cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	bfb8      	it	lt
 80077d4:	460b      	movlt	r3, r1
 80077d6:	460c      	mov	r4, r1
 80077d8:	bfbc      	itt	lt
 80077da:	464c      	movlt	r4, r9
 80077dc:	4699      	movlt	r9, r3
 80077de:	6927      	ldr	r7, [r4, #16]
 80077e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077e4:	68a3      	ldr	r3, [r4, #8]
 80077e6:	6861      	ldr	r1, [r4, #4]
 80077e8:	eb07 060a 	add.w	r6, r7, sl
 80077ec:	42b3      	cmp	r3, r6
 80077ee:	b085      	sub	sp, #20
 80077f0:	bfb8      	it	lt
 80077f2:	3101      	addlt	r1, #1
 80077f4:	f7ff feda 	bl	80075ac <_Balloc>
 80077f8:	b930      	cbnz	r0, 8007808 <__multiply+0x44>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b44      	ldr	r3, [pc, #272]	; (8007910 <__multiply+0x14c>)
 80077fe:	4845      	ldr	r0, [pc, #276]	; (8007914 <__multiply+0x150>)
 8007800:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007804:	f000 fcf4 	bl	80081f0 <__assert_func>
 8007808:	f100 0514 	add.w	r5, r0, #20
 800780c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007810:	462b      	mov	r3, r5
 8007812:	2200      	movs	r2, #0
 8007814:	4543      	cmp	r3, r8
 8007816:	d321      	bcc.n	800785c <__multiply+0x98>
 8007818:	f104 0314 	add.w	r3, r4, #20
 800781c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007820:	f109 0314 	add.w	r3, r9, #20
 8007824:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007828:	9202      	str	r2, [sp, #8]
 800782a:	1b3a      	subs	r2, r7, r4
 800782c:	3a15      	subs	r2, #21
 800782e:	f022 0203 	bic.w	r2, r2, #3
 8007832:	3204      	adds	r2, #4
 8007834:	f104 0115 	add.w	r1, r4, #21
 8007838:	428f      	cmp	r7, r1
 800783a:	bf38      	it	cc
 800783c:	2204      	movcc	r2, #4
 800783e:	9201      	str	r2, [sp, #4]
 8007840:	9a02      	ldr	r2, [sp, #8]
 8007842:	9303      	str	r3, [sp, #12]
 8007844:	429a      	cmp	r2, r3
 8007846:	d80c      	bhi.n	8007862 <__multiply+0x9e>
 8007848:	2e00      	cmp	r6, #0
 800784a:	dd03      	ble.n	8007854 <__multiply+0x90>
 800784c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007850:	2b00      	cmp	r3, #0
 8007852:	d05b      	beq.n	800790c <__multiply+0x148>
 8007854:	6106      	str	r6, [r0, #16]
 8007856:	b005      	add	sp, #20
 8007858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785c:	f843 2b04 	str.w	r2, [r3], #4
 8007860:	e7d8      	b.n	8007814 <__multiply+0x50>
 8007862:	f8b3 a000 	ldrh.w	sl, [r3]
 8007866:	f1ba 0f00 	cmp.w	sl, #0
 800786a:	d024      	beq.n	80078b6 <__multiply+0xf2>
 800786c:	f104 0e14 	add.w	lr, r4, #20
 8007870:	46a9      	mov	r9, r5
 8007872:	f04f 0c00 	mov.w	ip, #0
 8007876:	f85e 2b04 	ldr.w	r2, [lr], #4
 800787a:	f8d9 1000 	ldr.w	r1, [r9]
 800787e:	fa1f fb82 	uxth.w	fp, r2
 8007882:	b289      	uxth	r1, r1
 8007884:	fb0a 110b 	mla	r1, sl, fp, r1
 8007888:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800788c:	f8d9 2000 	ldr.w	r2, [r9]
 8007890:	4461      	add	r1, ip
 8007892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007896:	fb0a c20b 	mla	r2, sl, fp, ip
 800789a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800789e:	b289      	uxth	r1, r1
 80078a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078a4:	4577      	cmp	r7, lr
 80078a6:	f849 1b04 	str.w	r1, [r9], #4
 80078aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078ae:	d8e2      	bhi.n	8007876 <__multiply+0xb2>
 80078b0:	9a01      	ldr	r2, [sp, #4]
 80078b2:	f845 c002 	str.w	ip, [r5, r2]
 80078b6:	9a03      	ldr	r2, [sp, #12]
 80078b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078bc:	3304      	adds	r3, #4
 80078be:	f1b9 0f00 	cmp.w	r9, #0
 80078c2:	d021      	beq.n	8007908 <__multiply+0x144>
 80078c4:	6829      	ldr	r1, [r5, #0]
 80078c6:	f104 0c14 	add.w	ip, r4, #20
 80078ca:	46ae      	mov	lr, r5
 80078cc:	f04f 0a00 	mov.w	sl, #0
 80078d0:	f8bc b000 	ldrh.w	fp, [ip]
 80078d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078d8:	fb09 220b 	mla	r2, r9, fp, r2
 80078dc:	4452      	add	r2, sl
 80078de:	b289      	uxth	r1, r1
 80078e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078e4:	f84e 1b04 	str.w	r1, [lr], #4
 80078e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078f0:	f8be 1000 	ldrh.w	r1, [lr]
 80078f4:	fb09 110a 	mla	r1, r9, sl, r1
 80078f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078fc:	4567      	cmp	r7, ip
 80078fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007902:	d8e5      	bhi.n	80078d0 <__multiply+0x10c>
 8007904:	9a01      	ldr	r2, [sp, #4]
 8007906:	50a9      	str	r1, [r5, r2]
 8007908:	3504      	adds	r5, #4
 800790a:	e799      	b.n	8007840 <__multiply+0x7c>
 800790c:	3e01      	subs	r6, #1
 800790e:	e79b      	b.n	8007848 <__multiply+0x84>
 8007910:	080085a0 	.word	0x080085a0
 8007914:	080085b1 	.word	0x080085b1

08007918 <__pow5mult>:
 8007918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800791c:	4615      	mov	r5, r2
 800791e:	f012 0203 	ands.w	r2, r2, #3
 8007922:	4606      	mov	r6, r0
 8007924:	460f      	mov	r7, r1
 8007926:	d007      	beq.n	8007938 <__pow5mult+0x20>
 8007928:	4c25      	ldr	r4, [pc, #148]	; (80079c0 <__pow5mult+0xa8>)
 800792a:	3a01      	subs	r2, #1
 800792c:	2300      	movs	r3, #0
 800792e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007932:	f7ff fe9d 	bl	8007670 <__multadd>
 8007936:	4607      	mov	r7, r0
 8007938:	10ad      	asrs	r5, r5, #2
 800793a:	d03d      	beq.n	80079b8 <__pow5mult+0xa0>
 800793c:	69f4      	ldr	r4, [r6, #28]
 800793e:	b97c      	cbnz	r4, 8007960 <__pow5mult+0x48>
 8007940:	2010      	movs	r0, #16
 8007942:	f7ff fd7f 	bl	8007444 <malloc>
 8007946:	4602      	mov	r2, r0
 8007948:	61f0      	str	r0, [r6, #28]
 800794a:	b928      	cbnz	r0, 8007958 <__pow5mult+0x40>
 800794c:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <__pow5mult+0xac>)
 800794e:	481e      	ldr	r0, [pc, #120]	; (80079c8 <__pow5mult+0xb0>)
 8007950:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007954:	f000 fc4c 	bl	80081f0 <__assert_func>
 8007958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800795c:	6004      	str	r4, [r0, #0]
 800795e:	60c4      	str	r4, [r0, #12]
 8007960:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007968:	b94c      	cbnz	r4, 800797e <__pow5mult+0x66>
 800796a:	f240 2171 	movw	r1, #625	; 0x271
 800796e:	4630      	mov	r0, r6
 8007970:	f7ff ff12 	bl	8007798 <__i2b>
 8007974:	2300      	movs	r3, #0
 8007976:	f8c8 0008 	str.w	r0, [r8, #8]
 800797a:	4604      	mov	r4, r0
 800797c:	6003      	str	r3, [r0, #0]
 800797e:	f04f 0900 	mov.w	r9, #0
 8007982:	07eb      	lsls	r3, r5, #31
 8007984:	d50a      	bpl.n	800799c <__pow5mult+0x84>
 8007986:	4639      	mov	r1, r7
 8007988:	4622      	mov	r2, r4
 800798a:	4630      	mov	r0, r6
 800798c:	f7ff ff1a 	bl	80077c4 <__multiply>
 8007990:	4639      	mov	r1, r7
 8007992:	4680      	mov	r8, r0
 8007994:	4630      	mov	r0, r6
 8007996:	f7ff fe49 	bl	800762c <_Bfree>
 800799a:	4647      	mov	r7, r8
 800799c:	106d      	asrs	r5, r5, #1
 800799e:	d00b      	beq.n	80079b8 <__pow5mult+0xa0>
 80079a0:	6820      	ldr	r0, [r4, #0]
 80079a2:	b938      	cbnz	r0, 80079b4 <__pow5mult+0x9c>
 80079a4:	4622      	mov	r2, r4
 80079a6:	4621      	mov	r1, r4
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff ff0b 	bl	80077c4 <__multiply>
 80079ae:	6020      	str	r0, [r4, #0]
 80079b0:	f8c0 9000 	str.w	r9, [r0]
 80079b4:	4604      	mov	r4, r0
 80079b6:	e7e4      	b.n	8007982 <__pow5mult+0x6a>
 80079b8:	4638      	mov	r0, r7
 80079ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079be:	bf00      	nop
 80079c0:	08008700 	.word	0x08008700
 80079c4:	08008531 	.word	0x08008531
 80079c8:	080085b1 	.word	0x080085b1

080079cc <__lshift>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	460c      	mov	r4, r1
 80079d2:	6849      	ldr	r1, [r1, #4]
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	4607      	mov	r7, r0
 80079de:	4691      	mov	r9, r2
 80079e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079e4:	f108 0601 	add.w	r6, r8, #1
 80079e8:	42b3      	cmp	r3, r6
 80079ea:	db0b      	blt.n	8007a04 <__lshift+0x38>
 80079ec:	4638      	mov	r0, r7
 80079ee:	f7ff fddd 	bl	80075ac <_Balloc>
 80079f2:	4605      	mov	r5, r0
 80079f4:	b948      	cbnz	r0, 8007a0a <__lshift+0x3e>
 80079f6:	4602      	mov	r2, r0
 80079f8:	4b28      	ldr	r3, [pc, #160]	; (8007a9c <__lshift+0xd0>)
 80079fa:	4829      	ldr	r0, [pc, #164]	; (8007aa0 <__lshift+0xd4>)
 80079fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007a00:	f000 fbf6 	bl	80081f0 <__assert_func>
 8007a04:	3101      	adds	r1, #1
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	e7ee      	b.n	80079e8 <__lshift+0x1c>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f100 0114 	add.w	r1, r0, #20
 8007a10:	f100 0210 	add.w	r2, r0, #16
 8007a14:	4618      	mov	r0, r3
 8007a16:	4553      	cmp	r3, sl
 8007a18:	db33      	blt.n	8007a82 <__lshift+0xb6>
 8007a1a:	6920      	ldr	r0, [r4, #16]
 8007a1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a20:	f104 0314 	add.w	r3, r4, #20
 8007a24:	f019 091f 	ands.w	r9, r9, #31
 8007a28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a30:	d02b      	beq.n	8007a8a <__lshift+0xbe>
 8007a32:	f1c9 0e20 	rsb	lr, r9, #32
 8007a36:	468a      	mov	sl, r1
 8007a38:	2200      	movs	r2, #0
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a40:	4310      	orrs	r0, r2
 8007a42:	f84a 0b04 	str.w	r0, [sl], #4
 8007a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a4a:	459c      	cmp	ip, r3
 8007a4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a50:	d8f3      	bhi.n	8007a3a <__lshift+0x6e>
 8007a52:	ebac 0304 	sub.w	r3, ip, r4
 8007a56:	3b15      	subs	r3, #21
 8007a58:	f023 0303 	bic.w	r3, r3, #3
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	f104 0015 	add.w	r0, r4, #21
 8007a62:	4584      	cmp	ip, r0
 8007a64:	bf38      	it	cc
 8007a66:	2304      	movcc	r3, #4
 8007a68:	50ca      	str	r2, [r1, r3]
 8007a6a:	b10a      	cbz	r2, 8007a70 <__lshift+0xa4>
 8007a6c:	f108 0602 	add.w	r6, r8, #2
 8007a70:	3e01      	subs	r6, #1
 8007a72:	4638      	mov	r0, r7
 8007a74:	612e      	str	r6, [r5, #16]
 8007a76:	4621      	mov	r1, r4
 8007a78:	f7ff fdd8 	bl	800762c <_Bfree>
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a86:	3301      	adds	r3, #1
 8007a88:	e7c5      	b.n	8007a16 <__lshift+0x4a>
 8007a8a:	3904      	subs	r1, #4
 8007a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a94:	459c      	cmp	ip, r3
 8007a96:	d8f9      	bhi.n	8007a8c <__lshift+0xc0>
 8007a98:	e7ea      	b.n	8007a70 <__lshift+0xa4>
 8007a9a:	bf00      	nop
 8007a9c:	080085a0 	.word	0x080085a0
 8007aa0:	080085b1 	.word	0x080085b1

08007aa4 <__mcmp>:
 8007aa4:	b530      	push	{r4, r5, lr}
 8007aa6:	6902      	ldr	r2, [r0, #16]
 8007aa8:	690c      	ldr	r4, [r1, #16]
 8007aaa:	1b12      	subs	r2, r2, r4
 8007aac:	d10e      	bne.n	8007acc <__mcmp+0x28>
 8007aae:	f100 0314 	add.w	r3, r0, #20
 8007ab2:	3114      	adds	r1, #20
 8007ab4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007abc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ac0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ac4:	42a5      	cmp	r5, r4
 8007ac6:	d003      	beq.n	8007ad0 <__mcmp+0x2c>
 8007ac8:	d305      	bcc.n	8007ad6 <__mcmp+0x32>
 8007aca:	2201      	movs	r2, #1
 8007acc:	4610      	mov	r0, r2
 8007ace:	bd30      	pop	{r4, r5, pc}
 8007ad0:	4283      	cmp	r3, r0
 8007ad2:	d3f3      	bcc.n	8007abc <__mcmp+0x18>
 8007ad4:	e7fa      	b.n	8007acc <__mcmp+0x28>
 8007ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ada:	e7f7      	b.n	8007acc <__mcmp+0x28>

08007adc <__mdiff>:
 8007adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4690      	mov	r8, r2
 8007aea:	f7ff ffdb 	bl	8007aa4 <__mcmp>
 8007aee:	1e05      	subs	r5, r0, #0
 8007af0:	d110      	bne.n	8007b14 <__mdiff+0x38>
 8007af2:	4629      	mov	r1, r5
 8007af4:	4630      	mov	r0, r6
 8007af6:	f7ff fd59 	bl	80075ac <_Balloc>
 8007afa:	b930      	cbnz	r0, 8007b0a <__mdiff+0x2e>
 8007afc:	4b3a      	ldr	r3, [pc, #232]	; (8007be8 <__mdiff+0x10c>)
 8007afe:	4602      	mov	r2, r0
 8007b00:	f240 2137 	movw	r1, #567	; 0x237
 8007b04:	4839      	ldr	r0, [pc, #228]	; (8007bec <__mdiff+0x110>)
 8007b06:	f000 fb73 	bl	80081f0 <__assert_func>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b14:	bfa4      	itt	ge
 8007b16:	4643      	movge	r3, r8
 8007b18:	46a0      	movge	r8, r4
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b20:	bfa6      	itte	ge
 8007b22:	461c      	movge	r4, r3
 8007b24:	2500      	movge	r5, #0
 8007b26:	2501      	movlt	r5, #1
 8007b28:	f7ff fd40 	bl	80075ac <_Balloc>
 8007b2c:	b920      	cbnz	r0, 8007b38 <__mdiff+0x5c>
 8007b2e:	4b2e      	ldr	r3, [pc, #184]	; (8007be8 <__mdiff+0x10c>)
 8007b30:	4602      	mov	r2, r0
 8007b32:	f240 2145 	movw	r1, #581	; 0x245
 8007b36:	e7e5      	b.n	8007b04 <__mdiff+0x28>
 8007b38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b3c:	6926      	ldr	r6, [r4, #16]
 8007b3e:	60c5      	str	r5, [r0, #12]
 8007b40:	f104 0914 	add.w	r9, r4, #20
 8007b44:	f108 0514 	add.w	r5, r8, #20
 8007b48:	f100 0e14 	add.w	lr, r0, #20
 8007b4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b54:	f108 0210 	add.w	r2, r8, #16
 8007b58:	46f2      	mov	sl, lr
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b64:	fa11 f88b 	uxtah	r8, r1, fp
 8007b68:	b299      	uxth	r1, r3
 8007b6a:	0c1b      	lsrs	r3, r3, #16
 8007b6c:	eba8 0801 	sub.w	r8, r8, r1
 8007b70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b78:	fa1f f888 	uxth.w	r8, r8
 8007b7c:	1419      	asrs	r1, r3, #16
 8007b7e:	454e      	cmp	r6, r9
 8007b80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b84:	f84a 3b04 	str.w	r3, [sl], #4
 8007b88:	d8e8      	bhi.n	8007b5c <__mdiff+0x80>
 8007b8a:	1b33      	subs	r3, r6, r4
 8007b8c:	3b15      	subs	r3, #21
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	3304      	adds	r3, #4
 8007b94:	3415      	adds	r4, #21
 8007b96:	42a6      	cmp	r6, r4
 8007b98:	bf38      	it	cc
 8007b9a:	2304      	movcc	r3, #4
 8007b9c:	441d      	add	r5, r3
 8007b9e:	4473      	add	r3, lr
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	462e      	mov	r6, r5
 8007ba4:	4566      	cmp	r6, ip
 8007ba6:	d30e      	bcc.n	8007bc6 <__mdiff+0xea>
 8007ba8:	f10c 0203 	add.w	r2, ip, #3
 8007bac:	1b52      	subs	r2, r2, r5
 8007bae:	f022 0203 	bic.w	r2, r2, #3
 8007bb2:	3d03      	subs	r5, #3
 8007bb4:	45ac      	cmp	ip, r5
 8007bb6:	bf38      	it	cc
 8007bb8:	2200      	movcc	r2, #0
 8007bba:	4413      	add	r3, r2
 8007bbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bc0:	b17a      	cbz	r2, 8007be2 <__mdiff+0x106>
 8007bc2:	6107      	str	r7, [r0, #16]
 8007bc4:	e7a4      	b.n	8007b10 <__mdiff+0x34>
 8007bc6:	f856 8b04 	ldr.w	r8, [r6], #4
 8007bca:	fa11 f288 	uxtah	r2, r1, r8
 8007bce:	1414      	asrs	r4, r2, #16
 8007bd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bd4:	b292      	uxth	r2, r2
 8007bd6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bda:	f84e 2b04 	str.w	r2, [lr], #4
 8007bde:	1421      	asrs	r1, r4, #16
 8007be0:	e7e0      	b.n	8007ba4 <__mdiff+0xc8>
 8007be2:	3f01      	subs	r7, #1
 8007be4:	e7ea      	b.n	8007bbc <__mdiff+0xe0>
 8007be6:	bf00      	nop
 8007be8:	080085a0 	.word	0x080085a0
 8007bec:	080085b1 	.word	0x080085b1

08007bf0 <__d2b>:
 8007bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	ec59 8b10 	vmov	r8, r9, d0
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	f7ff fcd5 	bl	80075ac <_Balloc>
 8007c02:	4604      	mov	r4, r0
 8007c04:	b930      	cbnz	r0, 8007c14 <__d2b+0x24>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <__d2b+0xac>)
 8007c0a:	4825      	ldr	r0, [pc, #148]	; (8007ca0 <__d2b+0xb0>)
 8007c0c:	f240 310f 	movw	r1, #783	; 0x30f
 8007c10:	f000 faee 	bl	80081f0 <__assert_func>
 8007c14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c1c:	bb2d      	cbnz	r5, 8007c6a <__d2b+0x7a>
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	f1b8 0300 	subs.w	r3, r8, #0
 8007c24:	d026      	beq.n	8007c74 <__d2b+0x84>
 8007c26:	4668      	mov	r0, sp
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	f7ff fd87 	bl	800773c <__lo0bits>
 8007c2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c32:	b1e8      	cbz	r0, 8007c70 <__d2b+0x80>
 8007c34:	f1c0 0320 	rsb	r3, r0, #32
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	40c2      	lsrs	r2, r0
 8007c40:	6163      	str	r3, [r4, #20]
 8007c42:	9201      	str	r2, [sp, #4]
 8007c44:	9b01      	ldr	r3, [sp, #4]
 8007c46:	61a3      	str	r3, [r4, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bf14      	ite	ne
 8007c4c:	2202      	movne	r2, #2
 8007c4e:	2201      	moveq	r2, #1
 8007c50:	6122      	str	r2, [r4, #16]
 8007c52:	b1bd      	cbz	r5, 8007c84 <__d2b+0x94>
 8007c54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c58:	4405      	add	r5, r0
 8007c5a:	603d      	str	r5, [r7, #0]
 8007c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c60:	6030      	str	r0, [r6, #0]
 8007c62:	4620      	mov	r0, r4
 8007c64:	b003      	add	sp, #12
 8007c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c6e:	e7d6      	b.n	8007c1e <__d2b+0x2e>
 8007c70:	6161      	str	r1, [r4, #20]
 8007c72:	e7e7      	b.n	8007c44 <__d2b+0x54>
 8007c74:	a801      	add	r0, sp, #4
 8007c76:	f7ff fd61 	bl	800773c <__lo0bits>
 8007c7a:	9b01      	ldr	r3, [sp, #4]
 8007c7c:	6163      	str	r3, [r4, #20]
 8007c7e:	3020      	adds	r0, #32
 8007c80:	2201      	movs	r2, #1
 8007c82:	e7e5      	b.n	8007c50 <__d2b+0x60>
 8007c84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c8c:	6038      	str	r0, [r7, #0]
 8007c8e:	6918      	ldr	r0, [r3, #16]
 8007c90:	f7ff fd34 	bl	80076fc <__hi0bits>
 8007c94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c98:	e7e2      	b.n	8007c60 <__d2b+0x70>
 8007c9a:	bf00      	nop
 8007c9c:	080085a0 	.word	0x080085a0
 8007ca0:	080085b1 	.word	0x080085b1

08007ca4 <__sfputc_r>:
 8007ca4:	6893      	ldr	r3, [r2, #8]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	b410      	push	{r4}
 8007cac:	6093      	str	r3, [r2, #8]
 8007cae:	da08      	bge.n	8007cc2 <__sfputc_r+0x1e>
 8007cb0:	6994      	ldr	r4, [r2, #24]
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	db01      	blt.n	8007cba <__sfputc_r+0x16>
 8007cb6:	290a      	cmp	r1, #10
 8007cb8:	d103      	bne.n	8007cc2 <__sfputc_r+0x1e>
 8007cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cbe:	f000 b9e3 	b.w	8008088 <__swbuf_r>
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	1c58      	adds	r0, r3, #1
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	7019      	strb	r1, [r3, #0]
 8007cca:	4608      	mov	r0, r1
 8007ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <__sfputs_r>:
 8007cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	460f      	mov	r7, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	18d5      	adds	r5, r2, r3
 8007cdc:	42ac      	cmp	r4, r5
 8007cde:	d101      	bne.n	8007ce4 <__sfputs_r+0x12>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e007      	b.n	8007cf4 <__sfputs_r+0x22>
 8007ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce8:	463a      	mov	r2, r7
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7ff ffda 	bl	8007ca4 <__sfputc_r>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d1f3      	bne.n	8007cdc <__sfputs_r+0xa>
 8007cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cf8 <_vfiprintf_r>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	460d      	mov	r5, r1
 8007cfe:	b09d      	sub	sp, #116	; 0x74
 8007d00:	4614      	mov	r4, r2
 8007d02:	4698      	mov	r8, r3
 8007d04:	4606      	mov	r6, r0
 8007d06:	b118      	cbz	r0, 8007d10 <_vfiprintf_r+0x18>
 8007d08:	6a03      	ldr	r3, [r0, #32]
 8007d0a:	b90b      	cbnz	r3, 8007d10 <_vfiprintf_r+0x18>
 8007d0c:	f7fe fbca 	bl	80064a4 <__sinit>
 8007d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d12:	07d9      	lsls	r1, r3, #31
 8007d14:	d405      	bmi.n	8007d22 <_vfiprintf_r+0x2a>
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	059a      	lsls	r2, r3, #22
 8007d1a:	d402      	bmi.n	8007d22 <_vfiprintf_r+0x2a>
 8007d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1e:	f7fe fcc9 	bl	80066b4 <__retarget_lock_acquire_recursive>
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	071b      	lsls	r3, r3, #28
 8007d26:	d501      	bpl.n	8007d2c <_vfiprintf_r+0x34>
 8007d28:	692b      	ldr	r3, [r5, #16]
 8007d2a:	b99b      	cbnz	r3, 8007d54 <_vfiprintf_r+0x5c>
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f000 f9e8 	bl	8008104 <__swsetup_r>
 8007d34:	b170      	cbz	r0, 8007d54 <_vfiprintf_r+0x5c>
 8007d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d38:	07dc      	lsls	r4, r3, #31
 8007d3a:	d504      	bpl.n	8007d46 <_vfiprintf_r+0x4e>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d40:	b01d      	add	sp, #116	; 0x74
 8007d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	0598      	lsls	r0, r3, #22
 8007d4a:	d4f7      	bmi.n	8007d3c <_vfiprintf_r+0x44>
 8007d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4e:	f7fe fcb2 	bl	80066b6 <__retarget_lock_release_recursive>
 8007d52:	e7f3      	b.n	8007d3c <_vfiprintf_r+0x44>
 8007d54:	2300      	movs	r3, #0
 8007d56:	9309      	str	r3, [sp, #36]	; 0x24
 8007d58:	2320      	movs	r3, #32
 8007d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d62:	2330      	movs	r3, #48	; 0x30
 8007d64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f18 <_vfiprintf_r+0x220>
 8007d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d6c:	f04f 0901 	mov.w	r9, #1
 8007d70:	4623      	mov	r3, r4
 8007d72:	469a      	mov	sl, r3
 8007d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d78:	b10a      	cbz	r2, 8007d7e <_vfiprintf_r+0x86>
 8007d7a:	2a25      	cmp	r2, #37	; 0x25
 8007d7c:	d1f9      	bne.n	8007d72 <_vfiprintf_r+0x7a>
 8007d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d82:	d00b      	beq.n	8007d9c <_vfiprintf_r+0xa4>
 8007d84:	465b      	mov	r3, fp
 8007d86:	4622      	mov	r2, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff ffa1 	bl	8007cd2 <__sfputs_r>
 8007d90:	3001      	adds	r0, #1
 8007d92:	f000 80a9 	beq.w	8007ee8 <_vfiprintf_r+0x1f0>
 8007d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d98:	445a      	add	r2, fp
 8007d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80a1 	beq.w	8007ee8 <_vfiprintf_r+0x1f0>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db0:	f10a 0a01 	add.w	sl, sl, #1
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	9307      	str	r3, [sp, #28]
 8007db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dbe:	4654      	mov	r4, sl
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc6:	4854      	ldr	r0, [pc, #336]	; (8007f18 <_vfiprintf_r+0x220>)
 8007dc8:	f7f8 fa02 	bl	80001d0 <memchr>
 8007dcc:	9a04      	ldr	r2, [sp, #16]
 8007dce:	b9d8      	cbnz	r0, 8007e08 <_vfiprintf_r+0x110>
 8007dd0:	06d1      	lsls	r1, r2, #27
 8007dd2:	bf44      	itt	mi
 8007dd4:	2320      	movmi	r3, #32
 8007dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dda:	0713      	lsls	r3, r2, #28
 8007ddc:	bf44      	itt	mi
 8007dde:	232b      	movmi	r3, #43	; 0x2b
 8007de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de4:	f89a 3000 	ldrb.w	r3, [sl]
 8007de8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dea:	d015      	beq.n	8007e18 <_vfiprintf_r+0x120>
 8007dec:	9a07      	ldr	r2, [sp, #28]
 8007dee:	4654      	mov	r4, sl
 8007df0:	2000      	movs	r0, #0
 8007df2:	f04f 0c0a 	mov.w	ip, #10
 8007df6:	4621      	mov	r1, r4
 8007df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfc:	3b30      	subs	r3, #48	; 0x30
 8007dfe:	2b09      	cmp	r3, #9
 8007e00:	d94d      	bls.n	8007e9e <_vfiprintf_r+0x1a6>
 8007e02:	b1b0      	cbz	r0, 8007e32 <_vfiprintf_r+0x13a>
 8007e04:	9207      	str	r2, [sp, #28]
 8007e06:	e014      	b.n	8007e32 <_vfiprintf_r+0x13a>
 8007e08:	eba0 0308 	sub.w	r3, r0, r8
 8007e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e10:	4313      	orrs	r3, r2
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	46a2      	mov	sl, r4
 8007e16:	e7d2      	b.n	8007dbe <_vfiprintf_r+0xc6>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	1d19      	adds	r1, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	9103      	str	r1, [sp, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bfbb      	ittet	lt
 8007e24:	425b      	neglt	r3, r3
 8007e26:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2a:	9307      	strge	r3, [sp, #28]
 8007e2c:	9307      	strlt	r3, [sp, #28]
 8007e2e:	bfb8      	it	lt
 8007e30:	9204      	strlt	r2, [sp, #16]
 8007e32:	7823      	ldrb	r3, [r4, #0]
 8007e34:	2b2e      	cmp	r3, #46	; 0x2e
 8007e36:	d10c      	bne.n	8007e52 <_vfiprintf_r+0x15a>
 8007e38:	7863      	ldrb	r3, [r4, #1]
 8007e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3c:	d134      	bne.n	8007ea8 <_vfiprintf_r+0x1b0>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	1d1a      	adds	r2, r3, #4
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	9203      	str	r2, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bfb8      	it	lt
 8007e4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e4e:	3402      	adds	r4, #2
 8007e50:	9305      	str	r3, [sp, #20]
 8007e52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f28 <_vfiprintf_r+0x230>
 8007e56:	7821      	ldrb	r1, [r4, #0]
 8007e58:	2203      	movs	r2, #3
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	f7f8 f9b8 	bl	80001d0 <memchr>
 8007e60:	b138      	cbz	r0, 8007e72 <_vfiprintf_r+0x17a>
 8007e62:	9b04      	ldr	r3, [sp, #16]
 8007e64:	eba0 000a 	sub.w	r0, r0, sl
 8007e68:	2240      	movs	r2, #64	; 0x40
 8007e6a:	4082      	lsls	r2, r0
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	3401      	adds	r4, #1
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e76:	4829      	ldr	r0, [pc, #164]	; (8007f1c <_vfiprintf_r+0x224>)
 8007e78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e7c:	2206      	movs	r2, #6
 8007e7e:	f7f8 f9a7 	bl	80001d0 <memchr>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d03f      	beq.n	8007f06 <_vfiprintf_r+0x20e>
 8007e86:	4b26      	ldr	r3, [pc, #152]	; (8007f20 <_vfiprintf_r+0x228>)
 8007e88:	bb1b      	cbnz	r3, 8007ed2 <_vfiprintf_r+0x1da>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	3307      	adds	r3, #7
 8007e8e:	f023 0307 	bic.w	r3, r3, #7
 8007e92:	3308      	adds	r3, #8
 8007e94:	9303      	str	r3, [sp, #12]
 8007e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e98:	443b      	add	r3, r7
 8007e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9c:	e768      	b.n	8007d70 <_vfiprintf_r+0x78>
 8007e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	e7a6      	b.n	8007df6 <_vfiprintf_r+0xfe>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	3401      	adds	r4, #1
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	f04f 0c0a 	mov.w	ip, #10
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eba:	3a30      	subs	r2, #48	; 0x30
 8007ebc:	2a09      	cmp	r2, #9
 8007ebe:	d903      	bls.n	8007ec8 <_vfiprintf_r+0x1d0>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0c6      	beq.n	8007e52 <_vfiprintf_r+0x15a>
 8007ec4:	9105      	str	r1, [sp, #20]
 8007ec6:	e7c4      	b.n	8007e52 <_vfiprintf_r+0x15a>
 8007ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ecc:	4604      	mov	r4, r0
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e7f0      	b.n	8007eb4 <_vfiprintf_r+0x1bc>
 8007ed2:	ab03      	add	r3, sp, #12
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <_vfiprintf_r+0x22c>)
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7fd fea1 	bl	8005c24 <_printf_float>
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	1c78      	adds	r0, r7, #1
 8007ee6:	d1d6      	bne.n	8007e96 <_vfiprintf_r+0x19e>
 8007ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eea:	07d9      	lsls	r1, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_vfiprintf_r+0x202>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	059a      	lsls	r2, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_vfiprintf_r+0x202>
 8007ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ef6:	f7fe fbde 	bl	80066b6 <__retarget_lock_release_recursive>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	065b      	lsls	r3, r3, #25
 8007efe:	f53f af1d 	bmi.w	8007d3c <_vfiprintf_r+0x44>
 8007f02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f04:	e71c      	b.n	8007d40 <_vfiprintf_r+0x48>
 8007f06:	ab03      	add	r3, sp, #12
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <_vfiprintf_r+0x22c>)
 8007f0e:	a904      	add	r1, sp, #16
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7fe f92b 	bl	800616c <_printf_i>
 8007f16:	e7e4      	b.n	8007ee2 <_vfiprintf_r+0x1ea>
 8007f18:	0800870c 	.word	0x0800870c
 8007f1c:	08008716 	.word	0x08008716
 8007f20:	08005c25 	.word	0x08005c25
 8007f24:	08007cd3 	.word	0x08007cd3
 8007f28:	08008712 	.word	0x08008712

08007f2c <__sflush_r>:
 8007f2c:	898a      	ldrh	r2, [r1, #12]
 8007f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	4605      	mov	r5, r0
 8007f34:	0710      	lsls	r0, r2, #28
 8007f36:	460c      	mov	r4, r1
 8007f38:	d458      	bmi.n	8007fec <__sflush_r+0xc0>
 8007f3a:	684b      	ldr	r3, [r1, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dc05      	bgt.n	8007f4c <__sflush_r+0x20>
 8007f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dc02      	bgt.n	8007f4c <__sflush_r+0x20>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	d0f9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007f52:	2300      	movs	r3, #0
 8007f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f58:	682f      	ldr	r7, [r5, #0]
 8007f5a:	6a21      	ldr	r1, [r4, #32]
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	d032      	beq.n	8007fc6 <__sflush_r+0x9a>
 8007f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	075a      	lsls	r2, r3, #29
 8007f66:	d505      	bpl.n	8007f74 <__sflush_r+0x48>
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	1ac0      	subs	r0, r0, r3
 8007f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f6e:	b10b      	cbz	r3, 8007f74 <__sflush_r+0x48>
 8007f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f72:	1ac0      	subs	r0, r0, r3
 8007f74:	2300      	movs	r3, #0
 8007f76:	4602      	mov	r2, r0
 8007f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f7a:	6a21      	ldr	r1, [r4, #32]
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b0      	blx	r6
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	d106      	bne.n	8007f94 <__sflush_r+0x68>
 8007f86:	6829      	ldr	r1, [r5, #0]
 8007f88:	291d      	cmp	r1, #29
 8007f8a:	d82b      	bhi.n	8007fe4 <__sflush_r+0xb8>
 8007f8c:	4a29      	ldr	r2, [pc, #164]	; (8008034 <__sflush_r+0x108>)
 8007f8e:	410a      	asrs	r2, r1
 8007f90:	07d6      	lsls	r6, r2, #31
 8007f92:	d427      	bmi.n	8007fe4 <__sflush_r+0xb8>
 8007f94:	2200      	movs	r2, #0
 8007f96:	6062      	str	r2, [r4, #4]
 8007f98:	04d9      	lsls	r1, r3, #19
 8007f9a:	6922      	ldr	r2, [r4, #16]
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	d504      	bpl.n	8007faa <__sflush_r+0x7e>
 8007fa0:	1c42      	adds	r2, r0, #1
 8007fa2:	d101      	bne.n	8007fa8 <__sflush_r+0x7c>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b903      	cbnz	r3, 8007faa <__sflush_r+0x7e>
 8007fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8007faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fac:	602f      	str	r7, [r5, #0]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d0c9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fb6:	4299      	cmp	r1, r3
 8007fb8:	d002      	beq.n	8007fc0 <__sflush_r+0x94>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f7ff f9f6 	bl	80073ac <_free_r>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8007fc4:	e7c0      	b.n	8007f48 <__sflush_r+0x1c>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b0      	blx	r6
 8007fcc:	1c41      	adds	r1, r0, #1
 8007fce:	d1c8      	bne.n	8007f62 <__sflush_r+0x36>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c5      	beq.n	8007f62 <__sflush_r+0x36>
 8007fd6:	2b1d      	cmp	r3, #29
 8007fd8:	d001      	beq.n	8007fde <__sflush_r+0xb2>
 8007fda:	2b16      	cmp	r3, #22
 8007fdc:	d101      	bne.n	8007fe2 <__sflush_r+0xb6>
 8007fde:	602f      	str	r7, [r5, #0]
 8007fe0:	e7b1      	b.n	8007f46 <__sflush_r+0x1a>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	e7ad      	b.n	8007f48 <__sflush_r+0x1c>
 8007fec:	690f      	ldr	r7, [r1, #16]
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d0a9      	beq.n	8007f46 <__sflush_r+0x1a>
 8007ff2:	0793      	lsls	r3, r2, #30
 8007ff4:	680e      	ldr	r6, [r1, #0]
 8007ff6:	bf08      	it	eq
 8007ff8:	694b      	ldreq	r3, [r1, #20]
 8007ffa:	600f      	str	r7, [r1, #0]
 8007ffc:	bf18      	it	ne
 8007ffe:	2300      	movne	r3, #0
 8008000:	eba6 0807 	sub.w	r8, r6, r7
 8008004:	608b      	str	r3, [r1, #8]
 8008006:	f1b8 0f00 	cmp.w	r8, #0
 800800a:	dd9c      	ble.n	8007f46 <__sflush_r+0x1a>
 800800c:	6a21      	ldr	r1, [r4, #32]
 800800e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008010:	4643      	mov	r3, r8
 8008012:	463a      	mov	r2, r7
 8008014:	4628      	mov	r0, r5
 8008016:	47b0      	blx	r6
 8008018:	2800      	cmp	r0, #0
 800801a:	dc06      	bgt.n	800802a <__sflush_r+0xfe>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008028:	e78e      	b.n	8007f48 <__sflush_r+0x1c>
 800802a:	4407      	add	r7, r0
 800802c:	eba8 0800 	sub.w	r8, r8, r0
 8008030:	e7e9      	b.n	8008006 <__sflush_r+0xda>
 8008032:	bf00      	nop
 8008034:	dfbffffe 	.word	0xdfbffffe

08008038 <_fflush_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	690b      	ldr	r3, [r1, #16]
 800803c:	4605      	mov	r5, r0
 800803e:	460c      	mov	r4, r1
 8008040:	b913      	cbnz	r3, 8008048 <_fflush_r+0x10>
 8008042:	2500      	movs	r5, #0
 8008044:	4628      	mov	r0, r5
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	b118      	cbz	r0, 8008052 <_fflush_r+0x1a>
 800804a:	6a03      	ldr	r3, [r0, #32]
 800804c:	b90b      	cbnz	r3, 8008052 <_fflush_r+0x1a>
 800804e:	f7fe fa29 	bl	80064a4 <__sinit>
 8008052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0f3      	beq.n	8008042 <_fflush_r+0xa>
 800805a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800805c:	07d0      	lsls	r0, r2, #31
 800805e:	d404      	bmi.n	800806a <_fflush_r+0x32>
 8008060:	0599      	lsls	r1, r3, #22
 8008062:	d402      	bmi.n	800806a <_fflush_r+0x32>
 8008064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008066:	f7fe fb25 	bl	80066b4 <__retarget_lock_acquire_recursive>
 800806a:	4628      	mov	r0, r5
 800806c:	4621      	mov	r1, r4
 800806e:	f7ff ff5d 	bl	8007f2c <__sflush_r>
 8008072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008074:	07da      	lsls	r2, r3, #31
 8008076:	4605      	mov	r5, r0
 8008078:	d4e4      	bmi.n	8008044 <_fflush_r+0xc>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	059b      	lsls	r3, r3, #22
 800807e:	d4e1      	bmi.n	8008044 <_fflush_r+0xc>
 8008080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008082:	f7fe fb18 	bl	80066b6 <__retarget_lock_release_recursive>
 8008086:	e7dd      	b.n	8008044 <_fflush_r+0xc>

08008088 <__swbuf_r>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	460e      	mov	r6, r1
 800808c:	4614      	mov	r4, r2
 800808e:	4605      	mov	r5, r0
 8008090:	b118      	cbz	r0, 800809a <__swbuf_r+0x12>
 8008092:	6a03      	ldr	r3, [r0, #32]
 8008094:	b90b      	cbnz	r3, 800809a <__swbuf_r+0x12>
 8008096:	f7fe fa05 	bl	80064a4 <__sinit>
 800809a:	69a3      	ldr	r3, [r4, #24]
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	071a      	lsls	r2, r3, #28
 80080a2:	d525      	bpl.n	80080f0 <__swbuf_r+0x68>
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	b31b      	cbz	r3, 80080f0 <__swbuf_r+0x68>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	6922      	ldr	r2, [r4, #16]
 80080ac:	1a98      	subs	r0, r3, r2
 80080ae:	6963      	ldr	r3, [r4, #20]
 80080b0:	b2f6      	uxtb	r6, r6
 80080b2:	4283      	cmp	r3, r0
 80080b4:	4637      	mov	r7, r6
 80080b6:	dc04      	bgt.n	80080c2 <__swbuf_r+0x3a>
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7ff ffbc 	bl	8008038 <_fflush_r>
 80080c0:	b9e0      	cbnz	r0, 80080fc <__swbuf_r+0x74>
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	60a3      	str	r3, [r4, #8]
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	6022      	str	r2, [r4, #0]
 80080ce:	701e      	strb	r6, [r3, #0]
 80080d0:	6962      	ldr	r2, [r4, #20]
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d004      	beq.n	80080e2 <__swbuf_r+0x5a>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	07db      	lsls	r3, r3, #31
 80080dc:	d506      	bpl.n	80080ec <__swbuf_r+0x64>
 80080de:	2e0a      	cmp	r6, #10
 80080e0:	d104      	bne.n	80080ec <__swbuf_r+0x64>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4628      	mov	r0, r5
 80080e6:	f7ff ffa7 	bl	8008038 <_fflush_r>
 80080ea:	b938      	cbnz	r0, 80080fc <__swbuf_r+0x74>
 80080ec:	4638      	mov	r0, r7
 80080ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f0:	4621      	mov	r1, r4
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 f806 	bl	8008104 <__swsetup_r>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d0d5      	beq.n	80080a8 <__swbuf_r+0x20>
 80080fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008100:	e7f4      	b.n	80080ec <__swbuf_r+0x64>
	...

08008104 <__swsetup_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4b2a      	ldr	r3, [pc, #168]	; (80081b0 <__swsetup_r+0xac>)
 8008108:	4605      	mov	r5, r0
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	460c      	mov	r4, r1
 800810e:	b118      	cbz	r0, 8008118 <__swsetup_r+0x14>
 8008110:	6a03      	ldr	r3, [r0, #32]
 8008112:	b90b      	cbnz	r3, 8008118 <__swsetup_r+0x14>
 8008114:	f7fe f9c6 	bl	80064a4 <__sinit>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800811e:	0718      	lsls	r0, r3, #28
 8008120:	d422      	bmi.n	8008168 <__swsetup_r+0x64>
 8008122:	06d9      	lsls	r1, r3, #27
 8008124:	d407      	bmi.n	8008136 <__swsetup_r+0x32>
 8008126:	2309      	movs	r3, #9
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008134:	e034      	b.n	80081a0 <__swsetup_r+0x9c>
 8008136:	0758      	lsls	r0, r3, #29
 8008138:	d512      	bpl.n	8008160 <__swsetup_r+0x5c>
 800813a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800813c:	b141      	cbz	r1, 8008150 <__swsetup_r+0x4c>
 800813e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008142:	4299      	cmp	r1, r3
 8008144:	d002      	beq.n	800814c <__swsetup_r+0x48>
 8008146:	4628      	mov	r0, r5
 8008148:	f7ff f930 	bl	80073ac <_free_r>
 800814c:	2300      	movs	r3, #0
 800814e:	6363      	str	r3, [r4, #52]	; 0x34
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	2300      	movs	r3, #0
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f043 0308 	orr.w	r3, r3, #8
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	6923      	ldr	r3, [r4, #16]
 800816a:	b94b      	cbnz	r3, 8008180 <__swsetup_r+0x7c>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008176:	d003      	beq.n	8008180 <__swsetup_r+0x7c>
 8008178:	4621      	mov	r1, r4
 800817a:	4628      	mov	r0, r5
 800817c:	f000 f8c4 	bl	8008308 <__smakebuf_r>
 8008180:	89a0      	ldrh	r0, [r4, #12]
 8008182:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008186:	f010 0301 	ands.w	r3, r0, #1
 800818a:	d00a      	beq.n	80081a2 <__swsetup_r+0x9e>
 800818c:	2300      	movs	r3, #0
 800818e:	60a3      	str	r3, [r4, #8]
 8008190:	6963      	ldr	r3, [r4, #20]
 8008192:	425b      	negs	r3, r3
 8008194:	61a3      	str	r3, [r4, #24]
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	b943      	cbnz	r3, 80081ac <__swsetup_r+0xa8>
 800819a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800819e:	d1c4      	bne.n	800812a <__swsetup_r+0x26>
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	0781      	lsls	r1, r0, #30
 80081a4:	bf58      	it	pl
 80081a6:	6963      	ldrpl	r3, [r4, #20]
 80081a8:	60a3      	str	r3, [r4, #8]
 80081aa:	e7f4      	b.n	8008196 <__swsetup_r+0x92>
 80081ac:	2000      	movs	r0, #0
 80081ae:	e7f7      	b.n	80081a0 <__swsetup_r+0x9c>
 80081b0:	20000064 	.word	0x20000064

080081b4 <_sbrk_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d06      	ldr	r5, [pc, #24]	; (80081d0 <_sbrk_r+0x1c>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7f9 fb58 	bl	8001874 <_sbrk>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_sbrk_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_sbrk_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	200004c4 	.word	0x200004c4

080081d4 <memcpy>:
 80081d4:	440a      	add	r2, r1
 80081d6:	4291      	cmp	r1, r2
 80081d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081dc:	d100      	bne.n	80081e0 <memcpy+0xc>
 80081de:	4770      	bx	lr
 80081e0:	b510      	push	{r4, lr}
 80081e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ea:	4291      	cmp	r1, r2
 80081ec:	d1f9      	bne.n	80081e2 <memcpy+0xe>
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <__assert_func>:
 80081f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081f2:	4614      	mov	r4, r2
 80081f4:	461a      	mov	r2, r3
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <__assert_func+0x2c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4605      	mov	r5, r0
 80081fc:	68d8      	ldr	r0, [r3, #12]
 80081fe:	b14c      	cbz	r4, 8008214 <__assert_func+0x24>
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <__assert_func+0x30>)
 8008202:	9100      	str	r1, [sp, #0]
 8008204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008208:	4906      	ldr	r1, [pc, #24]	; (8008224 <__assert_func+0x34>)
 800820a:	462b      	mov	r3, r5
 800820c:	f000 f844 	bl	8008298 <fiprintf>
 8008210:	f000 f8d8 	bl	80083c4 <abort>
 8008214:	4b04      	ldr	r3, [pc, #16]	; (8008228 <__assert_func+0x38>)
 8008216:	461c      	mov	r4, r3
 8008218:	e7f3      	b.n	8008202 <__assert_func+0x12>
 800821a:	bf00      	nop
 800821c:	20000064 	.word	0x20000064
 8008220:	08008727 	.word	0x08008727
 8008224:	08008734 	.word	0x08008734
 8008228:	08008762 	.word	0x08008762

0800822c <_calloc_r>:
 800822c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800822e:	fba1 2402 	umull	r2, r4, r1, r2
 8008232:	b94c      	cbnz	r4, 8008248 <_calloc_r+0x1c>
 8008234:	4611      	mov	r1, r2
 8008236:	9201      	str	r2, [sp, #4]
 8008238:	f7ff f92c 	bl	8007494 <_malloc_r>
 800823c:	9a01      	ldr	r2, [sp, #4]
 800823e:	4605      	mov	r5, r0
 8008240:	b930      	cbnz	r0, 8008250 <_calloc_r+0x24>
 8008242:	4628      	mov	r0, r5
 8008244:	b003      	add	sp, #12
 8008246:	bd30      	pop	{r4, r5, pc}
 8008248:	220c      	movs	r2, #12
 800824a:	6002      	str	r2, [r0, #0]
 800824c:	2500      	movs	r5, #0
 800824e:	e7f8      	b.n	8008242 <_calloc_r+0x16>
 8008250:	4621      	mov	r1, r4
 8008252:	f7fe f9b2 	bl	80065ba <memset>
 8008256:	e7f4      	b.n	8008242 <_calloc_r+0x16>

08008258 <__ascii_mbtowc>:
 8008258:	b082      	sub	sp, #8
 800825a:	b901      	cbnz	r1, 800825e <__ascii_mbtowc+0x6>
 800825c:	a901      	add	r1, sp, #4
 800825e:	b142      	cbz	r2, 8008272 <__ascii_mbtowc+0x1a>
 8008260:	b14b      	cbz	r3, 8008276 <__ascii_mbtowc+0x1e>
 8008262:	7813      	ldrb	r3, [r2, #0]
 8008264:	600b      	str	r3, [r1, #0]
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	1e10      	subs	r0, r2, #0
 800826a:	bf18      	it	ne
 800826c:	2001      	movne	r0, #1
 800826e:	b002      	add	sp, #8
 8008270:	4770      	bx	lr
 8008272:	4610      	mov	r0, r2
 8008274:	e7fb      	b.n	800826e <__ascii_mbtowc+0x16>
 8008276:	f06f 0001 	mvn.w	r0, #1
 800827a:	e7f8      	b.n	800826e <__ascii_mbtowc+0x16>

0800827c <__ascii_wctomb>:
 800827c:	b149      	cbz	r1, 8008292 <__ascii_wctomb+0x16>
 800827e:	2aff      	cmp	r2, #255	; 0xff
 8008280:	bf85      	ittet	hi
 8008282:	238a      	movhi	r3, #138	; 0x8a
 8008284:	6003      	strhi	r3, [r0, #0]
 8008286:	700a      	strbls	r2, [r1, #0]
 8008288:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800828c:	bf98      	it	ls
 800828e:	2001      	movls	r0, #1
 8008290:	4770      	bx	lr
 8008292:	4608      	mov	r0, r1
 8008294:	4770      	bx	lr
	...

08008298 <fiprintf>:
 8008298:	b40e      	push	{r1, r2, r3}
 800829a:	b503      	push	{r0, r1, lr}
 800829c:	4601      	mov	r1, r0
 800829e:	ab03      	add	r3, sp, #12
 80082a0:	4805      	ldr	r0, [pc, #20]	; (80082b8 <fiprintf+0x20>)
 80082a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a6:	6800      	ldr	r0, [r0, #0]
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	f7ff fd25 	bl	8007cf8 <_vfiprintf_r>
 80082ae:	b002      	add	sp, #8
 80082b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b4:	b003      	add	sp, #12
 80082b6:	4770      	bx	lr
 80082b8:	20000064 	.word	0x20000064

080082bc <__swhatbuf_r>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	460c      	mov	r4, r1
 80082c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c4:	2900      	cmp	r1, #0
 80082c6:	b096      	sub	sp, #88	; 0x58
 80082c8:	4615      	mov	r5, r2
 80082ca:	461e      	mov	r6, r3
 80082cc:	da0d      	bge.n	80082ea <__swhatbuf_r+0x2e>
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082d4:	f04f 0100 	mov.w	r1, #0
 80082d8:	bf0c      	ite	eq
 80082da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80082de:	2340      	movne	r3, #64	; 0x40
 80082e0:	2000      	movs	r0, #0
 80082e2:	6031      	str	r1, [r6, #0]
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	b016      	add	sp, #88	; 0x58
 80082e8:	bd70      	pop	{r4, r5, r6, pc}
 80082ea:	466a      	mov	r2, sp
 80082ec:	f000 f848 	bl	8008380 <_fstat_r>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	dbec      	blt.n	80082ce <__swhatbuf_r+0x12>
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80082fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80082fe:	4259      	negs	r1, r3
 8008300:	4159      	adcs	r1, r3
 8008302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008306:	e7eb      	b.n	80082e0 <__swhatbuf_r+0x24>

08008308 <__smakebuf_r>:
 8008308:	898b      	ldrh	r3, [r1, #12]
 800830a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800830c:	079d      	lsls	r5, r3, #30
 800830e:	4606      	mov	r6, r0
 8008310:	460c      	mov	r4, r1
 8008312:	d507      	bpl.n	8008324 <__smakebuf_r+0x1c>
 8008314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	2301      	movs	r3, #1
 800831e:	6163      	str	r3, [r4, #20]
 8008320:	b002      	add	sp, #8
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	ab01      	add	r3, sp, #4
 8008326:	466a      	mov	r2, sp
 8008328:	f7ff ffc8 	bl	80082bc <__swhatbuf_r>
 800832c:	9900      	ldr	r1, [sp, #0]
 800832e:	4605      	mov	r5, r0
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff f8af 	bl	8007494 <_malloc_r>
 8008336:	b948      	cbnz	r0, 800834c <__smakebuf_r+0x44>
 8008338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833c:	059a      	lsls	r2, r3, #22
 800833e:	d4ef      	bmi.n	8008320 <__smakebuf_r+0x18>
 8008340:	f023 0303 	bic.w	r3, r3, #3
 8008344:	f043 0302 	orr.w	r3, r3, #2
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	e7e3      	b.n	8008314 <__smakebuf_r+0xc>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	6020      	str	r0, [r4, #0]
 8008350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	6163      	str	r3, [r4, #20]
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	6120      	str	r0, [r4, #16]
 800835e:	b15b      	cbz	r3, 8008378 <__smakebuf_r+0x70>
 8008360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008364:	4630      	mov	r0, r6
 8008366:	f000 f81d 	bl	80083a4 <_isatty_r>
 800836a:	b128      	cbz	r0, 8008378 <__smakebuf_r+0x70>
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	f023 0303 	bic.w	r3, r3, #3
 8008372:	f043 0301 	orr.w	r3, r3, #1
 8008376:	81a3      	strh	r3, [r4, #12]
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	431d      	orrs	r5, r3
 800837c:	81a5      	strh	r5, [r4, #12]
 800837e:	e7cf      	b.n	8008320 <__smakebuf_r+0x18>

08008380 <_fstat_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	; (80083a0 <_fstat_r+0x20>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	f7f9 fa48 	bl	8001822 <_fstat>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d102      	bne.n	800839c <_fstat_r+0x1c>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	b103      	cbz	r3, 800839c <_fstat_r+0x1c>
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	bd38      	pop	{r3, r4, r5, pc}
 800839e:	bf00      	nop
 80083a0:	200004c4 	.word	0x200004c4

080083a4 <_isatty_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d06      	ldr	r5, [pc, #24]	; (80083c0 <_isatty_r+0x1c>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	602b      	str	r3, [r5, #0]
 80083b0:	f7f9 fa47 	bl	8001842 <_isatty>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_isatty_r+0x1a>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_isatty_r+0x1a>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	200004c4 	.word	0x200004c4

080083c4 <abort>:
 80083c4:	b508      	push	{r3, lr}
 80083c6:	2006      	movs	r0, #6
 80083c8:	f000 f82c 	bl	8008424 <raise>
 80083cc:	2001      	movs	r0, #1
 80083ce:	f7f9 f9d9 	bl	8001784 <_exit>

080083d2 <_raise_r>:
 80083d2:	291f      	cmp	r1, #31
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4604      	mov	r4, r0
 80083d8:	460d      	mov	r5, r1
 80083da:	d904      	bls.n	80083e6 <_raise_r+0x14>
 80083dc:	2316      	movs	r3, #22
 80083de:	6003      	str	r3, [r0, #0]
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e4:	bd38      	pop	{r3, r4, r5, pc}
 80083e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80083e8:	b112      	cbz	r2, 80083f0 <_raise_r+0x1e>
 80083ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083ee:	b94b      	cbnz	r3, 8008404 <_raise_r+0x32>
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 f831 	bl	8008458 <_getpid_r>
 80083f6:	462a      	mov	r2, r5
 80083f8:	4601      	mov	r1, r0
 80083fa:	4620      	mov	r0, r4
 80083fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008400:	f000 b818 	b.w	8008434 <_kill_r>
 8008404:	2b01      	cmp	r3, #1
 8008406:	d00a      	beq.n	800841e <_raise_r+0x4c>
 8008408:	1c59      	adds	r1, r3, #1
 800840a:	d103      	bne.n	8008414 <_raise_r+0x42>
 800840c:	2316      	movs	r3, #22
 800840e:	6003      	str	r3, [r0, #0]
 8008410:	2001      	movs	r0, #1
 8008412:	e7e7      	b.n	80083e4 <_raise_r+0x12>
 8008414:	2400      	movs	r4, #0
 8008416:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800841a:	4628      	mov	r0, r5
 800841c:	4798      	blx	r3
 800841e:	2000      	movs	r0, #0
 8008420:	e7e0      	b.n	80083e4 <_raise_r+0x12>
	...

08008424 <raise>:
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <raise+0xc>)
 8008426:	4601      	mov	r1, r0
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	f7ff bfd2 	b.w	80083d2 <_raise_r>
 800842e:	bf00      	nop
 8008430:	20000064 	.word	0x20000064

08008434 <_kill_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d07      	ldr	r5, [pc, #28]	; (8008454 <_kill_r+0x20>)
 8008438:	2300      	movs	r3, #0
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	4611      	mov	r1, r2
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	f7f9 f98f 	bl	8001764 <_kill>
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	d102      	bne.n	8008450 <_kill_r+0x1c>
 800844a:	682b      	ldr	r3, [r5, #0]
 800844c:	b103      	cbz	r3, 8008450 <_kill_r+0x1c>
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	bd38      	pop	{r3, r4, r5, pc}
 8008452:	bf00      	nop
 8008454:	200004c4 	.word	0x200004c4

08008458 <_getpid_r>:
 8008458:	f7f9 b97c 	b.w	8001754 <_getpid>

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
