
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aa4  0800d388  0800d388  0001d388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee2c  0800ee2c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee2c  0800ee2c  0001ee2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee34  0800ee34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ee34  0800ee34  0001ee34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee3c  0800ee3c  0001ee3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ee40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  200001e0  0800f020  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de0  0800f020  00020de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fc9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004122  00000000  00000000  000441d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00048300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001628  00000000  00000000  000499c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270cb  00000000  00000000  0004afe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3b1  00000000  00000000  000720b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef3c0  00000000  00000000  0008d464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0017c824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007588  00000000  00000000  0017c8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000284c  00000000  00000000  00183e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d36c 	.word	0x0800d36c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d36c 	.word	0x0800d36c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <_ZN3ros3MsgC1Ev+0x1c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	0800d650 	.word	0x0800d650

08000f30 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
      data()
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ffe8 	bl	8000f10 <_ZN3ros3MsgC1Ev>
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffce 	bl	8000eec <_ZN3ros4TimeC1Ev>
    {
    }
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0800d638 	.word	0x0800d638

08000f60 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6859      	ldr	r1, [r3, #4]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	b2ca      	uxtb	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	0a19      	lsrs	r1, r3, #8
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2ca      	uxtb	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	0c19      	lsrs	r1, r3, #16
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3302      	adds	r3, #2
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b2ca      	uxtb	r2, r1
 8000f9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	0e19      	lsrs	r1, r3, #24
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3303      	adds	r3, #3
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	4413      	add	r3, r2
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6899      	ldr	r1, [r3, #8]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	0a19      	lsrs	r1, r3, #8
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b2ca      	uxtb	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	0c19      	lsrs	r1, r3, #16
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	0e19      	lsrs	r1, r3, #24
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3303      	adds	r3, #3
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2ca      	uxtb	r2, r1
 8000ffa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3304      	adds	r3, #4
 8001000:	60fb      	str	r3, [r7, #12]
      return offset;
 8001002:	68fb      	ldr	r3, [r7, #12]
    }
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	6839      	ldr	r1, [r7, #0]
 8001036:	440b      	add	r3, r1
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3302      	adds	r3, #2
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	440b      	add	r3, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3303      	adds	r3, #3
 8001060:	6839      	ldr	r1, [r7, #0]
 8001062:	440b      	add	r3, r1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	061b      	lsls	r3, r3, #24
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	440b      	add	r3, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3302      	adds	r3, #2
 80010a0:	6839      	ldr	r1, [r7, #0]
 80010a2:	440b      	add	r3, r1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3303      	adds	r3, #3
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	440b      	add	r3, r1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3304      	adds	r3, #4
 80010c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80010ca:	68fb      	ldr	r3, [r7, #12]
    }
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	0800d388 	.word	0x0800d388

080010f4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	0800d398 	.word	0x0800d398

08001110 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fef8 	bl	8000f10 <_ZN3ros3MsgC1Ev>
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	809a      	strh	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
    {
    }
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	0800d620 	.word	0x0800d620
 8001154:	0800d3bc 	.word	0x0800d3bc

08001158 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	8899      	ldrh	r1, [r3, #4]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	b2ca      	uxtb	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b299      	uxth	r1, r3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	3302      	adds	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f81c 	bl	80001d0 <strlen>
 8001198:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	69b9      	ldr	r1, [r7, #24]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fdb7 	bl	8002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	3304      	adds	r3, #4
 80011ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	18d0      	adds	r0, r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4619      	mov	r1, r3
 80011bc:	f009 fb6e 	bl	800a89c <memcpy>
      offset += length_topic_name;
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4413      	add	r3, r2
 80011c6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7fe ffff 	bl	80001d0 <strlen>
 80011d2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	6979      	ldr	r1, [r7, #20]
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fd9a 	bl	8002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	18d0      	adds	r0, r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f009 fb51 	bl	800a89c <memcpy>
      offset += length_message_type;
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	4618      	mov	r0, r3
 8001208:	f7fe ffe2 	bl	80001d0 <strlen>
 800120c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	6939      	ldr	r1, [r7, #16]
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fd7d 	bl	8002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	3304      	adds	r3, #4
 8001220:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	18d0      	adds	r0, r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4619      	mov	r1, r3
 8001230:	f009 fb34 	bl	800a89c <memcpy>
      offset += length_md5sum;
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4413      	add	r3, r2
 800123a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001242:	68f9      	ldr	r1, [r7, #12]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	4413      	add	r3, r2
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	0a19      	lsrs	r1, r3, #8
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	0c19      	lsrs	r1, r3, #16
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3302      	adds	r3, #2
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	4413      	add	r3, r2
 800126a:	b2ca      	uxtb	r2, r1
 800126c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	0e19      	lsrs	r1, r3, #24
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3303      	adds	r3, #3
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	4413      	add	r3, r2
 800127a:	b2ca      	uxtb	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	61fb      	str	r3, [r7, #28]
      return offset;
 8001284:	69fb      	ldr	r3, [r7, #28]
    }
 8001286:	4618      	mov	r0, r3
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800128e:	b580      	push	{r7, lr}
 8001290:	b08a      	sub	sp, #40	; 0x28
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3301      	adds	r3, #1
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	440b      	add	r3, r1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	3302      	adds	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	441a      	add	r2, r3
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fd39 	bl	8002d52 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	3304      	adds	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4413      	add	r3, r2
 80012f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d20c      	bcs.n	8001310 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	441a      	add	r2, r3
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	3b01      	subs	r3, #1
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	440b      	add	r3, r1
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	3301      	adds	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	e7ec      	b.n	80012ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	3b01      	subs	r3, #1
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	4413      	add	r3, r2
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	3b01      	subs	r3, #1
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	441a      	add	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	441a      	add	r2, r3
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fd06 	bl	8002d52 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3304      	adds	r3, #4
 800134a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4413      	add	r3, r2
 8001356:	6a3a      	ldr	r2, [r7, #32]
 8001358:	429a      	cmp	r2, r3
 800135a:	d20c      	bcs.n	8001376 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	441a      	add	r2, r3
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	3b01      	subs	r3, #1
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	440b      	add	r3, r1
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	3301      	adds	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	e7ec      	b.n	8001350 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4413      	add	r3, r2
 800137c:	3b01      	subs	r3, #1
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3b01      	subs	r3, #1
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	441a      	add	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4413      	add	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	441a      	add	r2, r3
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fcd3 	bl	8002d52 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	3304      	adds	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d20c      	bcs.n	80013dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	441a      	add	r2, r3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	440b      	add	r3, r1
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	3301      	adds	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e7ec      	b.n	80013b6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	3b01      	subs	r3, #1
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	441a      	add	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	440a      	add	r2, r1
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	3301      	adds	r3, #1
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	440b      	add	r3, r1
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4313      	orrs	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	3302      	adds	r3, #2
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	440b      	add	r3, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	4313      	orrs	r3, r2
 8001434:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	3303      	adds	r3, #3
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	440b      	add	r3, r1
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	4313      	orrs	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	3304      	adds	r3, #4
 8001452:	61bb      	str	r3, [r7, #24]
     return offset;
 8001454:	69bb      	ldr	r3, [r7, #24]
    }
 8001456:	4618      	mov	r0, r3
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	0800d3c0 	.word	0x0800d3c0

0800147c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	0800d3dc 	.word	0x0800d3dc

08001498 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd34 	bl	8000f10 <_ZN3ros3MsgC1Ev>
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80014b8:	609a      	str	r2, [r3, #8]
    {
    }
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	0800d608 	.word	0x0800d608
 80014c8:	0800d3bc 	.word	0x0800d3bc

080014cc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	7912      	ldrb	r2, [r2, #4]
 80014e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe6d 	bl	80001d0 <strlen>
 80014f6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fc08 	bl	8002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3304      	adds	r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	18d0      	adds	r0, r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	4619      	mov	r1, r3
 800151a:	f009 f9bf 	bl	800a89c <memcpy>
      offset += length_msg;
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
      return offset;
 8001526:	68fb      	ldr	r3, [r7, #12]
    }
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	4413      	add	r3, r2
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	3301      	adds	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	441a      	add	r2, r3
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fbf8 	bl	8002d52 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	3304      	adds	r3, #4
 8001566:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	429a      	cmp	r2, r3
 8001576:	d20c      	bcs.n	8001592 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	441a      	add	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3b01      	subs	r3, #1
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	440b      	add	r3, r1
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e7ec      	b.n	800156c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	3b01      	subs	r3, #1
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	441a      	add	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
     return offset;
 80015b6:	693b      	ldr	r3, [r7, #16]
    }
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	0800d400 	.word	0x0800d400

080015dc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	0800d414 	.word	0x0800d414

080015f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc84 	bl	8000f10 <_ZN3ros3MsgC1Ev>
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	0800d5f0 	.word	0x0800d5f0

08001654 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6859      	ldr	r1, [r3, #4]
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	b2ca      	uxtb	r2, r1
 800166e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	0a19      	lsrs	r1, r3, #8
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0c19      	lsrs	r1, r3, #16
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	3302      	adds	r3, #2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	4413      	add	r3, r2
 8001690:	b2ca      	uxtb	r2, r1
 8001692:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	0e19      	lsrs	r1, r3, #24
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	3303      	adds	r3, #3
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	b2ca      	uxtb	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	3304      	adds	r3, #4
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	6a3a      	ldr	r2, [r7, #32]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d22b      	bcs.n	8001712 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80016c8:	6939      	ldr	r1, [r7, #16]
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	0a19      	lsrs	r1, r3, #8
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3301      	adds	r3, #1
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	0c19      	lsrs	r1, r3, #16
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3302      	adds	r3, #2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	0e19      	lsrs	r1, r3, #24
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	3303      	adds	r3, #3
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	b2ca      	uxtb	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	3304      	adds	r3, #4
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	3301      	adds	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
 8001710:	e7ce      	b.n	80016b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6919      	ldr	r1, [r3, #16]
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4413      	add	r3, r2
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	0a19      	lsrs	r1, r3, #8
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3301      	adds	r3, #1
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	4413      	add	r3, r2
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	0c19      	lsrs	r1, r3, #16
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3302      	adds	r3, #2
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	b2ca      	uxtb	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	0e19      	lsrs	r1, r3, #24
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	3303      	adds	r3, #3
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	4413      	add	r3, r2
 8001752:	b2ca      	uxtb	r2, r1
 8001754:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	3304      	adds	r3, #4
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	429a      	cmp	r2, r3
 8001768:	d22b      	bcs.n	80017c2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0a19      	lsrs	r1, r3, #8
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3301      	adds	r3, #1
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4413      	add	r3, r2
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	0c19      	lsrs	r1, r3, #16
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	3302      	adds	r3, #2
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	b2ca      	uxtb	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	0e19      	lsrs	r1, r3, #24
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3303      	adds	r3, #3
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3304      	adds	r3, #4
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	e7ce      	b.n	8001760 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69d9      	ldr	r1, [r3, #28]
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	b2ca      	uxtb	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	0a19      	lsrs	r1, r3, #8
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	0c19      	lsrs	r1, r3, #16
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3302      	adds	r3, #2
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	0e19      	lsrs	r1, r3, #24
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	3303      	adds	r3, #3
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	4413      	add	r3, r2
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	3304      	adds	r3, #4
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	429a      	cmp	r2, r3
 8001818:	d228      	bcs.n	800186c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fcd2 	bl	80001d0 <strlen>
 800182c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fa6d 	bl	8002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3304      	adds	r3, #4
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	18d0      	adds	r0, r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4619      	mov	r1, r3
 8001858:	f009 f820 	bl	800a89c <memcpy>
      offset += length_stringsi;
 800185c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3301      	adds	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	e7d1      	b.n	8001810 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800186e:	4618      	mov	r0, r3
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001876:	b580      	push	{r7, lr}
 8001878:	b08e      	sub	sp, #56	; 0x38
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	3301      	adds	r3, #1
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	6a3a      	ldr	r2, [r7, #32]
 800189c:	4313      	orrs	r3, r2
 800189e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	3302      	adds	r3, #2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	6a3a      	ldr	r2, [r7, #32]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b4:	3303      	adds	r3, #3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	6a3a      	ldr	r2, [r7, #32]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80018c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c6:	3304      	adds	r3, #4
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	6a3a      	ldr	r2, [r7, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d90a      	bls.n	80018ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f009 fd54 	bl	800b38c <realloc>
 80018e4:	4602      	mov	r2, r0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a3a      	ldr	r2, [r7, #32]
 80018ee:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d236      	bcs.n	800196c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	440a      	add	r2, r1
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	3301      	adds	r3, #1
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	440b      	add	r3, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	3302      	adds	r3, #2
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	440b      	add	r3, r1
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	041b      	lsls	r3, r3, #16
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	3303      	adds	r3, #3
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	440b      	add	r3, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	3304      	adds	r3, #4
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001966:	3301      	adds	r3, #1
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
 800196a:	e7c3      	b.n	80018f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	4413      	add	r3, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	3301      	adds	r3, #1
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4313      	orrs	r3, r2
 8001986:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	3302      	adds	r3, #2
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	4313      	orrs	r3, r2
 8001998:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	3303      	adds	r3, #3
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	3304      	adds	r3, #4
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d90a      	bls.n	80019d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699a      	ldr	r2, [r3, #24]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f009 fce0 	bl	800b38c <realloc>
 80019cc:	4602      	mov	r2, r0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d236      	bcs.n	8001a54 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	440a      	add	r2, r1
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fc:	3301      	adds	r3, #1
 80019fe:	6839      	ldr	r1, [r7, #0]
 8001a00:	440b      	add	r3, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	3302      	adds	r3, #2
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	440b      	add	r3, r1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	3303      	adds	r3, #3
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	440b      	add	r3, r1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	3304      	adds	r3, #4
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	3214      	adds	r2, #20
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	3301      	adds	r3, #1
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a52:	e7c3      	b.n	80019dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a72:	3302      	adds	r3, #2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	3303      	adds	r3, #3
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	3304      	adds	r3, #4
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d90a      	bls.n	8001aba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f009 fc6c 	bl	800b38c <realloc>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d23f      	bcs.n	8001b4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	441a      	add	r2, r3
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 f939 	bl	8002d52 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d20c      	bcs.n	8001b10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	441a      	add	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	440b      	add	r3, r1
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e7ec      	b.n	8001aea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	3b01      	subs	r3, #1
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	3b01      	subs	r3, #1
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	441a      	add	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	3220      	adds	r2, #32
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b48:	3301      	adds	r3, #1
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4c:	e7ba      	b.n	8001ac4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001b50:	4618      	mov	r0, r3
 8001b52:	3738      	adds	r7, #56	; 0x38
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	0800d58c 	.word	0x0800d58c

08001b74 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	0800d438 	.word	0x0800d438

08001b90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68d8      	ldr	r0, [r3, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6891      	ldr	r1, [r2, #8]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4798      	blx	r3
 8001bdc:	4603      	mov	r3, r0
  };
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
  }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <_ZN13STM32HardwareC1Ev+0x34>)
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	200002f8 	.word	0x200002f8

08001c5c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f804 	bl	8001c72 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c86:	4619      	mov	r1, r3
 8001c88:	f005 ffb0 	bl	8007bec <HAL_UART_Receive_DMA>
    }
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffa8 	bl	8001bfe <_ZN13STM32Hardware10getRdmaIndEv>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	429c      	cmp	r4, r3
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d012      	beq.n	8001ce4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	791b      	ldrb	r3, [r3, #4]
 8001cd2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
	...

08001cf0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d108      	bne.n	8001d14 <_ZN13STM32Hardware5flushEv+0x24>
 8001d02:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <_ZN13STM32Hardware5flushEv+0x24>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <_ZN13STM32Hardware5flushEv+0x26>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d055      	beq.n	8001dc6 <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d047      	beq.n	8001dc0 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d217      	bcs.n	8001d74 <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	89fa      	ldrh	r2, [r7, #14]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f005 fec1 	bl	8007af4 <HAL_UART_Transmit_DMA>
 8001d72:	e01f      	b.n	8001db4 <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d80:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	89fa      	ldrh	r2, [r7, #14]
 8001d96:	4619      	mov	r1, r3
 8001d98:	f005 feac 	bl	8007af4 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	f005 fea0 	bl	8007af4 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
      }
    }
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200001fc 	.word	0x200001fc

08001dd4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
      int n = length;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dea:	bfa8      	it	ge
 8001dec:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001df0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001df8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	bf28      	it	cs
 8001e02:	4613      	movcs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f008 fd3f 	bl	800a89c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	4413      	add	r3, r2
 8001e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d00b      	beq.n	8001e52 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	18d1      	adds	r1, r2, r3
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	f008 fd25 	bl	800a89c <memcpy>
      }

      flush();
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff ff4c 	bl	8001cf0 <_ZN13STM32Hardware5flushEv>
    }
 8001e58:	bf00      	nop
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	f002 f902 	bl	8004070 <HAL_GetTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <_ZN8auv_msgs17HydrophonePayloadC1Ev>:
      typedef uint32_t _frequency_type;
      _frequency_type frequency;
      typedef uint32_t _time_type;
      _time_type time;

    HydrophonePayload():
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      hydrophone(0),
      frequency(0),
      time(0)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f844 	bl	8000f10 <_ZN3ros3MsgC1Ev>
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <_ZN8auv_msgs17HydrophonePayloadC1Ev+0x34>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	711a      	strb	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    {
    }
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0800d5c4 	.word	0x0800d5c4

08001eb0 <_ZNK8auv_msgs17HydrophonePayload9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->hydrophone >> (8 * 0)) & 0xFF;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	7912      	ldrb	r2, [r2, #4]
 8001ec8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->hydrophone);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->frequency >> (8 * 0)) & 0xFF;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->frequency >> (8 * 1)) & 0xFF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a19      	lsrs	r1, r3, #8
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->frequency >> (8 * 2)) & 0xFF;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	0c19      	lsrs	r1, r3, #16
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->frequency >> (8 * 3)) & 0xFF;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0e19      	lsrs	r1, r3, #24
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3303      	adds	r3, #3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2ca      	uxtb	r2, r1
 8001f12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->frequency);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3304      	adds	r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->time >> (8 * 0)) & 0xFF;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68d9      	ldr	r1, [r3, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->time >> (8 * 1)) & 0xFF;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a19      	lsrs	r1, r3, #8
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3301      	adds	r3, #1
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	b2ca      	uxtb	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->time >> (8 * 2)) & 0xFF;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0c19      	lsrs	r1, r3, #16
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3302      	adds	r3, #2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->time >> (8 * 3)) & 0xFF;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0e19      	lsrs	r1, r3, #24
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3303      	adds	r3, #3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b2ca      	uxtb	r2, r1
 8001f5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->time);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f64:	68fb      	ldr	r3, [r7, #12]
    }
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_ZN8auv_msgs17HydrophonePayload11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f72:	b480      	push	{r7}
 8001f74:	b085      	sub	sp, #20
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
      this->hydrophone =  ((uint8_t) (*(inbuffer + offset)));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->hydrophone);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
      this->frequency =  ((uint32_t) (*(inbuffer + offset)));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	6839      	ldr	r1, [r7, #0]
 8001faa:	440b      	add	r3, r1
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	440b      	add	r3, r1
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	061b      	lsls	r3, r3, #24
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->frequency);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
      this->time =  ((uint32_t) (*(inbuffer + offset)));
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	440b      	add	r3, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3302      	adds	r3, #2
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	440b      	add	r3, r1
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3303      	adds	r3, #3
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	440b      	add	r3, r1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->time);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
     return offset;
 800203e:	68fb      	ldr	r3, [r7, #12]
    }
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_ZN8auv_msgs17HydrophonePayload7getTypeEv>:

    virtual const char * getType() override { return "auv_msgs/HydrophonePayload"; };
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <_ZN8auv_msgs17HydrophonePayload7getTypeEv+0x18>)
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	0800d45c 	.word	0x0800d45c

08002068 <_ZN8auv_msgs17HydrophonePayload6getMD5Ev>:
    virtual const char * getMD5() override { return "b1876360f6462dc4928877125c2982d9"; };
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <_ZN8auv_msgs17HydrophonePayload6getMD5Ev+0x18>)
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	0800d478 	.word	0x0800d478

08002084 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	0800d5dc 	.word	0x0800d5dc

080020a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ffe8 	bl	8002084 <_ZN3ros15NodeHandleBase_C1Ev>
 80020b4:	4a36      	ldr	r2, [pc, #216]	; (8002190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fdb0 	bl	8001c24 <_ZN13STM32HardwareC1Ev>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80020ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f008 fbe1 	bl	800a8b8 <memset>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80020fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f008 fbd8 	bl	800a8b8 <memset>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800210e:	2264      	movs	r2, #100	; 0x64
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f008 fbd0 	bl	800a8b8 <memset>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800211e:	2264      	movs	r2, #100	; 0x64
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f008 fbc8 	bl	800a8b8 <memset>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fa3a 	bl	80015f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	0800d5b0 	.word	0x0800d5b0

08002194 <HAL_UART_TxCpltCallback>:
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_UART_TxCpltCallback+0x20>)
 800219e:	f000 fdfd 	bl	8002d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fda3 	bl	8001cf0 <_ZN13STM32Hardware5flushEv>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000410 	.word	0x20000410

080021b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_UART_RxCpltCallback+0x20>)
 80021c2:	f000 fdeb 	bl	8002d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fd52 	bl	8001c72 <_ZN13STM32Hardware10reset_rbufEv>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000410 	.word	0x20000410

080021dc <_Z13updateMessageRN8auv_msgs17HydrophonePayloadEmmh>:

void updateMessage(auv_msgs::HydrophonePayload& msg, uint32_t frequency, uint32_t time, uint8_t hnum)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	70fb      	strb	r3, [r7, #3]
	msg.frequency = frequency;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	609a      	str	r2, [r3, #8]
	msg.time = time;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]
	msg.hydrophone = hnum;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	711a      	strb	r2, [r3, #4]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	f5ad 5d41 	sub.w	sp, sp, #12352	; 0x3040
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002212:	f001 febd 	bl	8003f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002216:	f000 fb25 	bl	8002864 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221a:	f000 fcef 	bl	8002bfc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800221e:	f000 fcbf 	bl	8002ba0 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8002222:	f000 fc2d 	bl	8002a80 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 8002226:	f000 fc87 	bl	8002b38 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800222a:	f000 fb7b 	bl	8002924 <_ZL12MX_ADC1_Initv>
  float32_t hydrophone1[1024];
  float32_t hydrophone2[1024];
  float32_t hydrophone3[1024];
  float32_t V1, V2, V3;
  float32_t v1Variance;
  float32_t v1Sum = 0;
 8000f32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f36:	461a      	mov	r2, r3
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	f842 3c78 	str.w	r3, [r2, #-120]
  float32_t v1SumSquares = 0;
 8000f40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f44:	461a      	mov	r2, r3
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	f842 3c7c 	str.w	r3, [r2, #-124]
  float32_t v2Variance;
  float32_t v2Sum = 0;
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002236:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800223a:	6013      	str	r3, [r2, #0]
  float32_t v2SumSquares = 0;
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002244:	f102 0220 	add.w	r2, r2, #32
 8002248:	6013      	str	r3, [r2, #0]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800224a:	217f      	movs	r1, #127	; 0x7f
 800224c:	4844      	ldr	r0, [pc, #272]	; (8002360 <main+0x158>)
 800224e:	f003 f88f 	bl	8005370 <HAL_ADCEx_Calibration_Start>
  for (int i = 0; i < 512; i++) {
 8002252:	2300      	movs	r3, #0
 8002254:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002258:	f102 021c 	add.w	r2, r2, #28
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002262:	f103 031c 	add.w	r3, r3, #28
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	da3c      	bge.n	80022e8 <main+0xe0>
	  hydrophone0[2*i + 1] = 0;
 800226e:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002272:	f103 031c 	add.w	r3, r3, #28
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	3301      	adds	r3, #1
 800227c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002280:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b5c      	subs	r3, #92	; 0x5c
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
	  hydrophone1[2*i + 1] = 0;
 8002290:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002294:	f103 031c 	add.w	r3, r3, #28
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	3301      	adds	r3, #1
 800229e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80022a2:	f102 0208 	add.w	r2, r2, #8
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b5c      	subs	r3, #92	; 0x5c
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
	  hydrophone2[2*i + 1] = 0;
 80022b2:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80022b6:	f103 031c 	add.w	r3, r3, #28
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	3301      	adds	r3, #1
 80022c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b5c      	subs	r3, #92	; 0x5c
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 512; i++) {
 80022d0:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80022d4:	f103 031c 	add.w	r3, r3, #28
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80022e0:	f102 021c 	add.w	r2, r2, #28
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e7ba      	b.n	800225e <main+0x56>
  }
  nh.initNode();
 80022e8:	481e      	ldr	r0, [pc, #120]	; (8002364 <main+0x15c>)
 80022ea:	f000 fd63 	bl	8002db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(hpub1);
 80022ee:	491e      	ldr	r1, [pc, #120]	; (8002368 <main+0x160>)
 80022f0:	481c      	ldr	r0, [pc, #112]	; (8002364 <main+0x15c>)
 80022f2:	f000 fd7c 	bl	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(hpub2);
 80022f6:	491d      	ldr	r1, [pc, #116]	; (800236c <main+0x164>)
 80022f8:	481a      	ldr	r0, [pc, #104]	; (8002364 <main+0x15c>)
 80022fa:	f000 fd78 	bl	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(hpub3);
 80022fe:	491c      	ldr	r1, [pc, #112]	; (8002370 <main+0x168>)
 8002300:	4818      	ldr	r0, [pc, #96]	; (8002364 <main+0x15c>)
 8002302:	f000 fd74 	bl	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Payload *payload1 = (Payload *) malloc(sizeof(Payload));
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f006 fbdb 	bl	80077b4 <malloc>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8001004:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001008:	6013      	str	r3, [r2, #0]
  Payload *payload2 = (Payload *) malloc(sizeof(Payload));
 800100a:	200c      	movs	r0, #12
 800100c:	f006 fbd2 	bl	80077b4 <malloc>
 8001010:	4603      	mov	r3, r0
 8001012:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8001016:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800101a:	6013      	str	r3, [r2, #0]
  Payload *payload3 = (Payload *) malloc(sizeof(Payload));
 800101c:	200c      	movs	r0, #12
 800101e:	f006 fbc9 	bl	80077b4 <malloc>
 8001022:	4603      	mov	r3, r0
 8001024:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8001028:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800102c:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8002306:	481b      	ldr	r0, [pc, #108]	; (8002374 <main+0x16c>)
 8002308:	f004 ffdc 	bl	80072c4 <HAL_TIM_Base_Start_IT>
  //printf("HI!\n\r");
  while (1)
  {
	  HAL_Delay(400);
 800230c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002310:	f001 feba 	bl	8004088 <HAL_Delay>
	  printf("%lu\r\n", usecs_elapsed);
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <main+0x170>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	4818      	ldr	r0, [pc, #96]	; (800237c <main+0x174>)
 800231c:	f009 f81e 	bl	800b35c <iprintf>
	  for(int i = 0; i < 512; i++) {
 8002320:	2300      	movs	r3, #0
 8002322:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002326:	f102 0218 	add.w	r2, r2, #24
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002330:	f103 0318 	add.w	r3, r3, #24
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233a:	f280 81b3 	bge.w	80026a4 <main+0x49c>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 800233e:	2204      	movs	r2, #4
 8002340:	490f      	ldr	r1, [pc, #60]	; (8002380 <main+0x178>)
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <main+0x158>)
 8002344:	f002 f9f4 	bl	8004730 <HAL_ADC_Start_DMA>
		  while (conversionComplete == 0) {
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <main+0x17c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <main+0x180>
			  continue;
 800235a:	bf00      	nop
		  while (conversionComplete == 0) {
 800235c:	e7f4      	b.n	8002348 <main+0x140>
 800235e:	bf00      	nop
 8002360:	20000200 	.word	0x20000200
 8002364:	20000410 	.word	0x20000410
 8002368:	20000d7c 	.word	0x20000d7c
 800236c:	20000d90 	.word	0x20000d90
 8002370:	20000da4 	.word	0x20000da4
 8002374:	200002ac 	.word	0x200002ac
 8002378:	20000db8 	.word	0x20000db8
 800237c:	0800d49c 	.word	0x0800d49c
 8002380:	20000dbc 	.word	0x20000dbc
 8002384:	20000dc4 	.word	0x20000dc4
		  }
		  conversionComplete = 0;
 8002388:	4bbf      	ldr	r3, [pc, #764]	; (8002688 <main+0x480>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
		  calculateVoltage(adcChannels[0], adcChannels[1], &V2);
 800238e:	4bbf      	ldr	r3, [pc, #764]	; (800268c <main+0x484>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29a      	uxth	r2, r3
 8002394:	4bbd      	ldr	r3, [pc, #756]	; (800268c <main+0x484>)
 8002396:	885b      	ldrh	r3, [r3, #2]
 8002398:	b29b      	uxth	r3, r3
 800239a:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 800239e:	f101 012a 	add.w	r1, r1, #42	; 0x2a
 80023a2:	800a      	strh	r2, [r1, #0]
 80023a4:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80023a8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b2:	3b20      	subs	r3, #32
 80023b4:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80023b8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80023bc:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 80023be:	4bb4      	ldr	r3, [pc, #720]	; (8002690 <main+0x488>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ca:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80023ce:	f103 0320 	add.w	r3, r3, #32
 80023d2:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 80023d6:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80023da:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e8:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80023ec:	f103 0320 	add.w	r3, r3, #32
 80023f0:	edd3 6a00 	vldr	s13, [r3]
 80023f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002404:	f103 031c 	add.w	r3, r3, #28
 8002408:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 800240c:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002410:	f103 031c 	add.w	r3, r3, #28
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8002694 <main+0x48c>
 800241c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002420:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002424:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800243a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	edc3 7a00 	vstr	s15, [r3]
}
 8002444:	bf00      	nop
		  calculateVoltage(adcChannels[0], adcChannels[2], &V3);
 8002446:	4b91      	ldr	r3, [pc, #580]	; (800268c <main+0x484>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b8f      	ldr	r3, [pc, #572]	; (800268c <main+0x484>)
 800244e:	889b      	ldrh	r3, [r3, #4]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8002456:	f101 013a 	add.w	r1, r1, #58	; 0x3a
 800245a:	800a      	strh	r2, [r1, #0]
 800245c:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8002460:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002464:	8013      	strh	r3, [r2, #0]
 8002466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800246a:	3b24      	subs	r3, #36	; 0x24
 800246c:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8002470:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002474:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002476:	4b86      	ldr	r3, [pc, #536]	; (8002690 <main+0x488>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002486:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800248a:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 800248e:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002492:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a0:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024a4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80024a8:	edd3 6a00 	vldr	s13, [r3]
 80024ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80024b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b8:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024bc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024c0:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80024c4:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024c8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002694 <main+0x48c>
 80024d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024d8:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024dc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024f2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	edc3 7a00 	vstr	s15, [r3]
}
 80024fc:	bf00      	nop
		  calculateVoltage(adcChannels[0], adcChannels[3], &V4);
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <main+0x484>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b61      	ldr	r3, [pc, #388]	; (800268c <main+0x484>)
 8002506:	88db      	ldrh	r3, [r3, #6]
 8002508:	b29b      	uxth	r3, r3
 800250a:	f507 5141 	add.w	r1, r7, #12352	; 0x3040
 800250e:	f101 010a 	add.w	r1, r1, #10
 8002512:	800a      	strh	r2, [r1, #0]
 8002514:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002518:	f102 0208 	add.w	r2, r2, #8
 800251c:	8013      	strh	r3, [r2, #0]
 800251e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002522:	3b28      	subs	r3, #40	; 0x28
 8002524:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002528:	f102 0204 	add.w	r2, r2, #4
 800252c:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 800252e:	4b58      	ldr	r3, [pc, #352]	; (8002690 <main+0x488>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253a:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800253e:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002542:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002546:	f103 030a 	add.w	r3, r3, #10
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002554:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002558:	edd3 6a00 	vldr	s13, [r3]
 800255c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002560:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002568:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800256c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002570:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 8002574:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002578:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800257c:	edd3 7a00 	vldr	s15, [r3]
 8002580:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002694 <main+0x48c>
 8002584:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002588:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800258c:	f103 0308 	add.w	r3, r3, #8
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025a2:	f103 0304 	add.w	r3, r3, #4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	edc3 7a00 	vstr	s15, [r3]
}
 80025ac:	bf00      	nop
		  v2Sum += V2;
 80025ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025b2:	ed53 7a18 	vldr	s15, [r3, #-96]	; 0xffffffa0
 80025b6:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025ba:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80025be:	ed93 7a00 	vldr	s14, [r3]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025ca:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80025ce:	edc3 7a00 	vstr	s15, [r3]
		  v2SumSquares += powf(V2, 2);
 80025d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025d6:	ed53 7a18 	vldr	s15, [r3, #-96]	; 0xffffffa0
 80025da:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80025de:	eeb0 0a67 	vmov.f32	s0, s15
 80025e2:	f007 fd31 	bl	800a048 <powf>
 80025e6:	eeb0 7a40 	vmov.f32	s14, s0
 80025ea:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025ee:	f103 0320 	add.w	r3, r3, #32
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025fa:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80025fe:	f103 0320 	add.w	r3, r3, #32
 8002602:	edc3 7a00 	vstr	s15, [r3]
		  hydrophone0[2*i] = V2;
 8002606:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800260a:	f103 0318 	add.w	r3, r3, #24
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002616:	f852 2c60 	ldr.w	r2, [r2, #-96]
 800261a:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 800261e:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3b5c      	subs	r3, #92	; 0x5c
 8002628:	601a      	str	r2, [r3, #0]
		  hydrophone1[2*i] = V3;
 800262a:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800262e:	f103 0318 	add.w	r3, r3, #24
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800263a:	f852 2c64 	ldr.w	r2, [r2, #-100]
 800263e:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 8002642:	f101 0108 	add.w	r1, r1, #8
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3b5c      	subs	r3, #92	; 0x5c
 800264c:	601a      	str	r2, [r3, #0]
		  hydrophone2[2*i] = V4;
 800264e:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002652:	f103 0318 	add.w	r3, r3, #24
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800265e:	f852 2c68 	ldr.w	r2, [r2, #-104]
 8002662:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3b5c      	subs	r3, #92	; 0x5c
 800266c:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 512; i++) {
 800266e:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002672:	f103 0318 	add.w	r3, r3, #24
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 800267e:	f102 0218 	add.w	r2, r2, #24
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e652      	b.n	800232c <main+0x124>
 8002686:	bf00      	nop
 8002688:	20000dc4 	.word	0x20000dc4
 800268c:	20000dbc 	.word	0x20000dbc
 8002690:	1fff75aa 	.word	0x1fff75aa
 8002694:	457ff000 	.word	0x457ff000
 8002698:	44000000 	.word	0x44000000
 800269c:	43ff8000 	.word	0x43ff8000
 80026a0:	4a8f9cb5 	.word	0x4a8f9cb5
	  }
	  //printf("%f\r\n", v2Sum);
	  //printf("%f\r\n", v2SumSquares);
	  v2Variance = (v2SumSquares - ((powf(v2Sum, 2))/512.0f)) / (512.0f - 1.0f);
 80026a4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80026a8:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026ac:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80026b0:	ed93 0a00 	vldr	s0, [r3]
 80026b4:	f007 fcc8 	bl	800a048 <powf>
 80026b8:	eeb0 7a40 	vmov.f32	s14, s0
 80026bc:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8002698 <main+0x490>
 80026c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c4:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026c8:	f103 0320 	add.w	r3, r3, #32
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d4:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 800269c <main+0x494>
 80026d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026dc:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80026e0:	f103 0314 	add.w	r3, r3, #20
 80026e4:	edc3 7a00 	vstr	s15, [r3]
	  v2Sum = 0;
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80026f0:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80026f4:	6013      	str	r3, [r2, #0]
	  v2SumSquares = 0;
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80026fe:	f102 0220 	add.w	r2, r2, #32
 8002702:	6013      	str	r3, [r2, #0]
	  frequency = get_frequency(hydrophone0, 1024, 4705882.3529);
 8002704:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002708:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800270c:	3b1c      	subs	r3, #28
 800270e:	ed1f 0a1c 	vldr	s0, [pc, #-112]	; 80026a0 <main+0x498>
 8002712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002716:	4618      	mov	r0, r3
 8002718:	f001 f814 	bl	8003744 <get_frequency>
 800271c:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002720:	f103 0310 	add.w	r3, r3, #16
 8002724:	6018      	str	r0, [r3, #0]
	  if (v2Variance > 0.9) {
 8002726:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800272a:	f103 0314 	add.w	r3, r3, #20
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f7fd ff0a 	bl	8000548 <__aeabi_f2d>
 8002734:	a349      	add	r3, pc, #292	; (adr r3, 800285c <main+0x654>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fe f9ed 	bl	8000b18 <__aeabi_dcmpgt>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d075      	beq.n	8002830 <main+0x628>
		  printf("variance of hydrophone 1: %f\r\n", v2Variance);
 8002744:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002748:	f103 0314 	add.w	r3, r3, #20
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	f7fd fefb 	bl	8000548 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	483a      	ldr	r0, [pc, #232]	; (8002840 <main+0x638>)
 8002758:	f008 fe00 	bl	800b35c <iprintf>
		  Payload *payload1 = createPayload(frequency, usecs_elapsed, HYDROPHONE1);
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <main+0x63c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 8002764:	f102 0210 	add.w	r2, r2, #16
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 800276e:	f101 0118 	add.w	r1, r1, #24
 8002772:	600a      	str	r2, [r1, #0]
 8002774:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8002778:	f102 0214 	add.w	r2, r2, #20
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	2300      	movs	r3, #0
 8002780:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8002784:	f102 0213 	add.w	r2, r2, #19
 8002788:	7013      	strb	r3, [r2, #0]
	Payload *payloadPtr = (Payload *) malloc(sizeof(Payload));
 800278a:	200c      	movs	r0, #12
 800278c:	f008 f87e 	bl	800a88c <malloc>
 8002790:	4603      	mov	r3, r0
 8002792:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8002796:	f102 020c 	add.w	r2, r2, #12
 800279a:	6013      	str	r3, [r2, #0]
	payloadPtr->frequency = frequency;
 800279c:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80027a0:	f103 030c 	add.w	r3, r3, #12
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80027aa:	f102 0218 	add.w	r2, r2, #24
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	605a      	str	r2, [r3, #4]
	payloadPtr->time = time;
 80027b2:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80027b6:	f103 030c 	add.w	r3, r3, #12
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80027c0:	f102 0214 	add.w	r2, r2, #20
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	609a      	str	r2, [r3, #8]
	payloadPtr->hydrophone = hydrophone;
 80027c8:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80027cc:	f103 030c 	add.w	r3, r3, #12
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80027d6:	f102 0213 	add.w	r2, r2, #19
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	701a      	strb	r2, [r3, #0]
	return payloadPtr;
 80027de:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80027e2:	f103 030c 	add.w	r3, r3, #12
 80027e6:	681b      	ldr	r3, [r3, #0]
		  Payload *payload1 = createPayload(frequency, usecs_elapsed, HYDROPHONE1);
 80027e8:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80027ec:	f102 020c 	add.w	r2, r2, #12
 80027f0:	6013      	str	r3, [r2, #0]
		  updateMessage(hmsg1, frequency, usecs_elapsed, 1);
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <main+0x63c>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	f507 5141 	add.w	r1, r7, #12352	; 0x3040
 80027fc:	f101 0110 	add.w	r1, r1, #16
 8002800:	6809      	ldr	r1, [r1, #0]
 8002802:	4811      	ldr	r0, [pc, #68]	; (8002848 <main+0x640>)
 8002804:	f7ff fcea 	bl	80021dc <_Z13updateMessageRN8auv_msgs17HydrophonePayloadEmmh>
		  printf("frequency from hydrophone 1: %lu\r\n", payload1->frequency);
 8002808:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 800280c:	f103 030c 	add.w	r3, r3, #12
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4619      	mov	r1, r3
 8002816:	480d      	ldr	r0, [pc, #52]	; (800284c <main+0x644>)
 8002818:	f008 fda0 	bl	800b35c <iprintf>
		  printf("time from hydrophone 1: %lu\r\n", payload1->time);
 800281c:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 8002820:	f103 030c 	add.w	r3, r3, #12
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4619      	mov	r1, r3
 800282a:	4809      	ldr	r0, [pc, #36]	; (8002850 <main+0x648>)
 800282c:	f008 fd96 	bl	800b35c <iprintf>
	  }
	  hpub1.publish(&hmsg1);
 8002830:	4905      	ldr	r1, [pc, #20]	; (8002848 <main+0x640>)
 8002832:	4808      	ldr	r0, [pc, #32]	; (8002854 <main+0x64c>)
 8002834:	f7ff f9c3 	bl	8001bbe <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 8002838:	4807      	ldr	r0, [pc, #28]	; (8002858 <main+0x650>)
 800283a:	f000 fb08 	bl	8002e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	  //printf("frequency from hydrophone 3: %lu", get_frequency(hydrophone2, 1024, 4705882.35));

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800283e:	e565      	b.n	800230c <main+0x104>
 8002840:	0800d4a4 	.word	0x0800d4a4
 8002844:	20000db8 	.word	0x20000db8
 8002848:	20000d4c 	.word	0x20000d4c
 800284c:	0800d4c4 	.word	0x0800d4c4
 8002850:	0800d4e8 	.word	0x0800d4e8
 8002854:	20000d7c 	.word	0x20000d7c
 8002858:	20000410 	.word	0x20000410
 800285c:	cccccccd 	.word	0xcccccccd
 8002860:	3feccccc 	.word	0x3feccccc

08002864 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b096      	sub	sp, #88	; 0x58
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	2244      	movs	r2, #68	; 0x44
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f008 f820 	bl	800a8b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002886:	f44f 7000 	mov.w	r0, #512	; 0x200
 800288a:	f003 faf9 	bl	8005e80 <HAL_PWREx_ControlVoltageScaling>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800289e:	f000 fa35 	bl	8002d0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028a2:	2302      	movs	r3, #2
 80028a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ac:	2310      	movs	r3, #16
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028b0:	2302      	movs	r3, #2
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028b4:	2302      	movs	r3, #2
 80028b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80028bc:	230a      	movs	r3, #10
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028c0:	2307      	movs	r3, #7
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028c4:	2302      	movs	r3, #2
 80028c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028c8:	2302      	movs	r3, #2
 80028ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fb2b 	bl	8005f2c <HAL_RCC_OscConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80028e6:	f000 fa11 	bl	8002d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ea:	230f      	movs	r3, #15
 80028ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ee:	2303      	movs	r3, #3
 80028f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028fe:	463b      	mov	r3, r7
 8002900:	2104      	movs	r1, #4
 8002902:	4618      	mov	r0, r3
 8002904:	f003 ff26 	bl	8006754 <HAL_RCC_ClockConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002918:	f000 f9f8 	bl	8002d0c <Error_Handler>
  }
}
 800291c:	bf00      	nop
 800291e:	3758      	adds	r7, #88	; 0x58
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800292a:	463b      	mov	r3, r7
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
 8002938:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800293a:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <_ZL12MX_ADC1_Initv+0x148>)
 800293e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002940:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002942:	2200      	movs	r2, #0
 8002944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002952:	4b45      	ldr	r3, [pc, #276]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002954:	2201      	movs	r2, #1
 8002956:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002958:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 800295a:	2204      	movs	r2, #4
 800295c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800295e:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002960:	2200      	movs	r2, #0
 8002962:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002966:	2201      	movs	r2, #1
 8002968:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800296a:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 800296c:	2204      	movs	r2, #4
 800296e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002978:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 800297a:	2200      	movs	r2, #0
 800297c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002980:	2200      	movs	r2, #0
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002984:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 800298e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002994:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800299c:	4832      	ldr	r0, [pc, #200]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 800299e:	f001 fd85 	bl	80044ac <HAL_ADC_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <_ZL12MX_ADC1_Initv+0x92>
  {
    Error_Handler();
 80029b2:	f000 f9ab 	bl	8002d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80029b6:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <_ZL12MX_ADC1_Initv+0x14c>)
 80029b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029ba:	2306      	movs	r3, #6
 80029bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029c2:	237f      	movs	r3, #127	; 0x7f
 80029c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029c6:	2304      	movs	r3, #4
 80029c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029ce:	463b      	mov	r3, r7
 80029d0:	4619      	mov	r1, r3
 80029d2:	4825      	ldr	r0, [pc, #148]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 80029d4:	f001 ff44 	bl	8004860 <HAL_ADC_ConfigChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 80029e8:	f000 f990 	bl	8002d0c <Error_Handler>
  }


  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <_ZL12MX_ADC1_Initv+0x150>)
 80029ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80029f0:	230c      	movs	r3, #12
 80029f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f4:	463b      	mov	r3, r7
 80029f6:	4619      	mov	r1, r3
 80029f8:	481b      	ldr	r0, [pc, #108]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 80029fa:	f001 ff31 	bl	8004860 <HAL_ADC_ConfigChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <_ZL12MX_ADC1_Initv+0xee>
  {
    Error_Handler();
 8002a0e:	f000 f97d 	bl	8002d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <_ZL12MX_ADC1_Initv+0x154>)
 8002a14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a16:	2312      	movs	r3, #18
 8002a18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4812      	ldr	r0, [pc, #72]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002a20:	f001 ff1e 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bf14      	ite	ne
 8002a2a:	2301      	movne	r3, #1
 8002a2c:	2300      	moveq	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <_ZL12MX_ADC1_Initv+0x114>
  {
    Error_Handler();
 8002a34:	f000 f96a 	bl	8002d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <_ZL12MX_ADC1_Initv+0x158>)
 8002a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a3c:	2318      	movs	r3, #24
 8002a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a40:	463b      	mov	r3, r7
 8002a42:	4619      	mov	r1, r3
 8002a44:	4808      	ldr	r0, [pc, #32]	; (8002a68 <_ZL12MX_ADC1_Initv+0x144>)
 8002a46:	f001 ff0b 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8002a5a:	f000 f957 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000200 	.word	0x20000200
 8002a6c:	50040000 	.word	0x50040000
 8002a70:	80000001 	.word	0x80000001
 8002a74:	43210000 	.word	0x43210000
 8002a78:	2e300800 	.word	0x2e300800
 8002a7c:	25b00200 	.word	0x25b00200

08002a80 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a9e:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002ab4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ac6:	481b      	ldr	r0, [pc, #108]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002ac8:	f004 fba4 	bl	8007214 <HAL_TIM_Base_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002adc:	f000 f916 	bl	8002d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	4619      	mov	r1, r3
 8002aec:	4811      	ldr	r0, [pc, #68]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002aee:	f004 fd3f 	bl	8007570 <HAL_TIM_ConfigClockSource>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8002b02:	f000 f903 	bl	8002d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4808      	ldr	r0, [pc, #32]	; (8002b34 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b14:	f004 ff1c 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002b28:	f000 f8f0 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200002ac 	.word	0x200002ac

08002b38 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b3e:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <_ZL19MX_USART2_UART_Initv+0x64>)
 8002b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b5e:	220c      	movs	r2, #12
 8002b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b7a:	4807      	ldr	r0, [pc, #28]	; (8002b98 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002b7c:	f004 ff6c 	bl	8007a58 <HAL_UART_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8002b90:	f000 f8bc 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200002f8 	.word	0x200002f8
 8002b9c:	40004400 	.word	0x40004400

08002ba0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <_ZL11MX_DMA_Initv+0x58>)
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <_ZL11MX_DMA_Initv+0x58>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6493      	str	r3, [r2, #72]	; 0x48
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <_ZL11MX_DMA_Initv+0x58>)
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	200b      	movs	r0, #11
 8002bc4:	f002 fd0f 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bc8:	200b      	movs	r0, #11
 8002bca:	f002 fd28 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2010      	movs	r0, #16
 8002bd4:	f002 fd07 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002bd8:	2010      	movs	r0, #16
 8002bda:	f002 fd20 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2011      	movs	r0, #17
 8002be4:	f002 fcff 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002be8:	2011      	movs	r0, #17
 8002bea:	f002 fd18 	bl	800561e <HAL_NVIC_EnableIRQ>

}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000

08002bfc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	60da      	str	r2, [r3, #12]
 8002c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1e:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <_ZL12MX_GPIO_Initv+0xc4>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	21a0      	movs	r1, #160	; 0xa0
 8002c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7a:	f003 f8db 	bl	8005e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <_ZL12MX_GPIO_Initv+0xc8>)
 8002c96:	f002 ff53 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 8002c9a:	23a0      	movs	r3, #160	; 0xa0
 8002c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb4:	f002 ff44 	bl	8005b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cb8:	bf00      	nop
 8002cba:	3728      	adds	r7, #40	; 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	48000800 	.word	0x48000800

08002cc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	usecs_elapsed += 10;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330a      	adds	r3, #10
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cd8:	6013      	str	r3, [r2, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000db8 	.word	0x20000db8

08002cec <HAL_ADC_ConvCpltCallback>:

/*void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc) {
}*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	conversionComplete = 1;
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000dc4 	.word	0x20000dc4

08002d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d10:	b672      	cpsid	i
}
 8002d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <Error_Handler+0x8>

08002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d80d      	bhi.n	8002d46 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	fa22 f103 	lsr.w	r1, r2, r3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	b2ca      	uxtb	r2, r1
 8002d3c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e7ee      	b.n	8002d24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d811      	bhi.n	8002d90 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	440a      	add	r2, r1
 8002d76:	7812      	ldrb	r2, [r2, #0]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	00d2      	lsls	r2, r2, #3
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e7ea      	b.n	8002d66 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
  }
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe ff4b 	bl	8001c5c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b18      	cmp	r3, #24
 8002e00:	dc1e      	bgt.n	8002e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d111      	bne.n	8002e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	60da      	str	r2, [r3, #12]
        return true;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e004      	b.n	8002e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e7dd      	b.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002e40:	2300      	movs	r3, #0
  }
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f800 	bl	8001e60 <_ZN13STM32Hardware4timeEv>
 8002e60:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d903      	bls.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d903      	bls.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d014      	beq.n	8002ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe ffd9 	bl	8001e60 <_ZN13STM32Hardware4timeEv>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad2      	subs	r2, r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	bf8c      	ite	hi
 8002ebe:	2301      	movhi	r3, #1
 8002ec0:	2300      	movls	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002ec8:	f06f 0301 	mvn.w	r3, #1
 8002ecc:	e194      	b.n	80031f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fede 	bl	8001c94 <_ZN13STM32Hardware4readEv>
 8002ed8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f2c0 8174 	blt.w	80031ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	441a      	add	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	d11e      	bne.n	8002f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002f02:	1c59      	adds	r1, r3, #1
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	b2d1      	uxtb	r1, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	460a      	mov	r2, r1
 8002f14:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f1e:	1e5a      	subs	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1b4      	bne.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2208      	movs	r2, #8
 8002f34:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f38:	e7af      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d128      	bne.n	8002f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	d10d      	bne.n	8002f66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f103 0214 	add.w	r2, r3, #20
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002f64:	e799      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe ff78 	bl	8001e60 <_ZN13STM32Hardware4timeEv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	bf8c      	ite	hi
 8002f7e:	2301      	movhi	r3, #1
 8002f80:	2300      	movls	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d088      	beq.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002f90:	f06f 0301 	mvn.w	r3, #1
 8002f94:	e130      	b.n	80031f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d118      	bne.n	8002fd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2bfe      	cmp	r3, #254	; 0xfe
 8002fa4:	d107      	bne.n	8002fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002fb4:	e771      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f47f af68 	bne.w	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f918 	bl	8003200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002fd0:	e763      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d113      	bne.n	8003004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003002:	e74a      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800300a:	2b03      	cmp	r3, #3
 800300c:	d110      	bne.n	8003030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800302e:	e734      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003036:	2b04      	cmp	r3, #4
 8003038:	d116      	bne.n	8003068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003040:	425a      	negs	r2, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	bf58      	it	pl
 8003048:	4253      	negpl	r3, r2
 800304a:	2bff      	cmp	r3, #255	; 0xff
 800304c:	d107      	bne.n	800305e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800305c:	e71d      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003066:	e718      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800306e:	2b05      	cmp	r3, #5
 8003070:	d10f      	bne.n	8003092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003090:	e703      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003098:	2b06      	cmp	r3, #6
 800309a:	d117      	bne.n	80030cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	441a      	add	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2207      	movs	r2, #7
 80030b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f47f aeec 	bne.w	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2208      	movs	r2, #8
 80030c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030ca:	e6e6      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	f47f aee1 	bne.w	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80030e6:	425a      	negs	r2, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	bf58      	it	pl
 80030ee:	4253      	negpl	r3, r2
 80030f0:	2bff      	cmp	r3, #255	; 0xff
 80030f2:	f47f aed2 	bne.w	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d110      	bne.n	8003122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f87d 	bl	8003200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f898 	bl	800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	e06a      	b.n	80031f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003128:	2b0a      	cmp	r3, #10
 800312a:	d107      	bne.n	800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f961 	bl	80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800313a:	e6ae      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d10e      	bne.n	8003164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fe fb8e 	bl	8001876 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003162:	e69a      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800316a:	2b0b      	cmp	r3, #11
 800316c:	d104      	bne.n	8003178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003176:	e690      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800317e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f43f ae84 	beq.w	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003198:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80031ac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80031c4:	4611      	mov	r1, r2
 80031c6:	4798      	blx	r3
    while (true)
 80031c8:	e667      	b.n	8002e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80031ca:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00f      	beq.n	80031f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d906      	bls.n	80031f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f809 	bl	8003200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80031f6:	2300      	movs	r3, #0
  }
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fe8f 	bl	8000f30 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f107 020c 	add.w	r2, r7, #12
 800321c:	210a      	movs	r1, #10
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    rt_time = hardware_.time();
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fe1a 	bl	8001e60 <_ZN13STM32Hardware4timeEv>
 800322c:	4602      	mov	r2, r0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b08b      	sub	sp, #44	; 0x2c
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd ff61 	bl	8001110 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	2b18      	cmp	r3, #24
 8003256:	dc63      	bgt.n	8003320 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d056      	beq.n	8003318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	b29b      	uxth	r3, r3
 800327c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4608      	mov	r0, r1
 80032b8:	4798      	blx	r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4798      	blx	r3
 80032e8:	4603      	mov	r3, r0
 80032ea:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80032ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032f0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681c      	ldr	r4, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fc6d 	bl	8001be6 <_ZN3ros9Publisher15getEndpointTypeEv>
 800330c:	4601      	mov	r1, r0
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	461a      	mov	r2, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	3301      	adds	r3, #1
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e798      	b.n	8003252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2b18      	cmp	r3, #24
 8003328:	dc5f      	bgt.n	80033ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d053      	beq.n	80033e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	b29b      	uxth	r3, r3
 800334a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3308      	adds	r3, #8
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4608      	mov	r0, r1
 800337c:	4798      	blx	r3
 800337e:	4603      	mov	r3, r0
 8003380:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003386:	f202 2222 	addw	r2, r2, #546	; 0x222
 800338a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4798      	blx	r3
 80033a4:	4603      	mov	r3, r0
 80033a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80033a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ac:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681c      	ldr	r4, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3304      	adds	r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4608      	mov	r0, r1
 80033d4:	4798      	blx	r3
 80033d6:	4601      	mov	r1, r0
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	461a      	mov	r2, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	3301      	adds	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	e79c      	b.n	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80033f2:	bf00      	nop
 80033f4:	372c      	adds	r7, #44	; 0x2c
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
	...

080033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fd90 	bl	8000f30 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe fd23 	bl	8001e60 <_ZN13STM32Hardware4timeEv>
 800341a:	4602      	mov	r2, r0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003426:	f107 0308 	add.w	r3, r7, #8
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fdef 	bl	8001010 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4915      	ldr	r1, [pc, #84]	; (800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003438:	fba1 1303 	umull	r1, r3, r1, r3
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003442:	6939      	ldr	r1, [r7, #16]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003448:	fba3 0302 	umull	r0, r3, r3, r2
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	440b      	add	r3, r1
 8003460:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	3304      	adds	r3, #4
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8a6 	bl	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fcf3 	bl	8001e60 <_ZN13STM32Hardware4timeEv>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	10624dd3 	.word	0x10624dd3
 8003490:	000f4240 	.word	0x000f4240

08003494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b63      	cmp	r3, #99	; 0x63
 80034a4:	dd09      	ble.n	80034ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80034ac:	f083 0301 	eor.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e079      	b.n	80035ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80034c6:	3207      	adds	r2, #7
 80034c8:	4611      	mov	r1, r2
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
 80034ce:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	22ff      	movs	r2, #255	; 0xff
 80034d4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	22fe      	movs	r2, #254	; 0xfe
 80034dc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003506:	4413      	add	r3, r2
 8003508:	b2db      	uxtb	r3, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	b21b      	sxth	r3, r3
 8003522:	121b      	asrs	r3, r3, #8
 8003524:	b21b      	sxth	r3, r3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003532:	2305      	movs	r3, #5
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3306      	adds	r3, #6
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	429a      	cmp	r2, r3
 800353e:	dc0d      	bgt.n	800355c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4413      	add	r3, r2
 8003546:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	3301      	adds	r3, #1
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e7ec      	b.n	8003536 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3307      	adds	r3, #7
 8003560:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	425a      	negs	r2, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	bf58      	it	pl
 800356c:	4253      	negpl	r3, r2
 800356e:	b2da      	uxtb	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	6179      	str	r1, [r7, #20]
 8003576:	43d2      	mvns	r2, r2
 8003578:	b2d1      	uxtb	r1, r2
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	460a      	mov	r2, r1
 8003580:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358a:	dc0a      	bgt.n	80035a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1d18      	adds	r0, r3, #4
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4619      	mov	r1, r3
 800359a:	f7fe fc1b 	bl	8001dd4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	e005      	b.n	80035ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80035a2:	4905      	ldr	r1, [pc, #20]	; (80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f849 	bl	800363c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	0800d508 	.word	0x0800d508

080035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fc48 	bl	8001e60 <_ZN13STM32Hardware4timeEv>
 80035d0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4915      	ldr	r1, [pc, #84]	; (8003630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80035da:	fba1 1303 	umull	r1, r3, r1, r3
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80035f2:	fba3 0302 	umull	r0, r3, r3, r2
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035fc:	fb00 f303 	mul.w	r3, r0, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	1aca      	subs	r2, r1, r3
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800360c:	4413      	add	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 fc5e 	bl	8003ee4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	10624dd3 	.word	0x10624dd3
 8003634:	000f4240 	.word	0x000f4240
 8003638:	3b9aca00 	.word	0x3b9aca00

0800363c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	2103      	movs	r1, #3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f804 	bl	8003658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	460b      	mov	r3, r1
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd ff14 	bl	8001498 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003670:	7afb      	ldrb	r3, [r7, #11]
 8003672:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f107 0214 	add.w	r2, r7, #20
 8003682:	2107      	movs	r1, #7
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	4798      	blx	r3
  }
 8003688:	bf00      	nop
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d122      	bne.n	80036e6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d11d      	bne.n	80036e6 <_Z41__static_initialization_and_destruction_0ii+0x56>
ros::NodeHandle nh;
 80036aa:	4811      	ldr	r0, [pc, #68]	; (80036f0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80036ac:	f7fe fcfa 	bl	80020a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
auv_msgs::HydrophonePayload hmsg1, hmsg2, hmsg3;
 80036b0:	4810      	ldr	r0, [pc, #64]	; (80036f4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80036b2:	f7fe fbe1 	bl	8001e78 <_ZN8auv_msgs17HydrophonePayloadC1Ev>
 80036b6:	4810      	ldr	r0, [pc, #64]	; (80036f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80036b8:	f7fe fbde 	bl	8001e78 <_ZN8auv_msgs17HydrophonePayloadC1Ev>
 80036bc:	480f      	ldr	r0, [pc, #60]	; (80036fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80036be:	f7fe fbdb 	bl	8001e78 <_ZN8auv_msgs17HydrophonePayloadC1Ev>
ros::Publisher hpub1("hydrophone_1", &hmsg1);
 80036c2:	2300      	movs	r3, #0
 80036c4:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80036c6:	490e      	ldr	r1, [pc, #56]	; (8003700 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80036c8:	480e      	ldr	r0, [pc, #56]	; (8003704 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80036ca:	f7fe fa61 	bl	8001b90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher hpub2("hydrophone_2", &hmsg2);
 80036ce:	2300      	movs	r3, #0
 80036d0:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80036d2:	490d      	ldr	r1, [pc, #52]	; (8003708 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80036d4:	480d      	ldr	r0, [pc, #52]	; (800370c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80036d6:	f7fe fa5b 	bl	8001b90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher hpub3("hydrophone_3", &hmsg3);
 80036da:	2300      	movs	r3, #0
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80036de:	490c      	ldr	r1, [pc, #48]	; (8003710 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80036e0:	480c      	ldr	r0, [pc, #48]	; (8003714 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80036e2:	f7fe fa55 	bl	8001b90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000410 	.word	0x20000410
 80036f4:	20000d4c 	.word	0x20000d4c
 80036f8:	20000d5c 	.word	0x20000d5c
 80036fc:	20000d6c 	.word	0x20000d6c
 8003700:	0800d544 	.word	0x0800d544
 8003704:	20000d7c 	.word	0x20000d7c
 8003708:	0800d554 	.word	0x0800d554
 800370c:	20000d90 	.word	0x20000d90
 8003710:	0800d564 	.word	0x0800d564
 8003714:	20000da4 	.word	0x20000da4

08003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    return configured_;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_GLOBAL__sub_I_hadc1>:
 8003732:	b580      	push	{r7, lr}
 8003734:	af00      	add	r7, sp, #0
 8003736:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800373a:	2001      	movs	r0, #1
 800373c:	f7ff ffa8 	bl	8003690 <_Z41__static_initialization_and_destruction_0ii>
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <get_frequency>:
    return freq[target_bin] / sum;
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d56:	46b5      	mov	sp, r6
 8001d58:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d60:	373c      	adds	r7, #60	; 0x3c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d68:	0800aa9c 	.word	0x0800aa9c

08001d6c <get_frequency>:


uint32_t get_frequency(float32_t* buff, uint32_t size, float32_t fs)
{
 8003744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003748:	b095      	sub	sp, #84	; 0x54
 800374a:	af00      	add	r7, sp, #0
 800374c:	6178      	str	r0, [r7, #20]
 800374e:	6139      	str	r1, [r7, #16]
 8003750:	ed87 0a03 	vstr	s0, [r7, #12]
 8003754:	466b      	mov	r3, sp
 8003756:	60bb      	str	r3, [r7, #8]
    uint32_t target_frequencies[] = {25000, 30000, 35000, 40000};
 8003758:	4b6d      	ldr	r3, [pc, #436]	; (8003910 <get_frequency+0x1cc>)
 800375a:	f107 061c 	add.w	r6, r7, #28
 800375e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003760:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    float32_t temp_buff[size];
 8003764:	6939      	ldr	r1, [r7, #16]
 8003766:	460b      	mov	r3, r1
 8003768:	3b01      	subs	r3, #1
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376c:	2300      	movs	r3, #0
 800376e:	6039      	str	r1, [r7, #0]
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	0143      	lsls	r3, r0, #5
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	0142      	lsls	r2, r0, #5
 8003788:	2300      	movs	r3, #0
 800378a:	468a      	mov	sl, r1
 800378c:	469b      	mov	fp, r3
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800379a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800379e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80037a2:	008b      	lsls	r3, r1, #2
 80037a4:	3307      	adds	r3, #7
 80037a6:	08db      	lsrs	r3, r3, #3
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	ebad 0d03 	sub.w	sp, sp, r3
 80037ae:	466b      	mov	r3, sp
 80037b0:	3303      	adds	r3, #3
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38

    for (int i = 0; i < size; i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40
 80037bc:	e00c      	b.n	80037d8 <get_frequency+0x94>
    {
        temp_buff[i] = buff[i];
 80037be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4413      	add	r3, r2
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 80037d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d4:	3301      	adds	r3, #1
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
 80037d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d8ee      	bhi.n	80037be <get_frequency+0x7a>
    }

    arm_cfft_f32(&instance, temp_buff, 0, 0);
 80037e0:	2300      	movs	r3, #0
 80037e2:	2200      	movs	r2, #0
 80037e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037e6:	484b      	ldr	r0, [pc, #300]	; (8003914 <get_frequency+0x1d0>)
 80037e8:	f005 ff56 	bl	8009698 <arm_cfft_f32>

    float32_t freq[size / 2];
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	0859      	lsrs	r1, r3, #1
 80037f0:	466b      	mov	r3, sp
 80037f2:	461e      	mov	r6, r3
 80037f4:	460b      	mov	r3, r1
 80037f6:	3b01      	subs	r3, #1
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
 80037fa:	2300      	movs	r3, #0
 80037fc:	4688      	mov	r8, r1
 80037fe:	4699      	mov	r9, r3
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800380c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003810:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003814:	2300      	movs	r3, #0
 8003816:	460c      	mov	r4, r1
 8003818:	461d      	mov	r5, r3
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	016b      	lsls	r3, r5, #5
 8003824:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003828:	0162      	lsls	r2, r4, #5
 800382a:	008b      	lsls	r3, r1, #2
 800382c:	3307      	adds	r3, #7
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	ebad 0d03 	sub.w	sp, sp, r3
 8003836:	466b      	mov	r3, sp
 8003838:	3303      	adds	r3, #3
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	633b      	str	r3, [r7, #48]	; 0x30
    arm_cmplx_mag_f32(temp_buff, freq, size / 2);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	461a      	mov	r2, r3
 8003846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800384a:	f005 ffbd 	bl	80097c8 <arm_cmplx_mag_f32>

    uint32_t max = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t frequency = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t target_bin = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (int i = 0; i < 4; i++) {
 800385a:	2300      	movs	r3, #0
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385e:	e04b      	b.n	80038f8 <get_frequency+0x1b4>
        target_bin = (uint32_t) round(target_frequencies[i] * size / fs);
 8003860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	f107 0208 	add.w	r2, r7, #8
 800386a:	4413      	add	r3, r2
 800386c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800387e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003882:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003886:	ee16 0a90 	vmov	r0, s13
 800388a:	f7fc fe5d 	bl	8000548 <__aeabi_f2d>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	ec43 2b10 	vmov	d0, r2, r3
 8003896:	f006 fb91 	bl	8009fbc <round>
 800389a:	ec53 2b10 	vmov	r2, r3, d0
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	f7fd f981 	bl	8000ba8 <__aeabi_d2uiz>
 80038a6:	4603      	mov	r3, r0
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (freq[target_bin] > max) {
 80038aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	ed93 7a00 	vldr	s14, [r3]
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	dd13      	ble.n	80038f2 <get_frequency+0x1ae>
        	frequency = target_frequencies[i];
 80038ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	3348      	adds	r3, #72	; 0x48
 80038d0:	f107 0208 	add.w	r2, r7, #8
 80038d4:	4413      	add	r3, r2
 80038d6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
        	max = freq[target_bin];
 80038dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ec:	ee17 3a90 	vmov	r3, s15
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
    for (int i = 0; i < 4; i++) {
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	3301      	adds	r3, #1
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	ddb0      	ble.n	8003860 <get_frequency+0x11c>
        }
    }

    return frequency;
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003900:	46b5      	mov	sp, r6
 8003902:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3754      	adds	r7, #84	; 0x54
 800390a:	46bd      	mov	sp, r7
 800390c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003910:	0800d574 	.word	0x0800d574
 8003914:	0800d660 	.word	0x0800d660

08003918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_MspInit+0x44>)
 8003920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003922:	4a0e      	ldr	r2, [pc, #56]	; (800395c <HAL_MspInit+0x44>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6613      	str	r3, [r2, #96]	; 0x60
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_MspInit+0x44>)
 800392c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_MspInit+0x44>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4a08      	ldr	r2, [pc, #32]	; (800395c <HAL_MspInit+0x44>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_MspInit+0x44>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0a2      	sub	sp, #136	; 0x88
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	2260      	movs	r2, #96	; 0x60
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f006 ff99 	bl	800a8b8 <memset>
  if(hadc->Instance==ADC1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a47      	ldr	r2, [pc, #284]	; (8003aa8 <HAL_ADC_MspInit+0x148>)
 800398c:	4293      	cmp	r3, r2
 800398e:	f040 8087 	bne.w	8003aa0 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003996:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800399c:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800399e:	2302      	movs	r3, #2
 80039a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80039a6:	2308      	movs	r3, #8
 80039a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80039aa:	2307      	movs	r3, #7
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80039ae:	2302      	movs	r3, #2
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80039b2:	2302      	movs	r3, #2
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80039b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ba:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 f8eb 	bl	8006b9c <HAL_RCCEx_PeriphCLKConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80039cc:	f7ff f99e 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	4a35      	ldr	r2, [pc, #212]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 80039d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039dc:	4b33      	ldr	r3, [pc, #204]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e8:	4b30      	ldr	r3, [pc, #192]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 80039ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ec:	4a2f      	ldr	r2, [pc, #188]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f4:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_ADC_MspInit+0x14c>)
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003a18:	2350      	movs	r3, #80	; 0x50
 8003a1a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a1c:	230b      	movs	r3, #11
 8003a1e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a2e:	f002 f887 	bl	8005b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a32:	2302      	movs	r3, #2
 8003a34:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a36:	230b      	movs	r3, #11
 8003a38:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a42:	4619      	mov	r1, r3
 8003a44:	481a      	ldr	r0, [pc, #104]	; (8003ab0 <HAL_ADC_MspInit+0x150>)
 8003a46:	f002 f87b 	bl	8005b40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_ADC_MspInit+0x158>)
 8003a4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003a50:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a5c:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a68:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a76:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a84:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a86:	f001 fde5 	bl	8005654 <HAL_DMA_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003a90:	f7ff f93c 	bl	8002d0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a98:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a9a:	4a06      	ldr	r2, [pc, #24]	; (8003ab4 <HAL_ADC_MspInit+0x154>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003aa0:	bf00      	nop
 8003aa2:	3788      	adds	r7, #136	; 0x88
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	50040000 	.word	0x50040000
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	48000400 	.word	0x48000400
 8003ab4:	20000264 	.word	0x20000264
 8003ab8:	40020008 	.word	0x40020008

08003abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	d113      	bne.n	8003af6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_TIM_Base_MspInit+0x44>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <HAL_TIM_Base_MspInit+0x44>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_TIM_Base_MspInit+0x44>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2100      	movs	r1, #0
 8003aea:	201c      	movs	r0, #28
 8003aec:	f001 fd7b 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003af0:	201c      	movs	r0, #28
 8003af2:	f001 fd94 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000

08003b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b0a2      	sub	sp, #136	; 0x88
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	2260      	movs	r2, #96	; 0x60
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f006 fec7 	bl	800a8b8 <memset>
  if(huart->Instance==USART2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a4d      	ldr	r2, [pc, #308]	; (8003c64 <HAL_UART_MspInit+0x160>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	f040 8093 	bne.w	8003c5c <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b36:	2302      	movs	r3, #2
 8003b38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 f82a 	bl	8006b9c <HAL_RCCEx_PeriphCLKConfig>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003b4e:	f7ff f8dd 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b52:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <HAL_UART_MspInit+0x164>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	4a44      	ldr	r2, [pc, #272]	; (8003c68 <HAL_UART_MspInit+0x164>)
 8003b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b5e:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <HAL_UART_MspInit+0x164>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <HAL_UART_MspInit+0x164>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4a3e      	ldr	r2, [pc, #248]	; (8003c68 <HAL_UART_MspInit+0x164>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <HAL_UART_MspInit+0x164>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b82:	230c      	movs	r3, #12
 8003b84:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b94:	2307      	movs	r3, #7
 8003b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba4:	f001 ffcc 	bl	8005b40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003ba8:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003baa:	4a31      	ldr	r2, [pc, #196]	; (8003c70 <HAL_UART_MspInit+0x16c>)
 8003bac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003bae:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003bde:	4823      	ldr	r0, [pc, #140]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003be0:	f001 fd38 	bl	8005654 <HAL_DMA_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8003bea:	f7ff f88f 	bl	8002d0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bf2:	675a      	str	r2, [r3, #116]	; 0x74
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_UART_MspInit+0x168>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003bfc:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_UART_MspInit+0x174>)
 8003bfe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003c00:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c02:	2202      	movs	r2, #2
 8003c04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c08:	2210      	movs	r2, #16
 8003c0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003c30:	4810      	ldr	r0, [pc, #64]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c32:	f001 fd0f 	bl	8005654 <HAL_DMA_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8003c3c:	f7ff f866 	bl	8002d0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c44:	671a      	str	r2, [r3, #112]	; 0x70
 8003c46:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <HAL_UART_MspInit+0x170>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2026      	movs	r0, #38	; 0x26
 8003c52:	f001 fcc8 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c56:	2026      	movs	r0, #38	; 0x26
 8003c58:	f001 fce1 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c5c:	bf00      	nop
 8003c5e:	3788      	adds	r7, #136	; 0x88
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40004400 	.word	0x40004400
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	20000380 	.word	0x20000380
 8003c70:	4002006c 	.word	0x4002006c
 8003c74:	200003c8 	.word	0x200003c8
 8003c78:	40020080 	.word	0x40020080

08003c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c80:	e7fe      	b.n	8003c80 <NMI_Handler+0x4>

08003c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c86:	e7fe      	b.n	8003c86 <HardFault_Handler+0x4>

08003c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <MemManage_Handler+0x4>

08003c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c92:	e7fe      	b.n	8003c92 <BusFault_Handler+0x4>

08003c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <UsageFault_Handler+0x4>

08003c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cc8:	f000 f9be 	bl	8004048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003cd4:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <DMA1_Channel1_IRQHandler+0x10>)
 8003cd6:	f001 fe54 	bl	8005982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000264 	.word	0x20000264

08003ce4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <DMA1_Channel6_IRQHandler+0x10>)
 8003cea:	f001 fe4a 	bl	8005982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000380 	.word	0x20000380

08003cf8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003cfc:	4802      	ldr	r0, [pc, #8]	; (8003d08 <DMA1_Channel7_IRQHandler+0x10>)
 8003cfe:	f001 fe40 	bl	8005982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200003c8 	.word	0x200003c8

08003d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d10:	4802      	ldr	r0, [pc, #8]	; (8003d1c <TIM2_IRQHandler+0x10>)
 8003d12:	f003 fb2b 	bl	800736c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200002ac 	.word	0x200002ac

08003d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d24:	4802      	ldr	r0, [pc, #8]	; (8003d30 <USART2_IRQHandler+0x10>)
 8003d26:	f003 ffad 	bl	8007c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200002f8 	.word	0x200002f8

08003d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return 1;
 8003d38:	2301      	movs	r3, #1
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_kill>:

int _kill(int pid, int sig)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d4e:	f006 fd73 	bl	800a838 <__errno>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2216      	movs	r2, #22
 8003d56:	601a      	str	r2, [r3, #0]
  return -1;
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_exit>:

void _exit (int status)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ffe7 	bl	8003d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d76:	e7fe      	b.n	8003d76 <_exit+0x12>

08003d78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e00a      	b.n	8003da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d8a:	f3af 8000 	nop.w
 8003d8e:	4601      	mov	r1, r0
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	60ba      	str	r2, [r7, #8]
 8003d96:	b2ca      	uxtb	r2, r1
 8003d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	dbf0      	blt.n	8003d8a <_read+0x12>
  }

  return len;
 8003da8:	687b      	ldr	r3, [r7, #4]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e009      	b.n	8003dd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	60ba      	str	r2, [r7, #8]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	dbf1      	blt.n	8003dc4 <_write+0x12>
  }
  return len;
 8003de0:	687b      	ldr	r3, [r7, #4]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_close>:

int _close(int file)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e12:	605a      	str	r2, [r3, #4]
  return 0;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_isatty>:

int _isatty(int file)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e2a:	2301      	movs	r3, #1
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <_sbrk+0x5c>)
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <_sbrk+0x60>)
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <_sbrk+0x64>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <_sbrk+0x64>)
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <_sbrk+0x68>)
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <_sbrk+0x64>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d207      	bcs.n	8003e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e84:	f006 fcd8 	bl	800a838 <__errno>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	220c      	movs	r2, #12
 8003e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e92:	e009      	b.n	8003ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <_sbrk+0x64>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e9a:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <_sbrk+0x64>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <_sbrk+0x64>)
 8003ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20010000 	.word	0x20010000
 8003eb4:	00000400 	.word	0x00000400
 8003eb8:	20000dc8 	.word	0x20000dc8
 8003ebc:	20000de0 	.word	0x20000de0

08003ec0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <SystemInit+0x20>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	4a05      	ldr	r2, [pc, #20]	; (8003ee0 <SystemInit+0x20>)
 8003ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0a5a      	lsrs	r2, r3, #9
 8003ef4:	490f      	ldr	r1, [pc, #60]	; (8003f34 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003ef6:	fba1 1202 	umull	r1, r2, r1, r2
 8003efa:	09d2      	lsrs	r2, r2, #7
 8003efc:	490e      	ldr	r1, [pc, #56]	; (8003f38 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003efe:	fb01 f202 	mul.w	r2, r1, r2
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	0a5b      	lsrs	r3, r3, #9
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	09db      	lsrs	r3, r3, #7
 8003f14:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	00044b83 	.word	0x00044b83
 8003f38:	3b9aca00 	.word	0x3b9aca00

08003f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f40:	f7ff ffbe 	bl	8003ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f44:	480c      	ldr	r0, [pc, #48]	; (8003f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f46:	490d      	ldr	r1, [pc, #52]	; (8003f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <LoopForever+0xe>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f4c:	e002      	b.n	8003f54 <LoopCopyDataInit>

08003f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f52:	3304      	adds	r3, #4

08003f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f58:	d3f9      	bcc.n	8003f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f5c:	4c0a      	ldr	r4, [pc, #40]	; (8003f88 <LoopForever+0x16>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f60:	e001      	b.n	8003f66 <LoopFillZerobss>

08003f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f64:	3204      	adds	r2, #4

08003f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f68:	d3fb      	bcc.n	8003f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f006 fc6b 	bl	800a844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f6e:	f7fe f94b 	bl	8002208 <main>

08003f72 <LoopForever>:

LoopForever:
    b LoopForever
 8003f72:	e7fe      	b.n	8003f72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003f80:	0800ee40 	.word	0x0800ee40
  ldr r2, =_sbss
 8003f84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003f88:	20000de0 	.word	0x20000de0

08003f8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC1_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <HAL_Init+0x3c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <HAL_Init+0x3c>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa6:	2003      	movs	r0, #3
 8003fa8:	f001 fb12 	bl	80055d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fac:	2000      	movs	r0, #0
 8003fae:	f000 f80f 	bl	8003fd0 <HAL_InitTick>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	e001      	b.n	8003fc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fbe:	f7ff fcab 	bl	8003918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40022000 	.word	0x40022000

08003fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_InitTick+0x6c>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fe4:	4b16      	ldr	r3, [pc, #88]	; (8004040 <HAL_InitTick+0x70>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_InitTick+0x6c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
 8003fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 fb1d 	bl	800563a <HAL_SYSTICK_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b0f      	cmp	r3, #15
 800400a:	d809      	bhi.n	8004020 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800400c:	2200      	movs	r2, #0
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	f001 fae7 	bl	80055e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004018:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <HAL_InitTick+0x74>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e007      	b.n	8004030 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e004      	b.n	8004030 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e001      	b.n	8004030 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000008 	.word	0x20000008
 8004040:	20000000 	.word	0x20000000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_IncTick+0x20>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_IncTick+0x24>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4413      	add	r3, r2
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <HAL_IncTick+0x24>)
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000008 	.word	0x20000008
 800406c:	20000dcc 	.word	0x20000dcc

08004070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return uwTick;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_GetTick+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000dcc 	.word	0x20000dcc

08004088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7ff ffee 	bl	8004070 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d005      	beq.n	80040ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <HAL_Delay+0x44>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040ae:	bf00      	nop
 80040b0:	f7ff ffde 	bl	8004070 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d8f7      	bhi.n	80040b0 <HAL_Delay+0x28>
  {
  }
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000008 	.word	0x20000008

080040d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3360      	adds	r3, #96	; 0x60
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <LL_ADC_SetOffset+0x44>)
 800415a:	4013      	ands	r3, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	4313      	orrs	r3, r2
 8004168:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	03fff000 	.word	0x03fff000

08004180 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3360      	adds	r3, #96	; 0x60
 800418e:	461a      	mov	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3360      	adds	r3, #96	; 0x60
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3330      	adds	r3, #48	; 0x30
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	4413      	add	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	211f      	movs	r1, #31
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	401a      	ands	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0e9b      	lsrs	r3, r3, #26
 8004240:	f003 011f 	and.w	r1, r3, #31
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	431a      	orrs	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3314      	adds	r3, #20
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	0e5b      	lsrs	r3, r3, #25
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	0d1b      	lsrs	r3, r3, #20
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2107      	movs	r1, #7
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	401a      	ands	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0d1b      	lsrs	r3, r3, #20
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d0:	43db      	mvns	r3, r3
 80042d2:	401a      	ands	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f003 0318 	and.w	r3, r3, #24
 80042da:	4908      	ldr	r1, [pc, #32]	; (80042fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80042dc:	40d9      	lsrs	r1, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	400b      	ands	r3, r1
 80042e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	0007ffff 	.word	0x0007ffff

08004300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6093      	str	r3, [r2, #8]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004338:	d101      	bne.n	800433e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800435c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004388:	d101      	bne.n	800438e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043d8:	f043 0202 	orr.w	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <LL_ADC_IsEnabled+0x18>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <LL_ADC_IsEnabled+0x1a>
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d101      	bne.n	800442a <LL_ADC_IsDisableOngoing+0x18>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <LL_ADC_IsDisableOngoing+0x1a>
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d101      	bne.n	8004478 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b08      	cmp	r3, #8
 8004498:	d101      	bne.n	800449e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e126      	b.n	8004714 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fa43 	bl	8003960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff19 	bl	8004324 <LL_ADC_IsDeepPowerDownEnabled>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff feff 	bl	8004300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff34 	bl	8004374 <LL_ADC_IsInternalRegulatorEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d115      	bne.n	800453e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff ff18 	bl	800434c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800451c:	4b7f      	ldr	r3, [pc, #508]	; (800471c <HAL_ADC_Init+0x270>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	4a7f      	ldr	r2, [pc, #508]	; (8004720 <HAL_ADC_Init+0x274>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	3301      	adds	r3, #1
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004530:	e002      	b.n	8004538 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b01      	subs	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f9      	bne.n	8004532 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff ff16 	bl	8004374 <LL_ADC_IsInternalRegulatorEnabled>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f043 0210 	orr.w	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f043 0201 	orr.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ff76 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 8004574:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 80bf 	bne.w	8004702 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 80bb 	bne.w	8004702 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004594:	f043 0202 	orr.w	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff23 	bl	80043ec <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045ac:	485d      	ldr	r0, [pc, #372]	; (8004724 <HAL_ADC_Init+0x278>)
 80045ae:	f7ff ff1d 	bl	80043ec <LL_ADC_IsEnabled>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4619      	mov	r1, r3
 80045be:	485a      	ldr	r0, [pc, #360]	; (8004728 <HAL_ADC_Init+0x27c>)
 80045c0:	f7ff fd86 	bl	80040d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	7e5b      	ldrb	r3, [r3, #25]
 80045c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80045d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80045da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d106      	bne.n	8004600 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	3b01      	subs	r3, #1
 80045f8:	045b      	lsls	r3, r3, #17
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	4b42      	ldr	r3, [pc, #264]	; (800472c <HAL_ADC_Init+0x280>)
 8004624:	4013      	ands	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	430b      	orrs	r3, r1
 800462e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff26 	bl	8004486 <LL_ADC_INJ_IsConversionOngoing>
 800463a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13d      	bne.n	80046be <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d13a      	bne.n	80046be <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800464c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004654:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004656:	4313      	orrs	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	430b      	orrs	r3, r1
 8004670:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004678:	2b01      	cmp	r3, #1
 800467a:	d118      	bne.n	80046ae <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004686:	f023 0304 	bic.w	r3, r3, #4
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800469e:	430a      	orrs	r2, r1
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	611a      	str	r2, [r3, #16]
 80046ac:	e007      	b.n	80046be <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d10c      	bne.n	80046e0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	f023 010f 	bic.w	r1, r3, #15
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	1e5a      	subs	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
 80046de:	e007      	b.n	80046f0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 020f 	bic.w	r2, r2, #15
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f023 0303 	bic.w	r3, r3, #3
 80046f8:	f043 0201 	orr.w	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
 8004700:	e007      	b.n	8004712 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f043 0210 	orr.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004712:	7ffb      	ldrb	r3, [r7, #31]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000000 	.word	0x20000000
 8004720:	053e2d63 	.word	0x053e2d63
 8004724:	50040000 	.word	0x50040000
 8004728:	50040300 	.word	0x50040300
 800472c:	fff0c007 	.word	0xfff0c007

08004730 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fe8d 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d167      	bne.n	800481c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_ADC_Start_DMA+0x2a>
 8004756:	2302      	movs	r3, #2
 8004758:	e063      	b.n	8004822 <HAL_ADC_Start_DMA+0xf2>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fc5e 	bl	8005024 <ADC_Enable>
 8004768:	4603      	mov	r3, r0
 800476a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d14f      	bne.n	8004812 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	f023 0206 	bic.w	r2, r3, #6
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	659a      	str	r2, [r3, #88]	; 0x58
 800479e:	e002      	b.n	80047a6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_ADC_Start_DMA+0xfc>)
 80047ac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_ADC_Start_DMA+0x100>)
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_ADC_Start_DMA+0x104>)
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	221c      	movs	r2, #28
 80047c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0210 	orr.w	r2, r2, #16
 80047dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3340      	adds	r3, #64	; 0x40
 80047f8:	4619      	mov	r1, r3
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f000 ffe1 	bl	80057c4 <HAL_DMA_Start_IT>
 8004802:	4603      	mov	r3, r0
 8004804:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fe14 	bl	8004438 <LL_ADC_REG_StartConversion>
 8004810:	e006      	b.n	8004820 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800481a:	e001      	b.n	8004820 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004820:	7dfb      	ldrb	r3, [r7, #23]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	080051ef 	.word	0x080051ef
 8004830:	080052c7 	.word	0x080052c7
 8004834:	080052e3 	.word	0x080052e3

08004838 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b0b6      	sub	sp, #216	; 0xd8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x22>
 800487e:	2302      	movs	r3, #2
 8004880:	e3bb      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x79a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fde6 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 83a0 	bne.w	8004fdc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	d824      	bhi.n	80048f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	3b02      	subs	r3, #2
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d81b      	bhi.n	80048ee <HAL_ADC_ConfigChannel+0x8e>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <HAL_ADC_ConfigChannel+0x5c>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048d5 	.word	0x080048d5
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	080048e5 	.word	0x080048e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80048cc:	230c      	movs	r3, #12
 80048ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048d2:	e011      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x98>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80048d4:	2312      	movs	r3, #18
 80048d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048da:	e00d      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x98>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80048dc:	2318      	movs	r3, #24
 80048de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048e2:	e009      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x98>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80048e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048ec:	e004      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x98>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80048ee:	2306      	movs	r3, #6
 80048f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80048f4:	e000      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x98>
      }
    }
 80048f6:	bf00      	nop
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004906:	f7ff fc7f 	bl	8004208 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fda6 	bl	8004460 <LL_ADC_REG_IsConversionOngoing>
 8004914:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fdb2 	bl	8004486 <LL_ADC_INJ_IsConversionOngoing>
 8004922:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004926:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 81a4 	bne.w	8004c78 <HAL_ADC_ConfigChannel+0x418>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004934:	2b00      	cmp	r3, #0
 8004936:	f040 819f 	bne.w	8004c78 <HAL_ADC_ConfigChannel+0x418>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	461a      	mov	r2, r3
 8004948:	f7ff fc8a 	bl	8004260 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	08db      	lsrs	r3, r3, #3
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d00a      	beq.n	8004984 <HAL_ADC_ConfigChannel+0x124>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6919      	ldr	r1, [r3, #16]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800497e:	f7ff fbdb 	bl	8004138 <LL_ADC_SetOffset>
 8004982:	e179      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x418>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fbf8 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004990:	4603      	mov	r3, r0
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x150>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fbed 	bl	8004180 <LL_ADC_GetOffsetChannel>
 80049a6:	4603      	mov	r3, r0
 80049a8:	0e9b      	lsrs	r3, r3, #26
 80049aa:	f003 021f 	and.w	r2, r3, #31
 80049ae:	e01e      	b.n	80049ee <HAL_ADC_ConfigChannel+0x18e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fbe2 	bl	8004180 <LL_ADC_GetOffsetChannel>
 80049bc:	4603      	mov	r3, r0
 80049be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x182>
  {
    return 32U;
 80049de:	2320      	movs	r3, #32
 80049e0:	e004      	b.n	80049ec <HAL_ADC_ConfigChannel+0x18c>
  }
  return __builtin_clz(value);
 80049e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x1a6>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	e018      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x1d8>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004a22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x1ce>
    return 32U;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	e004      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x1d8>
  return __builtin_clz(value);
 8004a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d106      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x1ea>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fbb1 	bl	80041ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fb95 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x216>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fb8a 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	0e9b      	lsrs	r3, r3, #26
 8004a70:	f003 021f 	and.w	r2, r3, #31
 8004a74:	e01e      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x254>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fb7f 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x248>
    return 32U;
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	e004      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x252>
  return __builtin_clz(value);
 8004aa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x26c>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	0e9b      	lsrs	r3, r3, #26
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	e018      	b.n	8004afe <HAL_ADC_ConfigChannel+0x29e>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x294>
    return 32U;
 8004af0:	2320      	movs	r3, #32
 8004af2:	e004      	b.n	8004afe <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 8004af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004af8:	fab3 f383 	clz	r3, r3
 8004afc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d106      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x2b0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fb4e 	bl	80041ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2102      	movs	r1, #2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fb32 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x2dc>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fb27 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004b32:	4603      	mov	r3, r0
 8004b34:	0e9b      	lsrs	r3, r3, #26
 8004b36:	f003 021f 	and.w	r2, r3, #31
 8004b3a:	e01e      	b.n	8004b7a <HAL_ADC_ConfigChannel+0x31a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fb1c 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b52:	fa93 f3a3 	rbit	r3, r3
 8004b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x30e>
    return 32U;
 8004b6a:	2320      	movs	r3, #32
 8004b6c:	e004      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d105      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x332>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	0e9b      	lsrs	r3, r3, #26
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	e014      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x35c>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x352>
    return 32U;
 8004bae:	2320      	movs	r3, #32
 8004bb0:	e004      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d106      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x36e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff faef 	bl	80041ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fad3 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x39a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2103      	movs	r1, #3
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fac8 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	0e9b      	lsrs	r3, r3, #26
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	e017      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x3ca>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2103      	movs	r1, #3
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fabd 	bl	8004180 <LL_ADC_GetOffsetChannel>
 8004c06:	4603      	mov	r3, r0
 8004c08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c0c:	fa93 f3a3 	rbit	r3, r3
 8004c10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c14:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x3c0>
    return 32U;
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	e003      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8004c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d105      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x3e2>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	0e9b      	lsrs	r3, r3, #26
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	e011      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x406>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c52:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x3fe>
    return 32U;
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	e003      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x406>
  return __builtin_clz(value);
 8004c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d106      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x418>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2103      	movs	r1, #3
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fa9a 	bl	80041ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fbb5 	bl	80043ec <LL_ADC_IsEnabled>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 813f 	bne.w	8004f08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7ff fb0e 	bl	80042b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a8e      	ldr	r2, [pc, #568]	; (8004edc <HAL_ADC_ConfigChannel+0x67c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f040 8130 	bne.w	8004f08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x470>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2b09      	cmp	r3, #9
 8004cc6:	bf94      	ite	ls
 8004cc8:	2301      	movls	r3, #1
 8004cca:	2300      	movhi	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e019      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x4a4>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x48c>
    return 32U;
 8004ce8:	2320      	movs	r3, #32
 8004cea:	e003      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x494>
  return __builtin_clz(value);
 8004cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2b09      	cmp	r3, #9
 8004cfc:	bf94      	ite	ls
 8004cfe:	2301      	movls	r3, #1
 8004d00:	2300      	movhi	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d079      	beq.n	8004dfc <HAL_ADC_ConfigChannel+0x59c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x4c4>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0e9b      	lsrs	r3, r3, #26
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	069b      	lsls	r3, r3, #26
 8004d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d22:	e015      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x4f0>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x4e0>
    return 32U;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	e003      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x4e8>
  return __builtin_clz(value);
 8004d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	069b      	lsls	r3, r3, #26
 8004d4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x510>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0e9b      	lsrs	r3, r3, #26
 8004d62:	3301      	adds	r3, #1
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	e017      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x540>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e003      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x566>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0e9b      	lsrs	r3, r3, #26
 8004db6:	3301      	adds	r3, #1
 8004db8:	f003 021f 	and.w	r2, r3, #31
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	051b      	lsls	r3, r3, #20
 8004dc4:	e018      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x598>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x582>
    return 32U;
 8004dde:	2320      	movs	r3, #32
 8004de0:	e003      	b.n	8004dea <HAL_ADC_ConfigChannel+0x58a>
  return __builtin_clz(value);
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	3301      	adds	r3, #1
 8004dec:	f003 021f 	and.w	r2, r3, #31
 8004df0:	4613      	mov	r3, r2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	e080      	b.n	8004efe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d107      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x5b8>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	0e9b      	lsrs	r3, r3, #26
 8004e0e:	3301      	adds	r3, #1
 8004e10:	069b      	lsls	r3, r3, #26
 8004e12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e16:	e015      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x5e4>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x5d4>
    return 32U;
 8004e30:	2320      	movs	r3, #32
 8004e32:	e003      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x5dc>
  return __builtin_clz(value);
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	069b      	lsls	r3, r3, #26
 8004e40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x604>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e9b      	lsrs	r3, r3, #26
 8004e56:	3301      	adds	r3, #1
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	e017      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x634>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	61bb      	str	r3, [r7, #24]
  return result;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x620>
    return 32U;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	e003      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x628>
  return __builtin_clz(value);
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2101      	movs	r1, #1
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	ea42 0103 	orr.w	r1, r2, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x660>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0e9b      	lsrs	r3, r3, #26
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b1e      	subs	r3, #30
 8004eb8:	051b      	lsls	r3, r3, #20
 8004eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	e01d      	b.n	8004efc <HAL_ADC_ConfigChannel+0x69c>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	60fb      	str	r3, [r7, #12]
  return result;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	e005      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x688>
 8004edc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	fab3 f383 	clz	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f003 021f 	and.w	r2, r3, #31
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3b1e      	subs	r3, #30
 8004ef6:	051b      	lsls	r3, r3, #20
 8004ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004efc:	430b      	orrs	r3, r1
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	6892      	ldr	r2, [r2, #8]
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7ff f9ac 	bl	8004260 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <HAL_ADC_ConfigChannel+0x7a4>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d06c      	beq.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f14:	483c      	ldr	r0, [pc, #240]	; (8005008 <HAL_ADC_ConfigChannel+0x7a8>)
 8004f16:	f7ff f901 	bl	800411c <LL_ADC_GetCommonPathInternalCh>
 8004f1a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a3a      	ldr	r2, [pc, #232]	; (800500c <HAL_ADC_ConfigChannel+0x7ac>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d127      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d121      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a35      	ldr	r2, [pc, #212]	; (8005010 <HAL_ADC_ConfigChannel+0x7b0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d157      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f46:	4619      	mov	r1, r3
 8004f48:	482f      	ldr	r0, [pc, #188]	; (8005008 <HAL_ADC_ConfigChannel+0x7a8>)
 8004f4a:	f7ff f8d4 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <HAL_ADC_ConfigChannel+0x7b4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	4a30      	ldr	r2, [pc, #192]	; (8005018 <HAL_ADC_ConfigChannel+0x7b8>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	4613      	mov	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004f68:	e002      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f9      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f76:	e03a      	b.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <HAL_ADC_ConfigChannel+0x7bc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d113      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10d      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <HAL_ADC_ConfigChannel+0x7b0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d12a      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4819      	ldr	r0, [pc, #100]	; (8005008 <HAL_ADC_ConfigChannel+0x7a8>)
 8004fa4:	f7ff f8a7 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fa8:	e021      	b.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_ADC_ConfigChannel+0x7c0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d11c      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a12      	ldr	r2, [pc, #72]	; (8005010 <HAL_ADC_ConfigChannel+0x7b0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	480c      	ldr	r0, [pc, #48]	; (8005008 <HAL_ADC_ConfigChannel+0x7a8>)
 8004fd6:	f7ff f88e 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
 8004fda:	e008      	b.n	8004fee <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f043 0220 	orr.w	r2, r3, #32
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ff6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	37d8      	adds	r7, #216	; 0xd8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	80080000 	.word	0x80080000
 8005008:	50040300 	.word	0x50040300
 800500c:	c7520000 	.word	0xc7520000
 8005010:	50040000 	.word	0x50040000
 8005014:	20000000 	.word	0x20000000
 8005018:	053e2d63 	.word	0x053e2d63
 800501c:	cb840000 	.word	0xcb840000
 8005020:	80000001 	.word	0x80000001

08005024 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff f9d9 	bl	80043ec <LL_ADC_IsEnabled>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d169      	bne.n	8005114 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	4b36      	ldr	r3, [pc, #216]	; (8005120 <ADC_Enable+0xfc>)
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00d      	beq.n	800506a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f043 0210 	orr.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	f043 0201 	orr.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e055      	b.n	8005116 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff f994 	bl	800439c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005074:	482b      	ldr	r0, [pc, #172]	; (8005124 <ADC_Enable+0x100>)
 8005076:	f7ff f851 	bl	800411c <LL_ADC_GetCommonPathInternalCh>
 800507a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800507c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005084:	4b28      	ldr	r3, [pc, #160]	; (8005128 <ADC_Enable+0x104>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	4a28      	ldr	r2, [pc, #160]	; (800512c <ADC_Enable+0x108>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	099b      	lsrs	r3, r3, #6
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	4613      	mov	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800509e:	e002      	b.n	80050a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f9      	bne.n	80050a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050ac:	f7fe ffe0 	bl	8004070 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050b2:	e028      	b.n	8005106 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff f997 	bl	80043ec <LL_ADC_IsEnabled>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff f967 	bl	800439c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050ce:	f7fe ffcf 	bl	8004070 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d914      	bls.n	8005106 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d00d      	beq.n	8005106 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	f043 0210 	orr.w	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	f043 0201 	orr.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e007      	b.n	8005116 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	d1cf      	bne.n	80050b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	8000003f 	.word	0x8000003f
 8005124:	50040300 	.word	0x50040300
 8005128:	20000000 	.word	0x20000000
 800512c:	053e2d63 	.word	0x053e2d63

08005130 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff f968 	bl	8004412 <LL_ADC_IsDisableOngoing>
 8005142:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff f94f 	bl	80043ec <LL_ADC_IsEnabled>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d047      	beq.n	80051e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d144      	bne.n	80051e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 030d 	and.w	r3, r3, #13
 8005164:	2b01      	cmp	r3, #1
 8005166:	d10c      	bne.n	8005182 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f929 	bl	80043c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2203      	movs	r2, #3
 8005178:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800517a:	f7fe ff79 	bl	8004070 <HAL_GetTick>
 800517e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005180:	e029      	b.n	80051d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	f043 0210 	orr.w	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e023      	b.n	80051e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800519e:	f7fe ff67 	bl	8004070 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d914      	bls.n	80051d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00d      	beq.n	80051d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	f043 0210 	orr.w	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e007      	b.n	80051e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1dc      	bne.n	800519e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005204:	2b00      	cmp	r3, #0
 8005206:	d14b      	bne.n	80052a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d021      	beq.n	8005266 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ffdb 	bl	80041e2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d032      	beq.n	8005298 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d12b      	bne.n	8005298 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11f      	bne.n	8005298 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f043 0201 	orr.w	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
 8005264:	e018      	b.n	8005298 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d111      	bne.n	8005298 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	f043 0201 	orr.w	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7fd fd27 	bl	8002cec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800529e:	e00e      	b.n	80052be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff facd 	bl	800484c <HAL_ADC_ErrorCallback>
}
 80052b2:	e004      	b.n	80052be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff faaf 	bl	8004838 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f043 0204 	orr.w	r2, r3, #4
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff fa9f 	bl	800484c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <LL_ADC_StartCalibration>:
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005332:	4313      	orrs	r3, r2
 8005334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <LL_ADC_IsCalibrationOnGoing>:
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535c:	d101      	bne.n	8005362 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_ADCEx_Calibration_Start+0x1c>
 8005388:	2302      	movs	r3, #2
 800538a:	e04d      	b.n	8005428 <HAL_ADCEx_Calibration_Start+0xb8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fecb 	bl	8005130 <ADC_Disable>
 800539a:	4603      	mov	r3, r0
 800539c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d136      	bne.n	8005412 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053ac:	f023 0302 	bic.w	r3, r3, #2
 80053b0:	f043 0202 	orr.w	r2, r3, #2
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff ffa9 	bl	8005316 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053c4:	e014      	b.n	80053f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80053d2:	d30d      	bcc.n	80053f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f023 0312 	bic.w	r3, r3, #18
 80053dc:	f043 0210 	orr.w	r2, r3, #16
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e01b      	b.n	8005428 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ffa7 	bl	8005348 <LL_ADC_IsCalibrationOnGoing>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e2      	bne.n	80053c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f023 0303 	bic.w	r3, r3, #3
 8005408:	f043 0201 	orr.w	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
 8005410:	e005      	b.n	800541e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f043 0210 	orr.w	r2, r3, #16
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800545c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005462:	4a04      	ldr	r2, [pc, #16]	; (8005474 <__NVIC_SetPriorityGrouping+0x44>)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	60d3      	str	r3, [r2, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000ed00 	.word	0xe000ed00

08005478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <__NVIC_GetPriorityGrouping+0x18>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 0307 	and.w	r3, r3, #7
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00

08005494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	db0b      	blt.n	80054be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	f003 021f 	and.w	r2, r3, #31
 80054ac:	4907      	ldr	r1, [pc, #28]	; (80054cc <__NVIC_EnableIRQ+0x38>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2001      	movs	r0, #1
 80054b6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	e000e100 	.word	0xe000e100

080054d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	db0a      	blt.n	80054fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	490c      	ldr	r1, [pc, #48]	; (800551c <__NVIC_SetPriority+0x4c>)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	0112      	lsls	r2, r2, #4
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	440b      	add	r3, r1
 80054f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f8:	e00a      	b.n	8005510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	4908      	ldr	r1, [pc, #32]	; (8005520 <__NVIC_SetPriority+0x50>)
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	3b04      	subs	r3, #4
 8005508:	0112      	lsls	r2, r2, #4
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	440b      	add	r3, r1
 800550e:	761a      	strb	r2, [r3, #24]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	e000e100 	.word	0xe000e100
 8005520:	e000ed00 	.word	0xe000ed00

08005524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	; 0x24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f1c3 0307 	rsb	r3, r3, #7
 800553e:	2b04      	cmp	r3, #4
 8005540:	bf28      	it	cs
 8005542:	2304      	movcs	r3, #4
 8005544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	3304      	adds	r3, #4
 800554a:	2b06      	cmp	r3, #6
 800554c:	d902      	bls.n	8005554 <NVIC_EncodePriority+0x30>
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	3b03      	subs	r3, #3
 8005552:	e000      	b.n	8005556 <NVIC_EncodePriority+0x32>
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005558:	f04f 32ff 	mov.w	r2, #4294967295
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43da      	mvns	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	401a      	ands	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800556c:	f04f 31ff 	mov.w	r1, #4294967295
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	43d9      	mvns	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800557c:	4313      	orrs	r3, r2
         );
}
 800557e:	4618      	mov	r0, r3
 8005580:	3724      	adds	r7, #36	; 0x24
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800559c:	d301      	bcc.n	80055a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800559e:	2301      	movs	r3, #1
 80055a0:	e00f      	b.n	80055c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <SysTick_Config+0x40>)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055aa:	210f      	movs	r1, #15
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	f7ff ff8e 	bl	80054d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <SysTick_Config+0x40>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <SysTick_Config+0x40>)
 80055bc:	2207      	movs	r2, #7
 80055be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	e000e010 	.word	0xe000e010

080055d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ff29 	bl	8005430 <__NVIC_SetPriorityGrouping>
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	4603      	mov	r3, r0
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055f8:	f7ff ff3e 	bl	8005478 <__NVIC_GetPriorityGrouping>
 80055fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	6978      	ldr	r0, [r7, #20]
 8005604:	f7ff ff8e 	bl	8005524 <NVIC_EncodePriority>
 8005608:	4602      	mov	r2, r0
 800560a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ff5d 	bl	80054d0 <__NVIC_SetPriority>
}
 8005616:	bf00      	nop
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	4603      	mov	r3, r0
 8005626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff ff31 	bl	8005494 <__NVIC_EnableIRQ>
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ffa2 	bl	800558c <SysTick_Config>
 8005648:	4603      	mov	r3, r0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e098      	b.n	8005798 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <HAL_DMA_Init+0x150>)
 800566e:	429a      	cmp	r2, r3
 8005670:	d80f      	bhi.n	8005692 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	4b4b      	ldr	r3, [pc, #300]	; (80057a8 <HAL_DMA_Init+0x154>)
 800567a:	4413      	add	r3, r2
 800567c:	4a4b      	ldr	r2, [pc, #300]	; (80057ac <HAL_DMA_Init+0x158>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	009a      	lsls	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a48      	ldr	r2, [pc, #288]	; (80057b0 <HAL_DMA_Init+0x15c>)
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
 8005690:	e00e      	b.n	80056b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	4b46      	ldr	r3, [pc, #280]	; (80057b4 <HAL_DMA_Init+0x160>)
 800569a:	4413      	add	r3, r2
 800569c:	4a43      	ldr	r2, [pc, #268]	; (80057ac <HAL_DMA_Init+0x158>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	009a      	lsls	r2, r3, #2
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a42      	ldr	r2, [pc, #264]	; (80057b8 <HAL_DMA_Init+0x164>)
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570a:	d039      	beq.n	8005780 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <HAL_DMA_Init+0x15c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d11a      	bne.n	800574c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005716:	4b29      	ldr	r3, [pc, #164]	; (80057bc <HAL_DMA_Init+0x168>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	f003 031c 	and.w	r3, r3, #28
 8005722:	210f      	movs	r1, #15
 8005724:	fa01 f303 	lsl.w	r3, r1, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	4924      	ldr	r1, [pc, #144]	; (80057bc <HAL_DMA_Init+0x168>)
 800572c:	4013      	ands	r3, r2
 800572e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005730:	4b22      	ldr	r3, [pc, #136]	; (80057bc <HAL_DMA_Init+0x168>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6859      	ldr	r1, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	f003 031c 	and.w	r3, r3, #28
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	491d      	ldr	r1, [pc, #116]	; (80057bc <HAL_DMA_Init+0x168>)
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
 800574a:	e019      	b.n	8005780 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800574c:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <HAL_DMA_Init+0x16c>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005754:	f003 031c 	and.w	r3, r3, #28
 8005758:	210f      	movs	r1, #15
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	43db      	mvns	r3, r3
 8005760:	4917      	ldr	r1, [pc, #92]	; (80057c0 <HAL_DMA_Init+0x16c>)
 8005762:	4013      	ands	r3, r2
 8005764:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005766:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <HAL_DMA_Init+0x16c>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6859      	ldr	r1, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f003 031c 	and.w	r3, r3, #28
 8005776:	fa01 f303 	lsl.w	r3, r1, r3
 800577a:	4911      	ldr	r1, [pc, #68]	; (80057c0 <HAL_DMA_Init+0x16c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	40020407 	.word	0x40020407
 80057a8:	bffdfff8 	.word	0xbffdfff8
 80057ac:	cccccccd 	.word	0xcccccccd
 80057b0:	40020000 	.word	0x40020000
 80057b4:	bffdfbf8 	.word	0xbffdfbf8
 80057b8:	40020400 	.word	0x40020400
 80057bc:	400200a8 	.word	0x400200a8
 80057c0:	400204a8 	.word	0x400204a8

080057c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_DMA_Start_IT+0x20>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e04b      	b.n	800587c <HAL_DMA_Start_IT+0xb8>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d13a      	bne.n	800586e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f95f 	bl	8005ae0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 020e 	orr.w	r2, r2, #14
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e00f      	b.n	800585c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0204 	bic.w	r2, r2, #4
 800584a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 020a 	orr.w	r2, r2, #10
 800585a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	e005      	b.n	800587a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005876:	2302      	movs	r3, #2
 8005878:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800587a:	7dfb      	ldrb	r3, [r7, #23]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d008      	beq.n	80058ae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2204      	movs	r2, #4
 80058a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e022      	b.n	80058f4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 020e 	bic.w	r2, r2, #14
 80058bc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	f003 021c 	and.w	r2, r3, #28
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	2101      	movs	r1, #1
 80058dc:	fa01 f202 	lsl.w	r2, r1, r2
 80058e0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d005      	beq.n	8005924 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2204      	movs	r2, #4
 800591c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
 8005922:	e029      	b.n	8005978 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 020e 	bic.w	r2, r2, #14
 8005932:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005948:	f003 021c 	and.w	r2, r3, #28
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	2101      	movs	r1, #1
 8005952:	fa01 f202 	lsl.w	r2, r1, r2
 8005956:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
    }
  }
  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f003 031c 	and.w	r3, r3, #28
 80059a2:	2204      	movs	r2, #4
 80059a4:	409a      	lsls	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d026      	beq.n	80059fc <HAL_DMA_IRQHandler+0x7a>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d021      	beq.n	80059fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0204 	bic.w	r2, r2, #4
 80059d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	f003 021c 	and.w	r2, r3, #28
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2104      	movs	r1, #4
 80059e4:	fa01 f202 	lsl.w	r2, r1, r2
 80059e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d071      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059fa:	e06c      	b.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a00:	f003 031c 	and.w	r3, r3, #28
 8005a04:	2202      	movs	r2, #2
 8005a06:	409a      	lsls	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02e      	beq.n	8005a6e <HAL_DMA_IRQHandler+0xec>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d029      	beq.n	8005a6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 020a 	bic.w	r2, r2, #10
 8005a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	f003 021c 	and.w	r2, r3, #28
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d038      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a6c:	e033      	b.n	8005ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	f003 031c 	and.w	r3, r3, #28
 8005a76:	2208      	movs	r2, #8
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02a      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x156>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d025      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 020e 	bic.w	r2, r2, #14
 8005a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f003 021c 	and.w	r2, r3, #28
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8005aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
}
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	f003 021c 	and.w	r2, r3, #28
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	2101      	movs	r1, #1
 8005afc:	fa01 f202 	lsl.w	r2, r1, r2
 8005b00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d108      	bne.n	8005b24 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b22:	e007      	b.n	8005b34 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	60da      	str	r2, [r3, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b4e:	e154      	b.n	8005dfa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	2101      	movs	r1, #1
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 8146 	beq.w	8005df4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d005      	beq.n	8005b80 <HAL_GPIO_Init+0x40>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d130      	bne.n	8005be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	43db      	mvns	r3, r3
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4013      	ands	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	091b      	lsrs	r3, r3, #4
 8005bcc:	f003 0201 	and.w	r2, r3, #1
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d017      	beq.n	8005c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4013      	ands	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d123      	bne.n	8005c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	08da      	lsrs	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3208      	adds	r2, #8
 8005c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	220f      	movs	r2, #15
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	08da      	lsrs	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3208      	adds	r2, #8
 8005c6c:	6939      	ldr	r1, [r7, #16]
 8005c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4013      	ands	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f003 0203 	and.w	r2, r3, #3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80a0 	beq.w	8005df4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb4:	4b58      	ldr	r3, [pc, #352]	; (8005e18 <HAL_GPIO_Init+0x2d8>)
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb8:	4a57      	ldr	r2, [pc, #348]	; (8005e18 <HAL_GPIO_Init+0x2d8>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8005cc0:	4b55      	ldr	r3, [pc, #340]	; (8005e18 <HAL_GPIO_Init+0x2d8>)
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ccc:	4a53      	ldr	r2, [pc, #332]	; (8005e1c <HAL_GPIO_Init+0x2dc>)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	220f      	movs	r2, #15
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4013      	ands	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cf6:	d019      	beq.n	8005d2c <HAL_GPIO_Init+0x1ec>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a49      	ldr	r2, [pc, #292]	; (8005e20 <HAL_GPIO_Init+0x2e0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <HAL_GPIO_Init+0x1e8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a48      	ldr	r2, [pc, #288]	; (8005e24 <HAL_GPIO_Init+0x2e4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00d      	beq.n	8005d24 <HAL_GPIO_Init+0x1e4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a47      	ldr	r2, [pc, #284]	; (8005e28 <HAL_GPIO_Init+0x2e8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d007      	beq.n	8005d20 <HAL_GPIO_Init+0x1e0>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a46      	ldr	r2, [pc, #280]	; (8005e2c <HAL_GPIO_Init+0x2ec>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d101      	bne.n	8005d1c <HAL_GPIO_Init+0x1dc>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	e008      	b.n	8005d2e <HAL_GPIO_Init+0x1ee>
 8005d1c:	2307      	movs	r3, #7
 8005d1e:	e006      	b.n	8005d2e <HAL_GPIO_Init+0x1ee>
 8005d20:	2303      	movs	r3, #3
 8005d22:	e004      	b.n	8005d2e <HAL_GPIO_Init+0x1ee>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e002      	b.n	8005d2e <HAL_GPIO_Init+0x1ee>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_GPIO_Init+0x1ee>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	f002 0203 	and.w	r2, r2, #3
 8005d34:	0092      	lsls	r2, r2, #2
 8005d36:	4093      	lsls	r3, r2
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d3e:	4937      	ldr	r1, [pc, #220]	; (8005e1c <HAL_GPIO_Init+0x2dc>)
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	089b      	lsrs	r3, r3, #2
 8005d44:	3302      	adds	r3, #2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d4c:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	43db      	mvns	r3, r3
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d70:	4a2f      	ldr	r2, [pc, #188]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d76:	4b2e      	ldr	r3, [pc, #184]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4013      	ands	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005da0:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4013      	ands	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005dc4:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005dca:	4b19      	ldr	r3, [pc, #100]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005dee:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <HAL_GPIO_Init+0x2f0>)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3301      	adds	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f47f aea3 	bne.w	8005b50 <HAL_GPIO_Init+0x10>
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	48000400 	.word	0x48000400
 8005e24:	48000800 	.word	0x48000800
 8005e28:	48000c00 	.word	0x48000c00
 8005e2c:	48001000 	.word	0x48001000
 8005e30:	40010400 	.word	0x40010400

08005e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	807b      	strh	r3, [r7, #2]
 8005e40:	4613      	mov	r3, r2
 8005e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e44:	787b      	ldrb	r3, [r7, #1]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e4a:	887a      	ldrh	r2, [r7, #2]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e50:	e002      	b.n	8005e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e52:	887a      	ldrh	r2, [r7, #2]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40007000 	.word	0x40007000

08005e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8e:	d130      	bne.n	8005ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e90:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9c:	d038      	beq.n	8005f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ea6:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005eae:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2232      	movs	r2, #50	; 0x32
 8005eb4:	fb02 f303 	mul.w	r3, r2, r3
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	0c9b      	lsrs	r3, r3, #18
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ec4:	e002      	b.n	8005ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ecc:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed8:	d102      	bne.n	8005ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f2      	bne.n	8005ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d110      	bne.n	8005f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e00f      	b.n	8005f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efe:	d007      	beq.n	8005f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f00:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f08:	4a05      	ldr	r2, [pc, #20]	; (8005f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40007000 	.word	0x40007000
 8005f24:	20000000 	.word	0x20000000
 8005f28:	431bde83 	.word	0x431bde83

08005f2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f000 bc02 	b.w	8006744 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f40:	4b96      	ldr	r3, [pc, #600]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f4a:	4b94      	ldr	r3, [pc, #592]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80e4 	beq.w	800612a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_RCC_OscConfig+0x4c>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	f040 808b 	bne.w	8006086 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	f040 8087 	bne.w	8006086 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f78:	4b88      	ldr	r3, [pc, #544]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_OscConfig+0x64>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e3d9      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	4b81      	ldr	r3, [pc, #516]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d004      	beq.n	8005faa <HAL_RCC_OscConfig+0x7e>
 8005fa0:	4b7e      	ldr	r3, [pc, #504]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fa8:	e005      	b.n	8005fb6 <HAL_RCC_OscConfig+0x8a>
 8005faa:	4b7c      	ldr	r3, [pc, #496]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d223      	bcs.n	8006002 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fd8c 	bl	8006adc <RCC_SetFlashLatencyFromMSIRange>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e3ba      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fce:	4b73      	ldr	r3, [pc, #460]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a72      	ldr	r2, [pc, #456]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005fd4:	f043 0308 	orr.w	r3, r3, #8
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4b70      	ldr	r3, [pc, #448]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	496d      	ldr	r1, [pc, #436]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fec:	4b6b      	ldr	r3, [pc, #428]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	4968      	ldr	r1, [pc, #416]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	604b      	str	r3, [r1, #4]
 8006000:	e025      	b.n	800604e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006002:	4b66      	ldr	r3, [pc, #408]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a65      	ldr	r2, [pc, #404]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006008:	f043 0308 	orr.w	r3, r3, #8
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	4b63      	ldr	r3, [pc, #396]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	4960      	ldr	r1, [pc, #384]	; (800619c <HAL_RCC_OscConfig+0x270>)
 800601c:	4313      	orrs	r3, r2
 800601e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	495b      	ldr	r1, [pc, #364]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fd4c 	bl	8006adc <RCC_SetFlashLatencyFromMSIRange>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e37a      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800604e:	f000 fc81 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8006052:	4602      	mov	r2, r0
 8006054:	4b51      	ldr	r3, [pc, #324]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	091b      	lsrs	r3, r3, #4
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	4950      	ldr	r1, [pc, #320]	; (80061a0 <HAL_RCC_OscConfig+0x274>)
 8006060:	5ccb      	ldrb	r3, [r1, r3]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	fa22 f303 	lsr.w	r3, r2, r3
 800606a:	4a4e      	ldr	r2, [pc, #312]	; (80061a4 <HAL_RCC_OscConfig+0x278>)
 800606c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800606e:	4b4e      	ldr	r3, [pc, #312]	; (80061a8 <HAL_RCC_OscConfig+0x27c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f7fd ffac 	bl	8003fd0 <HAL_InitTick>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d052      	beq.n	8006128 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	e35e      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d032      	beq.n	80060f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800608e:	4b43      	ldr	r3, [pc, #268]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a42      	ldr	r2, [pc, #264]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800609a:	f7fd ffe9 	bl	8004070 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060a2:	f7fd ffe5 	bl	8004070 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e347      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060b4:	4b39      	ldr	r3, [pc, #228]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060c0:	4b36      	ldr	r3, [pc, #216]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a35      	ldr	r2, [pc, #212]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060c6:	f043 0308 	orr.w	r3, r3, #8
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4b33      	ldr	r3, [pc, #204]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	4930      	ldr	r1, [pc, #192]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060de:	4b2f      	ldr	r3, [pc, #188]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	492b      	ldr	r1, [pc, #172]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	604b      	str	r3, [r1, #4]
 80060f2:	e01a      	b.n	800612a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060f4:	4b29      	ldr	r3, [pc, #164]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a28      	ldr	r2, [pc, #160]	; (800619c <HAL_RCC_OscConfig+0x270>)
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006100:	f7fd ffb6 	bl	8004070 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006108:	f7fd ffb2 	bl	8004070 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e314      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <HAL_RCC_OscConfig+0x270>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0x1dc>
 8006126:	e000      	b.n	800612a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d073      	beq.n	800621e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d005      	beq.n	8006148 <HAL_RCC_OscConfig+0x21c>
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d10e      	bne.n	8006160 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b03      	cmp	r3, #3
 8006146:	d10b      	bne.n	8006160 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	4b14      	ldr	r3, [pc, #80]	; (800619c <HAL_RCC_OscConfig+0x270>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d063      	beq.n	800621c <HAL_RCC_OscConfig+0x2f0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d15f      	bne.n	800621c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e2f1      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d106      	bne.n	8006178 <HAL_RCC_OscConfig+0x24c>
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <HAL_RCC_OscConfig+0x270>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a0b      	ldr	r2, [pc, #44]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e025      	b.n	80061c4 <HAL_RCC_OscConfig+0x298>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006180:	d114      	bne.n	80061ac <HAL_RCC_OscConfig+0x280>
 8006182:	4b06      	ldr	r3, [pc, #24]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a05      	ldr	r2, [pc, #20]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a02      	ldr	r2, [pc, #8]	; (800619c <HAL_RCC_OscConfig+0x270>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e013      	b.n	80061c4 <HAL_RCC_OscConfig+0x298>
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800d670 	.word	0x0800d670
 80061a4:	20000000 	.word	0x20000000
 80061a8:	20000004 	.word	0x20000004
 80061ac:	4ba0      	ldr	r3, [pc, #640]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a9f      	ldr	r2, [pc, #636]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80061b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	4b9d      	ldr	r3, [pc, #628]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a9c      	ldr	r2, [pc, #624]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80061be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d013      	beq.n	80061f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fd ff50 	bl	8004070 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061d4:	f7fd ff4c 	bl	8004070 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b64      	cmp	r3, #100	; 0x64
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e2ae      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061e6:	4b92      	ldr	r3, [pc, #584]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x2a8>
 80061f2:	e014      	b.n	800621e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd ff3c 	bl	8004070 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061fc:	f7fd ff38 	bl	8004070 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e29a      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800620e:	4b88      	ldr	r3, [pc, #544]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f0      	bne.n	80061fc <HAL_RCC_OscConfig+0x2d0>
 800621a:	e000      	b.n	800621e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d060      	beq.n	80062ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b04      	cmp	r3, #4
 800622e:	d005      	beq.n	800623c <HAL_RCC_OscConfig+0x310>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b0c      	cmp	r3, #12
 8006234:	d119      	bne.n	800626a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d116      	bne.n	800626a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800623c:	4b7c      	ldr	r3, [pc, #496]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_OscConfig+0x328>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e277      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006254:	4b76      	ldr	r3, [pc, #472]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	4973      	ldr	r1, [pc, #460]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006264:	4313      	orrs	r3, r2
 8006266:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006268:	e040      	b.n	80062ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d023      	beq.n	80062ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006272:	4b6f      	ldr	r3, [pc, #444]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a6e      	ldr	r2, [pc, #440]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fd fef7 	bl	8004070 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006286:	f7fd fef3 	bl	8004070 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e255      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006298:	4b65      	ldr	r3, [pc, #404]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a4:	4b62      	ldr	r3, [pc, #392]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	495f      	ldr	r1, [pc, #380]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
 80062b8:	e018      	b.n	80062ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ba:	4b5d      	ldr	r3, [pc, #372]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5c      	ldr	r2, [pc, #368]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80062c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fd fed3 	bl	8004070 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ce:	f7fd fecf 	bl	8004070 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e231      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062e0:	4b53      	ldr	r3, [pc, #332]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f0      	bne.n	80062ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d03c      	beq.n	8006372 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01c      	beq.n	800633a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006300:	4b4b      	ldr	r3, [pc, #300]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006306:	4a4a      	ldr	r2, [pc, #296]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006308:	f043 0301 	orr.w	r3, r3, #1
 800630c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006310:	f7fd feae 	bl	8004070 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006318:	f7fd feaa 	bl	8004070 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e20c      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800632a:	4b41      	ldr	r3, [pc, #260]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 800632c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0ef      	beq.n	8006318 <HAL_RCC_OscConfig+0x3ec>
 8006338:	e01b      	b.n	8006372 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800633a:	4b3d      	ldr	r3, [pc, #244]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 800633c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006340:	4a3b      	ldr	r2, [pc, #236]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634a:	f7fd fe91 	bl	8004070 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006352:	f7fd fe8d 	bl	8004070 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e1ef      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006364:	4b32      	ldr	r3, [pc, #200]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1ef      	bne.n	8006352 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80a6 	beq.w	80064cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006380:	2300      	movs	r3, #0
 8006382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006384:	4b2a      	ldr	r3, [pc, #168]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10d      	bne.n	80063ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006390:	4b27      	ldr	r3, [pc, #156]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006394:	4a26      	ldr	r2, [pc, #152]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639a:	6593      	str	r3, [r2, #88]	; 0x58
 800639c:	4b24      	ldr	r3, [pc, #144]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063a8:	2301      	movs	r3, #1
 80063aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ac:	4b21      	ldr	r3, [pc, #132]	; (8006434 <HAL_RCC_OscConfig+0x508>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d118      	bne.n	80063ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <HAL_RCC_OscConfig+0x508>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <HAL_RCC_OscConfig+0x508>)
 80063be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063c4:	f7fd fe54 	bl	8004070 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063cc:	f7fd fe50 	bl	8004070 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e1b2      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063de:	4b15      	ldr	r3, [pc, #84]	; (8006434 <HAL_RCC_OscConfig+0x508>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d108      	bne.n	8006404 <HAL_RCC_OscConfig+0x4d8>
 80063f2:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	4a0d      	ldr	r2, [pc, #52]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006402:	e029      	b.n	8006458 <HAL_RCC_OscConfig+0x52c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b05      	cmp	r3, #5
 800640a:	d115      	bne.n	8006438 <HAL_RCC_OscConfig+0x50c>
 800640c:	4b08      	ldr	r3, [pc, #32]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	4a07      	ldr	r2, [pc, #28]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006414:	f043 0304 	orr.w	r3, r3, #4
 8006418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006422:	4a03      	ldr	r2, [pc, #12]	; (8006430 <HAL_RCC_OscConfig+0x504>)
 8006424:	f043 0301 	orr.w	r3, r3, #1
 8006428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800642c:	e014      	b.n	8006458 <HAL_RCC_OscConfig+0x52c>
 800642e:	bf00      	nop
 8006430:	40021000 	.word	0x40021000
 8006434:	40007000 	.word	0x40007000
 8006438:	4b9a      	ldr	r3, [pc, #616]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	4a99      	ldr	r2, [pc, #612]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006440:	f023 0301 	bic.w	r3, r3, #1
 8006444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006448:	4b96      	ldr	r3, [pc, #600]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	4a95      	ldr	r2, [pc, #596]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006450:	f023 0304 	bic.w	r3, r3, #4
 8006454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d016      	beq.n	800648e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fd fe06 	bl	8004070 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006466:	e00a      	b.n	800647e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006468:	f7fd fe02 	bl	8004070 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3288 	movw	r2, #5000	; 0x1388
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e162      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800647e:	4b89      	ldr	r3, [pc, #548]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0ed      	beq.n	8006468 <HAL_RCC_OscConfig+0x53c>
 800648c:	e015      	b.n	80064ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648e:	f7fd fdef 	bl	8004070 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006494:	e00a      	b.n	80064ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006496:	f7fd fdeb 	bl	8004070 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e14b      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064ac:	4b7d      	ldr	r3, [pc, #500]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1ed      	bne.n	8006496 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d105      	bne.n	80064cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064c0:	4b78      	ldr	r3, [pc, #480]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	4a77      	ldr	r2, [pc, #476]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80064c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d03c      	beq.n	8006552 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01c      	beq.n	800651a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064e0:	4b70      	ldr	r3, [pc, #448]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80064e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064e6:	4a6f      	ldr	r2, [pc, #444]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fd fdbe 	bl	8004070 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064f8:	f7fd fdba 	bl	8004070 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e11c      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800650a:	4b66      	ldr	r3, [pc, #408]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 800650c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0ef      	beq.n	80064f8 <HAL_RCC_OscConfig+0x5cc>
 8006518:	e01b      	b.n	8006552 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800651a:	4b62      	ldr	r3, [pc, #392]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 800651c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006520:	4a60      	ldr	r2, [pc, #384]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652a:	f7fd fda1 	bl	8004070 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006532:	f7fd fd9d 	bl	8004070 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e0ff      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006544:	4b57      	ldr	r3, [pc, #348]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1ef      	bne.n	8006532 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80f3 	beq.w	8006742 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	2b02      	cmp	r3, #2
 8006562:	f040 80c9 	bne.w	80066f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006566:	4b4f      	ldr	r3, [pc, #316]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f003 0203 	and.w	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	429a      	cmp	r2, r3
 8006578:	d12c      	bne.n	80065d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	3b01      	subs	r3, #1
 8006586:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d123      	bne.n	80065d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006598:	429a      	cmp	r2, r3
 800659a:	d11b      	bne.n	80065d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d113      	bne.n	80065d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	3b01      	subs	r3, #1
 80065ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d109      	bne.n	80065d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	3b01      	subs	r3, #1
 80065ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d06b      	beq.n	80066ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b0c      	cmp	r3, #12
 80065d8:	d062      	beq.n	80066a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065da:	4b32      	ldr	r3, [pc, #200]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0ac      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065ea:	4b2e      	ldr	r3, [pc, #184]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a2d      	ldr	r2, [pc, #180]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 80065f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065f6:	f7fd fd3b 	bl	8004070 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065fe:	f7fd fd37 	bl	8004070 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e099      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006610:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f0      	bne.n	80065fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800661c:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <HAL_RCC_OscConfig+0x77c>)
 8006622:	4013      	ands	r3, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800662c:	3a01      	subs	r2, #1
 800662e:	0112      	lsls	r2, r2, #4
 8006630:	4311      	orrs	r1, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006636:	0212      	lsls	r2, r2, #8
 8006638:	4311      	orrs	r1, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800663e:	0852      	lsrs	r2, r2, #1
 8006640:	3a01      	subs	r2, #1
 8006642:	0552      	lsls	r2, r2, #21
 8006644:	4311      	orrs	r1, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800664a:	0852      	lsrs	r2, r2, #1
 800664c:	3a01      	subs	r2, #1
 800664e:	0652      	lsls	r2, r2, #25
 8006650:	4311      	orrs	r1, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006656:	06d2      	lsls	r2, r2, #27
 8006658:	430a      	orrs	r2, r1
 800665a:	4912      	ldr	r1, [pc, #72]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 800665c:	4313      	orrs	r3, r2
 800665e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a0f      	ldr	r2, [pc, #60]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800666a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a0c      	ldr	r2, [pc, #48]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006678:	f7fd fcfa 	bl	8004070 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006680:	f7fd fcf6 	bl	8004070 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e058      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <HAL_RCC_OscConfig+0x778>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800669e:	e050      	b.n	8006742 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e04f      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
 80066a4:	40021000 	.word	0x40021000
 80066a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ac:	4b27      	ldr	r3, [pc, #156]	; (800674c <HAL_RCC_OscConfig+0x820>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d144      	bne.n	8006742 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80066b8:	4b24      	ldr	r3, [pc, #144]	; (800674c <HAL_RCC_OscConfig+0x820>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a23      	ldr	r2, [pc, #140]	; (800674c <HAL_RCC_OscConfig+0x820>)
 80066be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066c4:	4b21      	ldr	r3, [pc, #132]	; (800674c <HAL_RCC_OscConfig+0x820>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4a20      	ldr	r2, [pc, #128]	; (800674c <HAL_RCC_OscConfig+0x820>)
 80066ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066d0:	f7fd fcce 	bl	8004070 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d8:	f7fd fcca 	bl	8004070 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e02c      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ea:	4b18      	ldr	r3, [pc, #96]	; (800674c <HAL_RCC_OscConfig+0x820>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f0      	beq.n	80066d8 <HAL_RCC_OscConfig+0x7ac>
 80066f6:	e024      	b.n	8006742 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d01f      	beq.n	800673e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <HAL_RCC_OscConfig+0x820>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a12      	ldr	r2, [pc, #72]	; (800674c <HAL_RCC_OscConfig+0x820>)
 8006704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fd fcb1 	bl	8004070 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006712:	f7fd fcad 	bl	8004070 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e00f      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <HAL_RCC_OscConfig+0x820>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1f0      	bne.n	8006712 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_OscConfig+0x820>)
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	4905      	ldr	r1, [pc, #20]	; (800674c <HAL_RCC_OscConfig+0x820>)
 8006736:	4b06      	ldr	r3, [pc, #24]	; (8006750 <HAL_RCC_OscConfig+0x824>)
 8006738:	4013      	ands	r3, r2
 800673a:	60cb      	str	r3, [r1, #12]
 800673c:	e001      	b.n	8006742 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40021000 	.word	0x40021000
 8006750:	feeefffc 	.word	0xfeeefffc

08006754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0e7      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006768:	4b75      	ldr	r3, [pc, #468]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d910      	bls.n	8006798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b72      	ldr	r3, [pc, #456]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 0207 	bic.w	r2, r3, #7
 800677e:	4970      	ldr	r1, [pc, #448]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b6e      	ldr	r3, [pc, #440]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0cf      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d010      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	4b66      	ldr	r3, [pc, #408]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d908      	bls.n	80067c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b4:	4b63      	ldr	r3, [pc, #396]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	4960      	ldr	r1, [pc, #384]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04c      	beq.n	800686c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d107      	bne.n	80067ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067da:	4b5a      	ldr	r3, [pc, #360]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d121      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0a6      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d107      	bne.n	8006802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067f2:	4b54      	ldr	r3, [pc, #336]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d115      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e09a      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d107      	bne.n	800681a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800680a:	4b4e      	ldr	r3, [pc, #312]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e08e      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800681a:	4b4a      	ldr	r3, [pc, #296]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e086      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800682a:	4b46      	ldr	r3, [pc, #280]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f023 0203 	bic.w	r2, r3, #3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4943      	ldr	r1, [pc, #268]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800683c:	f7fd fc18 	bl	8004070 <HAL_GetTick>
 8006840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006842:	e00a      	b.n	800685a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006844:	f7fd fc14 	bl	8004070 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e06e      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685a:	4b3a      	ldr	r3, [pc, #232]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 020c 	and.w	r2, r3, #12
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	429a      	cmp	r2, r3
 800686a:	d1eb      	bne.n	8006844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d010      	beq.n	800689a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	4b31      	ldr	r3, [pc, #196]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006884:	429a      	cmp	r2, r3
 8006886:	d208      	bcs.n	800689a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006888:	4b2e      	ldr	r3, [pc, #184]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	492b      	ldr	r1, [pc, #172]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800689a:	4b29      	ldr	r3, [pc, #164]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d210      	bcs.n	80068ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f023 0207 	bic.w	r2, r3, #7
 80068b0:	4923      	ldr	r1, [pc, #140]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b8:	4b21      	ldr	r3, [pc, #132]	; (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d001      	beq.n	80068ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e036      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d6:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	4918      	ldr	r1, [pc, #96]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068f4:	4b13      	ldr	r3, [pc, #76]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4910      	ldr	r1, [pc, #64]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006908:	f000 f824 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 800690c:	4602      	mov	r2, r0
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	091b      	lsrs	r3, r3, #4
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	490b      	ldr	r1, [pc, #44]	; (8006948 <HAL_RCC_ClockConfig+0x1f4>)
 800691a:	5ccb      	ldrb	r3, [r1, r3]
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	4a09      	ldr	r2, [pc, #36]	; (800694c <HAL_RCC_ClockConfig+0x1f8>)
 8006926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006928:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_ClockConfig+0x1fc>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f7fd fb4f 	bl	8003fd0 <HAL_InitTick>
 8006932:	4603      	mov	r3, r0
 8006934:	72fb      	strb	r3, [r7, #11]

  return status;
 8006936:	7afb      	ldrb	r3, [r7, #11]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40022000 	.word	0x40022000
 8006944:	40021000 	.word	0x40021000
 8006948:	0800d670 	.word	0x0800d670
 800694c:	20000000 	.word	0x20000000
 8006950:	20000004 	.word	0x20000004

08006954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	2300      	movs	r3, #0
 8006960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006962:	4b3e      	ldr	r3, [pc, #248]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
 800696a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800696c:	4b3b      	ldr	r3, [pc, #236]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x34>
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b0c      	cmp	r3, #12
 8006980:	d121      	bne.n	80069c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d11e      	bne.n	80069c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006988:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d107      	bne.n	80069a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006994:	4b31      	ldr	r3, [pc, #196]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e005      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069a4:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069b0:	4a2b      	ldr	r2, [pc, #172]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10d      	bne.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069c4:	e00a      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d102      	bne.n	80069d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069cc:	4b25      	ldr	r3, [pc, #148]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e004      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069d8:	4b23      	ldr	r3, [pc, #140]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80069da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b0c      	cmp	r3, #12
 80069e0:	d134      	bne.n	8006a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069e2:	4b1e      	ldr	r3, [pc, #120]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d003      	beq.n	80069fa <HAL_RCC_GetSysClockFreq+0xa6>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d003      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0xac>
 80069f8:	e005      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80069fa:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80069fc:	617b      	str	r3, [r7, #20]
      break;
 80069fe:	e005      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a00:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a02:	617b      	str	r3, [r7, #20]
      break;
 8006a04:	e002      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	617b      	str	r3, [r7, #20]
      break;
 8006a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a0c:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	3301      	adds	r3, #1
 8006a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a1a:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	fb03 f202 	mul.w	r2, r3, r2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a32:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	0e5b      	lsrs	r3, r3, #25
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3724      	adds	r7, #36	; 0x24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	0800d688 	.word	0x0800d688
 8006a64:	00f42400 	.word	0x00f42400
 8006a68:	007a1200 	.word	0x007a1200

08006a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a70:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a72:	681b      	ldr	r3, [r3, #0]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000000 	.word	0x20000000

08006a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a88:	f7ff fff0 	bl	8006a6c <HAL_RCC_GetHCLKFreq>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	0a1b      	lsrs	r3, r3, #8
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	4904      	ldr	r1, [pc, #16]	; (8006aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a9a:	5ccb      	ldrb	r3, [r1, r3]
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	0800d680 	.word	0x0800d680

08006ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ab4:	f7ff ffda 	bl	8006a6c <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0adb      	lsrs	r3, r3, #11
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4904      	ldr	r1, [pc, #16]	; (8006ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	0800d680 	.word	0x0800d680

08006adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006af4:	f7ff f9b6 	bl	8005e64 <HAL_PWREx_GetVoltageRange>
 8006af8:	6178      	str	r0, [r7, #20]
 8006afa:	e014      	b.n	8006b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b00:	4a24      	ldr	r2, [pc, #144]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b06:	6593      	str	r3, [r2, #88]	; 0x58
 8006b08:	4b22      	ldr	r3, [pc, #136]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b14:	f7ff f9a6 	bl	8005e64 <HAL_PWREx_GetVoltageRange>
 8006b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b1a:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1e:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2c:	d10b      	bne.n	8006b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b80      	cmp	r3, #128	; 0x80
 8006b32:	d919      	bls.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2ba0      	cmp	r3, #160	; 0xa0
 8006b38:	d902      	bls.n	8006b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	e013      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b40:	2301      	movs	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	e010      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d902      	bls.n	8006b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	e00a      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b80      	cmp	r3, #128	; 0x80
 8006b56:	d102      	bne.n	8006b5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b58:	2302      	movs	r3, #2
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	e004      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b70      	cmp	r3, #112	; 0x70
 8006b62:	d101      	bne.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b64:	2301      	movs	r3, #1
 8006b66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f023 0207 	bic.w	r2, r3, #7
 8006b70:	4909      	ldr	r1, [pc, #36]	; (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d001      	beq.n	8006b8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000
 8006b98:	40022000 	.word	0x40022000

08006b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ba8:	2300      	movs	r3, #0
 8006baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d031      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bc0:	d01a      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006bc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bc6:	d814      	bhi.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bd0:	d10f      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006bd2:	4b5d      	ldr	r3, [pc, #372]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	4a5c      	ldr	r2, [pc, #368]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bdc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bde:	e00c      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3304      	adds	r3, #4
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fa22 	bl	8007030 <RCCEx_PLLSAI1_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bf0:	e003      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8006bf6:	e000      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10b      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c00:	4b51      	ldr	r3, [pc, #324]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	494e      	ldr	r1, [pc, #312]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c16:	e001      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
 8006c1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 809e 	beq.w	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c2e:	4b46      	ldr	r3, [pc, #280]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00d      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c44:	4b40      	ldr	r3, [pc, #256]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8006c50:	4b3d      	ldr	r3, [pc, #244]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c60:	4b3a      	ldr	r3, [pc, #232]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a39      	ldr	r2, [pc, #228]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c6c:	f7fd fa00 	bl	8004070 <HAL_GetTick>
 8006c70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c72:	e009      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c74:	f7fd f9fc 	bl	8004070 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d902      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	74fb      	strb	r3, [r7, #19]
        break;
 8006c86:	e005      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c88:	4b30      	ldr	r3, [pc, #192]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0ef      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006c94:	7cfb      	ldrb	r3, [r7, #19]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d15a      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c9a:	4b2b      	ldr	r3, [pc, #172]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01e      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d019      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cb6:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cc2:	4b21      	ldr	r3, [pc, #132]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd8:	4a1b      	ldr	r2, [pc, #108]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ce2:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d016      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fd f9bc 	bl	8004070 <HAL_GetTick>
 8006cf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfc:	f7fd f9b8 	bl	8004070 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d902      	bls.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	74fb      	strb	r3, [r7, #19]
            break;
 8006d12:	e006      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0ec      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006d22:	7cfb      	ldrb	r3, [r7, #19]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10b      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d28:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	4904      	ldr	r1, [pc, #16]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d3e:	e009      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
 8006d42:	74bb      	strb	r3, [r7, #18]
 8006d44:	e006      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006d46:	bf00      	nop
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d50:	7cfb      	ldrb	r3, [r7, #19]
 8006d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d54:	7c7b      	ldrb	r3, [r7, #17]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d105      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d5a:	4b8d      	ldr	r3, [pc, #564]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	4a8c      	ldr	r2, [pc, #560]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d72:	4b87      	ldr	r3, [pc, #540]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d78:	f023 0203 	bic.w	r2, r3, #3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	4983      	ldr	r1, [pc, #524]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d94:	4b7e      	ldr	r3, [pc, #504]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9a:	f023 020c 	bic.w	r2, r3, #12
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	497b      	ldr	r1, [pc, #492]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006db6:	4b76      	ldr	r3, [pc, #472]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	4972      	ldr	r1, [pc, #456]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dd8:	4b6d      	ldr	r3, [pc, #436]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	496a      	ldr	r1, [pc, #424]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dfa:	4b65      	ldr	r3, [pc, #404]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e08:	4961      	ldr	r1, [pc, #388]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e1c:	4b5c      	ldr	r3, [pc, #368]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	4959      	ldr	r1, [pc, #356]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e3e:	4b54      	ldr	r3, [pc, #336]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	4950      	ldr	r1, [pc, #320]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e60:	4b4b      	ldr	r3, [pc, #300]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	4948      	ldr	r1, [pc, #288]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e82:	4b43      	ldr	r3, [pc, #268]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	493f      	ldr	r1, [pc, #252]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d028      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ea4:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	4937      	ldr	r1, [pc, #220]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ec2:	d106      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ec4:	4b32      	ldr	r3, [pc, #200]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	4a31      	ldr	r2, [pc, #196]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ece:	60d3      	str	r3, [r2, #12]
 8006ed0:	e011      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eda:	d10c      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f8a4 	bl	8007030 <RCCEx_PLLSAI1_Config>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006eec:	7cfb      	ldrb	r3, [r7, #19]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8006ef2:	7cfb      	ldrb	r3, [r7, #19]
 8006ef4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d028      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f02:	4b23      	ldr	r3, [pc, #140]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f10:	491f      	ldr	r1, [pc, #124]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f20:	d106      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f22:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f2c:	60d3      	str	r3, [r2, #12]
 8006f2e:	e011      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f38:	d10c      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 f875 	bl	8007030 <RCCEx_PLLSAI1_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f4a:	7cfb      	ldrb	r3, [r7, #19]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006f50:	7cfb      	ldrb	r3, [r7, #19]
 8006f52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d02b      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	4908      	ldr	r1, [pc, #32]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f7e:	d109      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f80:	4b03      	ldr	r3, [pc, #12]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4a02      	ldr	r2, [pc, #8]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f8a:	60d3      	str	r3, [r2, #12]
 8006f8c:	e014      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006f8e:	bf00      	nop
 8006f90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f843 	bl	8007030 <RCCEx_PLLSAI1_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fae:	7cfb      	ldrb	r3, [r7, #19]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8006fb4:	7cfb      	ldrb	r3, [r7, #19]
 8006fb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01c      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fc4:	4b19      	ldr	r3, [pc, #100]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd2:	4916      	ldr	r1, [pc, #88]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe2:	d10c      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	2102      	movs	r1, #2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f820 	bl	8007030 <RCCEx_PLLSAI1_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ff4:	7cfb      	ldrb	r3, [r7, #19]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8006ffa:	7cfb      	ldrb	r3, [r7, #19]
 8006ffc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800700a:	4b08      	ldr	r3, [pc, #32]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007010:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007018:	4904      	ldr	r1, [pc, #16]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800701a:	4313      	orrs	r3, r2
 800701c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007020:	7cbb      	ldrb	r3, [r7, #18]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000

08007030 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800703e:	4b74      	ldr	r3, [pc, #464]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d018      	beq.n	800707c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800704a:	4b71      	ldr	r3, [pc, #452]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f003 0203 	and.w	r2, r3, #3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d10d      	bne.n	8007076 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
       ||
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007062:	4b6b      	ldr	r3, [pc, #428]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	091b      	lsrs	r3, r3, #4
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
       ||
 8007072:	429a      	cmp	r2, r3
 8007074:	d047      	beq.n	8007106 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	73fb      	strb	r3, [r7, #15]
 800707a:	e044      	b.n	8007106 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b03      	cmp	r3, #3
 8007082:	d018      	beq.n	80070b6 <RCCEx_PLLSAI1_Config+0x86>
 8007084:	2b03      	cmp	r3, #3
 8007086:	d825      	bhi.n	80070d4 <RCCEx_PLLSAI1_Config+0xa4>
 8007088:	2b01      	cmp	r3, #1
 800708a:	d002      	beq.n	8007092 <RCCEx_PLLSAI1_Config+0x62>
 800708c:	2b02      	cmp	r3, #2
 800708e:	d009      	beq.n	80070a4 <RCCEx_PLLSAI1_Config+0x74>
 8007090:	e020      	b.n	80070d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007092:	4b5f      	ldr	r3, [pc, #380]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d11d      	bne.n	80070da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070a2:	e01a      	b.n	80070da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070a4:	4b5a      	ldr	r3, [pc, #360]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d116      	bne.n	80070de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070b4:	e013      	b.n	80070de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070b6:	4b56      	ldr	r3, [pc, #344]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10f      	bne.n	80070e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80070c2:	4b53      	ldr	r3, [pc, #332]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070d2:	e006      	b.n	80070e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	e004      	b.n	80070e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070da:	bf00      	nop
 80070dc:	e002      	b.n	80070e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070de:	bf00      	nop
 80070e0:	e000      	b.n	80070e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80070e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10d      	bne.n	8007106 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80070ea:	4b49      	ldr	r3, [pc, #292]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6819      	ldr	r1, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	430b      	orrs	r3, r1
 8007100:	4943      	ldr	r1, [pc, #268]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007102:	4313      	orrs	r3, r2
 8007104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d17c      	bne.n	8007206 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800710c:	4b40      	ldr	r3, [pc, #256]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3f      	ldr	r2, [pc, #252]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007118:	f7fc ffaa 	bl	8004070 <HAL_GetTick>
 800711c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800711e:	e009      	b.n	8007134 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007120:	f7fc ffa6 	bl	8004070 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d902      	bls.n	8007134 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	73fb      	strb	r3, [r7, #15]
        break;
 8007132:	e005      	b.n	8007140 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007134:	4b36      	ldr	r3, [pc, #216]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1ef      	bne.n	8007120 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d15f      	bne.n	8007206 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d110      	bne.n	800716e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800714c:	4b30      	ldr	r3, [pc, #192]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007154:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6892      	ldr	r2, [r2, #8]
 800715c:	0211      	lsls	r1, r2, #8
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68d2      	ldr	r2, [r2, #12]
 8007162:	06d2      	lsls	r2, r2, #27
 8007164:	430a      	orrs	r2, r1
 8007166:	492a      	ldr	r1, [pc, #168]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007168:	4313      	orrs	r3, r2
 800716a:	610b      	str	r3, [r1, #16]
 800716c:	e027      	b.n	80071be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d112      	bne.n	800719a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007174:	4b26      	ldr	r3, [pc, #152]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800717c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6892      	ldr	r2, [r2, #8]
 8007184:	0211      	lsls	r1, r2, #8
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6912      	ldr	r2, [r2, #16]
 800718a:	0852      	lsrs	r2, r2, #1
 800718c:	3a01      	subs	r2, #1
 800718e:	0552      	lsls	r2, r2, #21
 8007190:	430a      	orrs	r2, r1
 8007192:	491f      	ldr	r1, [pc, #124]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007194:	4313      	orrs	r3, r2
 8007196:	610b      	str	r3, [r1, #16]
 8007198:	e011      	b.n	80071be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800719a:	4b1d      	ldr	r3, [pc, #116]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80071a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6892      	ldr	r2, [r2, #8]
 80071aa:	0211      	lsls	r1, r2, #8
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6952      	ldr	r2, [r2, #20]
 80071b0:	0852      	lsrs	r2, r2, #1
 80071b2:	3a01      	subs	r2, #1
 80071b4:	0652      	lsls	r2, r2, #25
 80071b6:	430a      	orrs	r2, r1
 80071b8:	4915      	ldr	r1, [pc, #84]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80071be:	4b14      	ldr	r3, [pc, #80]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a13      	ldr	r2, [pc, #76]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ca:	f7fc ff51 	bl	8004070 <HAL_GetTick>
 80071ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071d0:	e009      	b.n	80071e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071d2:	f7fc ff4d 	bl	8004070 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d902      	bls.n	80071e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	73fb      	strb	r3, [r7, #15]
          break;
 80071e4:	e005      	b.n	80071f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071e6:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ef      	beq.n	80071d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	4903      	ldr	r1, [pc, #12]	; (8007210 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007202:	4313      	orrs	r3, r2
 8007204:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40021000 	.word	0x40021000

08007214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e049      	b.n	80072ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7fc fc3e 	bl	8003abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3304      	adds	r3, #4
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f000 fa7e 	bl	8007754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e03b      	b.n	8007354 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a19      	ldr	r2, [pc, #100]	; (8007360 <HAL_TIM_Base_Start_IT+0x9c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d009      	beq.n	8007312 <HAL_TIM_Base_Start_IT+0x4e>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007306:	d004      	beq.n	8007312 <HAL_TIM_Base_Start_IT+0x4e>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <HAL_TIM_Base_Start_IT+0xa0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d115      	bne.n	800733e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	4b13      	ldr	r3, [pc, #76]	; (8007368 <HAL_TIM_Base_Start_IT+0xa4>)
 800731a:	4013      	ands	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b06      	cmp	r3, #6
 8007322:	d015      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x8c>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732a:	d011      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800733c:	e008      	b.n	8007350 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0201 	orr.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e000      	b.n	8007352 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40014000 	.word	0x40014000
 8007368:	00010007 	.word	0x00010007

0800736c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d020      	beq.n	80073d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01b      	beq.n	80073d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0202 	mvn.w	r2, #2
 80073a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f9ad 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f99f 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f9b0 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0204 	mvn.w	r2, #4
 80073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f987 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f979 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f98a 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d020      	beq.n	8007468 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01b      	beq.n	8007468 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0208 	mvn.w	r2, #8
 8007438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2204      	movs	r2, #4
 800743e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f961 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f953 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f964 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	2b00      	cmp	r3, #0
 8007470:	d020      	beq.n	80074b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 0310 	and.w	r3, r3, #16
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0210 	mvn.w	r2, #16
 8007484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2208      	movs	r2, #8
 800748a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f93b 	bl	8007716 <HAL_TIM_IC_CaptureCallback>
 80074a0:	e005      	b.n	80074ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f92d 	bl	8007702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f93e 	bl	800772a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0201 	mvn.w	r2, #1
 80074d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fb fbf8 	bl	8002cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00c      	beq.n	80074fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa9a 	bl	8007a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00c      	beq.n	8007520 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa92 	bl	8007a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00c      	beq.n	8007544 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f8fd 	bl	800773e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0220 	mvn.w	r2, #32
 8007560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa5a 	bl	8007a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007568:	bf00      	nop
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x1c>
 8007588:	2302      	movs	r3, #2
 800758a:	e0b6      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x18a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c8:	d03e      	beq.n	8007648 <HAL_TIM_ConfigClockSource+0xd8>
 80075ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ce:	f200 8087 	bhi.w	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d6:	f000 8086 	beq.w	80076e6 <HAL_TIM_ConfigClockSource+0x176>
 80075da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075de:	d87f      	bhi.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 80075e0:	2b70      	cmp	r3, #112	; 0x70
 80075e2:	d01a      	beq.n	800761a <HAL_TIM_ConfigClockSource+0xaa>
 80075e4:	2b70      	cmp	r3, #112	; 0x70
 80075e6:	d87b      	bhi.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 80075e8:	2b60      	cmp	r3, #96	; 0x60
 80075ea:	d050      	beq.n	800768e <HAL_TIM_ConfigClockSource+0x11e>
 80075ec:	2b60      	cmp	r3, #96	; 0x60
 80075ee:	d877      	bhi.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 80075f0:	2b50      	cmp	r3, #80	; 0x50
 80075f2:	d03c      	beq.n	800766e <HAL_TIM_ConfigClockSource+0xfe>
 80075f4:	2b50      	cmp	r3, #80	; 0x50
 80075f6:	d873      	bhi.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d058      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x13e>
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d86f      	bhi.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 8007600:	2b30      	cmp	r3, #48	; 0x30
 8007602:	d064      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x15e>
 8007604:	2b30      	cmp	r3, #48	; 0x30
 8007606:	d86b      	bhi.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 8007608:	2b20      	cmp	r3, #32
 800760a:	d060      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x15e>
 800760c:	2b20      	cmp	r3, #32
 800760e:	d867      	bhi.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d05c      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x15e>
 8007614:	2b10      	cmp	r3, #16
 8007616:	d05a      	beq.n	80076ce <HAL_TIM_ConfigClockSource+0x15e>
 8007618:	e062      	b.n	80076e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6899      	ldr	r1, [r3, #8]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f000 f971 	bl	8007910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800763c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	609a      	str	r2, [r3, #8]
      break;
 8007646:	e04f      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6899      	ldr	r1, [r3, #8]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f000 f95a 	bl	8007910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800766a:	609a      	str	r2, [r3, #8]
      break;
 800766c:	e03c      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	6859      	ldr	r1, [r3, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	461a      	mov	r2, r3
 800767c:	f000 f8ce 	bl	800781c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2150      	movs	r1, #80	; 0x50
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f927 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 800768c:	e02c      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6859      	ldr	r1, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	461a      	mov	r2, r3
 800769c:	f000 f8ed 	bl	800787a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2160      	movs	r1, #96	; 0x60
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 f917 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80076ac:	e01c      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6859      	ldr	r1, [r3, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f000 f8ae 	bl	800781c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2140      	movs	r1, #64	; 0x40
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f907 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80076cc:	e00c      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f000 f8fe 	bl	80078da <TIM_ITRx_SetConfig>
      break;
 80076de:	e003      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
      break;
 80076e4:	e000      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80076e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <TIM_Base_SetConfig+0xbc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d003      	beq.n	8007774 <TIM_Base_SetConfig+0x20>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007772:	d108      	bne.n	8007786 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a21      	ldr	r2, [pc, #132]	; (8007810 <TIM_Base_SetConfig+0xbc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00b      	beq.n	80077a6 <TIM_Base_SetConfig+0x52>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007794:	d007      	beq.n	80077a6 <TIM_Base_SetConfig+0x52>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <TIM_Base_SetConfig+0xc0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d003      	beq.n	80077a6 <TIM_Base_SetConfig+0x52>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1d      	ldr	r2, [pc, #116]	; (8007818 <TIM_Base_SetConfig+0xc4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d108      	bne.n	80077b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <TIM_Base_SetConfig+0xbc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_Base_SetConfig+0xa0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a0b      	ldr	r2, [pc, #44]	; (8007814 <TIM_Base_SetConfig+0xc0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0xa0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <TIM_Base_SetConfig+0xc4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d103      	bne.n	80077fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	615a      	str	r2, [r3, #20]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40012c00 	.word	0x40012c00
 8007814:	40014000 	.word	0x40014000
 8007818:	40014400 	.word	0x40014400

0800781c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 030a 	bic.w	r3, r3, #10
 8007858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800787a:	b480      	push	{r7}
 800787c:	b087      	sub	sp, #28
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	f023 0210 	bic.w	r2, r3, #16
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	031b      	lsls	r3, r3, #12
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	621a      	str	r2, [r3, #32]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f043 0307 	orr.w	r3, r3, #7
 80078fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	609a      	str	r2, [r3, #8]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800792a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	021a      	lsls	r2, r3, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	431a      	orrs	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007964:	2302      	movs	r3, #2
 8007966:	e04f      	b.n	8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d108      	bne.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007998:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a14      	ldr	r2, [pc, #80]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d009      	beq.n	80079dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d0:	d004      	beq.n	80079dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a10      	ldr	r2, [pc, #64]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d10c      	bne.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40014000 	.word	0x40014000

08007a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e040      	b.n	8007aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fc f842 	bl	8003b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2224      	movs	r2, #36	; 0x24
 8007a84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fe5e 	bl	8008760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc01 	bl	80082ac <UART_SetConfig>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e01b      	b.n	8007aec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fedd 	bl	80088a4 <UART_CheckIdleState>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08a      	sub	sp, #40	; 0x28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d165      	bne.n	8007bd6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_UART_Transmit_DMA+0x22>
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e05e      	b.n	8007bd8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2221      	movs	r2, #33	; 0x21
 8007b3c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d027      	beq.n	8007b96 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a25      	ldr	r2, [pc, #148]	; (8007be0 <HAL_UART_Transmit_DMA+0xec>)
 8007b4c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	4a24      	ldr	r2, [pc, #144]	; (8007be4 <HAL_UART_Transmit_DMA+0xf0>)
 8007b54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	4a23      	ldr	r2, [pc, #140]	; (8007be8 <HAL_UART_Transmit_DMA+0xf4>)
 8007b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	2200      	movs	r2, #0
 8007b64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3328      	adds	r3, #40	; 0x28
 8007b76:	461a      	mov	r2, r3
 8007b78:	88fb      	ldrh	r3, [r7, #6]
 8007b7a:	f7fd fe23 	bl	80057c4 <HAL_DMA_Start_IT>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2210      	movs	r2, #16
 8007b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e020      	b.n	8007bd8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2240      	movs	r2, #64	; 0x40
 8007b9c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	613b      	str	r3, [r7, #16]
   return(result);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbe:	623a      	str	r2, [r7, #32]
 8007bc0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69f9      	ldr	r1, [r7, #28]
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e000      	b.n	8007bd8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007bd6:	2302      	movs	r3, #2
  }
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3728      	adds	r7, #40	; 0x28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	08008d19 	.word	0x08008d19
 8007be4:	08008db3 	.word	0x08008db3
 8007be8:	08008f39 	.word	0x08008f39

08007bec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d137      	bne.n	8007c74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HAL_UART_Receive_DMA+0x24>
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e030      	b.n	8007c76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a18      	ldr	r2, [pc, #96]	; (8007c80 <HAL_UART_Receive_DMA+0x94>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d01f      	beq.n	8007c64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d018      	beq.n	8007c64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	623b      	str	r3, [r7, #32]
 8007c52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	69f9      	ldr	r1, [r7, #28]
 8007c56:	6a3a      	ldr	r2, [r7, #32]
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	461a      	mov	r2, r3
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 ff2a 	bl	8008ac4 <UART_Start_Receive_DMA>
 8007c70:	4603      	mov	r3, r0
 8007c72:	e000      	b.n	8007c76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c74:	2302      	movs	r3, #2
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3728      	adds	r7, #40	; 0x28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	40008000 	.word	0x40008000

08007c84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b0ba      	sub	sp, #232	; 0xe8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007caa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007cae:	f640 030f 	movw	r3, #2063	; 0x80f
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007cb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d115      	bne.n	8007cec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00f      	beq.n	8007cec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 82ae 	beq.w	800823e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
      }
      return;
 8007cea:	e2a8      	b.n	800823e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8117 	beq.w	8007f24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007d02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007d06:	4b85      	ldr	r3, [pc, #532]	; (8007f1c <HAL_UART_IRQHandler+0x298>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 810a 	beq.w	8007f24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d011      	beq.n	8007d40 <HAL_UART_IRQHandler+0xbc>
 8007d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d36:	f043 0201 	orr.w	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d011      	beq.n	8007d70 <HAL_UART_IRQHandler+0xec>
 8007d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d66:	f043 0204 	orr.w	r2, r3, #4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d011      	beq.n	8007da0 <HAL_UART_IRQHandler+0x11c>
 8007d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d96:	f043 0202 	orr.w	r2, r3, #2
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d017      	beq.n	8007ddc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2208      	movs	r2, #8
 8007dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd2:	f043 0208 	orr.w	r2, r3, #8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d012      	beq.n	8007e0e <HAL_UART_IRQHandler+0x18a>
 8007de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00c      	beq.n	8007e0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e04:	f043 0220 	orr.w	r2, r3, #32
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8214 	beq.w	8008242 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00d      	beq.n	8007e42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d007      	beq.n	8007e42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e56:	2b40      	cmp	r3, #64	; 0x40
 8007e58:	d005      	beq.n	8007e66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d04f      	beq.n	8007f06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fef2 	bl	8008c50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d141      	bne.n	8007efe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1d9      	bne.n	8007e7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d013      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed2:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <HAL_UART_IRQHandler+0x29c>)
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd fd10 	bl	8005900 <HAL_DMA_Abort_IT>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d017      	beq.n	8007f16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef4:	e00f      	b.n	8007f16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f9c2 	bl	8008280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007efc:	e00b      	b.n	8007f16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9be 	bl	8008280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f04:	e007      	b.n	8007f16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f9ba 	bl	8008280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007f14:	e195      	b.n	8008242 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f16:	bf00      	nop
    return;
 8007f18:	e193      	b.n	8008242 <HAL_UART_IRQHandler+0x5be>
 8007f1a:	bf00      	nop
 8007f1c:	04000120 	.word	0x04000120
 8007f20:	08008fb7 	.word	0x08008fb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	f040 814e 	bne.w	80081ca <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f32:	f003 0310 	and.w	r3, r3, #16
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8147 	beq.w	80081ca <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8140 	beq.w	80081ca <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2210      	movs	r2, #16
 8007f50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	f040 80b8 	bne.w	80080d2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 8167 	beq.w	8008246 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f82:	429a      	cmp	r2, r3
 8007f84:	f080 815f 	bcs.w	8008246 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 8086 	bne.w	80080b0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007fd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1da      	bne.n	8007fa4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008012:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008016:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800801a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e1      	bne.n	8007fee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800803a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800803c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800804e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800805c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e3      	bne.n	800802a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800807e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008080:	f023 0310 	bic.w	r3, r3, #16
 8008084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008092:	65bb      	str	r3, [r7, #88]	; 0x58
 8008094:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e4      	bne.n	8008070 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fd fbea 	bl	8005884 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8e2 	bl	8008294 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080d0:	e0b9      	b.n	8008246 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80ab 	beq.w	800824a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80080f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80a6 	beq.w	800824a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008120:	647b      	str	r3, [r7, #68]	; 0x44
 8008122:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800812e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e4      	bne.n	80080fe <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	623b      	str	r3, [r7, #32]
   return(result);
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3308      	adds	r3, #8
 8008154:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008158:	633a      	str	r2, [r7, #48]	; 0x30
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800815e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e3      	bne.n	8008134 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	60fb      	str	r3, [r7, #12]
   return(result);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f023 0310 	bic.w	r3, r3, #16
 8008194:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	69b9      	ldr	r1, [r7, #24]
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	617b      	str	r3, [r7, #20]
   return(result);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e4      	bne.n	8008180 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2202      	movs	r2, #2
 80081ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f866 	bl	8008294 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081c8:	e03f      	b.n	800824a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00e      	beq.n	80081f4 <HAL_UART_IRQHandler+0x570>
 80081d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d008      	beq.n	80081f4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80081ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 ff22 	bl	8009036 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081f2:	e02d      	b.n	8008250 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80081f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008208:	2b00      	cmp	r3, #0
 800820a:	d008      	beq.n	800821e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01c      	beq.n	800824e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
    }
    return;
 800821c:	e017      	b.n	800824e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d012      	beq.n	8008250 <HAL_UART_IRQHandler+0x5cc>
 800822a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00c      	beq.n	8008250 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fed3 	bl	8008fe2 <UART_EndTransmit_IT>
    return;
 800823c:	e008      	b.n	8008250 <HAL_UART_IRQHandler+0x5cc>
      return;
 800823e:	bf00      	nop
 8008240:	e006      	b.n	8008250 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008242:	bf00      	nop
 8008244:	e004      	b.n	8008250 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008246:	bf00      	nop
 8008248:	e002      	b.n	8008250 <HAL_UART_IRQHandler+0x5cc>
      return;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <HAL_UART_IRQHandler+0x5cc>
    return;
 800824e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008250:	37e8      	adds	r7, #232	; 0xe8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop

08008258 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082b0:	b08a      	sub	sp, #40	; 0x28
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	431a      	orrs	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b9e      	ldr	r3, [pc, #632]	; (8008554 <UART_SetConfig+0x2a8>)
 80082dc:	4013      	ands	r3, r2
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082e4:	430b      	orrs	r3, r1
 80082e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a93      	ldr	r2, [pc, #588]	; (8008558 <UART_SetConfig+0x2ac>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d004      	beq.n	8008318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008314:	4313      	orrs	r3, r2
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008328:	430a      	orrs	r2, r1
 800832a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a8a      	ldr	r2, [pc, #552]	; (800855c <UART_SetConfig+0x2b0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d126      	bne.n	8008384 <UART_SetConfig+0xd8>
 8008336:	4b8a      	ldr	r3, [pc, #552]	; (8008560 <UART_SetConfig+0x2b4>)
 8008338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	2b03      	cmp	r3, #3
 8008342:	d81b      	bhi.n	800837c <UART_SetConfig+0xd0>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <UART_SetConfig+0xa0>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	0800835d 	.word	0x0800835d
 8008350:	0800836d 	.word	0x0800836d
 8008354:	08008365 	.word	0x08008365
 8008358:	08008375 	.word	0x08008375
 800835c:	2301      	movs	r3, #1
 800835e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008362:	e0ab      	b.n	80084bc <UART_SetConfig+0x210>
 8008364:	2302      	movs	r3, #2
 8008366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800836a:	e0a7      	b.n	80084bc <UART_SetConfig+0x210>
 800836c:	2304      	movs	r3, #4
 800836e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008372:	e0a3      	b.n	80084bc <UART_SetConfig+0x210>
 8008374:	2308      	movs	r3, #8
 8008376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800837a:	e09f      	b.n	80084bc <UART_SetConfig+0x210>
 800837c:	2310      	movs	r3, #16
 800837e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008382:	e09b      	b.n	80084bc <UART_SetConfig+0x210>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a76      	ldr	r2, [pc, #472]	; (8008564 <UART_SetConfig+0x2b8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d138      	bne.n	8008400 <UART_SetConfig+0x154>
 800838e:	4b74      	ldr	r3, [pc, #464]	; (8008560 <UART_SetConfig+0x2b4>)
 8008390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008394:	f003 030c 	and.w	r3, r3, #12
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d82d      	bhi.n	80083f8 <UART_SetConfig+0x14c>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0xf8>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083d9 	.word	0x080083d9
 80083a8:	080083f9 	.word	0x080083f9
 80083ac:	080083f9 	.word	0x080083f9
 80083b0:	080083f9 	.word	0x080083f9
 80083b4:	080083e9 	.word	0x080083e9
 80083b8:	080083f9 	.word	0x080083f9
 80083bc:	080083f9 	.word	0x080083f9
 80083c0:	080083f9 	.word	0x080083f9
 80083c4:	080083e1 	.word	0x080083e1
 80083c8:	080083f9 	.word	0x080083f9
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083de:	e06d      	b.n	80084bc <UART_SetConfig+0x210>
 80083e0:	2302      	movs	r3, #2
 80083e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083e6:	e069      	b.n	80084bc <UART_SetConfig+0x210>
 80083e8:	2304      	movs	r3, #4
 80083ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ee:	e065      	b.n	80084bc <UART_SetConfig+0x210>
 80083f0:	2308      	movs	r3, #8
 80083f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083f6:	e061      	b.n	80084bc <UART_SetConfig+0x210>
 80083f8:	2310      	movs	r3, #16
 80083fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083fe:	e05d      	b.n	80084bc <UART_SetConfig+0x210>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a58      	ldr	r2, [pc, #352]	; (8008568 <UART_SetConfig+0x2bc>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d125      	bne.n	8008456 <UART_SetConfig+0x1aa>
 800840a:	4b55      	ldr	r3, [pc, #340]	; (8008560 <UART_SetConfig+0x2b4>)
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008410:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008414:	2b30      	cmp	r3, #48	; 0x30
 8008416:	d016      	beq.n	8008446 <UART_SetConfig+0x19a>
 8008418:	2b30      	cmp	r3, #48	; 0x30
 800841a:	d818      	bhi.n	800844e <UART_SetConfig+0x1a2>
 800841c:	2b20      	cmp	r3, #32
 800841e:	d00a      	beq.n	8008436 <UART_SetConfig+0x18a>
 8008420:	2b20      	cmp	r3, #32
 8008422:	d814      	bhi.n	800844e <UART_SetConfig+0x1a2>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <UART_SetConfig+0x182>
 8008428:	2b10      	cmp	r3, #16
 800842a:	d008      	beq.n	800843e <UART_SetConfig+0x192>
 800842c:	e00f      	b.n	800844e <UART_SetConfig+0x1a2>
 800842e:	2300      	movs	r3, #0
 8008430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008434:	e042      	b.n	80084bc <UART_SetConfig+0x210>
 8008436:	2302      	movs	r3, #2
 8008438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800843c:	e03e      	b.n	80084bc <UART_SetConfig+0x210>
 800843e:	2304      	movs	r3, #4
 8008440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008444:	e03a      	b.n	80084bc <UART_SetConfig+0x210>
 8008446:	2308      	movs	r3, #8
 8008448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800844c:	e036      	b.n	80084bc <UART_SetConfig+0x210>
 800844e:	2310      	movs	r3, #16
 8008450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008454:	e032      	b.n	80084bc <UART_SetConfig+0x210>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a3f      	ldr	r2, [pc, #252]	; (8008558 <UART_SetConfig+0x2ac>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d12a      	bne.n	80084b6 <UART_SetConfig+0x20a>
 8008460:	4b3f      	ldr	r3, [pc, #252]	; (8008560 <UART_SetConfig+0x2b4>)
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008466:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800846a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800846e:	d01a      	beq.n	80084a6 <UART_SetConfig+0x1fa>
 8008470:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008474:	d81b      	bhi.n	80084ae <UART_SetConfig+0x202>
 8008476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847a:	d00c      	beq.n	8008496 <UART_SetConfig+0x1ea>
 800847c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008480:	d815      	bhi.n	80084ae <UART_SetConfig+0x202>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <UART_SetConfig+0x1e2>
 8008486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848a:	d008      	beq.n	800849e <UART_SetConfig+0x1f2>
 800848c:	e00f      	b.n	80084ae <UART_SetConfig+0x202>
 800848e:	2300      	movs	r3, #0
 8008490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008494:	e012      	b.n	80084bc <UART_SetConfig+0x210>
 8008496:	2302      	movs	r3, #2
 8008498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800849c:	e00e      	b.n	80084bc <UART_SetConfig+0x210>
 800849e:	2304      	movs	r3, #4
 80084a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084a4:	e00a      	b.n	80084bc <UART_SetConfig+0x210>
 80084a6:	2308      	movs	r3, #8
 80084a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ac:	e006      	b.n	80084bc <UART_SetConfig+0x210>
 80084ae:	2310      	movs	r3, #16
 80084b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084b4:	e002      	b.n	80084bc <UART_SetConfig+0x210>
 80084b6:	2310      	movs	r3, #16
 80084b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a25      	ldr	r2, [pc, #148]	; (8008558 <UART_SetConfig+0x2ac>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	f040 808a 	bne.w	80085dc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d824      	bhi.n	800851a <UART_SetConfig+0x26e>
 80084d0:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <UART_SetConfig+0x22c>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	0800851b 	.word	0x0800851b
 80084e0:	08008505 	.word	0x08008505
 80084e4:	0800851b 	.word	0x0800851b
 80084e8:	0800850b 	.word	0x0800850b
 80084ec:	0800851b 	.word	0x0800851b
 80084f0:	0800851b 	.word	0x0800851b
 80084f4:	0800851b 	.word	0x0800851b
 80084f8:	08008513 	.word	0x08008513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7fe fac2 	bl	8006a84 <HAL_RCC_GetPCLK1Freq>
 8008500:	61f8      	str	r0, [r7, #28]
        break;
 8008502:	e010      	b.n	8008526 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008504:	4b19      	ldr	r3, [pc, #100]	; (800856c <UART_SetConfig+0x2c0>)
 8008506:	61fb      	str	r3, [r7, #28]
        break;
 8008508:	e00d      	b.n	8008526 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800850a:	f7fe fa23 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 800850e:	61f8      	str	r0, [r7, #28]
        break;
 8008510:	e009      	b.n	8008526 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008516:	61fb      	str	r3, [r7, #28]
        break;
 8008518:	e005      	b.n	8008526 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8109 	beq.w	8008740 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4413      	add	r3, r2
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	429a      	cmp	r2, r3
 800853c:	d305      	bcc.n	800854a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	429a      	cmp	r2, r3
 8008548:	d912      	bls.n	8008570 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008550:	e0f6      	b.n	8008740 <UART_SetConfig+0x494>
 8008552:	bf00      	nop
 8008554:	efff69f3 	.word	0xefff69f3
 8008558:	40008000 	.word	0x40008000
 800855c:	40013800 	.word	0x40013800
 8008560:	40021000 	.word	0x40021000
 8008564:	40004400 	.word	0x40004400
 8008568:	40004800 	.word	0x40004800
 800856c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	2200      	movs	r2, #0
 8008574:	461c      	mov	r4, r3
 8008576:	4615      	mov	r5, r2
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	022b      	lsls	r3, r5, #8
 8008582:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008586:	0222      	lsls	r2, r4, #8
 8008588:	68f9      	ldr	r1, [r7, #12]
 800858a:	6849      	ldr	r1, [r1, #4]
 800858c:	0849      	lsrs	r1, r1, #1
 800858e:	2000      	movs	r0, #0
 8008590:	4688      	mov	r8, r1
 8008592:	4681      	mov	r9, r0
 8008594:	eb12 0a08 	adds.w	sl, r2, r8
 8008598:	eb43 0b09 	adc.w	fp, r3, r9
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085aa:	4650      	mov	r0, sl
 80085ac:	4659      	mov	r1, fp
 80085ae:	f7f8 fb1b 	bl	8000be8 <__aeabi_uldivmod>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4613      	mov	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085c0:	d308      	bcc.n	80085d4 <UART_SetConfig+0x328>
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c8:	d204      	bcs.n	80085d4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	60da      	str	r2, [r3, #12]
 80085d2:	e0b5      	b.n	8008740 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085da:	e0b1      	b.n	8008740 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e4:	d15d      	bne.n	80086a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80085e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d827      	bhi.n	800863e <UART_SetConfig+0x392>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <UART_SetConfig+0x348>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008619 	.word	0x08008619
 80085f8:	08008621 	.word	0x08008621
 80085fc:	08008629 	.word	0x08008629
 8008600:	0800863f 	.word	0x0800863f
 8008604:	0800862f 	.word	0x0800862f
 8008608:	0800863f 	.word	0x0800863f
 800860c:	0800863f 	.word	0x0800863f
 8008610:	0800863f 	.word	0x0800863f
 8008614:	08008637 	.word	0x08008637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008618:	f7fe fa34 	bl	8006a84 <HAL_RCC_GetPCLK1Freq>
 800861c:	61f8      	str	r0, [r7, #28]
        break;
 800861e:	e014      	b.n	800864a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008620:	f7fe fa46 	bl	8006ab0 <HAL_RCC_GetPCLK2Freq>
 8008624:	61f8      	str	r0, [r7, #28]
        break;
 8008626:	e010      	b.n	800864a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008628:	4b4c      	ldr	r3, [pc, #304]	; (800875c <UART_SetConfig+0x4b0>)
 800862a:	61fb      	str	r3, [r7, #28]
        break;
 800862c:	e00d      	b.n	800864a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862e:	f7fe f991 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8008632:	61f8      	str	r0, [r7, #28]
        break;
 8008634:	e009      	b.n	800864a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800863a:	61fb      	str	r3, [r7, #28]
        break;
 800863c:	e005      	b.n	800864a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d077      	beq.n	8008740 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	005a      	lsls	r2, r3, #1
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	085b      	lsrs	r3, r3, #1
 800865a:	441a      	add	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b0f      	cmp	r3, #15
 800866a:	d916      	bls.n	800869a <UART_SetConfig+0x3ee>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008672:	d212      	bcs.n	800869a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	b29b      	uxth	r3, r3
 8008678:	f023 030f 	bic.w	r3, r3, #15
 800867c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	085b      	lsrs	r3, r3, #1
 8008682:	b29b      	uxth	r3, r3
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	b29a      	uxth	r2, r3
 800868a:	8afb      	ldrh	r3, [r7, #22]
 800868c:	4313      	orrs	r3, r2
 800868e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	8afa      	ldrh	r2, [r7, #22]
 8008696:	60da      	str	r2, [r3, #12]
 8008698:	e052      	b.n	8008740 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80086a0:	e04e      	b.n	8008740 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d827      	bhi.n	80086fa <UART_SetConfig+0x44e>
 80086aa:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <UART_SetConfig+0x404>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086d5 	.word	0x080086d5
 80086b4:	080086dd 	.word	0x080086dd
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	080086fb 	.word	0x080086fb
 80086c0:	080086eb 	.word	0x080086eb
 80086c4:	080086fb 	.word	0x080086fb
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	080086fb 	.word	0x080086fb
 80086d0:	080086f3 	.word	0x080086f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d4:	f7fe f9d6 	bl	8006a84 <HAL_RCC_GetPCLK1Freq>
 80086d8:	61f8      	str	r0, [r7, #28]
        break;
 80086da:	e014      	b.n	8008706 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086dc:	f7fe f9e8 	bl	8006ab0 <HAL_RCC_GetPCLK2Freq>
 80086e0:	61f8      	str	r0, [r7, #28]
        break;
 80086e2:	e010      	b.n	8008706 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e4:	4b1d      	ldr	r3, [pc, #116]	; (800875c <UART_SetConfig+0x4b0>)
 80086e6:	61fb      	str	r3, [r7, #28]
        break;
 80086e8:	e00d      	b.n	8008706 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ea:	f7fe f933 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 80086ee:	61f8      	str	r0, [r7, #28]
        break;
 80086f0:	e009      	b.n	8008706 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f6:	61fb      	str	r3, [r7, #28]
        break;
 80086f8:	e005      	b.n	8008706 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008704:	bf00      	nop
    }

    if (pclk != 0U)
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d019      	beq.n	8008740 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	085a      	lsrs	r2, r3, #1
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	441a      	add	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	fbb2 f3f3 	udiv	r3, r2, r3
 800871e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	2b0f      	cmp	r3, #15
 8008724:	d909      	bls.n	800873a <UART_SetConfig+0x48e>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872c:	d205      	bcs.n	800873a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60da      	str	r2, [r3, #12]
 8008738:	e002      	b.n	8008740 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800874c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008750:	4618      	mov	r0, r3
 8008752:	3728      	adds	r7, #40	; 0x28
 8008754:	46bd      	mov	sp, r7
 8008756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800875a:	bf00      	nop
 800875c:	00f42400 	.word	0x00f42400

08008760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01a      	beq.n	8008876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	430a      	orrs	r2, r1
 8008854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800885e:	d10a      	bne.n	8008876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	605a      	str	r2, [r3, #4]
  }
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b098      	sub	sp, #96	; 0x60
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088b4:	f7fb fbdc 	bl	8004070 <HAL_GetTick>
 80088b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d12e      	bne.n	8008926 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088d0:	2200      	movs	r2, #0
 80088d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f88c 	bl	80089f4 <UART_WaitOnFlagUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d021      	beq.n	8008926 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f6:	653b      	str	r3, [r7, #80]	; 0x50
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008900:	647b      	str	r3, [r7, #68]	; 0x44
 8008902:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800890e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e6      	bne.n	80088e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e062      	b.n	80089ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b04      	cmp	r3, #4
 8008932:	d149      	bne.n	80089c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800893c:	2200      	movs	r2, #0
 800893e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f856 	bl	80089f4 <UART_WaitOnFlagUntilTimeout>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d03c      	beq.n	80089c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	623b      	str	r3, [r7, #32]
   return(result);
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896c:	633b      	str	r3, [r7, #48]	; 0x30
 800896e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e6      	bne.n	800894e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0301 	bic.w	r3, r3, #1
 8008996:	64bb      	str	r3, [r7, #72]	; 0x48
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a0:	61fa      	str	r2, [r7, #28]
 80089a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	69b9      	ldr	r1, [r7, #24]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	617b      	str	r3, [r7, #20]
   return(result);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e5      	bne.n	8008980 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e011      	b.n	80089ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3758      	adds	r7, #88	; 0x58
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a04:	e049      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d045      	beq.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a0e:	f7fb fb2f 	bl	8004070 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d302      	bcc.n	8008a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e048      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d031      	beq.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d110      	bne.n	8008a66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2208      	movs	r2, #8
 8008a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f8ff 	bl	8008c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2208      	movs	r2, #8
 8008a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e029      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a74:	d111      	bne.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 f8e5 	bl	8008c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e00f      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69da      	ldr	r2, [r3, #28]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	bf0c      	ite	eq
 8008aaa:	2301      	moveq	r3, #1
 8008aac:	2300      	movne	r3, #0
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d0a6      	beq.n	8008a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b096      	sub	sp, #88	; 0x58
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	88fa      	ldrh	r2, [r7, #6]
 8008adc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2222      	movs	r2, #34	; 0x22
 8008aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d028      	beq.n	8008b4a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afc:	4a3e      	ldr	r2, [pc, #248]	; (8008bf8 <UART_Start_Receive_DMA+0x134>)
 8008afe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b04:	4a3d      	ldr	r2, [pc, #244]	; (8008bfc <UART_Start_Receive_DMA+0x138>)
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b0c:	4a3c      	ldr	r2, [pc, #240]	; (8008c00 <UART_Start_Receive_DMA+0x13c>)
 8008b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b14:	2200      	movs	r2, #0
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3324      	adds	r3, #36	; 0x24
 8008b22:	4619      	mov	r1, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b28:	461a      	mov	r2, r3
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	f7fc fe4a 	bl	80057c4 <HAL_DMA_Start_IT>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d009      	beq.n	8008b4a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2210      	movs	r2, #16
 8008b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e051      	b.n	8008bee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d018      	beq.n	8008b84 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b66:	657b      	str	r3, [r7, #84]	; 0x54
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b72:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e6      	bne.n	8008b52 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3308      	adds	r3, #8
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ba4:	637a      	str	r2, [r7, #52]	; 0x34
 8008ba6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e5      	bne.n	8008b84 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bd8:	623a      	str	r2, [r7, #32]
 8008bda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	69f9      	ldr	r1, [r7, #28]
 8008bde:	6a3a      	ldr	r2, [r7, #32]
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e5      	bne.n	8008bb8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3758      	adds	r7, #88	; 0x58
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	08008dcf 	.word	0x08008dcf
 8008bfc:	08008efb 	.word	0x08008efb
 8008c00:	08008f39 	.word	0x08008f39

08008c04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b089      	sub	sp, #36	; 0x24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	61bb      	str	r3, [r7, #24]
 8008c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	613b      	str	r3, [r7, #16]
   return(result);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e6      	bne.n	8008c0c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2220      	movs	r2, #32
 8008c42:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008c44:	bf00      	nop
 8008c46:	3724      	adds	r7, #36	; 0x24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b095      	sub	sp, #84	; 0x54
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c76:	643b      	str	r3, [r7, #64]	; 0x40
 8008c78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e6      	bne.n	8008c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	e853 3f00 	ldrex	r3, [r3]
 8008c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f023 0301 	bic.w	r3, r3, #1
 8008ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3308      	adds	r3, #8
 8008ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb2:	e841 2300 	strex	r3, r2, [r1]
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1e5      	bne.n	8008c8a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d118      	bne.n	8008cf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f023 0310 	bic.w	r3, r3, #16
 8008cda:	647b      	str	r3, [r7, #68]	; 0x44
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6979      	ldr	r1, [r7, #20]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e6      	bne.n	8008cc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008d0c:	bf00      	nop
 8008d0e:	3754      	adds	r7, #84	; 0x54
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b090      	sub	sp, #64	; 0x40
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d137      	bne.n	8008da4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3308      	adds	r3, #8
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d5c:	633a      	str	r2, [r7, #48]	; 0x30
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e5      	bne.n	8008d3c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d84:	637b      	str	r3, [r7, #52]	; 0x34
 8008d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	69b9      	ldr	r1, [r7, #24]
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e6      	bne.n	8008d70 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008da2:	e002      	b.n	8008daa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008da4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008da6:	f7f9 f9f5 	bl	8002194 <HAL_UART_TxCpltCallback>
}
 8008daa:	bf00      	nop
 8008dac:	3740      	adds	r7, #64	; 0x40
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff fa49 	bl	8008258 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b09c      	sub	sp, #112	; 0x70
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d171      	bne.n	8008ece <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dec:	2200      	movs	r2, #0
 8008dee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e36:	f023 0301 	bic.w	r3, r3, #1
 8008e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3308      	adds	r3, #8
 8008e42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e44:	647a      	str	r2, [r7, #68]	; 0x44
 8008e46:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e5      	bne.n	8008e24 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	623b      	str	r3, [r7, #32]
   return(result);
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8008e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e78:	633a      	str	r2, [r7, #48]	; 0x30
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e5      	bne.n	8008e58 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d118      	bne.n	8008ece <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f023 0310 	bic.w	r3, r3, #16
 8008eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	69b9      	ldr	r1, [r7, #24]
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e6      	bne.n	8008e9c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d107      	bne.n	8008eec <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ee6:	f7ff f9d5 	bl	8008294 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eea:	e002      	b.n	8008ef2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008eec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008eee:	f7f9 f963 	bl	80021b8 <HAL_UART_RxCpltCallback>
}
 8008ef2:	bf00      	nop
 8008ef4:	3770      	adds	r7, #112	; 0x70
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d109      	bne.n	8008f2a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	4619      	mov	r1, r3
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff f9b6 	bl	8008294 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f28:	e002      	b.n	8008f30 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7ff f99e 	bl	800826c <HAL_UART_RxHalfCpltCallback>
}
 8008f30:	bf00      	nop
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f4a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5e:	2b80      	cmp	r3, #128	; 0x80
 8008f60:	d109      	bne.n	8008f76 <UART_DMAError+0x3e>
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b21      	cmp	r3, #33	; 0x21
 8008f66:	d106      	bne.n	8008f76 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008f70:	6978      	ldr	r0, [r7, #20]
 8008f72:	f7ff fe47 	bl	8008c04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	d109      	bne.n	8008f98 <UART_DMAError+0x60>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b22      	cmp	r3, #34	; 0x22
 8008f88:	d106      	bne.n	8008f98 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008f92:	6978      	ldr	r0, [r7, #20]
 8008f94:	f7ff fe5c 	bl	8008c50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f9e:	f043 0210 	orr.w	r2, r3, #16
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fa8:	6978      	ldr	r0, [r7, #20]
 8008faa:	f7ff f969 	bl	8008280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fae:	bf00      	nop
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff f953 	bl	8008280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b088      	sub	sp, #32
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6979      	ldr	r1, [r7, #20]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	613b      	str	r3, [r7, #16]
   return(result);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e6      	bne.n	8008fea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7f9 f8b3 	bl	8002194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800902e:	bf00      	nop
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <arm_cfft_radix8by2_f32>:
 800904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009050:	ed2d 8b08 	vpush	{d8-d11}
 8009054:	4607      	mov	r7, r0
 8009056:	4608      	mov	r0, r1
 8009058:	f8b7 c000 	ldrh.w	ip, [r7]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8009062:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009066:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800906a:	f000 80b0 	beq.w	80091ce <arm_cfft_radix8by2_f32+0x182>
 800906e:	008c      	lsls	r4, r1, #2
 8009070:	3410      	adds	r4, #16
 8009072:	f100 0310 	add.w	r3, r0, #16
 8009076:	1906      	adds	r6, r0, r4
 8009078:	3210      	adds	r2, #16
 800907a:	4444      	add	r4, r8
 800907c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009080:	f108 0510 	add.w	r5, r8, #16
 8009084:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009088:	ed55 2a03 	vldr	s5, [r5, #-12]
 800908c:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009090:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009094:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009098:	ed54 5a01 	vldr	s11, [r4, #-4]
 800909c:	ed53 3a04 	vldr	s7, [r3, #-16]
 80090a0:	ed15 0a02 	vldr	s0, [r5, #-8]
 80090a4:	ed55 0a01 	vldr	s1, [r5, #-4]
 80090a8:	ed56 6a04 	vldr	s13, [r6, #-16]
 80090ac:	ed16 3a03 	vldr	s6, [r6, #-12]
 80090b0:	ed13 7a03 	vldr	s14, [r3, #-12]
 80090b4:	ed13 5a02 	vldr	s10, [r3, #-8]
 80090b8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80090bc:	ed16 1a02 	vldr	s2, [r6, #-8]
 80090c0:	ed56 1a01 	vldr	s3, [r6, #-4]
 80090c4:	ee73 ba82 	vadd.f32	s23, s7, s4
 80090c8:	ee37 ba22 	vadd.f32	s22, s14, s5
 80090cc:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80090d0:	ee33 9a04 	vadd.f32	s18, s6, s8
 80090d4:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80090d8:	ee75 aa00 	vadd.f32	s21, s10, s0
 80090dc:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80090e0:	ee71 8a06 	vadd.f32	s17, s2, s12
 80090e4:	ed43 ba04 	vstr	s23, [r3, #-16]
 80090e8:	ed03 ba03 	vstr	s22, [r3, #-12]
 80090ec:	ed43 aa02 	vstr	s21, [r3, #-8]
 80090f0:	ed03 aa01 	vstr	s20, [r3, #-4]
 80090f4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80090f8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80090fc:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009100:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009104:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009108:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800910c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009110:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009114:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009118:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800911c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009120:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009124:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009128:	ee64 4a83 	vmul.f32	s9, s9, s6
 800912c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009130:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009134:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009138:	ee24 4a03 	vmul.f32	s8, s8, s6
 800913c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009140:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009144:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009148:	ee32 3a08 	vadd.f32	s6, s4, s16
 800914c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009150:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009154:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009158:	ed44 6a03 	vstr	s13, [r4, #-12]
 800915c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009160:	ee76 6a41 	vsub.f32	s13, s12, s2
 8009164:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009168:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800916c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009170:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009174:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009178:	ee66 4a87 	vmul.f32	s9, s13, s14
 800917c:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009180:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009184:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009188:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800918c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009190:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009194:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009198:	ee74 5a23 	vadd.f32	s11, s8, s7
 800919c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80091a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80091a4:	3310      	adds	r3, #16
 80091a6:	4563      	cmp	r3, ip
 80091a8:	ed45 5a02 	vstr	s11, [r5, #-8]
 80091ac:	f106 0610 	add.w	r6, r6, #16
 80091b0:	ed45 7a01 	vstr	s15, [r5, #-4]
 80091b4:	f102 0210 	add.w	r2, r2, #16
 80091b8:	ed04 6a02 	vstr	s12, [r4, #-8]
 80091bc:	ed04 7a01 	vstr	s14, [r4, #-4]
 80091c0:	f105 0510 	add.w	r5, r5, #16
 80091c4:	f104 0410 	add.w	r4, r4, #16
 80091c8:	f47f af5c 	bne.w	8009084 <arm_cfft_radix8by2_f32+0x38>
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	b28c      	uxth	r4, r1
 80091d0:	4621      	mov	r1, r4
 80091d2:	2302      	movs	r3, #2
 80091d4:	f000 fc1c 	bl	8009a10 <arm_radix8_butterfly_f32>
 80091d8:	ecbd 8b08 	vpop	{d8-d11}
 80091dc:	4621      	mov	r1, r4
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	4640      	mov	r0, r8
 80091e2:	2302      	movs	r3, #2
 80091e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091e8:	f000 bc12 	b.w	8009a10 <arm_radix8_butterfly_f32>

080091ec <arm_cfft_radix8by4_f32>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	ed2d 8b0a 	vpush	{d8-d12}
 80091f4:	b08d      	sub	sp, #52	; 0x34
 80091f6:	460d      	mov	r5, r1
 80091f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80091fa:	8801      	ldrh	r1, [r0, #0]
 80091fc:	6842      	ldr	r2, [r0, #4]
 80091fe:	900a      	str	r0, [sp, #40]	; 0x28
 8009200:	0849      	lsrs	r1, r1, #1
 8009202:	008b      	lsls	r3, r1, #2
 8009204:	18ee      	adds	r6, r5, r3
 8009206:	18f0      	adds	r0, r6, r3
 8009208:	edd0 5a00 	vldr	s11, [r0]
 800920c:	edd5 7a00 	vldr	s15, [r5]
 8009210:	ed96 7a00 	vldr	s14, [r6]
 8009214:	edd0 3a01 	vldr	s7, [r0, #4]
 8009218:	ed96 4a01 	vldr	s8, [r6, #4]
 800921c:	ed95 5a01 	vldr	s10, [r5, #4]
 8009220:	9008      	str	r0, [sp, #32]
 8009222:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8009226:	18c7      	adds	r7, r0, r3
 8009228:	edd7 4a00 	vldr	s9, [r7]
 800922c:	ed97 3a01 	vldr	s6, [r7, #4]
 8009230:	9701      	str	r7, [sp, #4]
 8009232:	ee77 6a06 	vadd.f32	s13, s14, s12
 8009236:	462c      	mov	r4, r5
 8009238:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800923c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009240:	ee16 ca90 	vmov	ip, s13
 8009244:	f844 cb08 	str.w	ip, [r4], #8
 8009248:	ee75 6a23 	vadd.f32	s13, s10, s7
 800924c:	edd6 5a01 	vldr	s11, [r6, #4]
 8009250:	edd7 2a01 	vldr	s5, [r7, #4]
 8009254:	9404      	str	r4, [sp, #16]
 8009256:	ee35 5a63 	vsub.f32	s10, s10, s7
 800925a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800925e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009262:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009266:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800926a:	0849      	lsrs	r1, r1, #1
 800926c:	f102 0e08 	add.w	lr, r2, #8
 8009270:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009274:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009278:	9109      	str	r1, [sp, #36]	; 0x24
 800927a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800927e:	f1a1 0902 	sub.w	r9, r1, #2
 8009282:	f8cd e00c 	str.w	lr, [sp, #12]
 8009286:	4631      	mov	r1, r6
 8009288:	ee13 ea90 	vmov	lr, s7
 800928c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8009290:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8009294:	4604      	mov	r4, r0
 8009296:	edc5 5a01 	vstr	s11, [r5, #4]
 800929a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800929e:	f841 eb08 	str.w	lr, [r1], #8
 80092a2:	ee34 5a24 	vadd.f32	s10, s8, s9
 80092a6:	ee16 ea10 	vmov	lr, s12
 80092aa:	ed86 5a01 	vstr	s10, [r6, #4]
 80092ae:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80092b2:	f844 eb08 	str.w	lr, [r4], #8
 80092b6:	ee77 7a83 	vadd.f32	s15, s15, s6
 80092ba:	edc0 6a01 	vstr	s13, [r0, #4]
 80092be:	9405      	str	r4, [sp, #20]
 80092c0:	4604      	mov	r4, r0
 80092c2:	ee17 0a90 	vmov	r0, s15
 80092c6:	9106      	str	r1, [sp, #24]
 80092c8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80092cc:	f102 0110 	add.w	r1, r2, #16
 80092d0:	46bc      	mov	ip, r7
 80092d2:	9100      	str	r1, [sp, #0]
 80092d4:	f847 0b08 	str.w	r0, [r7], #8
 80092d8:	f102 0118 	add.w	r1, r2, #24
 80092dc:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80092e0:	9102      	str	r1, [sp, #8]
 80092e2:	ed8c 7a01 	vstr	s14, [ip, #4]
 80092e6:	9007      	str	r0, [sp, #28]
 80092e8:	f000 8134 	beq.w	8009554 <arm_cfft_radix8by4_f32+0x368>
 80092ec:	f102 0920 	add.w	r9, r2, #32
 80092f0:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80092f4:	9a01      	ldr	r2, [sp, #4]
 80092f6:	f8dd a000 	ldr.w	sl, [sp]
 80092fa:	3b0c      	subs	r3, #12
 80092fc:	4683      	mov	fp, r0
 80092fe:	4463      	add	r3, ip
 8009300:	f105 0e10 	add.w	lr, r5, #16
 8009304:	f1a4 010c 	sub.w	r1, r4, #12
 8009308:	f104 0510 	add.w	r5, r4, #16
 800930c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009310:	f1a2 040c 	sub.w	r4, r2, #12
 8009314:	f106 0010 	add.w	r0, r6, #16
 8009318:	3210      	adds	r2, #16
 800931a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800931e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8009322:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009326:	ed52 1a02 	vldr	s3, [r2, #-8]
 800932a:	ed55 6a01 	vldr	s13, [r5, #-4]
 800932e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8009332:	ed12 1a01 	vldr	s2, [r2, #-4]
 8009336:	ed10 8a01 	vldr	s16, [r0, #-4]
 800933a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800933e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8009342:	ee37 7a84 	vadd.f32	s14, s15, s8
 8009346:	ee30 0a66 	vsub.f32	s0, s0, s13
 800934a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800934e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009352:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8009356:	ed10 7a01 	vldr	s14, [r0, #-4]
 800935a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800935e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009362:	ee78 aa25 	vadd.f32	s21, s16, s11
 8009366:	ee37 7a26 	vadd.f32	s14, s14, s13
 800936a:	ee70 3a67 	vsub.f32	s7, s0, s15
 800936e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009372:	ed94 7a02 	vldr	s14, [r4, #8]
 8009376:	ed9c 2a02 	vldr	s4, [ip, #8]
 800937a:	ed91 ba02 	vldr	s22, [r1, #8]
 800937e:	edd3 9a02 	vldr	s19, [r3, #8]
 8009382:	edd4 2a01 	vldr	s5, [r4, #4]
 8009386:	ed9c 9a01 	vldr	s18, [ip, #4]
 800938a:	ed93 5a01 	vldr	s10, [r3, #4]
 800938e:	edd1 0a01 	vldr	s1, [r1, #4]
 8009392:	ee72 6a07 	vadd.f32	s13, s4, s14
 8009396:	ee32 2a47 	vsub.f32	s4, s4, s14
 800939a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800939e:	ee79 4a22 	vadd.f32	s9, s18, s5
 80093a2:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80093a6:	ee79 2a62 	vsub.f32	s5, s18, s5
 80093aa:	ed8c 7a02 	vstr	s14, [ip, #8]
 80093ae:	ed91 7a01 	vldr	s14, [r1, #4]
 80093b2:	edd3 8a01 	vldr	s17, [r3, #4]
 80093b6:	ee34 7a87 	vadd.f32	s14, s9, s14
 80093ba:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80093be:	ee37 7a28 	vadd.f32	s14, s14, s17
 80093c2:	ee32 9a60 	vsub.f32	s18, s4, s1
 80093c6:	ed8c 7a01 	vstr	s14, [ip, #4]
 80093ca:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80093ce:	ed1a aa02 	vldr	s20, [sl, #-8]
 80093d2:	ee73 8a22 	vadd.f32	s17, s6, s5
 80093d6:	ee39 9a05 	vadd.f32	s18, s18, s10
 80093da:	ee7a aac1 	vsub.f32	s21, s21, s2
 80093de:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80093e2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80093e6:	ee69 ba07 	vmul.f32	s23, s18, s14
 80093ea:	ee6a aa87 	vmul.f32	s21, s21, s14
 80093ee:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80093f2:	ee63 ca87 	vmul.f32	s25, s7, s14
 80093f6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80093fa:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80093fe:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009402:	ee73 3aea 	vsub.f32	s7, s7, s21
 8009406:	ee78 8a89 	vadd.f32	s17, s17, s18
 800940a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800940e:	ee3b aaca 	vsub.f32	s20, s23, s20
 8009412:	ee34 4a67 	vsub.f32	s8, s8, s15
 8009416:	ee76 6acb 	vsub.f32	s13, s13, s22
 800941a:	ee36 6a48 	vsub.f32	s12, s12, s16
 800941e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8009422:	ed00 7a02 	vstr	s14, [r0, #-8]
 8009426:	ed40 3a01 	vstr	s7, [r0, #-4]
 800942a:	edc1 8a01 	vstr	s17, [r1, #4]
 800942e:	ed81 aa02 	vstr	s20, [r1, #8]
 8009432:	ed59 3a04 	vldr	s7, [r9, #-16]
 8009436:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800943a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800943e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8009442:	ee34 4a61 	vsub.f32	s8, s8, s3
 8009446:	ee36 6a41 	vsub.f32	s12, s12, s2
 800944a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800944e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009452:	ee24 9a23 	vmul.f32	s18, s8, s7
 8009456:	ee26 6a23 	vmul.f32	s12, s12, s7
 800945a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800945e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009462:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009466:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800946a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800946e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009472:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8009476:	ee79 3a29 	vadd.f32	s7, s18, s19
 800947a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800947e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8009482:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009486:	ed45 3a02 	vstr	s7, [r5, #-8]
 800948a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800948e:	ed84 7a01 	vstr	s14, [r4, #4]
 8009492:	ed84 4a02 	vstr	s8, [r4, #8]
 8009496:	ee35 6a81 	vadd.f32	s12, s11, s2
 800949a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800949e:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 80094a2:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 80094a6:	ee33 3a62 	vsub.f32	s6, s6, s5
 80094aa:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80094ae:	ee67 2a26 	vmul.f32	s5, s14, s13
 80094b2:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80094b6:	ee26 5a25 	vmul.f32	s10, s12, s11
 80094ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80094be:	ee26 6a26 	vmul.f32	s12, s12, s13
 80094c2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80094c6:	ee63 6a26 	vmul.f32	s13, s6, s13
 80094ca:	ee23 3a25 	vmul.f32	s6, s6, s11
 80094ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80094d2:	ee75 5a24 	vadd.f32	s11, s10, s9
 80094d6:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80094da:	ee36 7a87 	vadd.f32	s14, s13, s14
 80094de:	f1bb 0b01 	subs.w	fp, fp, #1
 80094e2:	ed42 5a02 	vstr	s11, [r2, #-8]
 80094e6:	ed42 7a01 	vstr	s15, [r2, #-4]
 80094ea:	f10e 0e08 	add.w	lr, lr, #8
 80094ee:	ed83 3a02 	vstr	s6, [r3, #8]
 80094f2:	ed83 7a01 	vstr	s14, [r3, #4]
 80094f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80094fa:	f10a 0a08 	add.w	sl, sl, #8
 80094fe:	f100 0008 	add.w	r0, r0, #8
 8009502:	f1a1 0108 	sub.w	r1, r1, #8
 8009506:	f109 0910 	add.w	r9, r9, #16
 800950a:	f105 0508 	add.w	r5, r5, #8
 800950e:	f1a4 0408 	sub.w	r4, r4, #8
 8009512:	f108 0818 	add.w	r8, r8, #24
 8009516:	f102 0208 	add.w	r2, r2, #8
 800951a:	f1a3 0308 	sub.w	r3, r3, #8
 800951e:	f47f aefc 	bne.w	800931a <arm_cfft_radix8by4_f32+0x12e>
 8009522:	9907      	ldr	r1, [sp, #28]
 8009524:	9800      	ldr	r0, [sp, #0]
 8009526:	00cb      	lsls	r3, r1, #3
 8009528:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800952c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009530:	9100      	str	r1, [sp, #0]
 8009532:	9904      	ldr	r1, [sp, #16]
 8009534:	4419      	add	r1, r3
 8009536:	9104      	str	r1, [sp, #16]
 8009538:	9903      	ldr	r1, [sp, #12]
 800953a:	4419      	add	r1, r3
 800953c:	9103      	str	r1, [sp, #12]
 800953e:	9906      	ldr	r1, [sp, #24]
 8009540:	4419      	add	r1, r3
 8009542:	9106      	str	r1, [sp, #24]
 8009544:	9905      	ldr	r1, [sp, #20]
 8009546:	441f      	add	r7, r3
 8009548:	4419      	add	r1, r3
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	9105      	str	r1, [sp, #20]
 800954e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009552:	9302      	str	r3, [sp, #8]
 8009554:	9904      	ldr	r1, [sp, #16]
 8009556:	9805      	ldr	r0, [sp, #20]
 8009558:	ed91 4a00 	vldr	s8, [r1]
 800955c:	edd0 6a00 	vldr	s13, [r0]
 8009560:	9b06      	ldr	r3, [sp, #24]
 8009562:	ed97 3a00 	vldr	s6, [r7]
 8009566:	edd3 7a00 	vldr	s15, [r3]
 800956a:	edd0 4a01 	vldr	s9, [r0, #4]
 800956e:	edd1 3a01 	vldr	s7, [r1, #4]
 8009572:	ed97 2a01 	vldr	s4, [r7, #4]
 8009576:	ed93 7a01 	vldr	s14, [r3, #4]
 800957a:	9a03      	ldr	r2, [sp, #12]
 800957c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8009580:	ee34 6a26 	vadd.f32	s12, s8, s13
 8009584:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8009588:	ee37 5a86 	vadd.f32	s10, s15, s12
 800958c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8009590:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009594:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009598:	ed81 5a00 	vstr	s10, [r1]
 800959c:	ed93 5a01 	vldr	s10, [r3, #4]
 80095a0:	edd7 4a01 	vldr	s9, [r7, #4]
 80095a4:	ee35 5a85 	vadd.f32	s10, s11, s10
 80095a8:	ee37 4a26 	vadd.f32	s8, s14, s13
 80095ac:	ee35 5a24 	vadd.f32	s10, s10, s9
 80095b0:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80095b4:	ed81 5a01 	vstr	s10, [r1, #4]
 80095b8:	edd2 1a00 	vldr	s3, [r2]
 80095bc:	edd2 2a01 	vldr	s5, [r2, #4]
 80095c0:	ee34 5a83 	vadd.f32	s10, s9, s6
 80095c4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80095c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80095cc:	ee64 4a21 	vmul.f32	s9, s8, s3
 80095d0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80095d4:	ee65 2a22 	vmul.f32	s5, s10, s5
 80095d8:	ee25 5a21 	vmul.f32	s10, s10, s3
 80095dc:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80095e0:	ee35 5a44 	vsub.f32	s10, s10, s8
 80095e4:	edc3 2a00 	vstr	s5, [r3]
 80095e8:	ed83 5a01 	vstr	s10, [r3, #4]
 80095ec:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80095f0:	9b00      	ldr	r3, [sp, #0]
 80095f2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80095f6:	ed93 4a01 	vldr	s8, [r3, #4]
 80095fa:	ed93 5a00 	vldr	s10, [r3]
 80095fe:	9b02      	ldr	r3, [sp, #8]
 8009600:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009604:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009608:	ee25 5a85 	vmul.f32	s10, s11, s10
 800960c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009610:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009614:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009618:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800961c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009620:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009624:	ed80 6a01 	vstr	s12, [r0, #4]
 8009628:	edc0 5a00 	vstr	s11, [r0]
 800962c:	edd3 5a01 	vldr	s11, [r3, #4]
 8009630:	edd3 6a00 	vldr	s13, [r3]
 8009634:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009638:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800963c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009640:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009644:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009648:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800964c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009650:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009654:	ed87 7a01 	vstr	s14, [r7, #4]
 8009658:	edc7 7a00 	vstr	s15, [r7]
 800965c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8009660:	4621      	mov	r1, r4
 8009662:	686a      	ldr	r2, [r5, #4]
 8009664:	2304      	movs	r3, #4
 8009666:	f000 f9d3 	bl	8009a10 <arm_radix8_butterfly_f32>
 800966a:	4630      	mov	r0, r6
 800966c:	4621      	mov	r1, r4
 800966e:	686a      	ldr	r2, [r5, #4]
 8009670:	2304      	movs	r3, #4
 8009672:	f000 f9cd 	bl	8009a10 <arm_radix8_butterfly_f32>
 8009676:	9808      	ldr	r0, [sp, #32]
 8009678:	686a      	ldr	r2, [r5, #4]
 800967a:	4621      	mov	r1, r4
 800967c:	2304      	movs	r3, #4
 800967e:	f000 f9c7 	bl	8009a10 <arm_radix8_butterfly_f32>
 8009682:	686a      	ldr	r2, [r5, #4]
 8009684:	9801      	ldr	r0, [sp, #4]
 8009686:	4621      	mov	r1, r4
 8009688:	2304      	movs	r3, #4
 800968a:	b00d      	add	sp, #52	; 0x34
 800968c:	ecbd 8b0a 	vpop	{d8-d12}
 8009690:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	f000 b9bc 	b.w	8009a10 <arm_radix8_butterfly_f32>

08009698 <arm_cfft_f32>:
 8009698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969c:	2a01      	cmp	r2, #1
 800969e:	4606      	mov	r6, r0
 80096a0:	4617      	mov	r7, r2
 80096a2:	460c      	mov	r4, r1
 80096a4:	4698      	mov	r8, r3
 80096a6:	8805      	ldrh	r5, [r0, #0]
 80096a8:	d056      	beq.n	8009758 <arm_cfft_f32+0xc0>
 80096aa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80096ae:	d063      	beq.n	8009778 <arm_cfft_f32+0xe0>
 80096b0:	d916      	bls.n	80096e0 <arm_cfft_f32+0x48>
 80096b2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80096b6:	d01a      	beq.n	80096ee <arm_cfft_f32+0x56>
 80096b8:	d947      	bls.n	800974a <arm_cfft_f32+0xb2>
 80096ba:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80096be:	d05b      	beq.n	8009778 <arm_cfft_f32+0xe0>
 80096c0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80096c4:	d105      	bne.n	80096d2 <arm_cfft_f32+0x3a>
 80096c6:	2301      	movs	r3, #1
 80096c8:	6872      	ldr	r2, [r6, #4]
 80096ca:	4629      	mov	r1, r5
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 f99f 	bl	8009a10 <arm_radix8_butterfly_f32>
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	d111      	bne.n	80096fc <arm_cfft_f32+0x64>
 80096d8:	2f01      	cmp	r7, #1
 80096da:	d016      	beq.n	800970a <arm_cfft_f32+0x72>
 80096dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e0:	2d20      	cmp	r5, #32
 80096e2:	d049      	beq.n	8009778 <arm_cfft_f32+0xe0>
 80096e4:	d935      	bls.n	8009752 <arm_cfft_f32+0xba>
 80096e6:	2d40      	cmp	r5, #64	; 0x40
 80096e8:	d0ed      	beq.n	80096c6 <arm_cfft_f32+0x2e>
 80096ea:	2d80      	cmp	r5, #128	; 0x80
 80096ec:	d1f1      	bne.n	80096d2 <arm_cfft_f32+0x3a>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7ff fcab 	bl	800904c <arm_cfft_radix8by2_f32>
 80096f6:	f1b8 0f00 	cmp.w	r8, #0
 80096fa:	d0ed      	beq.n	80096d8 <arm_cfft_f32+0x40>
 80096fc:	68b2      	ldr	r2, [r6, #8]
 80096fe:	89b1      	ldrh	r1, [r6, #12]
 8009700:	4620      	mov	r0, r4
 8009702:	f000 f841 	bl	8009788 <arm_bitreversal_32>
 8009706:	2f01      	cmp	r7, #1
 8009708:	d1e8      	bne.n	80096dc <arm_cfft_f32+0x44>
 800970a:	ee07 5a90 	vmov	s15, r5
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009716:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800971a:	2d00      	cmp	r5, #0
 800971c:	d0de      	beq.n	80096dc <arm_cfft_f32+0x44>
 800971e:	f104 0108 	add.w	r1, r4, #8
 8009722:	2300      	movs	r3, #0
 8009724:	3301      	adds	r3, #1
 8009726:	429d      	cmp	r5, r3
 8009728:	f101 0108 	add.w	r1, r1, #8
 800972c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009730:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009734:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009738:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800973c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009740:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009744:	d1ee      	bne.n	8009724 <arm_cfft_f32+0x8c>
 8009746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800974e:	d0ba      	beq.n	80096c6 <arm_cfft_f32+0x2e>
 8009750:	e7bf      	b.n	80096d2 <arm_cfft_f32+0x3a>
 8009752:	2d10      	cmp	r5, #16
 8009754:	d0cb      	beq.n	80096ee <arm_cfft_f32+0x56>
 8009756:	e7bc      	b.n	80096d2 <arm_cfft_f32+0x3a>
 8009758:	b19d      	cbz	r5, 8009782 <arm_cfft_f32+0xea>
 800975a:	f101 030c 	add.w	r3, r1, #12
 800975e:	2200      	movs	r2, #0
 8009760:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009764:	3201      	adds	r2, #1
 8009766:	eef1 7a67 	vneg.f32	s15, s15
 800976a:	4295      	cmp	r5, r2
 800976c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009770:	f103 0308 	add.w	r3, r3, #8
 8009774:	d1f4      	bne.n	8009760 <arm_cfft_f32+0xc8>
 8009776:	e798      	b.n	80096aa <arm_cfft_f32+0x12>
 8009778:	4621      	mov	r1, r4
 800977a:	4630      	mov	r0, r6
 800977c:	f7ff fd36 	bl	80091ec <arm_cfft_radix8by4_f32>
 8009780:	e7a7      	b.n	80096d2 <arm_cfft_f32+0x3a>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0aa      	beq.n	80096dc <arm_cfft_f32+0x44>
 8009786:	e7b9      	b.n	80096fc <arm_cfft_f32+0x64>

08009788 <arm_bitreversal_32>:
 8009788:	b1e9      	cbz	r1, 80097c6 <arm_bitreversal_32+0x3e>
 800978a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978c:	2500      	movs	r5, #0
 800978e:	f102 0e02 	add.w	lr, r2, #2
 8009792:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009796:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800979a:	08a4      	lsrs	r4, r4, #2
 800979c:	089b      	lsrs	r3, r3, #2
 800979e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80097a2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80097a6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80097aa:	00a6      	lsls	r6, r4, #2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80097b2:	3304      	adds	r3, #4
 80097b4:	1d34      	adds	r4, r6, #4
 80097b6:	3502      	adds	r5, #2
 80097b8:	58c6      	ldr	r6, [r0, r3]
 80097ba:	5907      	ldr	r7, [r0, r4]
 80097bc:	50c7      	str	r7, [r0, r3]
 80097be:	428d      	cmp	r5, r1
 80097c0:	5106      	str	r6, [r0, r4]
 80097c2:	d3e6      	bcc.n	8009792 <arm_bitreversal_32+0xa>
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c6:	4770      	bx	lr

080097c8 <arm_cmplx_mag_f32>:
 80097c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097cc:	ed2d 8b02 	vpush	{d8}
 80097d0:	0897      	lsrs	r7, r2, #2
 80097d2:	b084      	sub	sp, #16
 80097d4:	d077      	beq.n	80098c6 <arm_cmplx_mag_f32+0xfe>
 80097d6:	f04f 0800 	mov.w	r8, #0
 80097da:	f100 0420 	add.w	r4, r0, #32
 80097de:	f101 0510 	add.w	r5, r1, #16
 80097e2:	463e      	mov	r6, r7
 80097e4:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80097e8:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80097ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80097f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80097f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80097f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80097fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009800:	f2c0 80c5 	blt.w	800998e <arm_cmplx_mag_f32+0x1c6>
 8009804:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009810:	f100 80cb 	bmi.w	80099aa <arm_cmplx_mag_f32+0x1e2>
 8009814:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009818:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800981c:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8009820:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009824:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009828:	ee30 0a27 	vadd.f32	s0, s0, s15
 800982c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009834:	f2c0 80a8 	blt.w	8009988 <arm_cmplx_mag_f32+0x1c0>
 8009838:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800983c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009840:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009844:	f100 80a8 	bmi.w	8009998 <arm_cmplx_mag_f32+0x1d0>
 8009848:	ed05 8a03 	vstr	s16, [r5, #-12]
 800984c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009850:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009854:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009858:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800985c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009860:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009868:	f2c0 808b 	blt.w	8009982 <arm_cmplx_mag_f32+0x1ba>
 800986c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009874:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009878:	f100 80a9 	bmi.w	80099ce <arm_cmplx_mag_f32+0x206>
 800987c:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009880:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009884:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009888:	ee20 0a00 	vmul.f32	s0, s0, s0
 800988c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009890:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009894:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989c:	db6e      	blt.n	800997c <arm_cmplx_mag_f32+0x1b4>
 800989e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80098a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80098aa:	f100 8087 	bmi.w	80099bc <arm_cmplx_mag_f32+0x1f4>
 80098ae:	ed05 8a01 	vstr	s16, [r5, #-4]
 80098b2:	3e01      	subs	r6, #1
 80098b4:	f104 0420 	add.w	r4, r4, #32
 80098b8:	f105 0510 	add.w	r5, r5, #16
 80098bc:	d192      	bne.n	80097e4 <arm_cmplx_mag_f32+0x1c>
 80098be:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80098c2:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80098c6:	f012 0203 	ands.w	r2, r2, #3
 80098ca:	d052      	beq.n	8009972 <arm_cmplx_mag_f32+0x1aa>
 80098cc:	ed90 0a00 	vldr	s0, [r0]
 80098d0:	edd0 7a01 	vldr	s15, [r0, #4]
 80098d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80098d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098dc:	2300      	movs	r3, #0
 80098de:	ee37 0a80 	vadd.f32	s0, s15, s0
 80098e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	bfb8      	it	lt
 80098ec:	600b      	strlt	r3, [r1, #0]
 80098ee:	db08      	blt.n	8009902 <arm_cmplx_mag_f32+0x13a>
 80098f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80098f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80098fc:	d479      	bmi.n	80099f2 <arm_cmplx_mag_f32+0x22a>
 80098fe:	ed81 8a00 	vstr	s16, [r1]
 8009902:	3a01      	subs	r2, #1
 8009904:	d035      	beq.n	8009972 <arm_cmplx_mag_f32+0x1aa>
 8009906:	ed90 0a02 	vldr	s0, [r0, #8]
 800990a:	edd0 7a03 	vldr	s15, [r0, #12]
 800990e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009912:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009916:	2300      	movs	r3, #0
 8009918:	ee37 0a80 	vadd.f32	s0, s15, s0
 800991c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009924:	bfb8      	it	lt
 8009926:	604b      	strlt	r3, [r1, #4]
 8009928:	db08      	blt.n	800993c <arm_cmplx_mag_f32+0x174>
 800992a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800992e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009932:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009936:	d453      	bmi.n	80099e0 <arm_cmplx_mag_f32+0x218>
 8009938:	ed81 8a01 	vstr	s16, [r1, #4]
 800993c:	2a01      	cmp	r2, #1
 800993e:	d018      	beq.n	8009972 <arm_cmplx_mag_f32+0x1aa>
 8009940:	ed90 0a04 	vldr	s0, [r0, #16]
 8009944:	edd0 7a05 	vldr	s15, [r0, #20]
 8009948:	ee20 0a00 	vmul.f32	s0, s0, s0
 800994c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009950:	2300      	movs	r3, #0
 8009952:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009956:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800995a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995e:	db19      	blt.n	8009994 <arm_cmplx_mag_f32+0x1cc>
 8009960:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009968:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800996c:	d44a      	bmi.n	8009a04 <arm_cmplx_mag_f32+0x23c>
 800996e:	ed81 8a02 	vstr	s16, [r1, #8]
 8009972:	b004      	add	sp, #16
 8009974:	ecbd 8b02 	vpop	{d8}
 8009978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800997c:	f845 8c04 	str.w	r8, [r5, #-4]
 8009980:	e797      	b.n	80098b2 <arm_cmplx_mag_f32+0xea>
 8009982:	f845 8c08 	str.w	r8, [r5, #-8]
 8009986:	e77b      	b.n	8009880 <arm_cmplx_mag_f32+0xb8>
 8009988:	f845 8c0c 	str.w	r8, [r5, #-12]
 800998c:	e75e      	b.n	800984c <arm_cmplx_mag_f32+0x84>
 800998e:	f845 8c10 	str.w	r8, [r5, #-16]
 8009992:	e741      	b.n	8009818 <arm_cmplx_mag_f32+0x50>
 8009994:	608b      	str	r3, [r1, #8]
 8009996:	e7ec      	b.n	8009972 <arm_cmplx_mag_f32+0x1aa>
 8009998:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800999c:	9001      	str	r0, [sp, #4]
 800999e:	f000 fbab 	bl	800a0f8 <sqrtf>
 80099a2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80099a6:	9801      	ldr	r0, [sp, #4]
 80099a8:	e74e      	b.n	8009848 <arm_cmplx_mag_f32+0x80>
 80099aa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80099ae:	9001      	str	r0, [sp, #4]
 80099b0:	f000 fba2 	bl	800a0f8 <sqrtf>
 80099b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80099b8:	9801      	ldr	r0, [sp, #4]
 80099ba:	e72b      	b.n	8009814 <arm_cmplx_mag_f32+0x4c>
 80099bc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80099c0:	9001      	str	r0, [sp, #4]
 80099c2:	f000 fb99 	bl	800a0f8 <sqrtf>
 80099c6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80099ca:	9801      	ldr	r0, [sp, #4]
 80099cc:	e76f      	b.n	80098ae <arm_cmplx_mag_f32+0xe6>
 80099ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80099d2:	9001      	str	r0, [sp, #4]
 80099d4:	f000 fb90 	bl	800a0f8 <sqrtf>
 80099d8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80099dc:	9801      	ldr	r0, [sp, #4]
 80099de:	e74d      	b.n	800987c <arm_cmplx_mag_f32+0xb4>
 80099e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e4:	9201      	str	r2, [sp, #4]
 80099e6:	f000 fb87 	bl	800a0f8 <sqrtf>
 80099ea:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80099ee:	9903      	ldr	r1, [sp, #12]
 80099f0:	e7a2      	b.n	8009938 <arm_cmplx_mag_f32+0x170>
 80099f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f6:	9201      	str	r2, [sp, #4]
 80099f8:	f000 fb7e 	bl	800a0f8 <sqrtf>
 80099fc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009a00:	9903      	ldr	r1, [sp, #12]
 8009a02:	e77c      	b.n	80098fe <arm_cmplx_mag_f32+0x136>
 8009a04:	9101      	str	r1, [sp, #4]
 8009a06:	f000 fb77 	bl	800a0f8 <sqrtf>
 8009a0a:	9901      	ldr	r1, [sp, #4]
 8009a0c:	e7af      	b.n	800996e <arm_cmplx_mag_f32+0x1a6>
 8009a0e:	bf00      	nop

08009a10 <arm_radix8_butterfly_f32>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	ed2d 8b10 	vpush	{d8-d15}
 8009a18:	b095      	sub	sp, #84	; 0x54
 8009a1a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009a1e:	4603      	mov	r3, r0
 8009a20:	3304      	adds	r3, #4
 8009a22:	ed9f bab9 	vldr	s22, [pc, #740]	; 8009d08 <arm_radix8_butterfly_f32+0x2f8>
 8009a26:	9012      	str	r0, [sp, #72]	; 0x48
 8009a28:	468b      	mov	fp, r1
 8009a2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a2c:	4689      	mov	r9, r1
 8009a2e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a34:	960f      	str	r6, [sp, #60]	; 0x3c
 8009a36:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8009a3a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8009a3e:	eb03 0508 	add.w	r5, r3, r8
 8009a42:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8009a46:	eb05 040e 	add.w	r4, r5, lr
 8009a4a:	0137      	lsls	r7, r6, #4
 8009a4c:	eba6 030a 	sub.w	r3, r6, sl
 8009a50:	eb04 000e 	add.w	r0, r4, lr
 8009a54:	44b2      	add	sl, r6
 8009a56:	1d3a      	adds	r2, r7, #4
 8009a58:	9702      	str	r7, [sp, #8]
 8009a5a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009a5e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8009a62:	ebae 0c06 	sub.w	ip, lr, r6
 8009a66:	9703      	str	r7, [sp, #12]
 8009a68:	eb03 0708 	add.w	r7, r3, r8
 8009a6c:	9701      	str	r7, [sp, #4]
 8009a6e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8009a72:	9706      	str	r7, [sp, #24]
 8009a74:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009a76:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8009a7a:	f10e 0104 	add.w	r1, lr, #4
 8009a7e:	4439      	add	r1, r7
 8009a80:	443a      	add	r2, r7
 8009a82:	0137      	lsls	r7, r6, #4
 8009a84:	00f6      	lsls	r6, r6, #3
 8009a86:	9704      	str	r7, [sp, #16]
 8009a88:	9605      	str	r6, [sp, #20]
 8009a8a:	9f01      	ldr	r7, [sp, #4]
 8009a8c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009a8e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8009a92:	f04f 0c00 	mov.w	ip, #0
 8009a96:	edd4 6a00 	vldr	s13, [r4]
 8009a9a:	edd7 1a00 	vldr	s3, [r7]
 8009a9e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8009aa2:	edd5 5a00 	vldr	s11, [r5]
 8009aa6:	ed52 9a01 	vldr	s19, [r2, #-4]
 8009aaa:	ed90 6a00 	vldr	s12, [r0]
 8009aae:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009ab2:	ed93 3a00 	vldr	s6, [r3]
 8009ab6:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009aba:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009abe:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009ac2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009ac6:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009aca:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009ace:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ad2:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009ad6:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009ada:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009ade:	ed85 4a00 	vstr	s8, [r5]
 8009ae2:	edd1 6a00 	vldr	s13, [r1]
 8009ae6:	ed94 9a01 	vldr	s18, [r4, #4]
 8009aea:	edd3 2a01 	vldr	s5, [r3, #4]
 8009aee:	edd7 8a01 	vldr	s17, [r7, #4]
 8009af2:	edd6 0a00 	vldr	s1, [r6]
 8009af6:	edd5 3a01 	vldr	s7, [r5, #4]
 8009afa:	ed90 8a01 	vldr	s16, [r0, #4]
 8009afe:	ed92 7a00 	vldr	s14, [r2]
 8009b02:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009b06:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009b0a:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009b0e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009b12:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009b16:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009b1a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009b1e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009b22:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009b26:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009b2a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009b2e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009b32:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009b36:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009b3a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009b3e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009b42:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009b46:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8009b4a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009b4e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009b52:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009b56:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8009b5a:	ee33 2a20 	vadd.f32	s4, s6, s1
 8009b5e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009b62:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009b66:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8009b6a:	ee77 0a01 	vadd.f32	s1, s14, s2
 8009b6e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009b72:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009b76:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009b7a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009b7e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009b82:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009b86:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009b8a:	ee33 1a45 	vsub.f32	s2, s6, s10
 8009b8e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009b92:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009b96:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009b9a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8009b9e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009ba2:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009ba6:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009baa:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8009bae:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009bb2:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009bb6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009bba:	44dc      	add	ip, fp
 8009bbc:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009bc0:	45e1      	cmp	r9, ip
 8009bc2:	ed86 8a00 	vstr	s16, [r6]
 8009bc6:	ed85 2a01 	vstr	s4, [r5, #4]
 8009bca:	4456      	add	r6, sl
 8009bcc:	ed02 0a01 	vstr	s0, [r2, #-4]
 8009bd0:	4455      	add	r5, sl
 8009bd2:	edc0 6a00 	vstr	s13, [r0]
 8009bd6:	ed82 1a00 	vstr	s2, [r2]
 8009bda:	ed80 5a01 	vstr	s10, [r0, #4]
 8009bde:	4452      	add	r2, sl
 8009be0:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009be4:	4450      	add	r0, sl
 8009be6:	edc7 2a00 	vstr	s5, [r7]
 8009bea:	edc4 4a00 	vstr	s9, [r4]
 8009bee:	ed83 7a00 	vstr	s14, [r3]
 8009bf2:	edc1 5a00 	vstr	s11, [r1]
 8009bf6:	edc7 3a01 	vstr	s7, [r7, #4]
 8009bfa:	4451      	add	r1, sl
 8009bfc:	ed84 6a01 	vstr	s12, [r4, #4]
 8009c00:	4457      	add	r7, sl
 8009c02:	edc3 7a01 	vstr	s15, [r3, #4]
 8009c06:	4454      	add	r4, sl
 8009c08:	4453      	add	r3, sl
 8009c0a:	f63f af44 	bhi.w	8009a96 <arm_radix8_butterfly_f32+0x86>
 8009c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	f240 81b7 	bls.w	8009f84 <arm_radix8_butterfly_f32+0x574>
 8009c16:	9b06      	ldr	r3, [sp, #24]
 8009c18:	9903      	ldr	r1, [sp, #12]
 8009c1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c1c:	9e05      	ldr	r6, [sp, #20]
 8009c1e:	9a04      	ldr	r2, [sp, #16]
 8009c20:	f103 0c08 	add.w	ip, r3, #8
 8009c24:	9b02      	ldr	r3, [sp, #8]
 8009c26:	3108      	adds	r1, #8
 8009c28:	f108 0808 	add.w	r8, r8, #8
 8009c2c:	1841      	adds	r1, r0, r1
 8009c2e:	3608      	adds	r6, #8
 8009c30:	330c      	adds	r3, #12
 8009c32:	4604      	mov	r4, r0
 8009c34:	4444      	add	r4, r8
 8009c36:	18c3      	adds	r3, r0, r3
 8009c38:	9109      	str	r1, [sp, #36]	; 0x24
 8009c3a:	1981      	adds	r1, r0, r6
 8009c3c:	f10e 0e08 	add.w	lr, lr, #8
 8009c40:	3208      	adds	r2, #8
 8009c42:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c44:	9107      	str	r1, [sp, #28]
 8009c46:	4604      	mov	r4, r0
 8009c48:	4601      	mov	r1, r0
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	f100 030c 	add.w	r3, r0, #12
 8009c50:	4474      	add	r4, lr
 8009c52:	f04f 0801 	mov.w	r8, #1
 8009c56:	1882      	adds	r2, r0, r2
 8009c58:	4461      	add	r1, ip
 8009c5a:	9305      	str	r3, [sp, #20]
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	940a      	str	r4, [sp, #40]	; 0x28
 8009c60:	46c1      	mov	r9, r8
 8009c62:	9208      	str	r2, [sp, #32]
 8009c64:	46d8      	mov	r8, fp
 8009c66:	9106      	str	r1, [sp, #24]
 8009c68:	f04f 0e00 	mov.w	lr, #0
 8009c6c:	469b      	mov	fp, r3
 8009c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c72:	449e      	add	lr, r3
 8009c74:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8009c78:	441a      	add	r2, r3
 8009c7a:	920e      	str	r2, [sp, #56]	; 0x38
 8009c7c:	441a      	add	r2, r3
 8009c7e:	18d4      	adds	r4, r2, r3
 8009c80:	18e5      	adds	r5, r4, r3
 8009c82:	18ee      	adds	r6, r5, r3
 8009c84:	18f7      	adds	r7, r6, r3
 8009c86:	eb07 0c03 	add.w	ip, r7, r3
 8009c8a:	920d      	str	r2, [sp, #52]	; 0x34
 8009c8c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8009c90:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8009c94:	910c      	str	r1, [sp, #48]	; 0x30
 8009c96:	4419      	add	r1, r3
 8009c98:	9103      	str	r1, [sp, #12]
 8009c9a:	4419      	add	r1, r3
 8009c9c:	18ca      	adds	r2, r1, r3
 8009c9e:	9202      	str	r2, [sp, #8]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	18d0      	adds	r0, r2, r3
 8009ca4:	ed92 ea01 	vldr	s28, [r2, #4]
 8009ca8:	9a02      	ldr	r2, [sp, #8]
 8009caa:	edd4 7a00 	vldr	s15, [r4]
 8009cae:	edd2 da01 	vldr	s27, [r2, #4]
 8009cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cb4:	ed91 da01 	vldr	s26, [r1, #4]
 8009cb8:	ed92 ca01 	vldr	s24, [r2, #4]
 8009cbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cbe:	9903      	ldr	r1, [sp, #12]
 8009cc0:	edcd 7a03 	vstr	s15, [sp, #12]
 8009cc4:	edd2 7a00 	vldr	s15, [r2]
 8009cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cca:	edcd 7a02 	vstr	s15, [sp, #8]
 8009cce:	edd2 7a00 	vldr	s15, [r2]
 8009cd2:	edd0 ea01 	vldr	s29, [r0, #4]
 8009cd6:	edd1 ca01 	vldr	s25, [r1, #4]
 8009cda:	eddc ba00 	vldr	s23, [ip]
 8009cde:	edd7 aa00 	vldr	s21, [r7]
 8009ce2:	ed96 aa00 	vldr	s20, [r6]
 8009ce6:	edd5 9a00 	vldr	s19, [r5]
 8009cea:	edcd 7a01 	vstr	s15, [sp, #4]
 8009cee:	4403      	add	r3, r0
 8009cf0:	ed93 fa01 	vldr	s30, [r3, #4]
 8009cf4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8009cf8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8009cfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d04:	46cc      	mov	ip, r9
 8009d06:	e001      	b.n	8009d0c <arm_radix8_butterfly_f32+0x2fc>
 8009d08:	3f3504f3 	.word	0x3f3504f3
 8009d0c:	ed91 6a00 	vldr	s12, [r1]
 8009d10:	ed93 5a00 	vldr	s10, [r3]
 8009d14:	edd0 fa00 	vldr	s31, [r0]
 8009d18:	edd4 7a00 	vldr	s15, [r4]
 8009d1c:	ed95 7a00 	vldr	s14, [r5]
 8009d20:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009d24:	ed17 3a01 	vldr	s6, [r7, #-4]
 8009d28:	ed92 2a00 	vldr	s4, [r2]
 8009d2c:	ed96 0a00 	vldr	s0, [r6]
 8009d30:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009d34:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009d38:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009d3c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009d40:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009d44:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009d48:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009d4c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d54:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009d58:	edd4 8a01 	vldr	s17, [r4, #4]
 8009d5c:	ed92 9a01 	vldr	s18, [r2, #4]
 8009d60:	edd7 0a00 	vldr	s1, [r7]
 8009d64:	edd1 2a01 	vldr	s5, [r1, #4]
 8009d68:	ed95 7a01 	vldr	s14, [r5, #4]
 8009d6c:	ed93 6a01 	vldr	s12, [r3, #4]
 8009d70:	edd0 5a01 	vldr	s11, [r0, #4]
 8009d74:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009d78:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8009d7c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009d80:	ee78 fac7 	vsub.f32	s31, s17, s14
 8009d84:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009d88:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009d8c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009d90:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009d94:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009d98:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009d9c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009da0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8009da4:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009da8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8009dac:	ee32 1a08 	vadd.f32	s2, s4, s16
 8009db0:	ee72 fa87 	vadd.f32	s31, s5, s14
 8009db4:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009db8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009dbc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009dc0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009dc4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009dc8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009dcc:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8009dd0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8009dd4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009dd8:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009ddc:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009de0:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009de4:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009de8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009dec:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009df0:	ee73 8a09 	vadd.f32	s17, s6, s18
 8009df4:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009df8:	ee33 9a49 	vsub.f32	s18, s6, s18
 8009dfc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8009e00:	ee35 3a85 	vadd.f32	s6, s11, s10
 8009e04:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8009e08:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8009e0c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009e10:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8009e14:	ee30 7a68 	vsub.f32	s14, s0, s17
 8009e18:	ee35 8a03 	vadd.f32	s16, s10, s6
 8009e1c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8009e20:	ee73 3a82 	vadd.f32	s7, s7, s4
 8009e24:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8009e28:	ed9d 2a01 	vldr	s4, [sp, #4]
 8009e2c:	eddd 1a02 	vldr	s3, [sp, #8]
 8009e30:	ee35 5a43 	vsub.f32	s10, s10, s6
 8009e34:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8009e38:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8009e3c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8009e40:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009e44:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8009e48:	ee76 5a49 	vsub.f32	s11, s12, s18
 8009e4c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8009e50:	ee39 6a06 	vadd.f32	s12, s18, s12
 8009e54:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8009e58:	ee21 4a84 	vmul.f32	s8, s3, s8
 8009e5c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8009e60:	ee22 7a07 	vmul.f32	s14, s4, s14
 8009e64:	ee22 2a08 	vmul.f32	s4, s4, s16
 8009e68:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009e6c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8009e70:	ee31 1a09 	vadd.f32	s2, s2, s18
 8009e74:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8009e78:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8009e7c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8009e80:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009e84:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8009e88:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8009e8c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8009e90:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8009e94:	ee38 2a89 	vadd.f32	s4, s17, s18
 8009e98:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8009e9c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8009ea0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8009ea4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8009ea8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8009eac:	eddd 5a03 	vldr	s11, [sp, #12]
 8009eb0:	edc6 fa00 	vstr	s31, [r6]
 8009eb4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8009eb8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009ebc:	ee30 0a45 	vsub.f32	s0, s0, s10
 8009ec0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8009ec4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8009ec8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8009ecc:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8009ed0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8009ed4:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009ed8:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009edc:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009ee0:	ee78 8a85 	vadd.f32	s17, s17, s10
 8009ee4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009ee8:	44c4      	add	ip, r8
 8009eea:	45e3      	cmp	fp, ip
 8009eec:	edc3 3a00 	vstr	s7, [r3]
 8009ef0:	edc3 6a01 	vstr	s13, [r3, #4]
 8009ef4:	4456      	add	r6, sl
 8009ef6:	ed07 1a01 	vstr	s2, [r7, #-4]
 8009efa:	edc7 0a00 	vstr	s1, [r7]
 8009efe:	4453      	add	r3, sl
 8009f00:	ed80 2a00 	vstr	s4, [r0]
 8009f04:	edc0 2a01 	vstr	s5, [r0, #4]
 8009f08:	4457      	add	r7, sl
 8009f0a:	edc2 1a00 	vstr	s3, [r2]
 8009f0e:	ed82 7a01 	vstr	s14, [r2, #4]
 8009f12:	4450      	add	r0, sl
 8009f14:	ed85 8a00 	vstr	s16, [r5]
 8009f18:	ed85 0a01 	vstr	s0, [r5, #4]
 8009f1c:	4452      	add	r2, sl
 8009f1e:	edc1 4a00 	vstr	s9, [r1]
 8009f22:	4455      	add	r5, sl
 8009f24:	ed81 3a01 	vstr	s6, [r1, #4]
 8009f28:	edc4 8a00 	vstr	s17, [r4]
 8009f2c:	ed84 6a01 	vstr	s12, [r4, #4]
 8009f30:	4451      	add	r1, sl
 8009f32:	4454      	add	r4, sl
 8009f34:	f63f aeea 	bhi.w	8009d0c <arm_radix8_butterfly_f32+0x2fc>
 8009f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f40:	3308      	adds	r3, #8
 8009f42:	930a      	str	r3, [sp, #40]	; 0x28
 8009f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f46:	3308      	adds	r3, #8
 8009f48:	9309      	str	r3, [sp, #36]	; 0x24
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	9308      	str	r3, [sp, #32]
 8009f50:	9b07      	ldr	r3, [sp, #28]
 8009f52:	3308      	adds	r3, #8
 8009f54:	9307      	str	r3, [sp, #28]
 8009f56:	9b06      	ldr	r3, [sp, #24]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	9306      	str	r3, [sp, #24]
 8009f5c:	9b05      	ldr	r3, [sp, #20]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	9305      	str	r3, [sp, #20]
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	3308      	adds	r3, #8
 8009f66:	9304      	str	r3, [sp, #16]
 8009f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f6a:	f109 0901 	add.w	r9, r9, #1
 8009f6e:	454b      	cmp	r3, r9
 8009f70:	f47f ae7d 	bne.w	8009c6e <arm_radix8_butterfly_f32+0x25e>
 8009f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	46d9      	mov	r9, fp
 8009f7c:	9310      	str	r3, [sp, #64]	; 0x40
 8009f7e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8009f82:	e554      	b.n	8009a2e <arm_radix8_butterfly_f32+0x1e>
 8009f84:	b015      	add	sp, #84	; 0x54
 8009f86:	ecbd 8b10 	vpop	{d8-d15}
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	bf00      	nop

08009f90 <__cxa_pure_virtual>:
 8009f90:	b508      	push	{r3, lr}
 8009f92:	f000 f80d 	bl	8009fb0 <_ZSt9terminatev>

08009f96 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009f96:	b508      	push	{r3, lr}
 8009f98:	4780      	blx	r0
 8009f9a:	f000 fc45 	bl	800a828 <abort>
	...

08009fa0 <_ZSt13get_terminatev>:
 8009fa0:	4b02      	ldr	r3, [pc, #8]	; (8009fac <_ZSt13get_terminatev+0xc>)
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	f3bf 8f5b 	dmb	ish
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	2000000c 	.word	0x2000000c

08009fb0 <_ZSt9terminatev>:
 8009fb0:	b508      	push	{r3, lr}
 8009fb2:	f7ff fff5 	bl	8009fa0 <_ZSt13get_terminatev>
 8009fb6:	f7ff ffee 	bl	8009f96 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009fbc <round>:
 8009fbc:	ec51 0b10 	vmov	r0, r1, d0
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009fc6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009fca:	2c13      	cmp	r4, #19
 8009fcc:	ee10 2a10 	vmov	r2, s0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	dc19      	bgt.n	800a008 <round+0x4c>
 8009fd4:	2c00      	cmp	r4, #0
 8009fd6:	da09      	bge.n	8009fec <round+0x30>
 8009fd8:	3401      	adds	r4, #1
 8009fda:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009fde:	d103      	bne.n	8009fe8 <round+0x2c>
 8009fe0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fe4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fe8:	2200      	movs	r2, #0
 8009fea:	e028      	b.n	800a03e <round+0x82>
 8009fec:	4d15      	ldr	r5, [pc, #84]	; (800a044 <round+0x88>)
 8009fee:	4125      	asrs	r5, r4
 8009ff0:	ea01 0605 	and.w	r6, r1, r5
 8009ff4:	4332      	orrs	r2, r6
 8009ff6:	d00e      	beq.n	800a016 <round+0x5a>
 8009ff8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ffc:	fa42 f404 	asr.w	r4, r2, r4
 800a000:	4423      	add	r3, r4
 800a002:	ea23 0305 	bic.w	r3, r3, r5
 800a006:	e7ef      	b.n	8009fe8 <round+0x2c>
 800a008:	2c33      	cmp	r4, #51	; 0x33
 800a00a:	dd07      	ble.n	800a01c <round+0x60>
 800a00c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a010:	d101      	bne.n	800a016 <round+0x5a>
 800a012:	f7f6 f93b 	bl	800028c <__adddf3>
 800a016:	ec41 0b10 	vmov	d0, r0, r1
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a020:	f04f 35ff 	mov.w	r5, #4294967295
 800a024:	40f5      	lsrs	r5, r6
 800a026:	4228      	tst	r0, r5
 800a028:	d0f5      	beq.n	800a016 <round+0x5a>
 800a02a:	2101      	movs	r1, #1
 800a02c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a030:	fa01 f404 	lsl.w	r4, r1, r4
 800a034:	1912      	adds	r2, r2, r4
 800a036:	bf28      	it	cs
 800a038:	185b      	addcs	r3, r3, r1
 800a03a:	ea22 0205 	bic.w	r2, r2, r5
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	e7e8      	b.n	800a016 <round+0x5a>
 800a044:	000fffff 	.word	0x000fffff

0800a048 <powf>:
 800a048:	b508      	push	{r3, lr}
 800a04a:	ed2d 8b04 	vpush	{d8-d9}
 800a04e:	eeb0 8a60 	vmov.f32	s16, s1
 800a052:	eeb0 9a40 	vmov.f32	s18, s0
 800a056:	f000 f86d 	bl	800a134 <__ieee754_powf>
 800a05a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a062:	eef0 8a40 	vmov.f32	s17, s0
 800a066:	d63e      	bvs.n	800a0e6 <powf+0x9e>
 800a068:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a070:	d112      	bne.n	800a098 <powf+0x50>
 800a072:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a07a:	d039      	beq.n	800a0f0 <powf+0xa8>
 800a07c:	eeb0 0a48 	vmov.f32	s0, s16
 800a080:	f000 fb53 	bl	800a72a <finitef>
 800a084:	b378      	cbz	r0, 800a0e6 <powf+0x9e>
 800a086:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08e:	d52a      	bpl.n	800a0e6 <powf+0x9e>
 800a090:	f000 fbd2 	bl	800a838 <__errno>
 800a094:	2322      	movs	r3, #34	; 0x22
 800a096:	e014      	b.n	800a0c2 <powf+0x7a>
 800a098:	f000 fb47 	bl	800a72a <finitef>
 800a09c:	b998      	cbnz	r0, 800a0c6 <powf+0x7e>
 800a09e:	eeb0 0a49 	vmov.f32	s0, s18
 800a0a2:	f000 fb42 	bl	800a72a <finitef>
 800a0a6:	b170      	cbz	r0, 800a0c6 <powf+0x7e>
 800a0a8:	eeb0 0a48 	vmov.f32	s0, s16
 800a0ac:	f000 fb3d 	bl	800a72a <finitef>
 800a0b0:	b148      	cbz	r0, 800a0c6 <powf+0x7e>
 800a0b2:	eef4 8a68 	vcmp.f32	s17, s17
 800a0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ba:	d7e9      	bvc.n	800a090 <powf+0x48>
 800a0bc:	f000 fbbc 	bl	800a838 <__errno>
 800a0c0:	2321      	movs	r3, #33	; 0x21
 800a0c2:	6003      	str	r3, [r0, #0]
 800a0c4:	e00f      	b.n	800a0e6 <powf+0x9e>
 800a0c6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ce:	d10a      	bne.n	800a0e6 <powf+0x9e>
 800a0d0:	eeb0 0a49 	vmov.f32	s0, s18
 800a0d4:	f000 fb29 	bl	800a72a <finitef>
 800a0d8:	b128      	cbz	r0, 800a0e6 <powf+0x9e>
 800a0da:	eeb0 0a48 	vmov.f32	s0, s16
 800a0de:	f000 fb24 	bl	800a72a <finitef>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d1d4      	bne.n	800a090 <powf+0x48>
 800a0e6:	eeb0 0a68 	vmov.f32	s0, s17
 800a0ea:	ecbd 8b04 	vpop	{d8-d9}
 800a0ee:	bd08      	pop	{r3, pc}
 800a0f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a0f4:	e7f7      	b.n	800a0e6 <powf+0x9e>
	...

0800a0f8 <sqrtf>:
 800a0f8:	b508      	push	{r3, lr}
 800a0fa:	ed2d 8b02 	vpush	{d8}
 800a0fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a102:	f000 fae5 	bl	800a6d0 <__ieee754_sqrtf>
 800a106:	eeb4 8a48 	vcmp.f32	s16, s16
 800a10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10e:	d60c      	bvs.n	800a12a <sqrtf+0x32>
 800a110:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a130 <sqrtf+0x38>
 800a114:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	d505      	bpl.n	800a12a <sqrtf+0x32>
 800a11e:	f000 fb8b 	bl	800a838 <__errno>
 800a122:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a126:	2321      	movs	r3, #33	; 0x21
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	ecbd 8b02 	vpop	{d8}
 800a12e:	bd08      	pop	{r3, pc}
 800a130:	00000000 	.word	0x00000000

0800a134 <__ieee754_powf>:
 800a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a138:	ee10 4a90 	vmov	r4, s1
 800a13c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800a140:	ed2d 8b02 	vpush	{d8}
 800a144:	ee10 6a10 	vmov	r6, s0
 800a148:	eeb0 8a40 	vmov.f32	s16, s0
 800a14c:	eef0 8a60 	vmov.f32	s17, s1
 800a150:	d10c      	bne.n	800a16c <__ieee754_powf+0x38>
 800a152:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a156:	0076      	lsls	r6, r6, #1
 800a158:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a15c:	f240 8296 	bls.w	800a68c <__ieee754_powf+0x558>
 800a160:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a164:	ecbd 8b02 	vpop	{d8}
 800a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a170:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a174:	dcf4      	bgt.n	800a160 <__ieee754_powf+0x2c>
 800a176:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a17a:	dd08      	ble.n	800a18e <__ieee754_powf+0x5a>
 800a17c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a180:	d1ee      	bne.n	800a160 <__ieee754_powf+0x2c>
 800a182:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800a186:	0064      	lsls	r4, r4, #1
 800a188:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a18c:	e7e6      	b.n	800a15c <__ieee754_powf+0x28>
 800a18e:	2e00      	cmp	r6, #0
 800a190:	da20      	bge.n	800a1d4 <__ieee754_powf+0xa0>
 800a192:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800a196:	da2d      	bge.n	800a1f4 <__ieee754_powf+0xc0>
 800a198:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a19c:	f2c0 827f 	blt.w	800a69e <__ieee754_powf+0x56a>
 800a1a0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800a1a4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a1a8:	fa48 f703 	asr.w	r7, r8, r3
 800a1ac:	fa07 f303 	lsl.w	r3, r7, r3
 800a1b0:	4543      	cmp	r3, r8
 800a1b2:	f040 8274 	bne.w	800a69e <__ieee754_powf+0x56a>
 800a1b6:	f007 0701 	and.w	r7, r7, #1
 800a1ba:	f1c7 0702 	rsb	r7, r7, #2
 800a1be:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a1c2:	d11f      	bne.n	800a204 <__ieee754_powf+0xd0>
 800a1c4:	2c00      	cmp	r4, #0
 800a1c6:	f280 8267 	bge.w	800a698 <__ieee754_powf+0x564>
 800a1ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a1ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a1d2:	e7c7      	b.n	800a164 <__ieee754_powf+0x30>
 800a1d4:	2700      	movs	r7, #0
 800a1d6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800a1da:	d1f0      	bne.n	800a1be <__ieee754_powf+0x8a>
 800a1dc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800a1e0:	f000 8254 	beq.w	800a68c <__ieee754_powf+0x558>
 800a1e4:	dd08      	ble.n	800a1f8 <__ieee754_powf+0xc4>
 800a1e6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800a4f0 <__ieee754_powf+0x3bc>
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	bfa8      	it	ge
 800a1ee:	eeb0 0a68 	vmovge.f32	s0, s17
 800a1f2:	e7b7      	b.n	800a164 <__ieee754_powf+0x30>
 800a1f4:	2702      	movs	r7, #2
 800a1f6:	e7ee      	b.n	800a1d6 <__ieee754_powf+0xa2>
 800a1f8:	2c00      	cmp	r4, #0
 800a1fa:	f280 824a 	bge.w	800a692 <__ieee754_powf+0x55e>
 800a1fe:	eeb1 0a68 	vneg.f32	s0, s17
 800a202:	e7af      	b.n	800a164 <__ieee754_powf+0x30>
 800a204:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a208:	d102      	bne.n	800a210 <__ieee754_powf+0xdc>
 800a20a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a20e:	e7a9      	b.n	800a164 <__ieee754_powf+0x30>
 800a210:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a214:	eeb0 0a48 	vmov.f32	s0, s16
 800a218:	d107      	bne.n	800a22a <__ieee754_powf+0xf6>
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	db05      	blt.n	800a22a <__ieee754_powf+0xf6>
 800a21e:	ecbd 8b02 	vpop	{d8}
 800a222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	f000 ba53 	b.w	800a6d0 <__ieee754_sqrtf>
 800a22a:	f000 fa77 	bl	800a71c <fabsf>
 800a22e:	b125      	cbz	r5, 800a23a <__ieee754_powf+0x106>
 800a230:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800a234:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a238:	d116      	bne.n	800a268 <__ieee754_powf+0x134>
 800a23a:	2c00      	cmp	r4, #0
 800a23c:	bfbc      	itt	lt
 800a23e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a242:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a246:	2e00      	cmp	r6, #0
 800a248:	da8c      	bge.n	800a164 <__ieee754_powf+0x30>
 800a24a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800a24e:	ea55 0307 	orrs.w	r3, r5, r7
 800a252:	d104      	bne.n	800a25e <__ieee754_powf+0x12a>
 800a254:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a258:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a25c:	e782      	b.n	800a164 <__ieee754_powf+0x30>
 800a25e:	2f01      	cmp	r7, #1
 800a260:	d180      	bne.n	800a164 <__ieee754_powf+0x30>
 800a262:	eeb1 0a40 	vneg.f32	s0, s0
 800a266:	e77d      	b.n	800a164 <__ieee754_powf+0x30>
 800a268:	0ff0      	lsrs	r0, r6, #31
 800a26a:	3801      	subs	r0, #1
 800a26c:	ea57 0300 	orrs.w	r3, r7, r0
 800a270:	d104      	bne.n	800a27c <__ieee754_powf+0x148>
 800a272:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a276:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a27a:	e773      	b.n	800a164 <__ieee754_powf+0x30>
 800a27c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800a280:	dd74      	ble.n	800a36c <__ieee754_powf+0x238>
 800a282:	4b9c      	ldr	r3, [pc, #624]	; (800a4f4 <__ieee754_powf+0x3c0>)
 800a284:	429d      	cmp	r5, r3
 800a286:	dc08      	bgt.n	800a29a <__ieee754_powf+0x166>
 800a288:	2c00      	cmp	r4, #0
 800a28a:	da0b      	bge.n	800a2a4 <__ieee754_powf+0x170>
 800a28c:	2000      	movs	r0, #0
 800a28e:	ecbd 8b02 	vpop	{d8}
 800a292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	f000 ba3b 	b.w	800a710 <__math_oflowf>
 800a29a:	4b97      	ldr	r3, [pc, #604]	; (800a4f8 <__ieee754_powf+0x3c4>)
 800a29c:	429d      	cmp	r5, r3
 800a29e:	dd08      	ble.n	800a2b2 <__ieee754_powf+0x17e>
 800a2a0:	2c00      	cmp	r4, #0
 800a2a2:	dcf3      	bgt.n	800a28c <__ieee754_powf+0x158>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	ecbd 8b02 	vpop	{d8}
 800a2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ae:	f000 ba29 	b.w	800a704 <__math_uflowf>
 800a2b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a2b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a2ba:	eddf 6a90 	vldr	s13, [pc, #576]	; 800a4fc <__ieee754_powf+0x3c8>
 800a2be:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a2c2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a2c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a2ca:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a2ce:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800a500 <__ieee754_powf+0x3cc>
 800a2da:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800a2de:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800a504 <__ieee754_powf+0x3d0>
 800a2e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a2e6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a508 <__ieee754_powf+0x3d4>
 800a2ea:	eef0 6a67 	vmov.f32	s13, s15
 800a2ee:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a2f2:	ee16 3a90 	vmov	r3, s13
 800a2f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a2fa:	f023 030f 	bic.w	r3, r3, #15
 800a2fe:	ee00 3a90 	vmov	s1, r3
 800a302:	eee0 0a47 	vfms.f32	s1, s0, s14
 800a306:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a30a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a30e:	f024 040f 	bic.w	r4, r4, #15
 800a312:	ee07 4a10 	vmov	s14, r4
 800a316:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a31a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a326:	3f01      	subs	r7, #1
 800a328:	ea57 0200 	orrs.w	r2, r7, r0
 800a32c:	ee07 4a10 	vmov	s14, r4
 800a330:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a334:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a338:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a33c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a340:	ee17 4a10 	vmov	r4, s14
 800a344:	bf08      	it	eq
 800a346:	eeb0 8a40 	vmoveq.f32	s16, s0
 800a34a:	2c00      	cmp	r4, #0
 800a34c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a350:	f340 817e 	ble.w	800a650 <__ieee754_powf+0x51c>
 800a354:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a358:	f340 80f8 	ble.w	800a54c <__ieee754_powf+0x418>
 800a35c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a364:	bf4c      	ite	mi
 800a366:	2001      	movmi	r0, #1
 800a368:	2000      	movpl	r0, #0
 800a36a:	e790      	b.n	800a28e <__ieee754_powf+0x15a>
 800a36c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800a370:	bf01      	itttt	eq
 800a372:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800a50c <__ieee754_powf+0x3d8>
 800a376:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a37a:	f06f 0217 	mvneq.w	r2, #23
 800a37e:	ee17 5a90 	vmoveq	r5, s15
 800a382:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a386:	bf18      	it	ne
 800a388:	2200      	movne	r2, #0
 800a38a:	3b7f      	subs	r3, #127	; 0x7f
 800a38c:	4413      	add	r3, r2
 800a38e:	4a60      	ldr	r2, [pc, #384]	; (800a510 <__ieee754_powf+0x3dc>)
 800a390:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800a394:	4295      	cmp	r5, r2
 800a396:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800a39a:	dd06      	ble.n	800a3aa <__ieee754_powf+0x276>
 800a39c:	4a5d      	ldr	r2, [pc, #372]	; (800a514 <__ieee754_powf+0x3e0>)
 800a39e:	4295      	cmp	r5, r2
 800a3a0:	f340 80a4 	ble.w	800a4ec <__ieee754_powf+0x3b8>
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	4a5a      	ldr	r2, [pc, #360]	; (800a518 <__ieee754_powf+0x3e4>)
 800a3ae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a3b2:	ee07 1a90 	vmov	s15, r1
 800a3b6:	ed92 7a00 	vldr	s14, [r2]
 800a3ba:	4a58      	ldr	r2, [pc, #352]	; (800a51c <__ieee754_powf+0x3e8>)
 800a3bc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a3c0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a3c4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800a3c8:	1049      	asrs	r1, r1, #1
 800a3ca:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a3ce:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a3d2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800a3d6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800a3da:	ee06 1a10 	vmov	s12, r1
 800a3de:	ee65 4a26 	vmul.f32	s9, s10, s13
 800a3e2:	ee36 7a47 	vsub.f32	s14, s12, s14
 800a3e6:	ee14 6a90 	vmov	r6, s9
 800a3ea:	4016      	ands	r6, r2
 800a3ec:	ee05 6a90 	vmov	s11, r6
 800a3f0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800a3f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3f8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a520 <__ieee754_powf+0x3ec>
 800a3fc:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800a400:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800a404:	ee25 6a26 	vmul.f32	s12, s10, s13
 800a408:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a524 <__ieee754_powf+0x3f0>
 800a40c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a410:	eddf 6a45 	vldr	s13, [pc, #276]	; 800a528 <__ieee754_powf+0x3f4>
 800a414:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a418:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a4fc <__ieee754_powf+0x3c8>
 800a41c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a420:	eddf 6a42 	vldr	s13, [pc, #264]	; 800a52c <__ieee754_powf+0x3f8>
 800a424:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a428:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a530 <__ieee754_powf+0x3fc>
 800a42c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a430:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800a434:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800a438:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a43c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800a440:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800a444:	eef0 7a45 	vmov.f32	s15, s10
 800a448:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800a44c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a450:	ee17 1a90 	vmov	r1, s15
 800a454:	4011      	ands	r1, r2
 800a456:	ee07 1a90 	vmov	s15, r1
 800a45a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800a45e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800a462:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a466:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a46a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a46e:	eeb0 6a47 	vmov.f32	s12, s14
 800a472:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800a476:	ee16 1a10 	vmov	r1, s12
 800a47a:	4011      	ands	r1, r2
 800a47c:	ee06 1a90 	vmov	s13, r1
 800a480:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800a484:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a534 <__ieee754_powf+0x400>
 800a488:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a538 <__ieee754_powf+0x404>
 800a48c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a490:	ee06 1a10 	vmov	s12, r1
 800a494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a498:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a53c <__ieee754_powf+0x408>
 800a49c:	4928      	ldr	r1, [pc, #160]	; (800a540 <__ieee754_powf+0x40c>)
 800a49e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a4a2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a4a6:	edd1 7a00 	vldr	s15, [r1]
 800a4aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	4b24      	ldr	r3, [pc, #144]	; (800a544 <__ieee754_powf+0x410>)
 800a4b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a4b8:	eef0 7a47 	vmov.f32	s15, s14
 800a4bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a4c0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a4c4:	edd5 0a00 	vldr	s1, [r5]
 800a4c8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a4cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4d0:	ee17 3a90 	vmov	r3, s15
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800a4de:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800a4e2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800a4e6:	ee77 7a66 	vsub.f32	s15, s14, s13
 800a4ea:	e70e      	b.n	800a30a <__ieee754_powf+0x1d6>
 800a4ec:	2501      	movs	r5, #1
 800a4ee:	e75d      	b.n	800a3ac <__ieee754_powf+0x278>
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	3f7ffff3 	.word	0x3f7ffff3
 800a4f8:	3f800007 	.word	0x3f800007
 800a4fc:	3eaaaaab 	.word	0x3eaaaaab
 800a500:	3fb8aa3b 	.word	0x3fb8aa3b
 800a504:	36eca570 	.word	0x36eca570
 800a508:	3fb8aa00 	.word	0x3fb8aa00
 800a50c:	4b800000 	.word	0x4b800000
 800a510:	001cc471 	.word	0x001cc471
 800a514:	005db3d6 	.word	0x005db3d6
 800a518:	0800ea38 	.word	0x0800ea38
 800a51c:	fffff000 	.word	0xfffff000
 800a520:	3e6c3255 	.word	0x3e6c3255
 800a524:	3e53f142 	.word	0x3e53f142
 800a528:	3e8ba305 	.word	0x3e8ba305
 800a52c:	3edb6db7 	.word	0x3edb6db7
 800a530:	3f19999a 	.word	0x3f19999a
 800a534:	3f76384f 	.word	0x3f76384f
 800a538:	3f763800 	.word	0x3f763800
 800a53c:	369dc3a0 	.word	0x369dc3a0
 800a540:	0800ea48 	.word	0x0800ea48
 800a544:	0800ea40 	.word	0x0800ea40
 800a548:	3338aa3c 	.word	0x3338aa3c
 800a54c:	f040 8095 	bne.w	800a67a <__ieee754_powf+0x546>
 800a550:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a548 <__ieee754_powf+0x414>
 800a554:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a558:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a55c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a564:	f73f aefa 	bgt.w	800a35c <__ieee754_powf+0x228>
 800a568:	15db      	asrs	r3, r3, #23
 800a56a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a56e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a572:	4103      	asrs	r3, r0
 800a574:	4423      	add	r3, r4
 800a576:	494b      	ldr	r1, [pc, #300]	; (800a6a4 <__ieee754_powf+0x570>)
 800a578:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a57c:	3a7f      	subs	r2, #127	; 0x7f
 800a57e:	4111      	asrs	r1, r2
 800a580:	ea23 0101 	bic.w	r1, r3, r1
 800a584:	ee07 1a10 	vmov	s14, r1
 800a588:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a58c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a590:	f1c2 0217 	rsb	r2, r2, #23
 800a594:	4110      	asrs	r0, r2
 800a596:	2c00      	cmp	r4, #0
 800a598:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a59c:	bfb8      	it	lt
 800a59e:	4240      	neglt	r0, r0
 800a5a0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a5a4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800a6a8 <__ieee754_powf+0x574>
 800a5a8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800a6ac <__ieee754_powf+0x578>
 800a5ac:	ee17 3a10 	vmov	r3, s14
 800a5b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a5b4:	f023 030f 	bic.w	r3, r3, #15
 800a5b8:	ee07 3a10 	vmov	s14, r3
 800a5bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5c0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800a5c4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a5c8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a6b0 <__ieee754_powf+0x57c>
 800a5cc:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800a5d0:	eef0 7a40 	vmov.f32	s15, s0
 800a5d4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a5d8:	eeb0 6a67 	vmov.f32	s12, s15
 800a5dc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a5e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a5e4:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a5e8:	eddf 6a32 	vldr	s13, [pc, #200]	; 800a6b4 <__ieee754_powf+0x580>
 800a5ec:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800a6b8 <__ieee754_powf+0x584>
 800a5f0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a5f4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800a6bc <__ieee754_powf+0x588>
 800a5f8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a5fc:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a6c0 <__ieee754_powf+0x58c>
 800a600:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a604:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a6c4 <__ieee754_powf+0x590>
 800a608:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a60c:	eef0 6a67 	vmov.f32	s13, s15
 800a610:	eee6 6a47 	vfms.f32	s13, s12, s14
 800a614:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a618:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a61c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a620:	eea7 0a80 	vfma.f32	s0, s15, s0
 800a624:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a628:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a62c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a630:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a634:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a638:	ee10 3a10 	vmov	r3, s0
 800a63c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a644:	da1f      	bge.n	800a686 <__ieee754_powf+0x552>
 800a646:	f000 f87d 	bl	800a744 <scalbnf>
 800a64a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a64e:	e589      	b.n	800a164 <__ieee754_powf+0x30>
 800a650:	4a1d      	ldr	r2, [pc, #116]	; (800a6c8 <__ieee754_powf+0x594>)
 800a652:	4293      	cmp	r3, r2
 800a654:	dd07      	ble.n	800a666 <__ieee754_powf+0x532>
 800a656:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	bf4c      	ite	mi
 800a660:	2001      	movmi	r0, #1
 800a662:	2000      	movpl	r0, #0
 800a664:	e61f      	b.n	800a2a6 <__ieee754_powf+0x172>
 800a666:	d108      	bne.n	800a67a <__ieee754_powf+0x546>
 800a668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a66c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a674:	f6ff af78 	blt.w	800a568 <__ieee754_powf+0x434>
 800a678:	e7ed      	b.n	800a656 <__ieee754_powf+0x522>
 800a67a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a67e:	f73f af73 	bgt.w	800a568 <__ieee754_powf+0x434>
 800a682:	2000      	movs	r0, #0
 800a684:	e78c      	b.n	800a5a0 <__ieee754_powf+0x46c>
 800a686:	ee00 3a10 	vmov	s0, r3
 800a68a:	e7de      	b.n	800a64a <__ieee754_powf+0x516>
 800a68c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a690:	e568      	b.n	800a164 <__ieee754_powf+0x30>
 800a692:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a6cc <__ieee754_powf+0x598>
 800a696:	e565      	b.n	800a164 <__ieee754_powf+0x30>
 800a698:	eeb0 0a48 	vmov.f32	s0, s16
 800a69c:	e562      	b.n	800a164 <__ieee754_powf+0x30>
 800a69e:	2700      	movs	r7, #0
 800a6a0:	e58d      	b.n	800a1be <__ieee754_powf+0x8a>
 800a6a2:	bf00      	nop
 800a6a4:	007fffff 	.word	0x007fffff
 800a6a8:	35bfbe8c 	.word	0x35bfbe8c
 800a6ac:	3f317200 	.word	0x3f317200
 800a6b0:	3f317218 	.word	0x3f317218
 800a6b4:	b5ddea0e 	.word	0xb5ddea0e
 800a6b8:	3331bb4c 	.word	0x3331bb4c
 800a6bc:	388ab355 	.word	0x388ab355
 800a6c0:	bb360b61 	.word	0xbb360b61
 800a6c4:	3e2aaaab 	.word	0x3e2aaaab
 800a6c8:	43160000 	.word	0x43160000
 800a6cc:	00000000 	.word	0x00000000

0800a6d0 <__ieee754_sqrtf>:
 800a6d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a6d4:	4770      	bx	lr

0800a6d6 <with_errnof>:
 800a6d6:	b513      	push	{r0, r1, r4, lr}
 800a6d8:	4604      	mov	r4, r0
 800a6da:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a6de:	f000 f8ab 	bl	800a838 <__errno>
 800a6e2:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a6e6:	6004      	str	r4, [r0, #0]
 800a6e8:	b002      	add	sp, #8
 800a6ea:	bd10      	pop	{r4, pc}

0800a6ec <xflowf>:
 800a6ec:	b130      	cbz	r0, 800a6fc <xflowf+0x10>
 800a6ee:	eef1 7a40 	vneg.f32	s15, s0
 800a6f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a6f6:	2022      	movs	r0, #34	; 0x22
 800a6f8:	f7ff bfed 	b.w	800a6d6 <with_errnof>
 800a6fc:	eef0 7a40 	vmov.f32	s15, s0
 800a700:	e7f7      	b.n	800a6f2 <xflowf+0x6>
	...

0800a704 <__math_uflowf>:
 800a704:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a70c <__math_uflowf+0x8>
 800a708:	f7ff bff0 	b.w	800a6ec <xflowf>
 800a70c:	10000000 	.word	0x10000000

0800a710 <__math_oflowf>:
 800a710:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a718 <__math_oflowf+0x8>
 800a714:	f7ff bfea 	b.w	800a6ec <xflowf>
 800a718:	70000000 	.word	0x70000000

0800a71c <fabsf>:
 800a71c:	ee10 3a10 	vmov	r3, s0
 800a720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a724:	ee00 3a10 	vmov	s0, r3
 800a728:	4770      	bx	lr

0800a72a <finitef>:
 800a72a:	b082      	sub	sp, #8
 800a72c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a730:	9801      	ldr	r0, [sp, #4]
 800a732:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a736:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a73a:	bfac      	ite	ge
 800a73c:	2000      	movge	r0, #0
 800a73e:	2001      	movlt	r0, #1
 800a740:	b002      	add	sp, #8
 800a742:	4770      	bx	lr

0800a744 <scalbnf>:
 800a744:	ee10 3a10 	vmov	r3, s0
 800a748:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a74c:	d025      	beq.n	800a79a <scalbnf+0x56>
 800a74e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a752:	d302      	bcc.n	800a75a <scalbnf+0x16>
 800a754:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a758:	4770      	bx	lr
 800a75a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a75e:	d122      	bne.n	800a7a6 <scalbnf+0x62>
 800a760:	4b2a      	ldr	r3, [pc, #168]	; (800a80c <scalbnf+0xc8>)
 800a762:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a810 <scalbnf+0xcc>
 800a766:	4298      	cmp	r0, r3
 800a768:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a76c:	db16      	blt.n	800a79c <scalbnf+0x58>
 800a76e:	ee10 3a10 	vmov	r3, s0
 800a772:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a776:	3a19      	subs	r2, #25
 800a778:	4402      	add	r2, r0
 800a77a:	2afe      	cmp	r2, #254	; 0xfe
 800a77c:	dd15      	ble.n	800a7aa <scalbnf+0x66>
 800a77e:	ee10 3a10 	vmov	r3, s0
 800a782:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a814 <scalbnf+0xd0>
 800a786:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a818 <scalbnf+0xd4>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	eeb0 7a67 	vmov.f32	s14, s15
 800a790:	bfb8      	it	lt
 800a792:	eef0 7a66 	vmovlt.f32	s15, s13
 800a796:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a79a:	4770      	bx	lr
 800a79c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a81c <scalbnf+0xd8>
 800a7a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a7a4:	4770      	bx	lr
 800a7a6:	0dd2      	lsrs	r2, r2, #23
 800a7a8:	e7e6      	b.n	800a778 <scalbnf+0x34>
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	dd06      	ble.n	800a7bc <scalbnf+0x78>
 800a7ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7b2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a7b6:	ee00 3a10 	vmov	s0, r3
 800a7ba:	4770      	bx	lr
 800a7bc:	f112 0f16 	cmn.w	r2, #22
 800a7c0:	da1a      	bge.n	800a7f8 <scalbnf+0xb4>
 800a7c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a7c6:	4298      	cmp	r0, r3
 800a7c8:	ee10 3a10 	vmov	r3, s0
 800a7cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7d0:	dd0a      	ble.n	800a7e8 <scalbnf+0xa4>
 800a7d2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a814 <scalbnf+0xd0>
 800a7d6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a818 <scalbnf+0xd4>
 800a7da:	eef0 7a40 	vmov.f32	s15, s0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bf18      	it	ne
 800a7e2:	eeb0 0a47 	vmovne.f32	s0, s14
 800a7e6:	e7db      	b.n	800a7a0 <scalbnf+0x5c>
 800a7e8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a81c <scalbnf+0xd8>
 800a7ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a820 <scalbnf+0xdc>
 800a7f0:	eef0 7a40 	vmov.f32	s15, s0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	e7f3      	b.n	800a7e0 <scalbnf+0x9c>
 800a7f8:	3219      	adds	r2, #25
 800a7fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7fe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a802:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a824 <scalbnf+0xe0>
 800a806:	ee07 3a10 	vmov	s14, r3
 800a80a:	e7c4      	b.n	800a796 <scalbnf+0x52>
 800a80c:	ffff3cb0 	.word	0xffff3cb0
 800a810:	4c000000 	.word	0x4c000000
 800a814:	7149f2ca 	.word	0x7149f2ca
 800a818:	f149f2ca 	.word	0xf149f2ca
 800a81c:	0da24260 	.word	0x0da24260
 800a820:	8da24260 	.word	0x8da24260
 800a824:	33000000 	.word	0x33000000

0800a828 <abort>:
 800a828:	b508      	push	{r3, lr}
 800a82a:	2006      	movs	r0, #6
 800a82c:	f000 fdee 	bl	800b40c <raise>
 800a830:	2001      	movs	r0, #1
 800a832:	f7f9 fa97 	bl	8003d64 <_exit>
	...

0800a838 <__errno>:
 800a838:	4b01      	ldr	r3, [pc, #4]	; (800a840 <__errno+0x8>)
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	20000010 	.word	0x20000010

0800a844 <__libc_init_array>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	4d0d      	ldr	r5, [pc, #52]	; (800a87c <__libc_init_array+0x38>)
 800a848:	4c0d      	ldr	r4, [pc, #52]	; (800a880 <__libc_init_array+0x3c>)
 800a84a:	1b64      	subs	r4, r4, r5
 800a84c:	10a4      	asrs	r4, r4, #2
 800a84e:	2600      	movs	r6, #0
 800a850:	42a6      	cmp	r6, r4
 800a852:	d109      	bne.n	800a868 <__libc_init_array+0x24>
 800a854:	4d0b      	ldr	r5, [pc, #44]	; (800a884 <__libc_init_array+0x40>)
 800a856:	4c0c      	ldr	r4, [pc, #48]	; (800a888 <__libc_init_array+0x44>)
 800a858:	f002 fd88 	bl	800d36c <_init>
 800a85c:	1b64      	subs	r4, r4, r5
 800a85e:	10a4      	asrs	r4, r4, #2
 800a860:	2600      	movs	r6, #0
 800a862:	42a6      	cmp	r6, r4
 800a864:	d105      	bne.n	800a872 <__libc_init_array+0x2e>
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86c:	4798      	blx	r3
 800a86e:	3601      	adds	r6, #1
 800a870:	e7ee      	b.n	800a850 <__libc_init_array+0xc>
 800a872:	f855 3b04 	ldr.w	r3, [r5], #4
 800a876:	4798      	blx	r3
 800a878:	3601      	adds	r6, #1
 800a87a:	e7f2      	b.n	800a862 <__libc_init_array+0x1e>
 800a87c:	0800ee34 	.word	0x0800ee34
 800a880:	0800ee34 	.word	0x0800ee34
 800a884:	0800ee34 	.word	0x0800ee34
 800a888:	0800ee3c 	.word	0x0800ee3c

0800a88c <malloc>:
 800a88c:	4b02      	ldr	r3, [pc, #8]	; (800a898 <malloc+0xc>)
 800a88e:	4601      	mov	r1, r0
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	f000 b885 	b.w	800a9a0 <_malloc_r>
 800a896:	bf00      	nop
 800a898:	20000010 	.word	0x20000010

0800a89c <memcpy>:
 800a89c:	440a      	add	r2, r1
 800a89e:	4291      	cmp	r1, r2
 800a8a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8a4:	d100      	bne.n	800a8a8 <memcpy+0xc>
 800a8a6:	4770      	bx	lr
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8b2:	4291      	cmp	r1, r2
 800a8b4:	d1f9      	bne.n	800a8aa <memcpy+0xe>
 800a8b6:	bd10      	pop	{r4, pc}

0800a8b8 <memset>:
 800a8b8:	4402      	add	r2, r0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d100      	bne.n	800a8c2 <memset+0xa>
 800a8c0:	4770      	bx	lr
 800a8c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8c6:	e7f9      	b.n	800a8bc <memset+0x4>

0800a8c8 <_free_r>:
 800a8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ca:	2900      	cmp	r1, #0
 800a8cc:	d044      	beq.n	800a958 <_free_r+0x90>
 800a8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d2:	9001      	str	r0, [sp, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8da:	bfb8      	it	lt
 800a8dc:	18e4      	addlt	r4, r4, r3
 800a8de:	f001 fd2b 	bl	800c338 <__malloc_lock>
 800a8e2:	4a1e      	ldr	r2, [pc, #120]	; (800a95c <_free_r+0x94>)
 800a8e4:	9801      	ldr	r0, [sp, #4]
 800a8e6:	6813      	ldr	r3, [r2, #0]
 800a8e8:	b933      	cbnz	r3, 800a8f8 <_free_r+0x30>
 800a8ea:	6063      	str	r3, [r4, #4]
 800a8ec:	6014      	str	r4, [r2, #0]
 800a8ee:	b003      	add	sp, #12
 800a8f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8f4:	f001 bd26 	b.w	800c344 <__malloc_unlock>
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d908      	bls.n	800a90e <_free_r+0x46>
 800a8fc:	6825      	ldr	r5, [r4, #0]
 800a8fe:	1961      	adds	r1, r4, r5
 800a900:	428b      	cmp	r3, r1
 800a902:	bf01      	itttt	eq
 800a904:	6819      	ldreq	r1, [r3, #0]
 800a906:	685b      	ldreq	r3, [r3, #4]
 800a908:	1949      	addeq	r1, r1, r5
 800a90a:	6021      	streq	r1, [r4, #0]
 800a90c:	e7ed      	b.n	800a8ea <_free_r+0x22>
 800a90e:	461a      	mov	r2, r3
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	b10b      	cbz	r3, 800a918 <_free_r+0x50>
 800a914:	42a3      	cmp	r3, r4
 800a916:	d9fa      	bls.n	800a90e <_free_r+0x46>
 800a918:	6811      	ldr	r1, [r2, #0]
 800a91a:	1855      	adds	r5, r2, r1
 800a91c:	42a5      	cmp	r5, r4
 800a91e:	d10b      	bne.n	800a938 <_free_r+0x70>
 800a920:	6824      	ldr	r4, [r4, #0]
 800a922:	4421      	add	r1, r4
 800a924:	1854      	adds	r4, r2, r1
 800a926:	42a3      	cmp	r3, r4
 800a928:	6011      	str	r1, [r2, #0]
 800a92a:	d1e0      	bne.n	800a8ee <_free_r+0x26>
 800a92c:	681c      	ldr	r4, [r3, #0]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	6053      	str	r3, [r2, #4]
 800a932:	4421      	add	r1, r4
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	e7da      	b.n	800a8ee <_free_r+0x26>
 800a938:	d902      	bls.n	800a940 <_free_r+0x78>
 800a93a:	230c      	movs	r3, #12
 800a93c:	6003      	str	r3, [r0, #0]
 800a93e:	e7d6      	b.n	800a8ee <_free_r+0x26>
 800a940:	6825      	ldr	r5, [r4, #0]
 800a942:	1961      	adds	r1, r4, r5
 800a944:	428b      	cmp	r3, r1
 800a946:	bf04      	itt	eq
 800a948:	6819      	ldreq	r1, [r3, #0]
 800a94a:	685b      	ldreq	r3, [r3, #4]
 800a94c:	6063      	str	r3, [r4, #4]
 800a94e:	bf04      	itt	eq
 800a950:	1949      	addeq	r1, r1, r5
 800a952:	6021      	streq	r1, [r4, #0]
 800a954:	6054      	str	r4, [r2, #4]
 800a956:	e7ca      	b.n	800a8ee <_free_r+0x26>
 800a958:	b003      	add	sp, #12
 800a95a:	bd30      	pop	{r4, r5, pc}
 800a95c:	20000dd0 	.word	0x20000dd0

0800a960 <sbrk_aligned>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4e0e      	ldr	r6, [pc, #56]	; (800a99c <sbrk_aligned+0x3c>)
 800a964:	460c      	mov	r4, r1
 800a966:	6831      	ldr	r1, [r6, #0]
 800a968:	4605      	mov	r5, r0
 800a96a:	b911      	cbnz	r1, 800a972 <sbrk_aligned+0x12>
 800a96c:	f000 fd16 	bl	800b39c <_sbrk_r>
 800a970:	6030      	str	r0, [r6, #0]
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f000 fd11 	bl	800b39c <_sbrk_r>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	d00a      	beq.n	800a994 <sbrk_aligned+0x34>
 800a97e:	1cc4      	adds	r4, r0, #3
 800a980:	f024 0403 	bic.w	r4, r4, #3
 800a984:	42a0      	cmp	r0, r4
 800a986:	d007      	beq.n	800a998 <sbrk_aligned+0x38>
 800a988:	1a21      	subs	r1, r4, r0
 800a98a:	4628      	mov	r0, r5
 800a98c:	f000 fd06 	bl	800b39c <_sbrk_r>
 800a990:	3001      	adds	r0, #1
 800a992:	d101      	bne.n	800a998 <sbrk_aligned+0x38>
 800a994:	f04f 34ff 	mov.w	r4, #4294967295
 800a998:	4620      	mov	r0, r4
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
 800a99c:	20000dd4 	.word	0x20000dd4

0800a9a0 <_malloc_r>:
 800a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a4:	1ccd      	adds	r5, r1, #3
 800a9a6:	f025 0503 	bic.w	r5, r5, #3
 800a9aa:	3508      	adds	r5, #8
 800a9ac:	2d0c      	cmp	r5, #12
 800a9ae:	bf38      	it	cc
 800a9b0:	250c      	movcc	r5, #12
 800a9b2:	2d00      	cmp	r5, #0
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	db01      	blt.n	800a9bc <_malloc_r+0x1c>
 800a9b8:	42a9      	cmp	r1, r5
 800a9ba:	d905      	bls.n	800a9c8 <_malloc_r+0x28>
 800a9bc:	230c      	movs	r3, #12
 800a9be:	603b      	str	r3, [r7, #0]
 800a9c0:	2600      	movs	r6, #0
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	4e2e      	ldr	r6, [pc, #184]	; (800aa84 <_malloc_r+0xe4>)
 800a9ca:	f001 fcb5 	bl	800c338 <__malloc_lock>
 800a9ce:	6833      	ldr	r3, [r6, #0]
 800a9d0:	461c      	mov	r4, r3
 800a9d2:	bb34      	cbnz	r4, 800aa22 <_malloc_r+0x82>
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7ff ffc2 	bl	800a960 <sbrk_aligned>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	4604      	mov	r4, r0
 800a9e0:	d14d      	bne.n	800aa7e <_malloc_r+0xde>
 800a9e2:	6834      	ldr	r4, [r6, #0]
 800a9e4:	4626      	mov	r6, r4
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	d140      	bne.n	800aa6c <_malloc_r+0xcc>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	eb04 0803 	add.w	r8, r4, r3
 800a9f4:	f000 fcd2 	bl	800b39c <_sbrk_r>
 800a9f8:	4580      	cmp	r8, r0
 800a9fa:	d13a      	bne.n	800aa72 <_malloc_r+0xd2>
 800a9fc:	6821      	ldr	r1, [r4, #0]
 800a9fe:	3503      	adds	r5, #3
 800aa00:	1a6d      	subs	r5, r5, r1
 800aa02:	f025 0503 	bic.w	r5, r5, #3
 800aa06:	3508      	adds	r5, #8
 800aa08:	2d0c      	cmp	r5, #12
 800aa0a:	bf38      	it	cc
 800aa0c:	250c      	movcc	r5, #12
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4638      	mov	r0, r7
 800aa12:	f7ff ffa5 	bl	800a960 <sbrk_aligned>
 800aa16:	3001      	adds	r0, #1
 800aa18:	d02b      	beq.n	800aa72 <_malloc_r+0xd2>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	442b      	add	r3, r5
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	e00e      	b.n	800aa40 <_malloc_r+0xa0>
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	1b52      	subs	r2, r2, r5
 800aa26:	d41e      	bmi.n	800aa66 <_malloc_r+0xc6>
 800aa28:	2a0b      	cmp	r2, #11
 800aa2a:	d916      	bls.n	800aa5a <_malloc_r+0xba>
 800aa2c:	1961      	adds	r1, r4, r5
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	6025      	str	r5, [r4, #0]
 800aa32:	bf18      	it	ne
 800aa34:	6059      	strne	r1, [r3, #4]
 800aa36:	6863      	ldr	r3, [r4, #4]
 800aa38:	bf08      	it	eq
 800aa3a:	6031      	streq	r1, [r6, #0]
 800aa3c:	5162      	str	r2, [r4, r5]
 800aa3e:	604b      	str	r3, [r1, #4]
 800aa40:	4638      	mov	r0, r7
 800aa42:	f104 060b 	add.w	r6, r4, #11
 800aa46:	f001 fc7d 	bl	800c344 <__malloc_unlock>
 800aa4a:	f026 0607 	bic.w	r6, r6, #7
 800aa4e:	1d23      	adds	r3, r4, #4
 800aa50:	1af2      	subs	r2, r6, r3
 800aa52:	d0b6      	beq.n	800a9c2 <_malloc_r+0x22>
 800aa54:	1b9b      	subs	r3, r3, r6
 800aa56:	50a3      	str	r3, [r4, r2]
 800aa58:	e7b3      	b.n	800a9c2 <_malloc_r+0x22>
 800aa5a:	6862      	ldr	r2, [r4, #4]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	bf0c      	ite	eq
 800aa60:	6032      	streq	r2, [r6, #0]
 800aa62:	605a      	strne	r2, [r3, #4]
 800aa64:	e7ec      	b.n	800aa40 <_malloc_r+0xa0>
 800aa66:	4623      	mov	r3, r4
 800aa68:	6864      	ldr	r4, [r4, #4]
 800aa6a:	e7b2      	b.n	800a9d2 <_malloc_r+0x32>
 800aa6c:	4634      	mov	r4, r6
 800aa6e:	6876      	ldr	r6, [r6, #4]
 800aa70:	e7b9      	b.n	800a9e6 <_malloc_r+0x46>
 800aa72:	230c      	movs	r3, #12
 800aa74:	603b      	str	r3, [r7, #0]
 800aa76:	4638      	mov	r0, r7
 800aa78:	f001 fc64 	bl	800c344 <__malloc_unlock>
 800aa7c:	e7a1      	b.n	800a9c2 <_malloc_r+0x22>
 800aa7e:	6025      	str	r5, [r4, #0]
 800aa80:	e7de      	b.n	800aa40 <_malloc_r+0xa0>
 800aa82:	bf00      	nop
 800aa84:	20000dd0 	.word	0x20000dd0

0800aa88 <__cvt>:
 800aa88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8c:	ec55 4b10 	vmov	r4, r5, d0
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	460e      	mov	r6, r1
 800aa94:	4619      	mov	r1, r3
 800aa96:	462b      	mov	r3, r5
 800aa98:	bfbb      	ittet	lt
 800aa9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa9e:	461d      	movlt	r5, r3
 800aaa0:	2300      	movge	r3, #0
 800aaa2:	232d      	movlt	r3, #45	; 0x2d
 800aaa4:	700b      	strb	r3, [r1, #0]
 800aaa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aaac:	4691      	mov	r9, r2
 800aaae:	f023 0820 	bic.w	r8, r3, #32
 800aab2:	bfbc      	itt	lt
 800aab4:	4622      	movlt	r2, r4
 800aab6:	4614      	movlt	r4, r2
 800aab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aabc:	d005      	beq.n	800aaca <__cvt+0x42>
 800aabe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aac2:	d100      	bne.n	800aac6 <__cvt+0x3e>
 800aac4:	3601      	adds	r6, #1
 800aac6:	2102      	movs	r1, #2
 800aac8:	e000      	b.n	800aacc <__cvt+0x44>
 800aaca:	2103      	movs	r1, #3
 800aacc:	ab03      	add	r3, sp, #12
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	ab02      	add	r3, sp, #8
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	ec45 4b10 	vmov	d0, r4, r5
 800aad8:	4653      	mov	r3, sl
 800aada:	4632      	mov	r2, r6
 800aadc:	f000 fd40 	bl	800b560 <_dtoa_r>
 800aae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aae4:	4607      	mov	r7, r0
 800aae6:	d102      	bne.n	800aaee <__cvt+0x66>
 800aae8:	f019 0f01 	tst.w	r9, #1
 800aaec:	d022      	beq.n	800ab34 <__cvt+0xac>
 800aaee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaf2:	eb07 0906 	add.w	r9, r7, r6
 800aaf6:	d110      	bne.n	800ab1a <__cvt+0x92>
 800aaf8:	783b      	ldrb	r3, [r7, #0]
 800aafa:	2b30      	cmp	r3, #48	; 0x30
 800aafc:	d10a      	bne.n	800ab14 <__cvt+0x8c>
 800aafe:	2200      	movs	r2, #0
 800ab00:	2300      	movs	r3, #0
 800ab02:	4620      	mov	r0, r4
 800ab04:	4629      	mov	r1, r5
 800ab06:	f7f5 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab0a:	b918      	cbnz	r0, 800ab14 <__cvt+0x8c>
 800ab0c:	f1c6 0601 	rsb	r6, r6, #1
 800ab10:	f8ca 6000 	str.w	r6, [sl]
 800ab14:	f8da 3000 	ldr.w	r3, [sl]
 800ab18:	4499      	add	r9, r3
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4620      	mov	r0, r4
 800ab20:	4629      	mov	r1, r5
 800ab22:	f7f5 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab26:	b108      	cbz	r0, 800ab2c <__cvt+0xa4>
 800ab28:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab2c:	2230      	movs	r2, #48	; 0x30
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	454b      	cmp	r3, r9
 800ab32:	d307      	bcc.n	800ab44 <__cvt+0xbc>
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab38:	1bdb      	subs	r3, r3, r7
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	b004      	add	sp, #16
 800ab40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab44:	1c59      	adds	r1, r3, #1
 800ab46:	9103      	str	r1, [sp, #12]
 800ab48:	701a      	strb	r2, [r3, #0]
 800ab4a:	e7f0      	b.n	800ab2e <__cvt+0xa6>

0800ab4c <__exponent>:
 800ab4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2900      	cmp	r1, #0
 800ab52:	bfb8      	it	lt
 800ab54:	4249      	neglt	r1, r1
 800ab56:	f803 2b02 	strb.w	r2, [r3], #2
 800ab5a:	bfb4      	ite	lt
 800ab5c:	222d      	movlt	r2, #45	; 0x2d
 800ab5e:	222b      	movge	r2, #43	; 0x2b
 800ab60:	2909      	cmp	r1, #9
 800ab62:	7042      	strb	r2, [r0, #1]
 800ab64:	dd2a      	ble.n	800abbc <__exponent+0x70>
 800ab66:	f10d 0407 	add.w	r4, sp, #7
 800ab6a:	46a4      	mov	ip, r4
 800ab6c:	270a      	movs	r7, #10
 800ab6e:	46a6      	mov	lr, r4
 800ab70:	460a      	mov	r2, r1
 800ab72:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab76:	fb07 1516 	mls	r5, r7, r6, r1
 800ab7a:	3530      	adds	r5, #48	; 0x30
 800ab7c:	2a63      	cmp	r2, #99	; 0x63
 800ab7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab86:	4631      	mov	r1, r6
 800ab88:	dcf1      	bgt.n	800ab6e <__exponent+0x22>
 800ab8a:	3130      	adds	r1, #48	; 0x30
 800ab8c:	f1ae 0502 	sub.w	r5, lr, #2
 800ab90:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab94:	1c44      	adds	r4, r0, #1
 800ab96:	4629      	mov	r1, r5
 800ab98:	4561      	cmp	r1, ip
 800ab9a:	d30a      	bcc.n	800abb2 <__exponent+0x66>
 800ab9c:	f10d 0209 	add.w	r2, sp, #9
 800aba0:	eba2 020e 	sub.w	r2, r2, lr
 800aba4:	4565      	cmp	r5, ip
 800aba6:	bf88      	it	hi
 800aba8:	2200      	movhi	r2, #0
 800abaa:	4413      	add	r3, r2
 800abac:	1a18      	subs	r0, r3, r0
 800abae:	b003      	add	sp, #12
 800abb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abba:	e7ed      	b.n	800ab98 <__exponent+0x4c>
 800abbc:	2330      	movs	r3, #48	; 0x30
 800abbe:	3130      	adds	r1, #48	; 0x30
 800abc0:	7083      	strb	r3, [r0, #2]
 800abc2:	70c1      	strb	r1, [r0, #3]
 800abc4:	1d03      	adds	r3, r0, #4
 800abc6:	e7f1      	b.n	800abac <__exponent+0x60>

0800abc8 <_printf_float>:
 800abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	ed2d 8b02 	vpush	{d8}
 800abd0:	b08d      	sub	sp, #52	; 0x34
 800abd2:	460c      	mov	r4, r1
 800abd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800abd8:	4616      	mov	r6, r2
 800abda:	461f      	mov	r7, r3
 800abdc:	4605      	mov	r5, r0
 800abde:	f001 fba3 	bl	800c328 <_localeconv_r>
 800abe2:	f8d0 a000 	ldr.w	sl, [r0]
 800abe6:	4650      	mov	r0, sl
 800abe8:	f7f5 faf2 	bl	80001d0 <strlen>
 800abec:	2300      	movs	r3, #0
 800abee:	930a      	str	r3, [sp, #40]	; 0x28
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	9305      	str	r3, [sp, #20]
 800abf4:	f8d8 3000 	ldr.w	r3, [r8]
 800abf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abfc:	3307      	adds	r3, #7
 800abfe:	f023 0307 	bic.w	r3, r3, #7
 800ac02:	f103 0208 	add.w	r2, r3, #8
 800ac06:	f8c8 2000 	str.w	r2, [r8]
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac1a:	9307      	str	r3, [sp, #28]
 800ac1c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac20:	ee08 0a10 	vmov	s16, r0
 800ac24:	4b9f      	ldr	r3, [pc, #636]	; (800aea4 <_printf_float+0x2dc>)
 800ac26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac2e:	f7f5 ff7d 	bl	8000b2c <__aeabi_dcmpun>
 800ac32:	bb88      	cbnz	r0, 800ac98 <_printf_float+0xd0>
 800ac34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac38:	4b9a      	ldr	r3, [pc, #616]	; (800aea4 <_printf_float+0x2dc>)
 800ac3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3e:	f7f5 ff57 	bl	8000af0 <__aeabi_dcmple>
 800ac42:	bb48      	cbnz	r0, 800ac98 <_printf_float+0xd0>
 800ac44:	2200      	movs	r2, #0
 800ac46:	2300      	movs	r3, #0
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7f5 ff46 	bl	8000adc <__aeabi_dcmplt>
 800ac50:	b110      	cbz	r0, 800ac58 <_printf_float+0x90>
 800ac52:	232d      	movs	r3, #45	; 0x2d
 800ac54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac58:	4b93      	ldr	r3, [pc, #588]	; (800aea8 <_printf_float+0x2e0>)
 800ac5a:	4894      	ldr	r0, [pc, #592]	; (800aeac <_printf_float+0x2e4>)
 800ac5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac60:	bf94      	ite	ls
 800ac62:	4698      	movls	r8, r3
 800ac64:	4680      	movhi	r8, r0
 800ac66:	2303      	movs	r3, #3
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	f023 0204 	bic.w	r2, r3, #4
 800ac70:	6022      	str	r2, [r4, #0]
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	9700      	str	r7, [sp, #0]
 800ac78:	4633      	mov	r3, r6
 800ac7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f000 f9d8 	bl	800b034 <_printf_common>
 800ac84:	3001      	adds	r0, #1
 800ac86:	f040 8090 	bne.w	800adaa <_printf_float+0x1e2>
 800ac8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8e:	b00d      	add	sp, #52	; 0x34
 800ac90:	ecbd 8b02 	vpop	{d8}
 800ac94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac98:	4642      	mov	r2, r8
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 ff44 	bl	8000b2c <__aeabi_dcmpun>
 800aca4:	b140      	cbz	r0, 800acb8 <_printf_float+0xf0>
 800aca6:	464b      	mov	r3, r9
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bfbc      	itt	lt
 800acac:	232d      	movlt	r3, #45	; 0x2d
 800acae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acb2:	487f      	ldr	r0, [pc, #508]	; (800aeb0 <_printf_float+0x2e8>)
 800acb4:	4b7f      	ldr	r3, [pc, #508]	; (800aeb4 <_printf_float+0x2ec>)
 800acb6:	e7d1      	b.n	800ac5c <_printf_float+0x94>
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acbe:	9206      	str	r2, [sp, #24]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	d13f      	bne.n	800ad44 <_printf_float+0x17c>
 800acc4:	2306      	movs	r3, #6
 800acc6:	6063      	str	r3, [r4, #4]
 800acc8:	9b05      	ldr	r3, [sp, #20]
 800acca:	6861      	ldr	r1, [r4, #4]
 800accc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800acd0:	2300      	movs	r3, #0
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	ab0a      	add	r3, sp, #40	; 0x28
 800acd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800acda:	ab09      	add	r3, sp, #36	; 0x24
 800acdc:	ec49 8b10 	vmov	d0, r8, r9
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	6022      	str	r2, [r4, #0]
 800ace4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ace8:	4628      	mov	r0, r5
 800acea:	f7ff fecd 	bl	800aa88 <__cvt>
 800acee:	9b06      	ldr	r3, [sp, #24]
 800acf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acf2:	2b47      	cmp	r3, #71	; 0x47
 800acf4:	4680      	mov	r8, r0
 800acf6:	d108      	bne.n	800ad0a <_printf_float+0x142>
 800acf8:	1cc8      	adds	r0, r1, #3
 800acfa:	db02      	blt.n	800ad02 <_printf_float+0x13a>
 800acfc:	6863      	ldr	r3, [r4, #4]
 800acfe:	4299      	cmp	r1, r3
 800ad00:	dd41      	ble.n	800ad86 <_printf_float+0x1be>
 800ad02:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad06:	fa5f fb8b 	uxtb.w	fp, fp
 800ad0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad0e:	d820      	bhi.n	800ad52 <_printf_float+0x18a>
 800ad10:	3901      	subs	r1, #1
 800ad12:	465a      	mov	r2, fp
 800ad14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad18:	9109      	str	r1, [sp, #36]	; 0x24
 800ad1a:	f7ff ff17 	bl	800ab4c <__exponent>
 800ad1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad20:	1813      	adds	r3, r2, r0
 800ad22:	2a01      	cmp	r2, #1
 800ad24:	4681      	mov	r9, r0
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	dc02      	bgt.n	800ad30 <_printf_float+0x168>
 800ad2a:	6822      	ldr	r2, [r4, #0]
 800ad2c:	07d2      	lsls	r2, r2, #31
 800ad2e:	d501      	bpl.n	800ad34 <_printf_float+0x16c>
 800ad30:	3301      	adds	r3, #1
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d09c      	beq.n	800ac76 <_printf_float+0xae>
 800ad3c:	232d      	movs	r3, #45	; 0x2d
 800ad3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad42:	e798      	b.n	800ac76 <_printf_float+0xae>
 800ad44:	9a06      	ldr	r2, [sp, #24]
 800ad46:	2a47      	cmp	r2, #71	; 0x47
 800ad48:	d1be      	bne.n	800acc8 <_printf_float+0x100>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1bc      	bne.n	800acc8 <_printf_float+0x100>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e7b9      	b.n	800acc6 <_printf_float+0xfe>
 800ad52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad56:	d118      	bne.n	800ad8a <_printf_float+0x1c2>
 800ad58:	2900      	cmp	r1, #0
 800ad5a:	6863      	ldr	r3, [r4, #4]
 800ad5c:	dd0b      	ble.n	800ad76 <_printf_float+0x1ae>
 800ad5e:	6121      	str	r1, [r4, #16]
 800ad60:	b913      	cbnz	r3, 800ad68 <_printf_float+0x1a0>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	07d0      	lsls	r0, r2, #31
 800ad66:	d502      	bpl.n	800ad6e <_printf_float+0x1a6>
 800ad68:	3301      	adds	r3, #1
 800ad6a:	440b      	add	r3, r1
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad70:	f04f 0900 	mov.w	r9, #0
 800ad74:	e7de      	b.n	800ad34 <_printf_float+0x16c>
 800ad76:	b913      	cbnz	r3, 800ad7e <_printf_float+0x1b6>
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	07d2      	lsls	r2, r2, #31
 800ad7c:	d501      	bpl.n	800ad82 <_printf_float+0x1ba>
 800ad7e:	3302      	adds	r3, #2
 800ad80:	e7f4      	b.n	800ad6c <_printf_float+0x1a4>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e7f2      	b.n	800ad6c <_printf_float+0x1a4>
 800ad86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	db05      	blt.n	800ad9c <_printf_float+0x1d4>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	6121      	str	r1, [r4, #16]
 800ad94:	07d8      	lsls	r0, r3, #31
 800ad96:	d5ea      	bpl.n	800ad6e <_printf_float+0x1a6>
 800ad98:	1c4b      	adds	r3, r1, #1
 800ad9a:	e7e7      	b.n	800ad6c <_printf_float+0x1a4>
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	bfd4      	ite	le
 800ada0:	f1c1 0202 	rsble	r2, r1, #2
 800ada4:	2201      	movgt	r2, #1
 800ada6:	4413      	add	r3, r2
 800ada8:	e7e0      	b.n	800ad6c <_printf_float+0x1a4>
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	055a      	lsls	r2, r3, #21
 800adae:	d407      	bmi.n	800adc0 <_printf_float+0x1f8>
 800adb0:	6923      	ldr	r3, [r4, #16]
 800adb2:	4642      	mov	r2, r8
 800adb4:	4631      	mov	r1, r6
 800adb6:	4628      	mov	r0, r5
 800adb8:	47b8      	blx	r7
 800adba:	3001      	adds	r0, #1
 800adbc:	d12c      	bne.n	800ae18 <_printf_float+0x250>
 800adbe:	e764      	b.n	800ac8a <_printf_float+0xc2>
 800adc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adc4:	f240 80e0 	bls.w	800af88 <_printf_float+0x3c0>
 800adc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adcc:	2200      	movs	r2, #0
 800adce:	2300      	movs	r3, #0
 800add0:	f7f5 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800add4:	2800      	cmp	r0, #0
 800add6:	d034      	beq.n	800ae42 <_printf_float+0x27a>
 800add8:	4a37      	ldr	r2, [pc, #220]	; (800aeb8 <_printf_float+0x2f0>)
 800adda:	2301      	movs	r3, #1
 800addc:	4631      	mov	r1, r6
 800adde:	4628      	mov	r0, r5
 800ade0:	47b8      	blx	r7
 800ade2:	3001      	adds	r0, #1
 800ade4:	f43f af51 	beq.w	800ac8a <_printf_float+0xc2>
 800ade8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adec:	429a      	cmp	r2, r3
 800adee:	db02      	blt.n	800adf6 <_printf_float+0x22e>
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	07d8      	lsls	r0, r3, #31
 800adf4:	d510      	bpl.n	800ae18 <_printf_float+0x250>
 800adf6:	ee18 3a10 	vmov	r3, s16
 800adfa:	4652      	mov	r2, sl
 800adfc:	4631      	mov	r1, r6
 800adfe:	4628      	mov	r0, r5
 800ae00:	47b8      	blx	r7
 800ae02:	3001      	adds	r0, #1
 800ae04:	f43f af41 	beq.w	800ac8a <_printf_float+0xc2>
 800ae08:	f04f 0800 	mov.w	r8, #0
 800ae0c:	f104 091a 	add.w	r9, r4, #26
 800ae10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae12:	3b01      	subs	r3, #1
 800ae14:	4543      	cmp	r3, r8
 800ae16:	dc09      	bgt.n	800ae2c <_printf_float+0x264>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	079b      	lsls	r3, r3, #30
 800ae1c:	f100 8105 	bmi.w	800b02a <_printf_float+0x462>
 800ae20:	68e0      	ldr	r0, [r4, #12]
 800ae22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae24:	4298      	cmp	r0, r3
 800ae26:	bfb8      	it	lt
 800ae28:	4618      	movlt	r0, r3
 800ae2a:	e730      	b.n	800ac8e <_printf_float+0xc6>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	464a      	mov	r2, r9
 800ae30:	4631      	mov	r1, r6
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f af27 	beq.w	800ac8a <_printf_float+0xc2>
 800ae3c:	f108 0801 	add.w	r8, r8, #1
 800ae40:	e7e6      	b.n	800ae10 <_printf_float+0x248>
 800ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dc39      	bgt.n	800aebc <_printf_float+0x2f4>
 800ae48:	4a1b      	ldr	r2, [pc, #108]	; (800aeb8 <_printf_float+0x2f0>)
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4628      	mov	r0, r5
 800ae50:	47b8      	blx	r7
 800ae52:	3001      	adds	r0, #1
 800ae54:	f43f af19 	beq.w	800ac8a <_printf_float+0xc2>
 800ae58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	d102      	bne.n	800ae66 <_printf_float+0x29e>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	07d9      	lsls	r1, r3, #31
 800ae64:	d5d8      	bpl.n	800ae18 <_printf_float+0x250>
 800ae66:	ee18 3a10 	vmov	r3, s16
 800ae6a:	4652      	mov	r2, sl
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4628      	mov	r0, r5
 800ae70:	47b8      	blx	r7
 800ae72:	3001      	adds	r0, #1
 800ae74:	f43f af09 	beq.w	800ac8a <_printf_float+0xc2>
 800ae78:	f04f 0900 	mov.w	r9, #0
 800ae7c:	f104 0a1a 	add.w	sl, r4, #26
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	425b      	negs	r3, r3
 800ae84:	454b      	cmp	r3, r9
 800ae86:	dc01      	bgt.n	800ae8c <_printf_float+0x2c4>
 800ae88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae8a:	e792      	b.n	800adb2 <_printf_float+0x1ea>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	4652      	mov	r2, sl
 800ae90:	4631      	mov	r1, r6
 800ae92:	4628      	mov	r0, r5
 800ae94:	47b8      	blx	r7
 800ae96:	3001      	adds	r0, #1
 800ae98:	f43f aef7 	beq.w	800ac8a <_printf_float+0xc2>
 800ae9c:	f109 0901 	add.w	r9, r9, #1
 800aea0:	e7ee      	b.n	800ae80 <_printf_float+0x2b8>
 800aea2:	bf00      	nop
 800aea4:	7fefffff 	.word	0x7fefffff
 800aea8:	0800ea54 	.word	0x0800ea54
 800aeac:	0800ea58 	.word	0x0800ea58
 800aeb0:	0800ea60 	.word	0x0800ea60
 800aeb4:	0800ea5c 	.word	0x0800ea5c
 800aeb8:	0800ea64 	.word	0x0800ea64
 800aebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aec0:	429a      	cmp	r2, r3
 800aec2:	bfa8      	it	ge
 800aec4:	461a      	movge	r2, r3
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	4691      	mov	r9, r2
 800aeca:	dc37      	bgt.n	800af3c <_printf_float+0x374>
 800aecc:	f04f 0b00 	mov.w	fp, #0
 800aed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aed4:	f104 021a 	add.w	r2, r4, #26
 800aed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeda:	9305      	str	r3, [sp, #20]
 800aedc:	eba3 0309 	sub.w	r3, r3, r9
 800aee0:	455b      	cmp	r3, fp
 800aee2:	dc33      	bgt.n	800af4c <_printf_float+0x384>
 800aee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aee8:	429a      	cmp	r2, r3
 800aeea:	db3b      	blt.n	800af64 <_printf_float+0x39c>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	07da      	lsls	r2, r3, #31
 800aef0:	d438      	bmi.n	800af64 <_printf_float+0x39c>
 800aef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef4:	9a05      	ldr	r2, [sp, #20]
 800aef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aef8:	1a9a      	subs	r2, r3, r2
 800aefa:	eba3 0901 	sub.w	r9, r3, r1
 800aefe:	4591      	cmp	r9, r2
 800af00:	bfa8      	it	ge
 800af02:	4691      	movge	r9, r2
 800af04:	f1b9 0f00 	cmp.w	r9, #0
 800af08:	dc35      	bgt.n	800af76 <_printf_float+0x3ae>
 800af0a:	f04f 0800 	mov.w	r8, #0
 800af0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af12:	f104 0a1a 	add.w	sl, r4, #26
 800af16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	eba3 0309 	sub.w	r3, r3, r9
 800af20:	4543      	cmp	r3, r8
 800af22:	f77f af79 	ble.w	800ae18 <_printf_float+0x250>
 800af26:	2301      	movs	r3, #1
 800af28:	4652      	mov	r2, sl
 800af2a:	4631      	mov	r1, r6
 800af2c:	4628      	mov	r0, r5
 800af2e:	47b8      	blx	r7
 800af30:	3001      	adds	r0, #1
 800af32:	f43f aeaa 	beq.w	800ac8a <_printf_float+0xc2>
 800af36:	f108 0801 	add.w	r8, r8, #1
 800af3a:	e7ec      	b.n	800af16 <_printf_float+0x34e>
 800af3c:	4613      	mov	r3, r2
 800af3e:	4631      	mov	r1, r6
 800af40:	4642      	mov	r2, r8
 800af42:	4628      	mov	r0, r5
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	d1c0      	bne.n	800aecc <_printf_float+0x304>
 800af4a:	e69e      	b.n	800ac8a <_printf_float+0xc2>
 800af4c:	2301      	movs	r3, #1
 800af4e:	4631      	mov	r1, r6
 800af50:	4628      	mov	r0, r5
 800af52:	9205      	str	r2, [sp, #20]
 800af54:	47b8      	blx	r7
 800af56:	3001      	adds	r0, #1
 800af58:	f43f ae97 	beq.w	800ac8a <_printf_float+0xc2>
 800af5c:	9a05      	ldr	r2, [sp, #20]
 800af5e:	f10b 0b01 	add.w	fp, fp, #1
 800af62:	e7b9      	b.n	800aed8 <_printf_float+0x310>
 800af64:	ee18 3a10 	vmov	r3, s16
 800af68:	4652      	mov	r2, sl
 800af6a:	4631      	mov	r1, r6
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b8      	blx	r7
 800af70:	3001      	adds	r0, #1
 800af72:	d1be      	bne.n	800aef2 <_printf_float+0x32a>
 800af74:	e689      	b.n	800ac8a <_printf_float+0xc2>
 800af76:	9a05      	ldr	r2, [sp, #20]
 800af78:	464b      	mov	r3, r9
 800af7a:	4442      	add	r2, r8
 800af7c:	4631      	mov	r1, r6
 800af7e:	4628      	mov	r0, r5
 800af80:	47b8      	blx	r7
 800af82:	3001      	adds	r0, #1
 800af84:	d1c1      	bne.n	800af0a <_printf_float+0x342>
 800af86:	e680      	b.n	800ac8a <_printf_float+0xc2>
 800af88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af8a:	2a01      	cmp	r2, #1
 800af8c:	dc01      	bgt.n	800af92 <_printf_float+0x3ca>
 800af8e:	07db      	lsls	r3, r3, #31
 800af90:	d538      	bpl.n	800b004 <_printf_float+0x43c>
 800af92:	2301      	movs	r3, #1
 800af94:	4642      	mov	r2, r8
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	f43f ae74 	beq.w	800ac8a <_printf_float+0xc2>
 800afa2:	ee18 3a10 	vmov	r3, s16
 800afa6:	4652      	mov	r2, sl
 800afa8:	4631      	mov	r1, r6
 800afaa:	4628      	mov	r0, r5
 800afac:	47b8      	blx	r7
 800afae:	3001      	adds	r0, #1
 800afb0:	f43f ae6b 	beq.w	800ac8a <_printf_float+0xc2>
 800afb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afb8:	2200      	movs	r2, #0
 800afba:	2300      	movs	r3, #0
 800afbc:	f7f5 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc0:	b9d8      	cbnz	r0, 800affa <_printf_float+0x432>
 800afc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc4:	f108 0201 	add.w	r2, r8, #1
 800afc8:	3b01      	subs	r3, #1
 800afca:	4631      	mov	r1, r6
 800afcc:	4628      	mov	r0, r5
 800afce:	47b8      	blx	r7
 800afd0:	3001      	adds	r0, #1
 800afd2:	d10e      	bne.n	800aff2 <_printf_float+0x42a>
 800afd4:	e659      	b.n	800ac8a <_printf_float+0xc2>
 800afd6:	2301      	movs	r3, #1
 800afd8:	4652      	mov	r2, sl
 800afda:	4631      	mov	r1, r6
 800afdc:	4628      	mov	r0, r5
 800afde:	47b8      	blx	r7
 800afe0:	3001      	adds	r0, #1
 800afe2:	f43f ae52 	beq.w	800ac8a <_printf_float+0xc2>
 800afe6:	f108 0801 	add.w	r8, r8, #1
 800afea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afec:	3b01      	subs	r3, #1
 800afee:	4543      	cmp	r3, r8
 800aff0:	dcf1      	bgt.n	800afd6 <_printf_float+0x40e>
 800aff2:	464b      	mov	r3, r9
 800aff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aff8:	e6dc      	b.n	800adb4 <_printf_float+0x1ec>
 800affa:	f04f 0800 	mov.w	r8, #0
 800affe:	f104 0a1a 	add.w	sl, r4, #26
 800b002:	e7f2      	b.n	800afea <_printf_float+0x422>
 800b004:	2301      	movs	r3, #1
 800b006:	4642      	mov	r2, r8
 800b008:	e7df      	b.n	800afca <_printf_float+0x402>
 800b00a:	2301      	movs	r3, #1
 800b00c:	464a      	mov	r2, r9
 800b00e:	4631      	mov	r1, r6
 800b010:	4628      	mov	r0, r5
 800b012:	47b8      	blx	r7
 800b014:	3001      	adds	r0, #1
 800b016:	f43f ae38 	beq.w	800ac8a <_printf_float+0xc2>
 800b01a:	f108 0801 	add.w	r8, r8, #1
 800b01e:	68e3      	ldr	r3, [r4, #12]
 800b020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b022:	1a5b      	subs	r3, r3, r1
 800b024:	4543      	cmp	r3, r8
 800b026:	dcf0      	bgt.n	800b00a <_printf_float+0x442>
 800b028:	e6fa      	b.n	800ae20 <_printf_float+0x258>
 800b02a:	f04f 0800 	mov.w	r8, #0
 800b02e:	f104 0919 	add.w	r9, r4, #25
 800b032:	e7f4      	b.n	800b01e <_printf_float+0x456>

0800b034 <_printf_common>:
 800b034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b038:	4616      	mov	r6, r2
 800b03a:	4699      	mov	r9, r3
 800b03c:	688a      	ldr	r2, [r1, #8]
 800b03e:	690b      	ldr	r3, [r1, #16]
 800b040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b044:	4293      	cmp	r3, r2
 800b046:	bfb8      	it	lt
 800b048:	4613      	movlt	r3, r2
 800b04a:	6033      	str	r3, [r6, #0]
 800b04c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b050:	4607      	mov	r7, r0
 800b052:	460c      	mov	r4, r1
 800b054:	b10a      	cbz	r2, 800b05a <_printf_common+0x26>
 800b056:	3301      	adds	r3, #1
 800b058:	6033      	str	r3, [r6, #0]
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	0699      	lsls	r1, r3, #26
 800b05e:	bf42      	ittt	mi
 800b060:	6833      	ldrmi	r3, [r6, #0]
 800b062:	3302      	addmi	r3, #2
 800b064:	6033      	strmi	r3, [r6, #0]
 800b066:	6825      	ldr	r5, [r4, #0]
 800b068:	f015 0506 	ands.w	r5, r5, #6
 800b06c:	d106      	bne.n	800b07c <_printf_common+0x48>
 800b06e:	f104 0a19 	add.w	sl, r4, #25
 800b072:	68e3      	ldr	r3, [r4, #12]
 800b074:	6832      	ldr	r2, [r6, #0]
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	42ab      	cmp	r3, r5
 800b07a:	dc26      	bgt.n	800b0ca <_printf_common+0x96>
 800b07c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b080:	1e13      	subs	r3, r2, #0
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	bf18      	it	ne
 800b086:	2301      	movne	r3, #1
 800b088:	0692      	lsls	r2, r2, #26
 800b08a:	d42b      	bmi.n	800b0e4 <_printf_common+0xb0>
 800b08c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b090:	4649      	mov	r1, r9
 800b092:	4638      	mov	r0, r7
 800b094:	47c0      	blx	r8
 800b096:	3001      	adds	r0, #1
 800b098:	d01e      	beq.n	800b0d8 <_printf_common+0xa4>
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	68e5      	ldr	r5, [r4, #12]
 800b09e:	6832      	ldr	r2, [r6, #0]
 800b0a0:	f003 0306 	and.w	r3, r3, #6
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	bf08      	it	eq
 800b0a8:	1aad      	subeq	r5, r5, r2
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	6922      	ldr	r2, [r4, #16]
 800b0ae:	bf0c      	ite	eq
 800b0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0b4:	2500      	movne	r5, #0
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	bfc4      	itt	gt
 800b0ba:	1a9b      	subgt	r3, r3, r2
 800b0bc:	18ed      	addgt	r5, r5, r3
 800b0be:	2600      	movs	r6, #0
 800b0c0:	341a      	adds	r4, #26
 800b0c2:	42b5      	cmp	r5, r6
 800b0c4:	d11a      	bne.n	800b0fc <_printf_common+0xc8>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e008      	b.n	800b0dc <_printf_common+0xa8>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	4652      	mov	r2, sl
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	47c0      	blx	r8
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d103      	bne.n	800b0e0 <_printf_common+0xac>
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	e7c6      	b.n	800b072 <_printf_common+0x3e>
 800b0e4:	18e1      	adds	r1, r4, r3
 800b0e6:	1c5a      	adds	r2, r3, #1
 800b0e8:	2030      	movs	r0, #48	; 0x30
 800b0ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0ee:	4422      	add	r2, r4
 800b0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0f8:	3302      	adds	r3, #2
 800b0fa:	e7c7      	b.n	800b08c <_printf_common+0x58>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	4622      	mov	r2, r4
 800b100:	4649      	mov	r1, r9
 800b102:	4638      	mov	r0, r7
 800b104:	47c0      	blx	r8
 800b106:	3001      	adds	r0, #1
 800b108:	d0e6      	beq.n	800b0d8 <_printf_common+0xa4>
 800b10a:	3601      	adds	r6, #1
 800b10c:	e7d9      	b.n	800b0c2 <_printf_common+0x8e>
	...

0800b110 <_printf_i>:
 800b110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b114:	7e0f      	ldrb	r7, [r1, #24]
 800b116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b118:	2f78      	cmp	r7, #120	; 0x78
 800b11a:	4691      	mov	r9, r2
 800b11c:	4680      	mov	r8, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	469a      	mov	sl, r3
 800b122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b126:	d807      	bhi.n	800b138 <_printf_i+0x28>
 800b128:	2f62      	cmp	r7, #98	; 0x62
 800b12a:	d80a      	bhi.n	800b142 <_printf_i+0x32>
 800b12c:	2f00      	cmp	r7, #0
 800b12e:	f000 80d8 	beq.w	800b2e2 <_printf_i+0x1d2>
 800b132:	2f58      	cmp	r7, #88	; 0x58
 800b134:	f000 80a3 	beq.w	800b27e <_printf_i+0x16e>
 800b138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b13c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b140:	e03a      	b.n	800b1b8 <_printf_i+0xa8>
 800b142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b146:	2b15      	cmp	r3, #21
 800b148:	d8f6      	bhi.n	800b138 <_printf_i+0x28>
 800b14a:	a101      	add	r1, pc, #4	; (adr r1, 800b150 <_printf_i+0x40>)
 800b14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b150:	0800b1a9 	.word	0x0800b1a9
 800b154:	0800b1bd 	.word	0x0800b1bd
 800b158:	0800b139 	.word	0x0800b139
 800b15c:	0800b139 	.word	0x0800b139
 800b160:	0800b139 	.word	0x0800b139
 800b164:	0800b139 	.word	0x0800b139
 800b168:	0800b1bd 	.word	0x0800b1bd
 800b16c:	0800b139 	.word	0x0800b139
 800b170:	0800b139 	.word	0x0800b139
 800b174:	0800b139 	.word	0x0800b139
 800b178:	0800b139 	.word	0x0800b139
 800b17c:	0800b2c9 	.word	0x0800b2c9
 800b180:	0800b1ed 	.word	0x0800b1ed
 800b184:	0800b2ab 	.word	0x0800b2ab
 800b188:	0800b139 	.word	0x0800b139
 800b18c:	0800b139 	.word	0x0800b139
 800b190:	0800b2eb 	.word	0x0800b2eb
 800b194:	0800b139 	.word	0x0800b139
 800b198:	0800b1ed 	.word	0x0800b1ed
 800b19c:	0800b139 	.word	0x0800b139
 800b1a0:	0800b139 	.word	0x0800b139
 800b1a4:	0800b2b3 	.word	0x0800b2b3
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	1d1a      	adds	r2, r3, #4
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	602a      	str	r2, [r5, #0]
 800b1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e0a3      	b.n	800b304 <_printf_i+0x1f4>
 800b1bc:	6820      	ldr	r0, [r4, #0]
 800b1be:	6829      	ldr	r1, [r5, #0]
 800b1c0:	0606      	lsls	r6, r0, #24
 800b1c2:	f101 0304 	add.w	r3, r1, #4
 800b1c6:	d50a      	bpl.n	800b1de <_printf_i+0xce>
 800b1c8:	680e      	ldr	r6, [r1, #0]
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	da03      	bge.n	800b1d8 <_printf_i+0xc8>
 800b1d0:	232d      	movs	r3, #45	; 0x2d
 800b1d2:	4276      	negs	r6, r6
 800b1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d8:	485e      	ldr	r0, [pc, #376]	; (800b354 <_printf_i+0x244>)
 800b1da:	230a      	movs	r3, #10
 800b1dc:	e019      	b.n	800b212 <_printf_i+0x102>
 800b1de:	680e      	ldr	r6, [r1, #0]
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1e6:	bf18      	it	ne
 800b1e8:	b236      	sxthne	r6, r6
 800b1ea:	e7ef      	b.n	800b1cc <_printf_i+0xbc>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	6820      	ldr	r0, [r4, #0]
 800b1f0:	1d19      	adds	r1, r3, #4
 800b1f2:	6029      	str	r1, [r5, #0]
 800b1f4:	0601      	lsls	r1, r0, #24
 800b1f6:	d501      	bpl.n	800b1fc <_printf_i+0xec>
 800b1f8:	681e      	ldr	r6, [r3, #0]
 800b1fa:	e002      	b.n	800b202 <_printf_i+0xf2>
 800b1fc:	0646      	lsls	r6, r0, #25
 800b1fe:	d5fb      	bpl.n	800b1f8 <_printf_i+0xe8>
 800b200:	881e      	ldrh	r6, [r3, #0]
 800b202:	4854      	ldr	r0, [pc, #336]	; (800b354 <_printf_i+0x244>)
 800b204:	2f6f      	cmp	r7, #111	; 0x6f
 800b206:	bf0c      	ite	eq
 800b208:	2308      	moveq	r3, #8
 800b20a:	230a      	movne	r3, #10
 800b20c:	2100      	movs	r1, #0
 800b20e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b212:	6865      	ldr	r5, [r4, #4]
 800b214:	60a5      	str	r5, [r4, #8]
 800b216:	2d00      	cmp	r5, #0
 800b218:	bfa2      	ittt	ge
 800b21a:	6821      	ldrge	r1, [r4, #0]
 800b21c:	f021 0104 	bicge.w	r1, r1, #4
 800b220:	6021      	strge	r1, [r4, #0]
 800b222:	b90e      	cbnz	r6, 800b228 <_printf_i+0x118>
 800b224:	2d00      	cmp	r5, #0
 800b226:	d04d      	beq.n	800b2c4 <_printf_i+0x1b4>
 800b228:	4615      	mov	r5, r2
 800b22a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b22e:	fb03 6711 	mls	r7, r3, r1, r6
 800b232:	5dc7      	ldrb	r7, [r0, r7]
 800b234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b238:	4637      	mov	r7, r6
 800b23a:	42bb      	cmp	r3, r7
 800b23c:	460e      	mov	r6, r1
 800b23e:	d9f4      	bls.n	800b22a <_printf_i+0x11a>
 800b240:	2b08      	cmp	r3, #8
 800b242:	d10b      	bne.n	800b25c <_printf_i+0x14c>
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	07de      	lsls	r6, r3, #31
 800b248:	d508      	bpl.n	800b25c <_printf_i+0x14c>
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	6861      	ldr	r1, [r4, #4]
 800b24e:	4299      	cmp	r1, r3
 800b250:	bfde      	ittt	le
 800b252:	2330      	movle	r3, #48	; 0x30
 800b254:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b25c:	1b52      	subs	r2, r2, r5
 800b25e:	6122      	str	r2, [r4, #16]
 800b260:	f8cd a000 	str.w	sl, [sp]
 800b264:	464b      	mov	r3, r9
 800b266:	aa03      	add	r2, sp, #12
 800b268:	4621      	mov	r1, r4
 800b26a:	4640      	mov	r0, r8
 800b26c:	f7ff fee2 	bl	800b034 <_printf_common>
 800b270:	3001      	adds	r0, #1
 800b272:	d14c      	bne.n	800b30e <_printf_i+0x1fe>
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	b004      	add	sp, #16
 800b27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b27e:	4835      	ldr	r0, [pc, #212]	; (800b354 <_printf_i+0x244>)
 800b280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b284:	6829      	ldr	r1, [r5, #0]
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	f851 6b04 	ldr.w	r6, [r1], #4
 800b28c:	6029      	str	r1, [r5, #0]
 800b28e:	061d      	lsls	r5, r3, #24
 800b290:	d514      	bpl.n	800b2bc <_printf_i+0x1ac>
 800b292:	07df      	lsls	r7, r3, #31
 800b294:	bf44      	itt	mi
 800b296:	f043 0320 	orrmi.w	r3, r3, #32
 800b29a:	6023      	strmi	r3, [r4, #0]
 800b29c:	b91e      	cbnz	r6, 800b2a6 <_printf_i+0x196>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	f023 0320 	bic.w	r3, r3, #32
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	2310      	movs	r3, #16
 800b2a8:	e7b0      	b.n	800b20c <_printf_i+0xfc>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	f043 0320 	orr.w	r3, r3, #32
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	2378      	movs	r3, #120	; 0x78
 800b2b4:	4828      	ldr	r0, [pc, #160]	; (800b358 <_printf_i+0x248>)
 800b2b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2ba:	e7e3      	b.n	800b284 <_printf_i+0x174>
 800b2bc:	0659      	lsls	r1, r3, #25
 800b2be:	bf48      	it	mi
 800b2c0:	b2b6      	uxthmi	r6, r6
 800b2c2:	e7e6      	b.n	800b292 <_printf_i+0x182>
 800b2c4:	4615      	mov	r5, r2
 800b2c6:	e7bb      	b.n	800b240 <_printf_i+0x130>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	6826      	ldr	r6, [r4, #0]
 800b2cc:	6961      	ldr	r1, [r4, #20]
 800b2ce:	1d18      	adds	r0, r3, #4
 800b2d0:	6028      	str	r0, [r5, #0]
 800b2d2:	0635      	lsls	r5, r6, #24
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	d501      	bpl.n	800b2dc <_printf_i+0x1cc>
 800b2d8:	6019      	str	r1, [r3, #0]
 800b2da:	e002      	b.n	800b2e2 <_printf_i+0x1d2>
 800b2dc:	0670      	lsls	r0, r6, #25
 800b2de:	d5fb      	bpl.n	800b2d8 <_printf_i+0x1c8>
 800b2e0:	8019      	strh	r1, [r3, #0]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	4615      	mov	r5, r2
 800b2e8:	e7ba      	b.n	800b260 <_printf_i+0x150>
 800b2ea:	682b      	ldr	r3, [r5, #0]
 800b2ec:	1d1a      	adds	r2, r3, #4
 800b2ee:	602a      	str	r2, [r5, #0]
 800b2f0:	681d      	ldr	r5, [r3, #0]
 800b2f2:	6862      	ldr	r2, [r4, #4]
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f7f4 ff72 	bl	80001e0 <memchr>
 800b2fc:	b108      	cbz	r0, 800b302 <_printf_i+0x1f2>
 800b2fe:	1b40      	subs	r0, r0, r5
 800b300:	6060      	str	r0, [r4, #4]
 800b302:	6863      	ldr	r3, [r4, #4]
 800b304:	6123      	str	r3, [r4, #16]
 800b306:	2300      	movs	r3, #0
 800b308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b30c:	e7a8      	b.n	800b260 <_printf_i+0x150>
 800b30e:	6923      	ldr	r3, [r4, #16]
 800b310:	462a      	mov	r2, r5
 800b312:	4649      	mov	r1, r9
 800b314:	4640      	mov	r0, r8
 800b316:	47d0      	blx	sl
 800b318:	3001      	adds	r0, #1
 800b31a:	d0ab      	beq.n	800b274 <_printf_i+0x164>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	079b      	lsls	r3, r3, #30
 800b320:	d413      	bmi.n	800b34a <_printf_i+0x23a>
 800b322:	68e0      	ldr	r0, [r4, #12]
 800b324:	9b03      	ldr	r3, [sp, #12]
 800b326:	4298      	cmp	r0, r3
 800b328:	bfb8      	it	lt
 800b32a:	4618      	movlt	r0, r3
 800b32c:	e7a4      	b.n	800b278 <_printf_i+0x168>
 800b32e:	2301      	movs	r3, #1
 800b330:	4632      	mov	r2, r6
 800b332:	4649      	mov	r1, r9
 800b334:	4640      	mov	r0, r8
 800b336:	47d0      	blx	sl
 800b338:	3001      	adds	r0, #1
 800b33a:	d09b      	beq.n	800b274 <_printf_i+0x164>
 800b33c:	3501      	adds	r5, #1
 800b33e:	68e3      	ldr	r3, [r4, #12]
 800b340:	9903      	ldr	r1, [sp, #12]
 800b342:	1a5b      	subs	r3, r3, r1
 800b344:	42ab      	cmp	r3, r5
 800b346:	dcf2      	bgt.n	800b32e <_printf_i+0x21e>
 800b348:	e7eb      	b.n	800b322 <_printf_i+0x212>
 800b34a:	2500      	movs	r5, #0
 800b34c:	f104 0619 	add.w	r6, r4, #25
 800b350:	e7f5      	b.n	800b33e <_printf_i+0x22e>
 800b352:	bf00      	nop
 800b354:	0800ea66 	.word	0x0800ea66
 800b358:	0800ea77 	.word	0x0800ea77

0800b35c <iprintf>:
 800b35c:	b40f      	push	{r0, r1, r2, r3}
 800b35e:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <iprintf+0x2c>)
 800b360:	b513      	push	{r0, r1, r4, lr}
 800b362:	681c      	ldr	r4, [r3, #0]
 800b364:	b124      	cbz	r4, 800b370 <iprintf+0x14>
 800b366:	69a3      	ldr	r3, [r4, #24]
 800b368:	b913      	cbnz	r3, 800b370 <iprintf+0x14>
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 ff3e 	bl	800c1ec <__sinit>
 800b370:	ab05      	add	r3, sp, #20
 800b372:	9a04      	ldr	r2, [sp, #16]
 800b374:	68a1      	ldr	r1, [r4, #8]
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	4620      	mov	r0, r4
 800b37a:	f001 fbdb 	bl	800cb34 <_vfiprintf_r>
 800b37e:	b002      	add	sp, #8
 800b380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b384:	b004      	add	sp, #16
 800b386:	4770      	bx	lr
 800b388:	20000010 	.word	0x20000010

0800b38c <realloc>:
 800b38c:	4b02      	ldr	r3, [pc, #8]	; (800b398 <realloc+0xc>)
 800b38e:	460a      	mov	r2, r1
 800b390:	4601      	mov	r1, r0
 800b392:	6818      	ldr	r0, [r3, #0]
 800b394:	f001 bb76 	b.w	800ca84 <_realloc_r>
 800b398:	20000010 	.word	0x20000010

0800b39c <_sbrk_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d06      	ldr	r5, [pc, #24]	; (800b3b8 <_sbrk_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	602b      	str	r3, [r5, #0]
 800b3a8:	f7f8 fd54 	bl	8003e54 <_sbrk>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_sbrk_r+0x1a>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_sbrk_r+0x1a>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	20000ddc 	.word	0x20000ddc

0800b3bc <_raise_r>:
 800b3bc:	291f      	cmp	r1, #31
 800b3be:	b538      	push	{r3, r4, r5, lr}
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	d904      	bls.n	800b3d0 <_raise_r+0x14>
 800b3c6:	2316      	movs	r3, #22
 800b3c8:	6003      	str	r3, [r0, #0]
 800b3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3d2:	b112      	cbz	r2, 800b3da <_raise_r+0x1e>
 800b3d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3d8:	b94b      	cbnz	r3, 800b3ee <_raise_r+0x32>
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 f830 	bl	800b440 <_getpid_r>
 800b3e0:	462a      	mov	r2, r5
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ea:	f000 b817 	b.w	800b41c <_kill_r>
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d00a      	beq.n	800b408 <_raise_r+0x4c>
 800b3f2:	1c59      	adds	r1, r3, #1
 800b3f4:	d103      	bne.n	800b3fe <_raise_r+0x42>
 800b3f6:	2316      	movs	r3, #22
 800b3f8:	6003      	str	r3, [r0, #0]
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	e7e7      	b.n	800b3ce <_raise_r+0x12>
 800b3fe:	2400      	movs	r4, #0
 800b400:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b404:	4628      	mov	r0, r5
 800b406:	4798      	blx	r3
 800b408:	2000      	movs	r0, #0
 800b40a:	e7e0      	b.n	800b3ce <_raise_r+0x12>

0800b40c <raise>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <raise+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f7ff bfd3 	b.w	800b3bc <_raise_r>
 800b416:	bf00      	nop
 800b418:	20000010 	.word	0x20000010

0800b41c <_kill_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d07      	ldr	r5, [pc, #28]	; (800b43c <_kill_r+0x20>)
 800b420:	2300      	movs	r3, #0
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	4611      	mov	r1, r2
 800b428:	602b      	str	r3, [r5, #0]
 800b42a:	f7f8 fc8b 	bl	8003d44 <_kill>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	d102      	bne.n	800b438 <_kill_r+0x1c>
 800b432:	682b      	ldr	r3, [r5, #0]
 800b434:	b103      	cbz	r3, 800b438 <_kill_r+0x1c>
 800b436:	6023      	str	r3, [r4, #0]
 800b438:	bd38      	pop	{r3, r4, r5, pc}
 800b43a:	bf00      	nop
 800b43c:	20000ddc 	.word	0x20000ddc

0800b440 <_getpid_r>:
 800b440:	f7f8 bc78 	b.w	8003d34 <_getpid>

0800b444 <quorem>:
 800b444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	6903      	ldr	r3, [r0, #16]
 800b44a:	690c      	ldr	r4, [r1, #16]
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	4607      	mov	r7, r0
 800b450:	f2c0 8081 	blt.w	800b556 <quorem+0x112>
 800b454:	3c01      	subs	r4, #1
 800b456:	f101 0814 	add.w	r8, r1, #20
 800b45a:	f100 0514 	add.w	r5, r0, #20
 800b45e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b46c:	3301      	adds	r3, #1
 800b46e:	429a      	cmp	r2, r3
 800b470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b478:	fbb2 f6f3 	udiv	r6, r2, r3
 800b47c:	d331      	bcc.n	800b4e2 <quorem+0x9e>
 800b47e:	f04f 0e00 	mov.w	lr, #0
 800b482:	4640      	mov	r0, r8
 800b484:	46ac      	mov	ip, r5
 800b486:	46f2      	mov	sl, lr
 800b488:	f850 2b04 	ldr.w	r2, [r0], #4
 800b48c:	b293      	uxth	r3, r2
 800b48e:	fb06 e303 	mla	r3, r6, r3, lr
 800b492:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b496:	b29b      	uxth	r3, r3
 800b498:	ebaa 0303 	sub.w	r3, sl, r3
 800b49c:	f8dc a000 	ldr.w	sl, [ip]
 800b4a0:	0c12      	lsrs	r2, r2, #16
 800b4a2:	fa13 f38a 	uxtah	r3, r3, sl
 800b4a6:	fb06 e202 	mla	r2, r6, r2, lr
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	9b00      	ldr	r3, [sp, #0]
 800b4ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4b2:	b292      	uxth	r2, r2
 800b4b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4c0:	4581      	cmp	r9, r0
 800b4c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4c6:	f84c 3b04 	str.w	r3, [ip], #4
 800b4ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4ce:	d2db      	bcs.n	800b488 <quorem+0x44>
 800b4d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4d4:	b92b      	cbnz	r3, 800b4e2 <quorem+0x9e>
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	3b04      	subs	r3, #4
 800b4da:	429d      	cmp	r5, r3
 800b4dc:	461a      	mov	r2, r3
 800b4de:	d32e      	bcc.n	800b53e <quorem+0xfa>
 800b4e0:	613c      	str	r4, [r7, #16]
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	f001 f9b6 	bl	800c854 <__mcmp>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	db24      	blt.n	800b536 <quorem+0xf2>
 800b4ec:	3601      	adds	r6, #1
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	f04f 0c00 	mov.w	ip, #0
 800b4f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4f8:	f8d0 e000 	ldr.w	lr, [r0]
 800b4fc:	b293      	uxth	r3, r2
 800b4fe:	ebac 0303 	sub.w	r3, ip, r3
 800b502:	0c12      	lsrs	r2, r2, #16
 800b504:	fa13 f38e 	uxtah	r3, r3, lr
 800b508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b50c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b510:	b29b      	uxth	r3, r3
 800b512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b516:	45c1      	cmp	r9, r8
 800b518:	f840 3b04 	str.w	r3, [r0], #4
 800b51c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b520:	d2e8      	bcs.n	800b4f4 <quorem+0xb0>
 800b522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b52a:	b922      	cbnz	r2, 800b536 <quorem+0xf2>
 800b52c:	3b04      	subs	r3, #4
 800b52e:	429d      	cmp	r5, r3
 800b530:	461a      	mov	r2, r3
 800b532:	d30a      	bcc.n	800b54a <quorem+0x106>
 800b534:	613c      	str	r4, [r7, #16]
 800b536:	4630      	mov	r0, r6
 800b538:	b003      	add	sp, #12
 800b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53e:	6812      	ldr	r2, [r2, #0]
 800b540:	3b04      	subs	r3, #4
 800b542:	2a00      	cmp	r2, #0
 800b544:	d1cc      	bne.n	800b4e0 <quorem+0x9c>
 800b546:	3c01      	subs	r4, #1
 800b548:	e7c7      	b.n	800b4da <quorem+0x96>
 800b54a:	6812      	ldr	r2, [r2, #0]
 800b54c:	3b04      	subs	r3, #4
 800b54e:	2a00      	cmp	r2, #0
 800b550:	d1f0      	bne.n	800b534 <quorem+0xf0>
 800b552:	3c01      	subs	r4, #1
 800b554:	e7eb      	b.n	800b52e <quorem+0xea>
 800b556:	2000      	movs	r0, #0
 800b558:	e7ee      	b.n	800b538 <quorem+0xf4>
 800b55a:	0000      	movs	r0, r0
 800b55c:	0000      	movs	r0, r0
	...

0800b560 <_dtoa_r>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	ed2d 8b04 	vpush	{d8-d9}
 800b568:	ec57 6b10 	vmov	r6, r7, d0
 800b56c:	b093      	sub	sp, #76	; 0x4c
 800b56e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b574:	9106      	str	r1, [sp, #24]
 800b576:	ee10 aa10 	vmov	sl, s0
 800b57a:	4604      	mov	r4, r0
 800b57c:	9209      	str	r2, [sp, #36]	; 0x24
 800b57e:	930c      	str	r3, [sp, #48]	; 0x30
 800b580:	46bb      	mov	fp, r7
 800b582:	b975      	cbnz	r5, 800b5a2 <_dtoa_r+0x42>
 800b584:	2010      	movs	r0, #16
 800b586:	f7ff f981 	bl	800a88c <malloc>
 800b58a:	4602      	mov	r2, r0
 800b58c:	6260      	str	r0, [r4, #36]	; 0x24
 800b58e:	b920      	cbnz	r0, 800b59a <_dtoa_r+0x3a>
 800b590:	4ba7      	ldr	r3, [pc, #668]	; (800b830 <_dtoa_r+0x2d0>)
 800b592:	21ea      	movs	r1, #234	; 0xea
 800b594:	48a7      	ldr	r0, [pc, #668]	; (800b834 <_dtoa_r+0x2d4>)
 800b596:	f001 fd13 	bl	800cfc0 <__assert_func>
 800b59a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b59e:	6005      	str	r5, [r0, #0]
 800b5a0:	60c5      	str	r5, [r0, #12]
 800b5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5a4:	6819      	ldr	r1, [r3, #0]
 800b5a6:	b151      	cbz	r1, 800b5be <_dtoa_r+0x5e>
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	604a      	str	r2, [r1, #4]
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4093      	lsls	r3, r2
 800b5b0:	608b      	str	r3, [r1, #8]
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f000 ff0c 	bl	800c3d0 <_Bfree>
 800b5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	1e3b      	subs	r3, r7, #0
 800b5c0:	bfaa      	itet	ge
 800b5c2:	2300      	movge	r3, #0
 800b5c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b5c8:	f8c8 3000 	strge.w	r3, [r8]
 800b5cc:	4b9a      	ldr	r3, [pc, #616]	; (800b838 <_dtoa_r+0x2d8>)
 800b5ce:	bfbc      	itt	lt
 800b5d0:	2201      	movlt	r2, #1
 800b5d2:	f8c8 2000 	strlt.w	r2, [r8]
 800b5d6:	ea33 030b 	bics.w	r3, r3, fp
 800b5da:	d11b      	bne.n	800b614 <_dtoa_r+0xb4>
 800b5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5e8:	4333      	orrs	r3, r6
 800b5ea:	f000 8592 	beq.w	800c112 <_dtoa_r+0xbb2>
 800b5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5f0:	b963      	cbnz	r3, 800b60c <_dtoa_r+0xac>
 800b5f2:	4b92      	ldr	r3, [pc, #584]	; (800b83c <_dtoa_r+0x2dc>)
 800b5f4:	e022      	b.n	800b63c <_dtoa_r+0xdc>
 800b5f6:	4b92      	ldr	r3, [pc, #584]	; (800b840 <_dtoa_r+0x2e0>)
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	9801      	ldr	r0, [sp, #4]
 800b602:	b013      	add	sp, #76	; 0x4c
 800b604:	ecbd 8b04 	vpop	{d8-d9}
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60c:	4b8b      	ldr	r3, [pc, #556]	; (800b83c <_dtoa_r+0x2dc>)
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	3303      	adds	r3, #3
 800b612:	e7f3      	b.n	800b5fc <_dtoa_r+0x9c>
 800b614:	2200      	movs	r2, #0
 800b616:	2300      	movs	r3, #0
 800b618:	4650      	mov	r0, sl
 800b61a:	4659      	mov	r1, fp
 800b61c:	f7f5 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 800b620:	ec4b ab19 	vmov	d9, sl, fp
 800b624:	4680      	mov	r8, r0
 800b626:	b158      	cbz	r0, 800b640 <_dtoa_r+0xe0>
 800b628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b62a:	2301      	movs	r3, #1
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 856b 	beq.w	800c10c <_dtoa_r+0xbac>
 800b636:	4883      	ldr	r0, [pc, #524]	; (800b844 <_dtoa_r+0x2e4>)
 800b638:	6018      	str	r0, [r3, #0]
 800b63a:	1e43      	subs	r3, r0, #1
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	e7df      	b.n	800b600 <_dtoa_r+0xa0>
 800b640:	ec4b ab10 	vmov	d0, sl, fp
 800b644:	aa10      	add	r2, sp, #64	; 0x40
 800b646:	a911      	add	r1, sp, #68	; 0x44
 800b648:	4620      	mov	r0, r4
 800b64a:	f001 f9a9 	bl	800c9a0 <__d2b>
 800b64e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b652:	ee08 0a10 	vmov	s16, r0
 800b656:	2d00      	cmp	r5, #0
 800b658:	f000 8084 	beq.w	800b764 <_dtoa_r+0x204>
 800b65c:	ee19 3a90 	vmov	r3, s19
 800b660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b664:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b668:	4656      	mov	r6, sl
 800b66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b672:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b676:	4b74      	ldr	r3, [pc, #464]	; (800b848 <_dtoa_r+0x2e8>)
 800b678:	2200      	movs	r2, #0
 800b67a:	4630      	mov	r0, r6
 800b67c:	4639      	mov	r1, r7
 800b67e:	f7f4 fe03 	bl	8000288 <__aeabi_dsub>
 800b682:	a365      	add	r3, pc, #404	; (adr r3, 800b818 <_dtoa_r+0x2b8>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 ffb6 	bl	80005f8 <__aeabi_dmul>
 800b68c:	a364      	add	r3, pc, #400	; (adr r3, 800b820 <_dtoa_r+0x2c0>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f7f4 fdfb 	bl	800028c <__adddf3>
 800b696:	4606      	mov	r6, r0
 800b698:	4628      	mov	r0, r5
 800b69a:	460f      	mov	r7, r1
 800b69c:	f7f4 ff42 	bl	8000524 <__aeabi_i2d>
 800b6a0:	a361      	add	r3, pc, #388	; (adr r3, 800b828 <_dtoa_r+0x2c8>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f7f4 ffa7 	bl	80005f8 <__aeabi_dmul>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	f7f4 fdeb 	bl	800028c <__adddf3>
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	460f      	mov	r7, r1
 800b6ba:	f7f5 fa4d 	bl	8000b58 <__aeabi_d2iz>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	9000      	str	r0, [sp, #0]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f7f5 fa08 	bl	8000adc <__aeabi_dcmplt>
 800b6cc:	b150      	cbz	r0, 800b6e4 <_dtoa_r+0x184>
 800b6ce:	9800      	ldr	r0, [sp, #0]
 800b6d0:	f7f4 ff28 	bl	8000524 <__aeabi_i2d>
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	463b      	mov	r3, r7
 800b6d8:	f7f5 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6dc:	b910      	cbnz	r0, 800b6e4 <_dtoa_r+0x184>
 800b6de:	9b00      	ldr	r3, [sp, #0]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	9b00      	ldr	r3, [sp, #0]
 800b6e6:	2b16      	cmp	r3, #22
 800b6e8:	d85a      	bhi.n	800b7a0 <_dtoa_r+0x240>
 800b6ea:	9a00      	ldr	r2, [sp, #0]
 800b6ec:	4b57      	ldr	r3, [pc, #348]	; (800b84c <_dtoa_r+0x2ec>)
 800b6ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	ec51 0b19 	vmov	r0, r1, d9
 800b6fa:	f7f5 f9ef 	bl	8000adc <__aeabi_dcmplt>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d050      	beq.n	800b7a4 <_dtoa_r+0x244>
 800b702:	9b00      	ldr	r3, [sp, #0]
 800b704:	3b01      	subs	r3, #1
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	2300      	movs	r3, #0
 800b70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b70e:	1b5d      	subs	r5, r3, r5
 800b710:	1e6b      	subs	r3, r5, #1
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	bf45      	ittet	mi
 800b716:	f1c5 0301 	rsbmi	r3, r5, #1
 800b71a:	9304      	strmi	r3, [sp, #16]
 800b71c:	2300      	movpl	r3, #0
 800b71e:	2300      	movmi	r3, #0
 800b720:	bf4c      	ite	mi
 800b722:	9305      	strmi	r3, [sp, #20]
 800b724:	9304      	strpl	r3, [sp, #16]
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	db3d      	blt.n	800b7a8 <_dtoa_r+0x248>
 800b72c:	9b05      	ldr	r3, [sp, #20]
 800b72e:	9a00      	ldr	r2, [sp, #0]
 800b730:	920a      	str	r2, [sp, #40]	; 0x28
 800b732:	4413      	add	r3, r2
 800b734:	9305      	str	r3, [sp, #20]
 800b736:	2300      	movs	r3, #0
 800b738:	9307      	str	r3, [sp, #28]
 800b73a:	9b06      	ldr	r3, [sp, #24]
 800b73c:	2b09      	cmp	r3, #9
 800b73e:	f200 8089 	bhi.w	800b854 <_dtoa_r+0x2f4>
 800b742:	2b05      	cmp	r3, #5
 800b744:	bfc4      	itt	gt
 800b746:	3b04      	subgt	r3, #4
 800b748:	9306      	strgt	r3, [sp, #24]
 800b74a:	9b06      	ldr	r3, [sp, #24]
 800b74c:	f1a3 0302 	sub.w	r3, r3, #2
 800b750:	bfcc      	ite	gt
 800b752:	2500      	movgt	r5, #0
 800b754:	2501      	movle	r5, #1
 800b756:	2b03      	cmp	r3, #3
 800b758:	f200 8087 	bhi.w	800b86a <_dtoa_r+0x30a>
 800b75c:	e8df f003 	tbb	[pc, r3]
 800b760:	59383a2d 	.word	0x59383a2d
 800b764:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b768:	441d      	add	r5, r3
 800b76a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b76e:	2b20      	cmp	r3, #32
 800b770:	bfc1      	itttt	gt
 800b772:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b776:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b77a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b77e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b782:	bfda      	itte	le
 800b784:	f1c3 0320 	rsble	r3, r3, #32
 800b788:	fa06 f003 	lslle.w	r0, r6, r3
 800b78c:	4318      	orrgt	r0, r3
 800b78e:	f7f4 feb9 	bl	8000504 <__aeabi_ui2d>
 800b792:	2301      	movs	r3, #1
 800b794:	4606      	mov	r6, r0
 800b796:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b79a:	3d01      	subs	r5, #1
 800b79c:	930e      	str	r3, [sp, #56]	; 0x38
 800b79e:	e76a      	b.n	800b676 <_dtoa_r+0x116>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e7b2      	b.n	800b70a <_dtoa_r+0x1aa>
 800b7a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7a6:	e7b1      	b.n	800b70c <_dtoa_r+0x1ac>
 800b7a8:	9b04      	ldr	r3, [sp, #16]
 800b7aa:	9a00      	ldr	r2, [sp, #0]
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	4253      	negs	r3, r2
 800b7b2:	9307      	str	r3, [sp, #28]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7b8:	e7bf      	b.n	800b73a <_dtoa_r+0x1da>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9308      	str	r3, [sp, #32]
 800b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dc55      	bgt.n	800b870 <_dtoa_r+0x310>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ce:	e00c      	b.n	800b7ea <_dtoa_r+0x28a>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e7f3      	b.n	800b7bc <_dtoa_r+0x25c>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7d8:	9308      	str	r3, [sp, #32]
 800b7da:	9b00      	ldr	r3, [sp, #0]
 800b7dc:	4413      	add	r3, r2
 800b7de:	9302      	str	r3, [sp, #8]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	9303      	str	r3, [sp, #12]
 800b7e6:	bfb8      	it	lt
 800b7e8:	2301      	movlt	r3, #1
 800b7ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	6042      	str	r2, [r0, #4]
 800b7f0:	2204      	movs	r2, #4
 800b7f2:	f102 0614 	add.w	r6, r2, #20
 800b7f6:	429e      	cmp	r6, r3
 800b7f8:	6841      	ldr	r1, [r0, #4]
 800b7fa:	d93d      	bls.n	800b878 <_dtoa_r+0x318>
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f000 fda7 	bl	800c350 <_Balloc>
 800b802:	9001      	str	r0, [sp, #4]
 800b804:	2800      	cmp	r0, #0
 800b806:	d13b      	bne.n	800b880 <_dtoa_r+0x320>
 800b808:	4b11      	ldr	r3, [pc, #68]	; (800b850 <_dtoa_r+0x2f0>)
 800b80a:	4602      	mov	r2, r0
 800b80c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b810:	e6c0      	b.n	800b594 <_dtoa_r+0x34>
 800b812:	2301      	movs	r3, #1
 800b814:	e7df      	b.n	800b7d6 <_dtoa_r+0x276>
 800b816:	bf00      	nop
 800b818:	636f4361 	.word	0x636f4361
 800b81c:	3fd287a7 	.word	0x3fd287a7
 800b820:	8b60c8b3 	.word	0x8b60c8b3
 800b824:	3fc68a28 	.word	0x3fc68a28
 800b828:	509f79fb 	.word	0x509f79fb
 800b82c:	3fd34413 	.word	0x3fd34413
 800b830:	0800ea95 	.word	0x0800ea95
 800b834:	0800eaac 	.word	0x0800eaac
 800b838:	7ff00000 	.word	0x7ff00000
 800b83c:	0800ea91 	.word	0x0800ea91
 800b840:	0800ea88 	.word	0x0800ea88
 800b844:	0800ea65 	.word	0x0800ea65
 800b848:	3ff80000 	.word	0x3ff80000
 800b84c:	0800ec00 	.word	0x0800ec00
 800b850:	0800eb07 	.word	0x0800eb07
 800b854:	2501      	movs	r5, #1
 800b856:	2300      	movs	r3, #0
 800b858:	9306      	str	r3, [sp, #24]
 800b85a:	9508      	str	r5, [sp, #32]
 800b85c:	f04f 33ff 	mov.w	r3, #4294967295
 800b860:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b864:	2200      	movs	r2, #0
 800b866:	2312      	movs	r3, #18
 800b868:	e7b0      	b.n	800b7cc <_dtoa_r+0x26c>
 800b86a:	2301      	movs	r3, #1
 800b86c:	9308      	str	r3, [sp, #32]
 800b86e:	e7f5      	b.n	800b85c <_dtoa_r+0x2fc>
 800b870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b872:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b876:	e7b8      	b.n	800b7ea <_dtoa_r+0x28a>
 800b878:	3101      	adds	r1, #1
 800b87a:	6041      	str	r1, [r0, #4]
 800b87c:	0052      	lsls	r2, r2, #1
 800b87e:	e7b8      	b.n	800b7f2 <_dtoa_r+0x292>
 800b880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b882:	9a01      	ldr	r2, [sp, #4]
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	9b03      	ldr	r3, [sp, #12]
 800b888:	2b0e      	cmp	r3, #14
 800b88a:	f200 809d 	bhi.w	800b9c8 <_dtoa_r+0x468>
 800b88e:	2d00      	cmp	r5, #0
 800b890:	f000 809a 	beq.w	800b9c8 <_dtoa_r+0x468>
 800b894:	9b00      	ldr	r3, [sp, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	dd32      	ble.n	800b900 <_dtoa_r+0x3a0>
 800b89a:	4ab7      	ldr	r2, [pc, #732]	; (800bb78 <_dtoa_r+0x618>)
 800b89c:	f003 030f 	and.w	r3, r3, #15
 800b8a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8a8:	9b00      	ldr	r3, [sp, #0]
 800b8aa:	05d8      	lsls	r0, r3, #23
 800b8ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b8b0:	d516      	bpl.n	800b8e0 <_dtoa_r+0x380>
 800b8b2:	4bb2      	ldr	r3, [pc, #712]	; (800bb7c <_dtoa_r+0x61c>)
 800b8b4:	ec51 0b19 	vmov	r0, r1, d9
 800b8b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8bc:	f7f4 ffc6 	bl	800084c <__aeabi_ddiv>
 800b8c0:	f007 070f 	and.w	r7, r7, #15
 800b8c4:	4682      	mov	sl, r0
 800b8c6:	468b      	mov	fp, r1
 800b8c8:	2503      	movs	r5, #3
 800b8ca:	4eac      	ldr	r6, [pc, #688]	; (800bb7c <_dtoa_r+0x61c>)
 800b8cc:	b957      	cbnz	r7, 800b8e4 <_dtoa_r+0x384>
 800b8ce:	4642      	mov	r2, r8
 800b8d0:	464b      	mov	r3, r9
 800b8d2:	4650      	mov	r0, sl
 800b8d4:	4659      	mov	r1, fp
 800b8d6:	f7f4 ffb9 	bl	800084c <__aeabi_ddiv>
 800b8da:	4682      	mov	sl, r0
 800b8dc:	468b      	mov	fp, r1
 800b8de:	e028      	b.n	800b932 <_dtoa_r+0x3d2>
 800b8e0:	2502      	movs	r5, #2
 800b8e2:	e7f2      	b.n	800b8ca <_dtoa_r+0x36a>
 800b8e4:	07f9      	lsls	r1, r7, #31
 800b8e6:	d508      	bpl.n	800b8fa <_dtoa_r+0x39a>
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8f0:	f7f4 fe82 	bl	80005f8 <__aeabi_dmul>
 800b8f4:	3501      	adds	r5, #1
 800b8f6:	4680      	mov	r8, r0
 800b8f8:	4689      	mov	r9, r1
 800b8fa:	107f      	asrs	r7, r7, #1
 800b8fc:	3608      	adds	r6, #8
 800b8fe:	e7e5      	b.n	800b8cc <_dtoa_r+0x36c>
 800b900:	f000 809b 	beq.w	800ba3a <_dtoa_r+0x4da>
 800b904:	9b00      	ldr	r3, [sp, #0]
 800b906:	4f9d      	ldr	r7, [pc, #628]	; (800bb7c <_dtoa_r+0x61c>)
 800b908:	425e      	negs	r6, r3
 800b90a:	4b9b      	ldr	r3, [pc, #620]	; (800bb78 <_dtoa_r+0x618>)
 800b90c:	f006 020f 	and.w	r2, r6, #15
 800b910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	ec51 0b19 	vmov	r0, r1, d9
 800b91c:	f7f4 fe6c 	bl	80005f8 <__aeabi_dmul>
 800b920:	1136      	asrs	r6, r6, #4
 800b922:	4682      	mov	sl, r0
 800b924:	468b      	mov	fp, r1
 800b926:	2300      	movs	r3, #0
 800b928:	2502      	movs	r5, #2
 800b92a:	2e00      	cmp	r6, #0
 800b92c:	d17a      	bne.n	800ba24 <_dtoa_r+0x4c4>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1d3      	bne.n	800b8da <_dtoa_r+0x37a>
 800b932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 8082 	beq.w	800ba3e <_dtoa_r+0x4de>
 800b93a:	4b91      	ldr	r3, [pc, #580]	; (800bb80 <_dtoa_r+0x620>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	4650      	mov	r0, sl
 800b940:	4659      	mov	r1, fp
 800b942:	f7f5 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800b946:	2800      	cmp	r0, #0
 800b948:	d079      	beq.n	800ba3e <_dtoa_r+0x4de>
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d076      	beq.n	800ba3e <_dtoa_r+0x4de>
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	dd36      	ble.n	800b9c4 <_dtoa_r+0x464>
 800b956:	9b00      	ldr	r3, [sp, #0]
 800b958:	4650      	mov	r0, sl
 800b95a:	4659      	mov	r1, fp
 800b95c:	1e5f      	subs	r7, r3, #1
 800b95e:	2200      	movs	r2, #0
 800b960:	4b88      	ldr	r3, [pc, #544]	; (800bb84 <_dtoa_r+0x624>)
 800b962:	f7f4 fe49 	bl	80005f8 <__aeabi_dmul>
 800b966:	9e02      	ldr	r6, [sp, #8]
 800b968:	4682      	mov	sl, r0
 800b96a:	468b      	mov	fp, r1
 800b96c:	3501      	adds	r5, #1
 800b96e:	4628      	mov	r0, r5
 800b970:	f7f4 fdd8 	bl	8000524 <__aeabi_i2d>
 800b974:	4652      	mov	r2, sl
 800b976:	465b      	mov	r3, fp
 800b978:	f7f4 fe3e 	bl	80005f8 <__aeabi_dmul>
 800b97c:	4b82      	ldr	r3, [pc, #520]	; (800bb88 <_dtoa_r+0x628>)
 800b97e:	2200      	movs	r2, #0
 800b980:	f7f4 fc84 	bl	800028c <__adddf3>
 800b984:	46d0      	mov	r8, sl
 800b986:	46d9      	mov	r9, fp
 800b988:	4682      	mov	sl, r0
 800b98a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b98e:	2e00      	cmp	r6, #0
 800b990:	d158      	bne.n	800ba44 <_dtoa_r+0x4e4>
 800b992:	4b7e      	ldr	r3, [pc, #504]	; (800bb8c <_dtoa_r+0x62c>)
 800b994:	2200      	movs	r2, #0
 800b996:	4640      	mov	r0, r8
 800b998:	4649      	mov	r1, r9
 800b99a:	f7f4 fc75 	bl	8000288 <__aeabi_dsub>
 800b99e:	4652      	mov	r2, sl
 800b9a0:	465b      	mov	r3, fp
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	4689      	mov	r9, r1
 800b9a6:	f7f5 f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	f040 8295 	bne.w	800beda <_dtoa_r+0x97a>
 800b9b0:	4652      	mov	r2, sl
 800b9b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	f7f5 f88f 	bl	8000adc <__aeabi_dcmplt>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f040 8289 	bne.w	800bed6 <_dtoa_r+0x976>
 800b9c4:	ec5b ab19 	vmov	sl, fp, d9
 800b9c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f2c0 8148 	blt.w	800bc60 <_dtoa_r+0x700>
 800b9d0:	9a00      	ldr	r2, [sp, #0]
 800b9d2:	2a0e      	cmp	r2, #14
 800b9d4:	f300 8144 	bgt.w	800bc60 <_dtoa_r+0x700>
 800b9d8:	4b67      	ldr	r3, [pc, #412]	; (800bb78 <_dtoa_r+0x618>)
 800b9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f280 80d5 	bge.w	800bb94 <_dtoa_r+0x634>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f300 80d1 	bgt.w	800bb94 <_dtoa_r+0x634>
 800b9f2:	f040 826f 	bne.w	800bed4 <_dtoa_r+0x974>
 800b9f6:	4b65      	ldr	r3, [pc, #404]	; (800bb8c <_dtoa_r+0x62c>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ba02:	4652      	mov	r2, sl
 800ba04:	465b      	mov	r3, fp
 800ba06:	f7f5 f87d 	bl	8000b04 <__aeabi_dcmpge>
 800ba0a:	9e03      	ldr	r6, [sp, #12]
 800ba0c:	4637      	mov	r7, r6
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f040 8245 	bne.w	800be9e <_dtoa_r+0x93e>
 800ba14:	9d01      	ldr	r5, [sp, #4]
 800ba16:	2331      	movs	r3, #49	; 0x31
 800ba18:	f805 3b01 	strb.w	r3, [r5], #1
 800ba1c:	9b00      	ldr	r3, [sp, #0]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	e240      	b.n	800bea6 <_dtoa_r+0x946>
 800ba24:	07f2      	lsls	r2, r6, #31
 800ba26:	d505      	bpl.n	800ba34 <_dtoa_r+0x4d4>
 800ba28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba2c:	f7f4 fde4 	bl	80005f8 <__aeabi_dmul>
 800ba30:	3501      	adds	r5, #1
 800ba32:	2301      	movs	r3, #1
 800ba34:	1076      	asrs	r6, r6, #1
 800ba36:	3708      	adds	r7, #8
 800ba38:	e777      	b.n	800b92a <_dtoa_r+0x3ca>
 800ba3a:	2502      	movs	r5, #2
 800ba3c:	e779      	b.n	800b932 <_dtoa_r+0x3d2>
 800ba3e:	9f00      	ldr	r7, [sp, #0]
 800ba40:	9e03      	ldr	r6, [sp, #12]
 800ba42:	e794      	b.n	800b96e <_dtoa_r+0x40e>
 800ba44:	9901      	ldr	r1, [sp, #4]
 800ba46:	4b4c      	ldr	r3, [pc, #304]	; (800bb78 <_dtoa_r+0x618>)
 800ba48:	4431      	add	r1, r6
 800ba4a:	910d      	str	r1, [sp, #52]	; 0x34
 800ba4c:	9908      	ldr	r1, [sp, #32]
 800ba4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba56:	2900      	cmp	r1, #0
 800ba58:	d043      	beq.n	800bae2 <_dtoa_r+0x582>
 800ba5a:	494d      	ldr	r1, [pc, #308]	; (800bb90 <_dtoa_r+0x630>)
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	f7f4 fef5 	bl	800084c <__aeabi_ddiv>
 800ba62:	4652      	mov	r2, sl
 800ba64:	465b      	mov	r3, fp
 800ba66:	f7f4 fc0f 	bl	8000288 <__aeabi_dsub>
 800ba6a:	9d01      	ldr	r5, [sp, #4]
 800ba6c:	4682      	mov	sl, r0
 800ba6e:	468b      	mov	fp, r1
 800ba70:	4649      	mov	r1, r9
 800ba72:	4640      	mov	r0, r8
 800ba74:	f7f5 f870 	bl	8000b58 <__aeabi_d2iz>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	f7f4 fd53 	bl	8000524 <__aeabi_i2d>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4640      	mov	r0, r8
 800ba84:	4649      	mov	r1, r9
 800ba86:	f7f4 fbff 	bl	8000288 <__aeabi_dsub>
 800ba8a:	3630      	adds	r6, #48	; 0x30
 800ba8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ba90:	4652      	mov	r2, sl
 800ba92:	465b      	mov	r3, fp
 800ba94:	4680      	mov	r8, r0
 800ba96:	4689      	mov	r9, r1
 800ba98:	f7f5 f820 	bl	8000adc <__aeabi_dcmplt>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d163      	bne.n	800bb68 <_dtoa_r+0x608>
 800baa0:	4642      	mov	r2, r8
 800baa2:	464b      	mov	r3, r9
 800baa4:	4936      	ldr	r1, [pc, #216]	; (800bb80 <_dtoa_r+0x620>)
 800baa6:	2000      	movs	r0, #0
 800baa8:	f7f4 fbee 	bl	8000288 <__aeabi_dsub>
 800baac:	4652      	mov	r2, sl
 800baae:	465b      	mov	r3, fp
 800bab0:	f7f5 f814 	bl	8000adc <__aeabi_dcmplt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f040 80b5 	bne.w	800bc24 <_dtoa_r+0x6c4>
 800baba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800babc:	429d      	cmp	r5, r3
 800babe:	d081      	beq.n	800b9c4 <_dtoa_r+0x464>
 800bac0:	4b30      	ldr	r3, [pc, #192]	; (800bb84 <_dtoa_r+0x624>)
 800bac2:	2200      	movs	r2, #0
 800bac4:	4650      	mov	r0, sl
 800bac6:	4659      	mov	r1, fp
 800bac8:	f7f4 fd96 	bl	80005f8 <__aeabi_dmul>
 800bacc:	4b2d      	ldr	r3, [pc, #180]	; (800bb84 <_dtoa_r+0x624>)
 800bace:	4682      	mov	sl, r0
 800bad0:	468b      	mov	fp, r1
 800bad2:	4640      	mov	r0, r8
 800bad4:	4649      	mov	r1, r9
 800bad6:	2200      	movs	r2, #0
 800bad8:	f7f4 fd8e 	bl	80005f8 <__aeabi_dmul>
 800badc:	4680      	mov	r8, r0
 800bade:	4689      	mov	r9, r1
 800bae0:	e7c6      	b.n	800ba70 <_dtoa_r+0x510>
 800bae2:	4650      	mov	r0, sl
 800bae4:	4659      	mov	r1, fp
 800bae6:	f7f4 fd87 	bl	80005f8 <__aeabi_dmul>
 800baea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baec:	9d01      	ldr	r5, [sp, #4]
 800baee:	930f      	str	r3, [sp, #60]	; 0x3c
 800baf0:	4682      	mov	sl, r0
 800baf2:	468b      	mov	fp, r1
 800baf4:	4649      	mov	r1, r9
 800baf6:	4640      	mov	r0, r8
 800baf8:	f7f5 f82e 	bl	8000b58 <__aeabi_d2iz>
 800bafc:	4606      	mov	r6, r0
 800bafe:	f7f4 fd11 	bl	8000524 <__aeabi_i2d>
 800bb02:	3630      	adds	r6, #48	; 0x30
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	4640      	mov	r0, r8
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	f7f4 fbbc 	bl	8000288 <__aeabi_dsub>
 800bb10:	f805 6b01 	strb.w	r6, [r5], #1
 800bb14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb16:	429d      	cmp	r5, r3
 800bb18:	4680      	mov	r8, r0
 800bb1a:	4689      	mov	r9, r1
 800bb1c:	f04f 0200 	mov.w	r2, #0
 800bb20:	d124      	bne.n	800bb6c <_dtoa_r+0x60c>
 800bb22:	4b1b      	ldr	r3, [pc, #108]	; (800bb90 <_dtoa_r+0x630>)
 800bb24:	4650      	mov	r0, sl
 800bb26:	4659      	mov	r1, fp
 800bb28:	f7f4 fbb0 	bl	800028c <__adddf3>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4640      	mov	r0, r8
 800bb32:	4649      	mov	r1, r9
 800bb34:	f7f4 fff0 	bl	8000b18 <__aeabi_dcmpgt>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d173      	bne.n	800bc24 <_dtoa_r+0x6c4>
 800bb3c:	4652      	mov	r2, sl
 800bb3e:	465b      	mov	r3, fp
 800bb40:	4913      	ldr	r1, [pc, #76]	; (800bb90 <_dtoa_r+0x630>)
 800bb42:	2000      	movs	r0, #0
 800bb44:	f7f4 fba0 	bl	8000288 <__aeabi_dsub>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	4649      	mov	r1, r9
 800bb50:	f7f4 ffc4 	bl	8000adc <__aeabi_dcmplt>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	f43f af35 	beq.w	800b9c4 <_dtoa_r+0x464>
 800bb5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb5c:	1e6b      	subs	r3, r5, #1
 800bb5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb64:	2b30      	cmp	r3, #48	; 0x30
 800bb66:	d0f8      	beq.n	800bb5a <_dtoa_r+0x5fa>
 800bb68:	9700      	str	r7, [sp, #0]
 800bb6a:	e049      	b.n	800bc00 <_dtoa_r+0x6a0>
 800bb6c:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <_dtoa_r+0x624>)
 800bb6e:	f7f4 fd43 	bl	80005f8 <__aeabi_dmul>
 800bb72:	4680      	mov	r8, r0
 800bb74:	4689      	mov	r9, r1
 800bb76:	e7bd      	b.n	800baf4 <_dtoa_r+0x594>
 800bb78:	0800ec00 	.word	0x0800ec00
 800bb7c:	0800ebd8 	.word	0x0800ebd8
 800bb80:	3ff00000 	.word	0x3ff00000
 800bb84:	40240000 	.word	0x40240000
 800bb88:	401c0000 	.word	0x401c0000
 800bb8c:	40140000 	.word	0x40140000
 800bb90:	3fe00000 	.word	0x3fe00000
 800bb94:	9d01      	ldr	r5, [sp, #4]
 800bb96:	4656      	mov	r6, sl
 800bb98:	465f      	mov	r7, fp
 800bb9a:	4642      	mov	r2, r8
 800bb9c:	464b      	mov	r3, r9
 800bb9e:	4630      	mov	r0, r6
 800bba0:	4639      	mov	r1, r7
 800bba2:	f7f4 fe53 	bl	800084c <__aeabi_ddiv>
 800bba6:	f7f4 ffd7 	bl	8000b58 <__aeabi_d2iz>
 800bbaa:	4682      	mov	sl, r0
 800bbac:	f7f4 fcba 	bl	8000524 <__aeabi_i2d>
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	464b      	mov	r3, r9
 800bbb4:	f7f4 fd20 	bl	80005f8 <__aeabi_dmul>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bbc4:	f7f4 fb60 	bl	8000288 <__aeabi_dsub>
 800bbc8:	f805 6b01 	strb.w	r6, [r5], #1
 800bbcc:	9e01      	ldr	r6, [sp, #4]
 800bbce:	9f03      	ldr	r7, [sp, #12]
 800bbd0:	1bae      	subs	r6, r5, r6
 800bbd2:	42b7      	cmp	r7, r6
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	d135      	bne.n	800bc46 <_dtoa_r+0x6e6>
 800bbda:	f7f4 fb57 	bl	800028c <__adddf3>
 800bbde:	4642      	mov	r2, r8
 800bbe0:	464b      	mov	r3, r9
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	f7f4 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 800bbea:	b9d0      	cbnz	r0, 800bc22 <_dtoa_r+0x6c2>
 800bbec:	4642      	mov	r2, r8
 800bbee:	464b      	mov	r3, r9
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	f7f4 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbf8:	b110      	cbz	r0, 800bc00 <_dtoa_r+0x6a0>
 800bbfa:	f01a 0f01 	tst.w	sl, #1
 800bbfe:	d110      	bne.n	800bc22 <_dtoa_r+0x6c2>
 800bc00:	4620      	mov	r0, r4
 800bc02:	ee18 1a10 	vmov	r1, s16
 800bc06:	f000 fbe3 	bl	800c3d0 <_Bfree>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9800      	ldr	r0, [sp, #0]
 800bc0e:	702b      	strb	r3, [r5, #0]
 800bc10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc12:	3001      	adds	r0, #1
 800bc14:	6018      	str	r0, [r3, #0]
 800bc16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f43f acf1 	beq.w	800b600 <_dtoa_r+0xa0>
 800bc1e:	601d      	str	r5, [r3, #0]
 800bc20:	e4ee      	b.n	800b600 <_dtoa_r+0xa0>
 800bc22:	9f00      	ldr	r7, [sp, #0]
 800bc24:	462b      	mov	r3, r5
 800bc26:	461d      	mov	r5, r3
 800bc28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc2c:	2a39      	cmp	r2, #57	; 0x39
 800bc2e:	d106      	bne.n	800bc3e <_dtoa_r+0x6de>
 800bc30:	9a01      	ldr	r2, [sp, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d1f7      	bne.n	800bc26 <_dtoa_r+0x6c6>
 800bc36:	9901      	ldr	r1, [sp, #4]
 800bc38:	2230      	movs	r2, #48	; 0x30
 800bc3a:	3701      	adds	r7, #1
 800bc3c:	700a      	strb	r2, [r1, #0]
 800bc3e:	781a      	ldrb	r2, [r3, #0]
 800bc40:	3201      	adds	r2, #1
 800bc42:	701a      	strb	r2, [r3, #0]
 800bc44:	e790      	b.n	800bb68 <_dtoa_r+0x608>
 800bc46:	4ba6      	ldr	r3, [pc, #664]	; (800bee0 <_dtoa_r+0x980>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	2200      	movs	r2, #0
 800bc50:	2300      	movs	r3, #0
 800bc52:	4606      	mov	r6, r0
 800bc54:	460f      	mov	r7, r1
 800bc56:	f7f4 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d09d      	beq.n	800bb9a <_dtoa_r+0x63a>
 800bc5e:	e7cf      	b.n	800bc00 <_dtoa_r+0x6a0>
 800bc60:	9a08      	ldr	r2, [sp, #32]
 800bc62:	2a00      	cmp	r2, #0
 800bc64:	f000 80d7 	beq.w	800be16 <_dtoa_r+0x8b6>
 800bc68:	9a06      	ldr	r2, [sp, #24]
 800bc6a:	2a01      	cmp	r2, #1
 800bc6c:	f300 80ba 	bgt.w	800bde4 <_dtoa_r+0x884>
 800bc70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	f000 80b2 	beq.w	800bddc <_dtoa_r+0x87c>
 800bc78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc7c:	9e07      	ldr	r6, [sp, #28]
 800bc7e:	9d04      	ldr	r5, [sp, #16]
 800bc80:	9a04      	ldr	r2, [sp, #16]
 800bc82:	441a      	add	r2, r3
 800bc84:	9204      	str	r2, [sp, #16]
 800bc86:	9a05      	ldr	r2, [sp, #20]
 800bc88:	2101      	movs	r1, #1
 800bc8a:	441a      	add	r2, r3
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	9205      	str	r2, [sp, #20]
 800bc90:	f000 fc56 	bl	800c540 <__i2b>
 800bc94:	4607      	mov	r7, r0
 800bc96:	2d00      	cmp	r5, #0
 800bc98:	dd0c      	ble.n	800bcb4 <_dtoa_r+0x754>
 800bc9a:	9b05      	ldr	r3, [sp, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dd09      	ble.n	800bcb4 <_dtoa_r+0x754>
 800bca0:	42ab      	cmp	r3, r5
 800bca2:	9a04      	ldr	r2, [sp, #16]
 800bca4:	bfa8      	it	ge
 800bca6:	462b      	movge	r3, r5
 800bca8:	1ad2      	subs	r2, r2, r3
 800bcaa:	9204      	str	r2, [sp, #16]
 800bcac:	9a05      	ldr	r2, [sp, #20]
 800bcae:	1aed      	subs	r5, r5, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	9b07      	ldr	r3, [sp, #28]
 800bcb6:	b31b      	cbz	r3, 800bd00 <_dtoa_r+0x7a0>
 800bcb8:	9b08      	ldr	r3, [sp, #32]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 80af 	beq.w	800be1e <_dtoa_r+0x8be>
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	dd13      	ble.n	800bcec <_dtoa_r+0x78c>
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 fcf9 	bl	800c6c0 <__pow5mult>
 800bcce:	ee18 2a10 	vmov	r2, s16
 800bcd2:	4601      	mov	r1, r0
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f000 fc48 	bl	800c56c <__multiply>
 800bcdc:	ee18 1a10 	vmov	r1, s16
 800bce0:	4680      	mov	r8, r0
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 fb74 	bl	800c3d0 <_Bfree>
 800bce8:	ee08 8a10 	vmov	s16, r8
 800bcec:	9b07      	ldr	r3, [sp, #28]
 800bcee:	1b9a      	subs	r2, r3, r6
 800bcf0:	d006      	beq.n	800bd00 <_dtoa_r+0x7a0>
 800bcf2:	ee18 1a10 	vmov	r1, s16
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f000 fce2 	bl	800c6c0 <__pow5mult>
 800bcfc:	ee08 0a10 	vmov	s16, r0
 800bd00:	2101      	movs	r1, #1
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fc1c 	bl	800c540 <__i2b>
 800bd08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	f340 8088 	ble.w	800be22 <_dtoa_r+0x8c2>
 800bd12:	461a      	mov	r2, r3
 800bd14:	4601      	mov	r1, r0
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 fcd2 	bl	800c6c0 <__pow5mult>
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	4606      	mov	r6, r0
 800bd22:	f340 8081 	ble.w	800be28 <_dtoa_r+0x8c8>
 800bd26:	f04f 0800 	mov.w	r8, #0
 800bd2a:	6933      	ldr	r3, [r6, #16]
 800bd2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd30:	6918      	ldr	r0, [r3, #16]
 800bd32:	f000 fbb5 	bl	800c4a0 <__hi0bits>
 800bd36:	f1c0 0020 	rsb	r0, r0, #32
 800bd3a:	9b05      	ldr	r3, [sp, #20]
 800bd3c:	4418      	add	r0, r3
 800bd3e:	f010 001f 	ands.w	r0, r0, #31
 800bd42:	f000 8092 	beq.w	800be6a <_dtoa_r+0x90a>
 800bd46:	f1c0 0320 	rsb	r3, r0, #32
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	f340 808a 	ble.w	800be64 <_dtoa_r+0x904>
 800bd50:	f1c0 001c 	rsb	r0, r0, #28
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	4403      	add	r3, r0
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	9b05      	ldr	r3, [sp, #20]
 800bd5c:	4403      	add	r3, r0
 800bd5e:	4405      	add	r5, r0
 800bd60:	9305      	str	r3, [sp, #20]
 800bd62:	9b04      	ldr	r3, [sp, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	dd07      	ble.n	800bd78 <_dtoa_r+0x818>
 800bd68:	ee18 1a10 	vmov	r1, s16
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fd00 	bl	800c774 <__lshift>
 800bd74:	ee08 0a10 	vmov	s16, r0
 800bd78:	9b05      	ldr	r3, [sp, #20]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dd05      	ble.n	800bd8a <_dtoa_r+0x82a>
 800bd7e:	4631      	mov	r1, r6
 800bd80:	461a      	mov	r2, r3
 800bd82:	4620      	mov	r0, r4
 800bd84:	f000 fcf6 	bl	800c774 <__lshift>
 800bd88:	4606      	mov	r6, r0
 800bd8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d06e      	beq.n	800be6e <_dtoa_r+0x90e>
 800bd90:	ee18 0a10 	vmov	r0, s16
 800bd94:	4631      	mov	r1, r6
 800bd96:	f000 fd5d 	bl	800c854 <__mcmp>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	da67      	bge.n	800be6e <_dtoa_r+0x90e>
 800bd9e:	9b00      	ldr	r3, [sp, #0]
 800bda0:	3b01      	subs	r3, #1
 800bda2:	ee18 1a10 	vmov	r1, s16
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	220a      	movs	r2, #10
 800bdaa:	2300      	movs	r3, #0
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fb31 	bl	800c414 <__multadd>
 800bdb2:	9b08      	ldr	r3, [sp, #32]
 800bdb4:	ee08 0a10 	vmov	s16, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 81b1 	beq.w	800c120 <_dtoa_r+0xbc0>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	220a      	movs	r2, #10
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 fb25 	bl	800c414 <__multadd>
 800bdca:	9b02      	ldr	r3, [sp, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	4607      	mov	r7, r0
 800bdd0:	f300 808e 	bgt.w	800bef0 <_dtoa_r+0x990>
 800bdd4:	9b06      	ldr	r3, [sp, #24]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	dc51      	bgt.n	800be7e <_dtoa_r+0x91e>
 800bdda:	e089      	b.n	800bef0 <_dtoa_r+0x990>
 800bddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bde2:	e74b      	b.n	800bc7c <_dtoa_r+0x71c>
 800bde4:	9b03      	ldr	r3, [sp, #12]
 800bde6:	1e5e      	subs	r6, r3, #1
 800bde8:	9b07      	ldr	r3, [sp, #28]
 800bdea:	42b3      	cmp	r3, r6
 800bdec:	bfbf      	itttt	lt
 800bdee:	9b07      	ldrlt	r3, [sp, #28]
 800bdf0:	9607      	strlt	r6, [sp, #28]
 800bdf2:	1af2      	sublt	r2, r6, r3
 800bdf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bdf6:	bfb6      	itet	lt
 800bdf8:	189b      	addlt	r3, r3, r2
 800bdfa:	1b9e      	subge	r6, r3, r6
 800bdfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bdfe:	9b03      	ldr	r3, [sp, #12]
 800be00:	bfb8      	it	lt
 800be02:	2600      	movlt	r6, #0
 800be04:	2b00      	cmp	r3, #0
 800be06:	bfb7      	itett	lt
 800be08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be10:	1a9d      	sublt	r5, r3, r2
 800be12:	2300      	movlt	r3, #0
 800be14:	e734      	b.n	800bc80 <_dtoa_r+0x720>
 800be16:	9e07      	ldr	r6, [sp, #28]
 800be18:	9d04      	ldr	r5, [sp, #16]
 800be1a:	9f08      	ldr	r7, [sp, #32]
 800be1c:	e73b      	b.n	800bc96 <_dtoa_r+0x736>
 800be1e:	9a07      	ldr	r2, [sp, #28]
 800be20:	e767      	b.n	800bcf2 <_dtoa_r+0x792>
 800be22:	9b06      	ldr	r3, [sp, #24]
 800be24:	2b01      	cmp	r3, #1
 800be26:	dc18      	bgt.n	800be5a <_dtoa_r+0x8fa>
 800be28:	f1ba 0f00 	cmp.w	sl, #0
 800be2c:	d115      	bne.n	800be5a <_dtoa_r+0x8fa>
 800be2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be32:	b993      	cbnz	r3, 800be5a <_dtoa_r+0x8fa>
 800be34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be38:	0d1b      	lsrs	r3, r3, #20
 800be3a:	051b      	lsls	r3, r3, #20
 800be3c:	b183      	cbz	r3, 800be60 <_dtoa_r+0x900>
 800be3e:	9b04      	ldr	r3, [sp, #16]
 800be40:	3301      	adds	r3, #1
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	9b05      	ldr	r3, [sp, #20]
 800be46:	3301      	adds	r3, #1
 800be48:	9305      	str	r3, [sp, #20]
 800be4a:	f04f 0801 	mov.w	r8, #1
 800be4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be50:	2b00      	cmp	r3, #0
 800be52:	f47f af6a 	bne.w	800bd2a <_dtoa_r+0x7ca>
 800be56:	2001      	movs	r0, #1
 800be58:	e76f      	b.n	800bd3a <_dtoa_r+0x7da>
 800be5a:	f04f 0800 	mov.w	r8, #0
 800be5e:	e7f6      	b.n	800be4e <_dtoa_r+0x8ee>
 800be60:	4698      	mov	r8, r3
 800be62:	e7f4      	b.n	800be4e <_dtoa_r+0x8ee>
 800be64:	f43f af7d 	beq.w	800bd62 <_dtoa_r+0x802>
 800be68:	4618      	mov	r0, r3
 800be6a:	301c      	adds	r0, #28
 800be6c:	e772      	b.n	800bd54 <_dtoa_r+0x7f4>
 800be6e:	9b03      	ldr	r3, [sp, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	dc37      	bgt.n	800bee4 <_dtoa_r+0x984>
 800be74:	9b06      	ldr	r3, [sp, #24]
 800be76:	2b02      	cmp	r3, #2
 800be78:	dd34      	ble.n	800bee4 <_dtoa_r+0x984>
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	9302      	str	r3, [sp, #8]
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	b96b      	cbnz	r3, 800be9e <_dtoa_r+0x93e>
 800be82:	4631      	mov	r1, r6
 800be84:	2205      	movs	r2, #5
 800be86:	4620      	mov	r0, r4
 800be88:	f000 fac4 	bl	800c414 <__multadd>
 800be8c:	4601      	mov	r1, r0
 800be8e:	4606      	mov	r6, r0
 800be90:	ee18 0a10 	vmov	r0, s16
 800be94:	f000 fcde 	bl	800c854 <__mcmp>
 800be98:	2800      	cmp	r0, #0
 800be9a:	f73f adbb 	bgt.w	800ba14 <_dtoa_r+0x4b4>
 800be9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea0:	9d01      	ldr	r5, [sp, #4]
 800bea2:	43db      	mvns	r3, r3
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	f04f 0800 	mov.w	r8, #0
 800beaa:	4631      	mov	r1, r6
 800beac:	4620      	mov	r0, r4
 800beae:	f000 fa8f 	bl	800c3d0 <_Bfree>
 800beb2:	2f00      	cmp	r7, #0
 800beb4:	f43f aea4 	beq.w	800bc00 <_dtoa_r+0x6a0>
 800beb8:	f1b8 0f00 	cmp.w	r8, #0
 800bebc:	d005      	beq.n	800beca <_dtoa_r+0x96a>
 800bebe:	45b8      	cmp	r8, r7
 800bec0:	d003      	beq.n	800beca <_dtoa_r+0x96a>
 800bec2:	4641      	mov	r1, r8
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 fa83 	bl	800c3d0 <_Bfree>
 800beca:	4639      	mov	r1, r7
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fa7f 	bl	800c3d0 <_Bfree>
 800bed2:	e695      	b.n	800bc00 <_dtoa_r+0x6a0>
 800bed4:	2600      	movs	r6, #0
 800bed6:	4637      	mov	r7, r6
 800bed8:	e7e1      	b.n	800be9e <_dtoa_r+0x93e>
 800beda:	9700      	str	r7, [sp, #0]
 800bedc:	4637      	mov	r7, r6
 800bede:	e599      	b.n	800ba14 <_dtoa_r+0x4b4>
 800bee0:	40240000 	.word	0x40240000
 800bee4:	9b08      	ldr	r3, [sp, #32]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f000 80ca 	beq.w	800c080 <_dtoa_r+0xb20>
 800beec:	9b03      	ldr	r3, [sp, #12]
 800beee:	9302      	str	r3, [sp, #8]
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	dd05      	ble.n	800bf00 <_dtoa_r+0x9a0>
 800bef4:	4639      	mov	r1, r7
 800bef6:	462a      	mov	r2, r5
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 fc3b 	bl	800c774 <__lshift>
 800befe:	4607      	mov	r7, r0
 800bf00:	f1b8 0f00 	cmp.w	r8, #0
 800bf04:	d05b      	beq.n	800bfbe <_dtoa_r+0xa5e>
 800bf06:	6879      	ldr	r1, [r7, #4]
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 fa21 	bl	800c350 <_Balloc>
 800bf0e:	4605      	mov	r5, r0
 800bf10:	b928      	cbnz	r0, 800bf1e <_dtoa_r+0x9be>
 800bf12:	4b87      	ldr	r3, [pc, #540]	; (800c130 <_dtoa_r+0xbd0>)
 800bf14:	4602      	mov	r2, r0
 800bf16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf1a:	f7ff bb3b 	b.w	800b594 <_dtoa_r+0x34>
 800bf1e:	693a      	ldr	r2, [r7, #16]
 800bf20:	3202      	adds	r2, #2
 800bf22:	0092      	lsls	r2, r2, #2
 800bf24:	f107 010c 	add.w	r1, r7, #12
 800bf28:	300c      	adds	r0, #12
 800bf2a:	f7fe fcb7 	bl	800a89c <memcpy>
 800bf2e:	2201      	movs	r2, #1
 800bf30:	4629      	mov	r1, r5
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fc1e 	bl	800c774 <__lshift>
 800bf38:	9b01      	ldr	r3, [sp, #4]
 800bf3a:	f103 0901 	add.w	r9, r3, #1
 800bf3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bf42:	4413      	add	r3, r2
 800bf44:	9305      	str	r3, [sp, #20]
 800bf46:	f00a 0301 	and.w	r3, sl, #1
 800bf4a:	46b8      	mov	r8, r7
 800bf4c:	9304      	str	r3, [sp, #16]
 800bf4e:	4607      	mov	r7, r0
 800bf50:	4631      	mov	r1, r6
 800bf52:	ee18 0a10 	vmov	r0, s16
 800bf56:	f7ff fa75 	bl	800b444 <quorem>
 800bf5a:	4641      	mov	r1, r8
 800bf5c:	9002      	str	r0, [sp, #8]
 800bf5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf62:	ee18 0a10 	vmov	r0, s16
 800bf66:	f000 fc75 	bl	800c854 <__mcmp>
 800bf6a:	463a      	mov	r2, r7
 800bf6c:	9003      	str	r0, [sp, #12]
 800bf6e:	4631      	mov	r1, r6
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 fc8b 	bl	800c88c <__mdiff>
 800bf76:	68c2      	ldr	r2, [r0, #12]
 800bf78:	f109 3bff 	add.w	fp, r9, #4294967295
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	bb02      	cbnz	r2, 800bfc2 <_dtoa_r+0xa62>
 800bf80:	4601      	mov	r1, r0
 800bf82:	ee18 0a10 	vmov	r0, s16
 800bf86:	f000 fc65 	bl	800c854 <__mcmp>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	4620      	mov	r0, r4
 800bf90:	9207      	str	r2, [sp, #28]
 800bf92:	f000 fa1d 	bl	800c3d0 <_Bfree>
 800bf96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bf9a:	ea43 0102 	orr.w	r1, r3, r2
 800bf9e:	9b04      	ldr	r3, [sp, #16]
 800bfa0:	430b      	orrs	r3, r1
 800bfa2:	464d      	mov	r5, r9
 800bfa4:	d10f      	bne.n	800bfc6 <_dtoa_r+0xa66>
 800bfa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfaa:	d02a      	beq.n	800c002 <_dtoa_r+0xaa2>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	dd02      	ble.n	800bfb8 <_dtoa_r+0xa58>
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bfb8:	f88b a000 	strb.w	sl, [fp]
 800bfbc:	e775      	b.n	800beaa <_dtoa_r+0x94a>
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	e7ba      	b.n	800bf38 <_dtoa_r+0x9d8>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	e7e2      	b.n	800bf8c <_dtoa_r+0xa2c>
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	db04      	blt.n	800bfd6 <_dtoa_r+0xa76>
 800bfcc:	9906      	ldr	r1, [sp, #24]
 800bfce:	430b      	orrs	r3, r1
 800bfd0:	9904      	ldr	r1, [sp, #16]
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	d122      	bne.n	800c01c <_dtoa_r+0xabc>
 800bfd6:	2a00      	cmp	r2, #0
 800bfd8:	ddee      	ble.n	800bfb8 <_dtoa_r+0xa58>
 800bfda:	ee18 1a10 	vmov	r1, s16
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f000 fbc7 	bl	800c774 <__lshift>
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	ee08 0a10 	vmov	s16, r0
 800bfec:	f000 fc32 	bl	800c854 <__mcmp>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	dc03      	bgt.n	800bffc <_dtoa_r+0xa9c>
 800bff4:	d1e0      	bne.n	800bfb8 <_dtoa_r+0xa58>
 800bff6:	f01a 0f01 	tst.w	sl, #1
 800bffa:	d0dd      	beq.n	800bfb8 <_dtoa_r+0xa58>
 800bffc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c000:	d1d7      	bne.n	800bfb2 <_dtoa_r+0xa52>
 800c002:	2339      	movs	r3, #57	; 0x39
 800c004:	f88b 3000 	strb.w	r3, [fp]
 800c008:	462b      	mov	r3, r5
 800c00a:	461d      	mov	r5, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c012:	2a39      	cmp	r2, #57	; 0x39
 800c014:	d071      	beq.n	800c0fa <_dtoa_r+0xb9a>
 800c016:	3201      	adds	r2, #1
 800c018:	701a      	strb	r2, [r3, #0]
 800c01a:	e746      	b.n	800beaa <_dtoa_r+0x94a>
 800c01c:	2a00      	cmp	r2, #0
 800c01e:	dd07      	ble.n	800c030 <_dtoa_r+0xad0>
 800c020:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c024:	d0ed      	beq.n	800c002 <_dtoa_r+0xaa2>
 800c026:	f10a 0301 	add.w	r3, sl, #1
 800c02a:	f88b 3000 	strb.w	r3, [fp]
 800c02e:	e73c      	b.n	800beaa <_dtoa_r+0x94a>
 800c030:	9b05      	ldr	r3, [sp, #20]
 800c032:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c036:	4599      	cmp	r9, r3
 800c038:	d047      	beq.n	800c0ca <_dtoa_r+0xb6a>
 800c03a:	ee18 1a10 	vmov	r1, s16
 800c03e:	2300      	movs	r3, #0
 800c040:	220a      	movs	r2, #10
 800c042:	4620      	mov	r0, r4
 800c044:	f000 f9e6 	bl	800c414 <__multadd>
 800c048:	45b8      	cmp	r8, r7
 800c04a:	ee08 0a10 	vmov	s16, r0
 800c04e:	f04f 0300 	mov.w	r3, #0
 800c052:	f04f 020a 	mov.w	r2, #10
 800c056:	4641      	mov	r1, r8
 800c058:	4620      	mov	r0, r4
 800c05a:	d106      	bne.n	800c06a <_dtoa_r+0xb0a>
 800c05c:	f000 f9da 	bl	800c414 <__multadd>
 800c060:	4680      	mov	r8, r0
 800c062:	4607      	mov	r7, r0
 800c064:	f109 0901 	add.w	r9, r9, #1
 800c068:	e772      	b.n	800bf50 <_dtoa_r+0x9f0>
 800c06a:	f000 f9d3 	bl	800c414 <__multadd>
 800c06e:	4639      	mov	r1, r7
 800c070:	4680      	mov	r8, r0
 800c072:	2300      	movs	r3, #0
 800c074:	220a      	movs	r2, #10
 800c076:	4620      	mov	r0, r4
 800c078:	f000 f9cc 	bl	800c414 <__multadd>
 800c07c:	4607      	mov	r7, r0
 800c07e:	e7f1      	b.n	800c064 <_dtoa_r+0xb04>
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	9302      	str	r3, [sp, #8]
 800c084:	9d01      	ldr	r5, [sp, #4]
 800c086:	ee18 0a10 	vmov	r0, s16
 800c08a:	4631      	mov	r1, r6
 800c08c:	f7ff f9da 	bl	800b444 <quorem>
 800c090:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	f805 ab01 	strb.w	sl, [r5], #1
 800c09a:	1aea      	subs	r2, r5, r3
 800c09c:	9b02      	ldr	r3, [sp, #8]
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	dd09      	ble.n	800c0b6 <_dtoa_r+0xb56>
 800c0a2:	ee18 1a10 	vmov	r1, s16
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	220a      	movs	r2, #10
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 f9b2 	bl	800c414 <__multadd>
 800c0b0:	ee08 0a10 	vmov	s16, r0
 800c0b4:	e7e7      	b.n	800c086 <_dtoa_r+0xb26>
 800c0b6:	9b02      	ldr	r3, [sp, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bfc8      	it	gt
 800c0bc:	461d      	movgt	r5, r3
 800c0be:	9b01      	ldr	r3, [sp, #4]
 800c0c0:	bfd8      	it	le
 800c0c2:	2501      	movle	r5, #1
 800c0c4:	441d      	add	r5, r3
 800c0c6:	f04f 0800 	mov.w	r8, #0
 800c0ca:	ee18 1a10 	vmov	r1, s16
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f000 fb4f 	bl	800c774 <__lshift>
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	ee08 0a10 	vmov	s16, r0
 800c0dc:	f000 fbba 	bl	800c854 <__mcmp>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	dc91      	bgt.n	800c008 <_dtoa_r+0xaa8>
 800c0e4:	d102      	bne.n	800c0ec <_dtoa_r+0xb8c>
 800c0e6:	f01a 0f01 	tst.w	sl, #1
 800c0ea:	d18d      	bne.n	800c008 <_dtoa_r+0xaa8>
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	461d      	mov	r5, r3
 800c0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0f4:	2a30      	cmp	r2, #48	; 0x30
 800c0f6:	d0fa      	beq.n	800c0ee <_dtoa_r+0xb8e>
 800c0f8:	e6d7      	b.n	800beaa <_dtoa_r+0x94a>
 800c0fa:	9a01      	ldr	r2, [sp, #4]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d184      	bne.n	800c00a <_dtoa_r+0xaaa>
 800c100:	9b00      	ldr	r3, [sp, #0]
 800c102:	3301      	adds	r3, #1
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	2331      	movs	r3, #49	; 0x31
 800c108:	7013      	strb	r3, [r2, #0]
 800c10a:	e6ce      	b.n	800beaa <_dtoa_r+0x94a>
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <_dtoa_r+0xbd4>)
 800c10e:	f7ff ba95 	b.w	800b63c <_dtoa_r+0xdc>
 800c112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c114:	2b00      	cmp	r3, #0
 800c116:	f47f aa6e 	bne.w	800b5f6 <_dtoa_r+0x96>
 800c11a:	4b07      	ldr	r3, [pc, #28]	; (800c138 <_dtoa_r+0xbd8>)
 800c11c:	f7ff ba8e 	b.w	800b63c <_dtoa_r+0xdc>
 800c120:	9b02      	ldr	r3, [sp, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	dcae      	bgt.n	800c084 <_dtoa_r+0xb24>
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	f73f aea8 	bgt.w	800be7e <_dtoa_r+0x91e>
 800c12e:	e7a9      	b.n	800c084 <_dtoa_r+0xb24>
 800c130:	0800eb07 	.word	0x0800eb07
 800c134:	0800ea64 	.word	0x0800ea64
 800c138:	0800ea88 	.word	0x0800ea88

0800c13c <std>:
 800c13c:	2300      	movs	r3, #0
 800c13e:	b510      	push	{r4, lr}
 800c140:	4604      	mov	r4, r0
 800c142:	e9c0 3300 	strd	r3, r3, [r0]
 800c146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c14a:	6083      	str	r3, [r0, #8]
 800c14c:	8181      	strh	r1, [r0, #12]
 800c14e:	6643      	str	r3, [r0, #100]	; 0x64
 800c150:	81c2      	strh	r2, [r0, #14]
 800c152:	6183      	str	r3, [r0, #24]
 800c154:	4619      	mov	r1, r3
 800c156:	2208      	movs	r2, #8
 800c158:	305c      	adds	r0, #92	; 0x5c
 800c15a:	f7fe fbad 	bl	800a8b8 <memset>
 800c15e:	4b05      	ldr	r3, [pc, #20]	; (800c174 <std+0x38>)
 800c160:	6263      	str	r3, [r4, #36]	; 0x24
 800c162:	4b05      	ldr	r3, [pc, #20]	; (800c178 <std+0x3c>)
 800c164:	62a3      	str	r3, [r4, #40]	; 0x28
 800c166:	4b05      	ldr	r3, [pc, #20]	; (800c17c <std+0x40>)
 800c168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c16a:	4b05      	ldr	r3, [pc, #20]	; (800c180 <std+0x44>)
 800c16c:	6224      	str	r4, [r4, #32]
 800c16e:	6323      	str	r3, [r4, #48]	; 0x30
 800c170:	bd10      	pop	{r4, pc}
 800c172:	bf00      	nop
 800c174:	0800cd95 	.word	0x0800cd95
 800c178:	0800cdb7 	.word	0x0800cdb7
 800c17c:	0800cdef 	.word	0x0800cdef
 800c180:	0800ce13 	.word	0x0800ce13

0800c184 <_cleanup_r>:
 800c184:	4901      	ldr	r1, [pc, #4]	; (800c18c <_cleanup_r+0x8>)
 800c186:	f000 b8af 	b.w	800c2e8 <_fwalk_reent>
 800c18a:	bf00      	nop
 800c18c:	0800d129 	.word	0x0800d129

0800c190 <__sfmoreglue>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	2268      	movs	r2, #104	; 0x68
 800c194:	1e4d      	subs	r5, r1, #1
 800c196:	4355      	muls	r5, r2
 800c198:	460e      	mov	r6, r1
 800c19a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c19e:	f7fe fbff 	bl	800a9a0 <_malloc_r>
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	b140      	cbz	r0, 800c1b8 <__sfmoreglue+0x28>
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	e9c0 1600 	strd	r1, r6, [r0]
 800c1ac:	300c      	adds	r0, #12
 800c1ae:	60a0      	str	r0, [r4, #8]
 800c1b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1b4:	f7fe fb80 	bl	800a8b8 <memset>
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}

0800c1bc <__sfp_lock_acquire>:
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <__sfp_lock_acquire+0x8>)
 800c1be:	f000 b8b8 	b.w	800c332 <__retarget_lock_acquire_recursive>
 800c1c2:	bf00      	nop
 800c1c4:	20000dd9 	.word	0x20000dd9

0800c1c8 <__sfp_lock_release>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	; (800c1d0 <__sfp_lock_release+0x8>)
 800c1ca:	f000 b8b3 	b.w	800c334 <__retarget_lock_release_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	20000dd9 	.word	0x20000dd9

0800c1d4 <__sinit_lock_acquire>:
 800c1d4:	4801      	ldr	r0, [pc, #4]	; (800c1dc <__sinit_lock_acquire+0x8>)
 800c1d6:	f000 b8ac 	b.w	800c332 <__retarget_lock_acquire_recursive>
 800c1da:	bf00      	nop
 800c1dc:	20000dda 	.word	0x20000dda

0800c1e0 <__sinit_lock_release>:
 800c1e0:	4801      	ldr	r0, [pc, #4]	; (800c1e8 <__sinit_lock_release+0x8>)
 800c1e2:	f000 b8a7 	b.w	800c334 <__retarget_lock_release_recursive>
 800c1e6:	bf00      	nop
 800c1e8:	20000dda 	.word	0x20000dda

0800c1ec <__sinit>:
 800c1ec:	b510      	push	{r4, lr}
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	f7ff fff0 	bl	800c1d4 <__sinit_lock_acquire>
 800c1f4:	69a3      	ldr	r3, [r4, #24]
 800c1f6:	b11b      	cbz	r3, 800c200 <__sinit+0x14>
 800c1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1fc:	f7ff bff0 	b.w	800c1e0 <__sinit_lock_release>
 800c200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c204:	6523      	str	r3, [r4, #80]	; 0x50
 800c206:	4b13      	ldr	r3, [pc, #76]	; (800c254 <__sinit+0x68>)
 800c208:	4a13      	ldr	r2, [pc, #76]	; (800c258 <__sinit+0x6c>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c20e:	42a3      	cmp	r3, r4
 800c210:	bf04      	itt	eq
 800c212:	2301      	moveq	r3, #1
 800c214:	61a3      	streq	r3, [r4, #24]
 800c216:	4620      	mov	r0, r4
 800c218:	f000 f820 	bl	800c25c <__sfp>
 800c21c:	6060      	str	r0, [r4, #4]
 800c21e:	4620      	mov	r0, r4
 800c220:	f000 f81c 	bl	800c25c <__sfp>
 800c224:	60a0      	str	r0, [r4, #8]
 800c226:	4620      	mov	r0, r4
 800c228:	f000 f818 	bl	800c25c <__sfp>
 800c22c:	2200      	movs	r2, #0
 800c22e:	60e0      	str	r0, [r4, #12]
 800c230:	2104      	movs	r1, #4
 800c232:	6860      	ldr	r0, [r4, #4]
 800c234:	f7ff ff82 	bl	800c13c <std>
 800c238:	68a0      	ldr	r0, [r4, #8]
 800c23a:	2201      	movs	r2, #1
 800c23c:	2109      	movs	r1, #9
 800c23e:	f7ff ff7d 	bl	800c13c <std>
 800c242:	68e0      	ldr	r0, [r4, #12]
 800c244:	2202      	movs	r2, #2
 800c246:	2112      	movs	r1, #18
 800c248:	f7ff ff78 	bl	800c13c <std>
 800c24c:	2301      	movs	r3, #1
 800c24e:	61a3      	str	r3, [r4, #24]
 800c250:	e7d2      	b.n	800c1f8 <__sinit+0xc>
 800c252:	bf00      	nop
 800c254:	0800ea50 	.word	0x0800ea50
 800c258:	0800c185 	.word	0x0800c185

0800c25c <__sfp>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	4607      	mov	r7, r0
 800c260:	f7ff ffac 	bl	800c1bc <__sfp_lock_acquire>
 800c264:	4b1e      	ldr	r3, [pc, #120]	; (800c2e0 <__sfp+0x84>)
 800c266:	681e      	ldr	r6, [r3, #0]
 800c268:	69b3      	ldr	r3, [r6, #24]
 800c26a:	b913      	cbnz	r3, 800c272 <__sfp+0x16>
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7ff ffbd 	bl	800c1ec <__sinit>
 800c272:	3648      	adds	r6, #72	; 0x48
 800c274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c278:	3b01      	subs	r3, #1
 800c27a:	d503      	bpl.n	800c284 <__sfp+0x28>
 800c27c:	6833      	ldr	r3, [r6, #0]
 800c27e:	b30b      	cbz	r3, 800c2c4 <__sfp+0x68>
 800c280:	6836      	ldr	r6, [r6, #0]
 800c282:	e7f7      	b.n	800c274 <__sfp+0x18>
 800c284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c288:	b9d5      	cbnz	r5, 800c2c0 <__sfp+0x64>
 800c28a:	4b16      	ldr	r3, [pc, #88]	; (800c2e4 <__sfp+0x88>)
 800c28c:	60e3      	str	r3, [r4, #12]
 800c28e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c292:	6665      	str	r5, [r4, #100]	; 0x64
 800c294:	f000 f84c 	bl	800c330 <__retarget_lock_init_recursive>
 800c298:	f7ff ff96 	bl	800c1c8 <__sfp_lock_release>
 800c29c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c2a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c2a4:	6025      	str	r5, [r4, #0]
 800c2a6:	61a5      	str	r5, [r4, #24]
 800c2a8:	2208      	movs	r2, #8
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2b0:	f7fe fb02 	bl	800a8b8 <memset>
 800c2b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2bc:	4620      	mov	r0, r4
 800c2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c0:	3468      	adds	r4, #104	; 0x68
 800c2c2:	e7d9      	b.n	800c278 <__sfp+0x1c>
 800c2c4:	2104      	movs	r1, #4
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f7ff ff62 	bl	800c190 <__sfmoreglue>
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	6030      	str	r0, [r6, #0]
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d1d5      	bne.n	800c280 <__sfp+0x24>
 800c2d4:	f7ff ff78 	bl	800c1c8 <__sfp_lock_release>
 800c2d8:	230c      	movs	r3, #12
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	e7ee      	b.n	800c2bc <__sfp+0x60>
 800c2de:	bf00      	nop
 800c2e0:	0800ea50 	.word	0x0800ea50
 800c2e4:	ffff0001 	.word	0xffff0001

0800c2e8 <_fwalk_reent>:
 800c2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	4688      	mov	r8, r1
 800c2f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2f4:	2700      	movs	r7, #0
 800c2f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c2fe:	d505      	bpl.n	800c30c <_fwalk_reent+0x24>
 800c300:	6824      	ldr	r4, [r4, #0]
 800c302:	2c00      	cmp	r4, #0
 800c304:	d1f7      	bne.n	800c2f6 <_fwalk_reent+0xe>
 800c306:	4638      	mov	r0, r7
 800c308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30c:	89ab      	ldrh	r3, [r5, #12]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d907      	bls.n	800c322 <_fwalk_reent+0x3a>
 800c312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c316:	3301      	adds	r3, #1
 800c318:	d003      	beq.n	800c322 <_fwalk_reent+0x3a>
 800c31a:	4629      	mov	r1, r5
 800c31c:	4630      	mov	r0, r6
 800c31e:	47c0      	blx	r8
 800c320:	4307      	orrs	r7, r0
 800c322:	3568      	adds	r5, #104	; 0x68
 800c324:	e7e9      	b.n	800c2fa <_fwalk_reent+0x12>
	...

0800c328 <_localeconv_r>:
 800c328:	4800      	ldr	r0, [pc, #0]	; (800c32c <_localeconv_r+0x4>)
 800c32a:	4770      	bx	lr
 800c32c:	20000164 	.word	0x20000164

0800c330 <__retarget_lock_init_recursive>:
 800c330:	4770      	bx	lr

0800c332 <__retarget_lock_acquire_recursive>:
 800c332:	4770      	bx	lr

0800c334 <__retarget_lock_release_recursive>:
 800c334:	4770      	bx	lr
	...

0800c338 <__malloc_lock>:
 800c338:	4801      	ldr	r0, [pc, #4]	; (800c340 <__malloc_lock+0x8>)
 800c33a:	f7ff bffa 	b.w	800c332 <__retarget_lock_acquire_recursive>
 800c33e:	bf00      	nop
 800c340:	20000dd8 	.word	0x20000dd8

0800c344 <__malloc_unlock>:
 800c344:	4801      	ldr	r0, [pc, #4]	; (800c34c <__malloc_unlock+0x8>)
 800c346:	f7ff bff5 	b.w	800c334 <__retarget_lock_release_recursive>
 800c34a:	bf00      	nop
 800c34c:	20000dd8 	.word	0x20000dd8

0800c350 <_Balloc>:
 800c350:	b570      	push	{r4, r5, r6, lr}
 800c352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c354:	4604      	mov	r4, r0
 800c356:	460d      	mov	r5, r1
 800c358:	b976      	cbnz	r6, 800c378 <_Balloc+0x28>
 800c35a:	2010      	movs	r0, #16
 800c35c:	f7fe fa96 	bl	800a88c <malloc>
 800c360:	4602      	mov	r2, r0
 800c362:	6260      	str	r0, [r4, #36]	; 0x24
 800c364:	b920      	cbnz	r0, 800c370 <_Balloc+0x20>
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <_Balloc+0x78>)
 800c368:	4818      	ldr	r0, [pc, #96]	; (800c3cc <_Balloc+0x7c>)
 800c36a:	2166      	movs	r1, #102	; 0x66
 800c36c:	f000 fe28 	bl	800cfc0 <__assert_func>
 800c370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c374:	6006      	str	r6, [r0, #0]
 800c376:	60c6      	str	r6, [r0, #12]
 800c378:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c37a:	68f3      	ldr	r3, [r6, #12]
 800c37c:	b183      	cbz	r3, 800c3a0 <_Balloc+0x50>
 800c37e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c386:	b9b8      	cbnz	r0, 800c3b8 <_Balloc+0x68>
 800c388:	2101      	movs	r1, #1
 800c38a:	fa01 f605 	lsl.w	r6, r1, r5
 800c38e:	1d72      	adds	r2, r6, #5
 800c390:	0092      	lsls	r2, r2, #2
 800c392:	4620      	mov	r0, r4
 800c394:	f000 fb60 	bl	800ca58 <_calloc_r>
 800c398:	b160      	cbz	r0, 800c3b4 <_Balloc+0x64>
 800c39a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c39e:	e00e      	b.n	800c3be <_Balloc+0x6e>
 800c3a0:	2221      	movs	r2, #33	; 0x21
 800c3a2:	2104      	movs	r1, #4
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 fb57 	bl	800ca58 <_calloc_r>
 800c3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ac:	60f0      	str	r0, [r6, #12]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e4      	bne.n	800c37e <_Balloc+0x2e>
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	6802      	ldr	r2, [r0, #0]
 800c3ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3c4:	e7f7      	b.n	800c3b6 <_Balloc+0x66>
 800c3c6:	bf00      	nop
 800c3c8:	0800ea95 	.word	0x0800ea95
 800c3cc:	0800eb78 	.word	0x0800eb78

0800c3d0 <_Bfree>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	b976      	cbnz	r6, 800c3f8 <_Bfree+0x28>
 800c3da:	2010      	movs	r0, #16
 800c3dc:	f7fe fa56 	bl	800a88c <malloc>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	6268      	str	r0, [r5, #36]	; 0x24
 800c3e4:	b920      	cbnz	r0, 800c3f0 <_Bfree+0x20>
 800c3e6:	4b09      	ldr	r3, [pc, #36]	; (800c40c <_Bfree+0x3c>)
 800c3e8:	4809      	ldr	r0, [pc, #36]	; (800c410 <_Bfree+0x40>)
 800c3ea:	218a      	movs	r1, #138	; 0x8a
 800c3ec:	f000 fde8 	bl	800cfc0 <__assert_func>
 800c3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3f4:	6006      	str	r6, [r0, #0]
 800c3f6:	60c6      	str	r6, [r0, #12]
 800c3f8:	b13c      	cbz	r4, 800c40a <_Bfree+0x3a>
 800c3fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3fc:	6862      	ldr	r2, [r4, #4]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c404:	6021      	str	r1, [r4, #0]
 800c406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	0800ea95 	.word	0x0800ea95
 800c410:	0800eb78 	.word	0x0800eb78

0800c414 <__multadd>:
 800c414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c418:	690d      	ldr	r5, [r1, #16]
 800c41a:	4607      	mov	r7, r0
 800c41c:	460c      	mov	r4, r1
 800c41e:	461e      	mov	r6, r3
 800c420:	f101 0c14 	add.w	ip, r1, #20
 800c424:	2000      	movs	r0, #0
 800c426:	f8dc 3000 	ldr.w	r3, [ip]
 800c42a:	b299      	uxth	r1, r3
 800c42c:	fb02 6101 	mla	r1, r2, r1, r6
 800c430:	0c1e      	lsrs	r6, r3, #16
 800c432:	0c0b      	lsrs	r3, r1, #16
 800c434:	fb02 3306 	mla	r3, r2, r6, r3
 800c438:	b289      	uxth	r1, r1
 800c43a:	3001      	adds	r0, #1
 800c43c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c440:	4285      	cmp	r5, r0
 800c442:	f84c 1b04 	str.w	r1, [ip], #4
 800c446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c44a:	dcec      	bgt.n	800c426 <__multadd+0x12>
 800c44c:	b30e      	cbz	r6, 800c492 <__multadd+0x7e>
 800c44e:	68a3      	ldr	r3, [r4, #8]
 800c450:	42ab      	cmp	r3, r5
 800c452:	dc19      	bgt.n	800c488 <__multadd+0x74>
 800c454:	6861      	ldr	r1, [r4, #4]
 800c456:	4638      	mov	r0, r7
 800c458:	3101      	adds	r1, #1
 800c45a:	f7ff ff79 	bl	800c350 <_Balloc>
 800c45e:	4680      	mov	r8, r0
 800c460:	b928      	cbnz	r0, 800c46e <__multadd+0x5a>
 800c462:	4602      	mov	r2, r0
 800c464:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <__multadd+0x84>)
 800c466:	480d      	ldr	r0, [pc, #52]	; (800c49c <__multadd+0x88>)
 800c468:	21b5      	movs	r1, #181	; 0xb5
 800c46a:	f000 fda9 	bl	800cfc0 <__assert_func>
 800c46e:	6922      	ldr	r2, [r4, #16]
 800c470:	3202      	adds	r2, #2
 800c472:	f104 010c 	add.w	r1, r4, #12
 800c476:	0092      	lsls	r2, r2, #2
 800c478:	300c      	adds	r0, #12
 800c47a:	f7fe fa0f 	bl	800a89c <memcpy>
 800c47e:	4621      	mov	r1, r4
 800c480:	4638      	mov	r0, r7
 800c482:	f7ff ffa5 	bl	800c3d0 <_Bfree>
 800c486:	4644      	mov	r4, r8
 800c488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c48c:	3501      	adds	r5, #1
 800c48e:	615e      	str	r6, [r3, #20]
 800c490:	6125      	str	r5, [r4, #16]
 800c492:	4620      	mov	r0, r4
 800c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c498:	0800eb07 	.word	0x0800eb07
 800c49c:	0800eb78 	.word	0x0800eb78

0800c4a0 <__hi0bits>:
 800c4a0:	0c03      	lsrs	r3, r0, #16
 800c4a2:	041b      	lsls	r3, r3, #16
 800c4a4:	b9d3      	cbnz	r3, 800c4dc <__hi0bits+0x3c>
 800c4a6:	0400      	lsls	r0, r0, #16
 800c4a8:	2310      	movs	r3, #16
 800c4aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4ae:	bf04      	itt	eq
 800c4b0:	0200      	lsleq	r0, r0, #8
 800c4b2:	3308      	addeq	r3, #8
 800c4b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4b8:	bf04      	itt	eq
 800c4ba:	0100      	lsleq	r0, r0, #4
 800c4bc:	3304      	addeq	r3, #4
 800c4be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4c2:	bf04      	itt	eq
 800c4c4:	0080      	lsleq	r0, r0, #2
 800c4c6:	3302      	addeq	r3, #2
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	db05      	blt.n	800c4d8 <__hi0bits+0x38>
 800c4cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4d0:	f103 0301 	add.w	r3, r3, #1
 800c4d4:	bf08      	it	eq
 800c4d6:	2320      	moveq	r3, #32
 800c4d8:	4618      	mov	r0, r3
 800c4da:	4770      	bx	lr
 800c4dc:	2300      	movs	r3, #0
 800c4de:	e7e4      	b.n	800c4aa <__hi0bits+0xa>

0800c4e0 <__lo0bits>:
 800c4e0:	6803      	ldr	r3, [r0, #0]
 800c4e2:	f013 0207 	ands.w	r2, r3, #7
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	d00b      	beq.n	800c502 <__lo0bits+0x22>
 800c4ea:	07da      	lsls	r2, r3, #31
 800c4ec:	d423      	bmi.n	800c536 <__lo0bits+0x56>
 800c4ee:	0798      	lsls	r0, r3, #30
 800c4f0:	bf49      	itett	mi
 800c4f2:	085b      	lsrmi	r3, r3, #1
 800c4f4:	089b      	lsrpl	r3, r3, #2
 800c4f6:	2001      	movmi	r0, #1
 800c4f8:	600b      	strmi	r3, [r1, #0]
 800c4fa:	bf5c      	itt	pl
 800c4fc:	600b      	strpl	r3, [r1, #0]
 800c4fe:	2002      	movpl	r0, #2
 800c500:	4770      	bx	lr
 800c502:	b298      	uxth	r0, r3
 800c504:	b9a8      	cbnz	r0, 800c532 <__lo0bits+0x52>
 800c506:	0c1b      	lsrs	r3, r3, #16
 800c508:	2010      	movs	r0, #16
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	b90a      	cbnz	r2, 800c512 <__lo0bits+0x32>
 800c50e:	3008      	adds	r0, #8
 800c510:	0a1b      	lsrs	r3, r3, #8
 800c512:	071a      	lsls	r2, r3, #28
 800c514:	bf04      	itt	eq
 800c516:	091b      	lsreq	r3, r3, #4
 800c518:	3004      	addeq	r0, #4
 800c51a:	079a      	lsls	r2, r3, #30
 800c51c:	bf04      	itt	eq
 800c51e:	089b      	lsreq	r3, r3, #2
 800c520:	3002      	addeq	r0, #2
 800c522:	07da      	lsls	r2, r3, #31
 800c524:	d403      	bmi.n	800c52e <__lo0bits+0x4e>
 800c526:	085b      	lsrs	r3, r3, #1
 800c528:	f100 0001 	add.w	r0, r0, #1
 800c52c:	d005      	beq.n	800c53a <__lo0bits+0x5a>
 800c52e:	600b      	str	r3, [r1, #0]
 800c530:	4770      	bx	lr
 800c532:	4610      	mov	r0, r2
 800c534:	e7e9      	b.n	800c50a <__lo0bits+0x2a>
 800c536:	2000      	movs	r0, #0
 800c538:	4770      	bx	lr
 800c53a:	2020      	movs	r0, #32
 800c53c:	4770      	bx	lr
	...

0800c540 <__i2b>:
 800c540:	b510      	push	{r4, lr}
 800c542:	460c      	mov	r4, r1
 800c544:	2101      	movs	r1, #1
 800c546:	f7ff ff03 	bl	800c350 <_Balloc>
 800c54a:	4602      	mov	r2, r0
 800c54c:	b928      	cbnz	r0, 800c55a <__i2b+0x1a>
 800c54e:	4b05      	ldr	r3, [pc, #20]	; (800c564 <__i2b+0x24>)
 800c550:	4805      	ldr	r0, [pc, #20]	; (800c568 <__i2b+0x28>)
 800c552:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c556:	f000 fd33 	bl	800cfc0 <__assert_func>
 800c55a:	2301      	movs	r3, #1
 800c55c:	6144      	str	r4, [r0, #20]
 800c55e:	6103      	str	r3, [r0, #16]
 800c560:	bd10      	pop	{r4, pc}
 800c562:	bf00      	nop
 800c564:	0800eb07 	.word	0x0800eb07
 800c568:	0800eb78 	.word	0x0800eb78

0800c56c <__multiply>:
 800c56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c570:	4691      	mov	r9, r2
 800c572:	690a      	ldr	r2, [r1, #16]
 800c574:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c578:	429a      	cmp	r2, r3
 800c57a:	bfb8      	it	lt
 800c57c:	460b      	movlt	r3, r1
 800c57e:	460c      	mov	r4, r1
 800c580:	bfbc      	itt	lt
 800c582:	464c      	movlt	r4, r9
 800c584:	4699      	movlt	r9, r3
 800c586:	6927      	ldr	r7, [r4, #16]
 800c588:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c58c:	68a3      	ldr	r3, [r4, #8]
 800c58e:	6861      	ldr	r1, [r4, #4]
 800c590:	eb07 060a 	add.w	r6, r7, sl
 800c594:	42b3      	cmp	r3, r6
 800c596:	b085      	sub	sp, #20
 800c598:	bfb8      	it	lt
 800c59a:	3101      	addlt	r1, #1
 800c59c:	f7ff fed8 	bl	800c350 <_Balloc>
 800c5a0:	b930      	cbnz	r0, 800c5b0 <__multiply+0x44>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	4b44      	ldr	r3, [pc, #272]	; (800c6b8 <__multiply+0x14c>)
 800c5a6:	4845      	ldr	r0, [pc, #276]	; (800c6bc <__multiply+0x150>)
 800c5a8:	f240 115d 	movw	r1, #349	; 0x15d
 800c5ac:	f000 fd08 	bl	800cfc0 <__assert_func>
 800c5b0:	f100 0514 	add.w	r5, r0, #20
 800c5b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5b8:	462b      	mov	r3, r5
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	4543      	cmp	r3, r8
 800c5be:	d321      	bcc.n	800c604 <__multiply+0x98>
 800c5c0:	f104 0314 	add.w	r3, r4, #20
 800c5c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5c8:	f109 0314 	add.w	r3, r9, #20
 800c5cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5d0:	9202      	str	r2, [sp, #8]
 800c5d2:	1b3a      	subs	r2, r7, r4
 800c5d4:	3a15      	subs	r2, #21
 800c5d6:	f022 0203 	bic.w	r2, r2, #3
 800c5da:	3204      	adds	r2, #4
 800c5dc:	f104 0115 	add.w	r1, r4, #21
 800c5e0:	428f      	cmp	r7, r1
 800c5e2:	bf38      	it	cc
 800c5e4:	2204      	movcc	r2, #4
 800c5e6:	9201      	str	r2, [sp, #4]
 800c5e8:	9a02      	ldr	r2, [sp, #8]
 800c5ea:	9303      	str	r3, [sp, #12]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d80c      	bhi.n	800c60a <__multiply+0x9e>
 800c5f0:	2e00      	cmp	r6, #0
 800c5f2:	dd03      	ble.n	800c5fc <__multiply+0x90>
 800c5f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d05a      	beq.n	800c6b2 <__multiply+0x146>
 800c5fc:	6106      	str	r6, [r0, #16]
 800c5fe:	b005      	add	sp, #20
 800c600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c604:	f843 2b04 	str.w	r2, [r3], #4
 800c608:	e7d8      	b.n	800c5bc <__multiply+0x50>
 800c60a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c60e:	f1ba 0f00 	cmp.w	sl, #0
 800c612:	d024      	beq.n	800c65e <__multiply+0xf2>
 800c614:	f104 0e14 	add.w	lr, r4, #20
 800c618:	46a9      	mov	r9, r5
 800c61a:	f04f 0c00 	mov.w	ip, #0
 800c61e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c622:	f8d9 1000 	ldr.w	r1, [r9]
 800c626:	fa1f fb82 	uxth.w	fp, r2
 800c62a:	b289      	uxth	r1, r1
 800c62c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c630:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c634:	f8d9 2000 	ldr.w	r2, [r9]
 800c638:	4461      	add	r1, ip
 800c63a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c63e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c646:	b289      	uxth	r1, r1
 800c648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c64c:	4577      	cmp	r7, lr
 800c64e:	f849 1b04 	str.w	r1, [r9], #4
 800c652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c656:	d8e2      	bhi.n	800c61e <__multiply+0xb2>
 800c658:	9a01      	ldr	r2, [sp, #4]
 800c65a:	f845 c002 	str.w	ip, [r5, r2]
 800c65e:	9a03      	ldr	r2, [sp, #12]
 800c660:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c664:	3304      	adds	r3, #4
 800c666:	f1b9 0f00 	cmp.w	r9, #0
 800c66a:	d020      	beq.n	800c6ae <__multiply+0x142>
 800c66c:	6829      	ldr	r1, [r5, #0]
 800c66e:	f104 0c14 	add.w	ip, r4, #20
 800c672:	46ae      	mov	lr, r5
 800c674:	f04f 0a00 	mov.w	sl, #0
 800c678:	f8bc b000 	ldrh.w	fp, [ip]
 800c67c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c680:	fb09 220b 	mla	r2, r9, fp, r2
 800c684:	4492      	add	sl, r2
 800c686:	b289      	uxth	r1, r1
 800c688:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c68c:	f84e 1b04 	str.w	r1, [lr], #4
 800c690:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c694:	f8be 1000 	ldrh.w	r1, [lr]
 800c698:	0c12      	lsrs	r2, r2, #16
 800c69a:	fb09 1102 	mla	r1, r9, r2, r1
 800c69e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c6a2:	4567      	cmp	r7, ip
 800c6a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6a8:	d8e6      	bhi.n	800c678 <__multiply+0x10c>
 800c6aa:	9a01      	ldr	r2, [sp, #4]
 800c6ac:	50a9      	str	r1, [r5, r2]
 800c6ae:	3504      	adds	r5, #4
 800c6b0:	e79a      	b.n	800c5e8 <__multiply+0x7c>
 800c6b2:	3e01      	subs	r6, #1
 800c6b4:	e79c      	b.n	800c5f0 <__multiply+0x84>
 800c6b6:	bf00      	nop
 800c6b8:	0800eb07 	.word	0x0800eb07
 800c6bc:	0800eb78 	.word	0x0800eb78

0800c6c0 <__pow5mult>:
 800c6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c4:	4615      	mov	r5, r2
 800c6c6:	f012 0203 	ands.w	r2, r2, #3
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	460f      	mov	r7, r1
 800c6ce:	d007      	beq.n	800c6e0 <__pow5mult+0x20>
 800c6d0:	4c25      	ldr	r4, [pc, #148]	; (800c768 <__pow5mult+0xa8>)
 800c6d2:	3a01      	subs	r2, #1
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6da:	f7ff fe9b 	bl	800c414 <__multadd>
 800c6de:	4607      	mov	r7, r0
 800c6e0:	10ad      	asrs	r5, r5, #2
 800c6e2:	d03d      	beq.n	800c760 <__pow5mult+0xa0>
 800c6e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6e6:	b97c      	cbnz	r4, 800c708 <__pow5mult+0x48>
 800c6e8:	2010      	movs	r0, #16
 800c6ea:	f7fe f8cf 	bl	800a88c <malloc>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	6270      	str	r0, [r6, #36]	; 0x24
 800c6f2:	b928      	cbnz	r0, 800c700 <__pow5mult+0x40>
 800c6f4:	4b1d      	ldr	r3, [pc, #116]	; (800c76c <__pow5mult+0xac>)
 800c6f6:	481e      	ldr	r0, [pc, #120]	; (800c770 <__pow5mult+0xb0>)
 800c6f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6fc:	f000 fc60 	bl	800cfc0 <__assert_func>
 800c700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c704:	6004      	str	r4, [r0, #0]
 800c706:	60c4      	str	r4, [r0, #12]
 800c708:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c70c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c710:	b94c      	cbnz	r4, 800c726 <__pow5mult+0x66>
 800c712:	f240 2171 	movw	r1, #625	; 0x271
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff ff12 	bl	800c540 <__i2b>
 800c71c:	2300      	movs	r3, #0
 800c71e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c722:	4604      	mov	r4, r0
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	f04f 0900 	mov.w	r9, #0
 800c72a:	07eb      	lsls	r3, r5, #31
 800c72c:	d50a      	bpl.n	800c744 <__pow5mult+0x84>
 800c72e:	4639      	mov	r1, r7
 800c730:	4622      	mov	r2, r4
 800c732:	4630      	mov	r0, r6
 800c734:	f7ff ff1a 	bl	800c56c <__multiply>
 800c738:	4639      	mov	r1, r7
 800c73a:	4680      	mov	r8, r0
 800c73c:	4630      	mov	r0, r6
 800c73e:	f7ff fe47 	bl	800c3d0 <_Bfree>
 800c742:	4647      	mov	r7, r8
 800c744:	106d      	asrs	r5, r5, #1
 800c746:	d00b      	beq.n	800c760 <__pow5mult+0xa0>
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	b938      	cbnz	r0, 800c75c <__pow5mult+0x9c>
 800c74c:	4622      	mov	r2, r4
 800c74e:	4621      	mov	r1, r4
 800c750:	4630      	mov	r0, r6
 800c752:	f7ff ff0b 	bl	800c56c <__multiply>
 800c756:	6020      	str	r0, [r4, #0]
 800c758:	f8c0 9000 	str.w	r9, [r0]
 800c75c:	4604      	mov	r4, r0
 800c75e:	e7e4      	b.n	800c72a <__pow5mult+0x6a>
 800c760:	4638      	mov	r0, r7
 800c762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c766:	bf00      	nop
 800c768:	0800ecc8 	.word	0x0800ecc8
 800c76c:	0800ea95 	.word	0x0800ea95
 800c770:	0800eb78 	.word	0x0800eb78

0800c774 <__lshift>:
 800c774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c778:	460c      	mov	r4, r1
 800c77a:	6849      	ldr	r1, [r1, #4]
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c782:	68a3      	ldr	r3, [r4, #8]
 800c784:	4607      	mov	r7, r0
 800c786:	4691      	mov	r9, r2
 800c788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c78c:	f108 0601 	add.w	r6, r8, #1
 800c790:	42b3      	cmp	r3, r6
 800c792:	db0b      	blt.n	800c7ac <__lshift+0x38>
 800c794:	4638      	mov	r0, r7
 800c796:	f7ff fddb 	bl	800c350 <_Balloc>
 800c79a:	4605      	mov	r5, r0
 800c79c:	b948      	cbnz	r0, 800c7b2 <__lshift+0x3e>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	4b2a      	ldr	r3, [pc, #168]	; (800c84c <__lshift+0xd8>)
 800c7a2:	482b      	ldr	r0, [pc, #172]	; (800c850 <__lshift+0xdc>)
 800c7a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7a8:	f000 fc0a 	bl	800cfc0 <__assert_func>
 800c7ac:	3101      	adds	r1, #1
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	e7ee      	b.n	800c790 <__lshift+0x1c>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f100 0114 	add.w	r1, r0, #20
 800c7b8:	f100 0210 	add.w	r2, r0, #16
 800c7bc:	4618      	mov	r0, r3
 800c7be:	4553      	cmp	r3, sl
 800c7c0:	db37      	blt.n	800c832 <__lshift+0xbe>
 800c7c2:	6920      	ldr	r0, [r4, #16]
 800c7c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7c8:	f104 0314 	add.w	r3, r4, #20
 800c7cc:	f019 091f 	ands.w	r9, r9, #31
 800c7d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7d8:	d02f      	beq.n	800c83a <__lshift+0xc6>
 800c7da:	f1c9 0e20 	rsb	lr, r9, #32
 800c7de:	468a      	mov	sl, r1
 800c7e0:	f04f 0c00 	mov.w	ip, #0
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	fa02 f209 	lsl.w	r2, r2, r9
 800c7ea:	ea42 020c 	orr.w	r2, r2, ip
 800c7ee:	f84a 2b04 	str.w	r2, [sl], #4
 800c7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f6:	4298      	cmp	r0, r3
 800c7f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c7fc:	d8f2      	bhi.n	800c7e4 <__lshift+0x70>
 800c7fe:	1b03      	subs	r3, r0, r4
 800c800:	3b15      	subs	r3, #21
 800c802:	f023 0303 	bic.w	r3, r3, #3
 800c806:	3304      	adds	r3, #4
 800c808:	f104 0215 	add.w	r2, r4, #21
 800c80c:	4290      	cmp	r0, r2
 800c80e:	bf38      	it	cc
 800c810:	2304      	movcc	r3, #4
 800c812:	f841 c003 	str.w	ip, [r1, r3]
 800c816:	f1bc 0f00 	cmp.w	ip, #0
 800c81a:	d001      	beq.n	800c820 <__lshift+0xac>
 800c81c:	f108 0602 	add.w	r6, r8, #2
 800c820:	3e01      	subs	r6, #1
 800c822:	4638      	mov	r0, r7
 800c824:	612e      	str	r6, [r5, #16]
 800c826:	4621      	mov	r1, r4
 800c828:	f7ff fdd2 	bl	800c3d0 <_Bfree>
 800c82c:	4628      	mov	r0, r5
 800c82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c832:	f842 0f04 	str.w	r0, [r2, #4]!
 800c836:	3301      	adds	r3, #1
 800c838:	e7c1      	b.n	800c7be <__lshift+0x4a>
 800c83a:	3904      	subs	r1, #4
 800c83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c840:	f841 2f04 	str.w	r2, [r1, #4]!
 800c844:	4298      	cmp	r0, r3
 800c846:	d8f9      	bhi.n	800c83c <__lshift+0xc8>
 800c848:	e7ea      	b.n	800c820 <__lshift+0xac>
 800c84a:	bf00      	nop
 800c84c:	0800eb07 	.word	0x0800eb07
 800c850:	0800eb78 	.word	0x0800eb78

0800c854 <__mcmp>:
 800c854:	b530      	push	{r4, r5, lr}
 800c856:	6902      	ldr	r2, [r0, #16]
 800c858:	690c      	ldr	r4, [r1, #16]
 800c85a:	1b12      	subs	r2, r2, r4
 800c85c:	d10e      	bne.n	800c87c <__mcmp+0x28>
 800c85e:	f100 0314 	add.w	r3, r0, #20
 800c862:	3114      	adds	r1, #20
 800c864:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c868:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c86c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c870:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c874:	42a5      	cmp	r5, r4
 800c876:	d003      	beq.n	800c880 <__mcmp+0x2c>
 800c878:	d305      	bcc.n	800c886 <__mcmp+0x32>
 800c87a:	2201      	movs	r2, #1
 800c87c:	4610      	mov	r0, r2
 800c87e:	bd30      	pop	{r4, r5, pc}
 800c880:	4283      	cmp	r3, r0
 800c882:	d3f3      	bcc.n	800c86c <__mcmp+0x18>
 800c884:	e7fa      	b.n	800c87c <__mcmp+0x28>
 800c886:	f04f 32ff 	mov.w	r2, #4294967295
 800c88a:	e7f7      	b.n	800c87c <__mcmp+0x28>

0800c88c <__mdiff>:
 800c88c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	460c      	mov	r4, r1
 800c892:	4606      	mov	r6, r0
 800c894:	4611      	mov	r1, r2
 800c896:	4620      	mov	r0, r4
 800c898:	4690      	mov	r8, r2
 800c89a:	f7ff ffdb 	bl	800c854 <__mcmp>
 800c89e:	1e05      	subs	r5, r0, #0
 800c8a0:	d110      	bne.n	800c8c4 <__mdiff+0x38>
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f7ff fd53 	bl	800c350 <_Balloc>
 800c8aa:	b930      	cbnz	r0, 800c8ba <__mdiff+0x2e>
 800c8ac:	4b3a      	ldr	r3, [pc, #232]	; (800c998 <__mdiff+0x10c>)
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	f240 2132 	movw	r1, #562	; 0x232
 800c8b4:	4839      	ldr	r0, [pc, #228]	; (800c99c <__mdiff+0x110>)
 800c8b6:	f000 fb83 	bl	800cfc0 <__assert_func>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c4:	bfa4      	itt	ge
 800c8c6:	4643      	movge	r3, r8
 800c8c8:	46a0      	movge	r8, r4
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8d0:	bfa6      	itte	ge
 800c8d2:	461c      	movge	r4, r3
 800c8d4:	2500      	movge	r5, #0
 800c8d6:	2501      	movlt	r5, #1
 800c8d8:	f7ff fd3a 	bl	800c350 <_Balloc>
 800c8dc:	b920      	cbnz	r0, 800c8e8 <__mdiff+0x5c>
 800c8de:	4b2e      	ldr	r3, [pc, #184]	; (800c998 <__mdiff+0x10c>)
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8e6:	e7e5      	b.n	800c8b4 <__mdiff+0x28>
 800c8e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8ec:	6926      	ldr	r6, [r4, #16]
 800c8ee:	60c5      	str	r5, [r0, #12]
 800c8f0:	f104 0914 	add.w	r9, r4, #20
 800c8f4:	f108 0514 	add.w	r5, r8, #20
 800c8f8:	f100 0e14 	add.w	lr, r0, #20
 800c8fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c900:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c904:	f108 0210 	add.w	r2, r8, #16
 800c908:	46f2      	mov	sl, lr
 800c90a:	2100      	movs	r1, #0
 800c90c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c910:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c914:	fa1f f883 	uxth.w	r8, r3
 800c918:	fa11 f18b 	uxtah	r1, r1, fp
 800c91c:	0c1b      	lsrs	r3, r3, #16
 800c91e:	eba1 0808 	sub.w	r8, r1, r8
 800c922:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c926:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c92a:	fa1f f888 	uxth.w	r8, r8
 800c92e:	1419      	asrs	r1, r3, #16
 800c930:	454e      	cmp	r6, r9
 800c932:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c936:	f84a 3b04 	str.w	r3, [sl], #4
 800c93a:	d8e7      	bhi.n	800c90c <__mdiff+0x80>
 800c93c:	1b33      	subs	r3, r6, r4
 800c93e:	3b15      	subs	r3, #21
 800c940:	f023 0303 	bic.w	r3, r3, #3
 800c944:	3304      	adds	r3, #4
 800c946:	3415      	adds	r4, #21
 800c948:	42a6      	cmp	r6, r4
 800c94a:	bf38      	it	cc
 800c94c:	2304      	movcc	r3, #4
 800c94e:	441d      	add	r5, r3
 800c950:	4473      	add	r3, lr
 800c952:	469e      	mov	lr, r3
 800c954:	462e      	mov	r6, r5
 800c956:	4566      	cmp	r6, ip
 800c958:	d30e      	bcc.n	800c978 <__mdiff+0xec>
 800c95a:	f10c 0203 	add.w	r2, ip, #3
 800c95e:	1b52      	subs	r2, r2, r5
 800c960:	f022 0203 	bic.w	r2, r2, #3
 800c964:	3d03      	subs	r5, #3
 800c966:	45ac      	cmp	ip, r5
 800c968:	bf38      	it	cc
 800c96a:	2200      	movcc	r2, #0
 800c96c:	441a      	add	r2, r3
 800c96e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c972:	b17b      	cbz	r3, 800c994 <__mdiff+0x108>
 800c974:	6107      	str	r7, [r0, #16]
 800c976:	e7a3      	b.n	800c8c0 <__mdiff+0x34>
 800c978:	f856 8b04 	ldr.w	r8, [r6], #4
 800c97c:	fa11 f288 	uxtah	r2, r1, r8
 800c980:	1414      	asrs	r4, r2, #16
 800c982:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c986:	b292      	uxth	r2, r2
 800c988:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c98c:	f84e 2b04 	str.w	r2, [lr], #4
 800c990:	1421      	asrs	r1, r4, #16
 800c992:	e7e0      	b.n	800c956 <__mdiff+0xca>
 800c994:	3f01      	subs	r7, #1
 800c996:	e7ea      	b.n	800c96e <__mdiff+0xe2>
 800c998:	0800eb07 	.word	0x0800eb07
 800c99c:	0800eb78 	.word	0x0800eb78

0800c9a0 <__d2b>:
 800c9a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9a4:	4689      	mov	r9, r1
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	ec57 6b10 	vmov	r6, r7, d0
 800c9ac:	4690      	mov	r8, r2
 800c9ae:	f7ff fccf 	bl	800c350 <_Balloc>
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	b930      	cbnz	r0, 800c9c4 <__d2b+0x24>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	4b25      	ldr	r3, [pc, #148]	; (800ca50 <__d2b+0xb0>)
 800c9ba:	4826      	ldr	r0, [pc, #152]	; (800ca54 <__d2b+0xb4>)
 800c9bc:	f240 310a 	movw	r1, #778	; 0x30a
 800c9c0:	f000 fafe 	bl	800cfc0 <__assert_func>
 800c9c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c9c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9cc:	bb35      	cbnz	r5, 800ca1c <__d2b+0x7c>
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	d028      	beq.n	800ca26 <__d2b+0x86>
 800c9d4:	4668      	mov	r0, sp
 800c9d6:	9600      	str	r6, [sp, #0]
 800c9d8:	f7ff fd82 	bl	800c4e0 <__lo0bits>
 800c9dc:	9900      	ldr	r1, [sp, #0]
 800c9de:	b300      	cbz	r0, 800ca22 <__d2b+0x82>
 800c9e0:	9a01      	ldr	r2, [sp, #4]
 800c9e2:	f1c0 0320 	rsb	r3, r0, #32
 800c9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ea:	430b      	orrs	r3, r1
 800c9ec:	40c2      	lsrs	r2, r0
 800c9ee:	6163      	str	r3, [r4, #20]
 800c9f0:	9201      	str	r2, [sp, #4]
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	61a3      	str	r3, [r4, #24]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	bf14      	ite	ne
 800c9fa:	2202      	movne	r2, #2
 800c9fc:	2201      	moveq	r2, #1
 800c9fe:	6122      	str	r2, [r4, #16]
 800ca00:	b1d5      	cbz	r5, 800ca38 <__d2b+0x98>
 800ca02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca06:	4405      	add	r5, r0
 800ca08:	f8c9 5000 	str.w	r5, [r9]
 800ca0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca10:	f8c8 0000 	str.w	r0, [r8]
 800ca14:	4620      	mov	r0, r4
 800ca16:	b003      	add	sp, #12
 800ca18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca20:	e7d5      	b.n	800c9ce <__d2b+0x2e>
 800ca22:	6161      	str	r1, [r4, #20]
 800ca24:	e7e5      	b.n	800c9f2 <__d2b+0x52>
 800ca26:	a801      	add	r0, sp, #4
 800ca28:	f7ff fd5a 	bl	800c4e0 <__lo0bits>
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	6163      	str	r3, [r4, #20]
 800ca30:	2201      	movs	r2, #1
 800ca32:	6122      	str	r2, [r4, #16]
 800ca34:	3020      	adds	r0, #32
 800ca36:	e7e3      	b.n	800ca00 <__d2b+0x60>
 800ca38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca40:	f8c9 0000 	str.w	r0, [r9]
 800ca44:	6918      	ldr	r0, [r3, #16]
 800ca46:	f7ff fd2b 	bl	800c4a0 <__hi0bits>
 800ca4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca4e:	e7df      	b.n	800ca10 <__d2b+0x70>
 800ca50:	0800eb07 	.word	0x0800eb07
 800ca54:	0800eb78 	.word	0x0800eb78

0800ca58 <_calloc_r>:
 800ca58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca5a:	fba1 2402 	umull	r2, r4, r1, r2
 800ca5e:	b94c      	cbnz	r4, 800ca74 <_calloc_r+0x1c>
 800ca60:	4611      	mov	r1, r2
 800ca62:	9201      	str	r2, [sp, #4]
 800ca64:	f7fd ff9c 	bl	800a9a0 <_malloc_r>
 800ca68:	9a01      	ldr	r2, [sp, #4]
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	b930      	cbnz	r0, 800ca7c <_calloc_r+0x24>
 800ca6e:	4628      	mov	r0, r5
 800ca70:	b003      	add	sp, #12
 800ca72:	bd30      	pop	{r4, r5, pc}
 800ca74:	220c      	movs	r2, #12
 800ca76:	6002      	str	r2, [r0, #0]
 800ca78:	2500      	movs	r5, #0
 800ca7a:	e7f8      	b.n	800ca6e <_calloc_r+0x16>
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	f7fd ff1b 	bl	800a8b8 <memset>
 800ca82:	e7f4      	b.n	800ca6e <_calloc_r+0x16>

0800ca84 <_realloc_r>:
 800ca84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca88:	4680      	mov	r8, r0
 800ca8a:	4614      	mov	r4, r2
 800ca8c:	460e      	mov	r6, r1
 800ca8e:	b921      	cbnz	r1, 800ca9a <_realloc_r+0x16>
 800ca90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca94:	4611      	mov	r1, r2
 800ca96:	f7fd bf83 	b.w	800a9a0 <_malloc_r>
 800ca9a:	b92a      	cbnz	r2, 800caa8 <_realloc_r+0x24>
 800ca9c:	f7fd ff14 	bl	800a8c8 <_free_r>
 800caa0:	4625      	mov	r5, r4
 800caa2:	4628      	mov	r0, r5
 800caa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa8:	f000 fc16 	bl	800d2d8 <_malloc_usable_size_r>
 800caac:	4284      	cmp	r4, r0
 800caae:	4607      	mov	r7, r0
 800cab0:	d802      	bhi.n	800cab8 <_realloc_r+0x34>
 800cab2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cab6:	d812      	bhi.n	800cade <_realloc_r+0x5a>
 800cab8:	4621      	mov	r1, r4
 800caba:	4640      	mov	r0, r8
 800cabc:	f7fd ff70 	bl	800a9a0 <_malloc_r>
 800cac0:	4605      	mov	r5, r0
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d0ed      	beq.n	800caa2 <_realloc_r+0x1e>
 800cac6:	42bc      	cmp	r4, r7
 800cac8:	4622      	mov	r2, r4
 800caca:	4631      	mov	r1, r6
 800cacc:	bf28      	it	cs
 800cace:	463a      	movcs	r2, r7
 800cad0:	f7fd fee4 	bl	800a89c <memcpy>
 800cad4:	4631      	mov	r1, r6
 800cad6:	4640      	mov	r0, r8
 800cad8:	f7fd fef6 	bl	800a8c8 <_free_r>
 800cadc:	e7e1      	b.n	800caa2 <_realloc_r+0x1e>
 800cade:	4635      	mov	r5, r6
 800cae0:	e7df      	b.n	800caa2 <_realloc_r+0x1e>

0800cae2 <__sfputc_r>:
 800cae2:	6893      	ldr	r3, [r2, #8]
 800cae4:	3b01      	subs	r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	b410      	push	{r4}
 800caea:	6093      	str	r3, [r2, #8]
 800caec:	da08      	bge.n	800cb00 <__sfputc_r+0x1e>
 800caee:	6994      	ldr	r4, [r2, #24]
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	db01      	blt.n	800caf8 <__sfputc_r+0x16>
 800caf4:	290a      	cmp	r1, #10
 800caf6:	d103      	bne.n	800cb00 <__sfputc_r+0x1e>
 800caf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cafc:	f000 b98e 	b.w	800ce1c <__swbuf_r>
 800cb00:	6813      	ldr	r3, [r2, #0]
 800cb02:	1c58      	adds	r0, r3, #1
 800cb04:	6010      	str	r0, [r2, #0]
 800cb06:	7019      	strb	r1, [r3, #0]
 800cb08:	4608      	mov	r0, r1
 800cb0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <__sfputs_r>:
 800cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb12:	4606      	mov	r6, r0
 800cb14:	460f      	mov	r7, r1
 800cb16:	4614      	mov	r4, r2
 800cb18:	18d5      	adds	r5, r2, r3
 800cb1a:	42ac      	cmp	r4, r5
 800cb1c:	d101      	bne.n	800cb22 <__sfputs_r+0x12>
 800cb1e:	2000      	movs	r0, #0
 800cb20:	e007      	b.n	800cb32 <__sfputs_r+0x22>
 800cb22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb26:	463a      	mov	r2, r7
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f7ff ffda 	bl	800cae2 <__sfputc_r>
 800cb2e:	1c43      	adds	r3, r0, #1
 800cb30:	d1f3      	bne.n	800cb1a <__sfputs_r+0xa>
 800cb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb34 <_vfiprintf_r>:
 800cb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb38:	460d      	mov	r5, r1
 800cb3a:	b09d      	sub	sp, #116	; 0x74
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	4698      	mov	r8, r3
 800cb40:	4606      	mov	r6, r0
 800cb42:	b118      	cbz	r0, 800cb4c <_vfiprintf_r+0x18>
 800cb44:	6983      	ldr	r3, [r0, #24]
 800cb46:	b90b      	cbnz	r3, 800cb4c <_vfiprintf_r+0x18>
 800cb48:	f7ff fb50 	bl	800c1ec <__sinit>
 800cb4c:	4b89      	ldr	r3, [pc, #548]	; (800cd74 <_vfiprintf_r+0x240>)
 800cb4e:	429d      	cmp	r5, r3
 800cb50:	d11b      	bne.n	800cb8a <_vfiprintf_r+0x56>
 800cb52:	6875      	ldr	r5, [r6, #4]
 800cb54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb56:	07d9      	lsls	r1, r3, #31
 800cb58:	d405      	bmi.n	800cb66 <_vfiprintf_r+0x32>
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	059a      	lsls	r2, r3, #22
 800cb5e:	d402      	bmi.n	800cb66 <_vfiprintf_r+0x32>
 800cb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb62:	f7ff fbe6 	bl	800c332 <__retarget_lock_acquire_recursive>
 800cb66:	89ab      	ldrh	r3, [r5, #12]
 800cb68:	071b      	lsls	r3, r3, #28
 800cb6a:	d501      	bpl.n	800cb70 <_vfiprintf_r+0x3c>
 800cb6c:	692b      	ldr	r3, [r5, #16]
 800cb6e:	b9eb      	cbnz	r3, 800cbac <_vfiprintf_r+0x78>
 800cb70:	4629      	mov	r1, r5
 800cb72:	4630      	mov	r0, r6
 800cb74:	f000 f9b6 	bl	800cee4 <__swsetup_r>
 800cb78:	b1c0      	cbz	r0, 800cbac <_vfiprintf_r+0x78>
 800cb7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb7c:	07dc      	lsls	r4, r3, #31
 800cb7e:	d50e      	bpl.n	800cb9e <_vfiprintf_r+0x6a>
 800cb80:	f04f 30ff 	mov.w	r0, #4294967295
 800cb84:	b01d      	add	sp, #116	; 0x74
 800cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8a:	4b7b      	ldr	r3, [pc, #492]	; (800cd78 <_vfiprintf_r+0x244>)
 800cb8c:	429d      	cmp	r5, r3
 800cb8e:	d101      	bne.n	800cb94 <_vfiprintf_r+0x60>
 800cb90:	68b5      	ldr	r5, [r6, #8]
 800cb92:	e7df      	b.n	800cb54 <_vfiprintf_r+0x20>
 800cb94:	4b79      	ldr	r3, [pc, #484]	; (800cd7c <_vfiprintf_r+0x248>)
 800cb96:	429d      	cmp	r5, r3
 800cb98:	bf08      	it	eq
 800cb9a:	68f5      	ldreq	r5, [r6, #12]
 800cb9c:	e7da      	b.n	800cb54 <_vfiprintf_r+0x20>
 800cb9e:	89ab      	ldrh	r3, [r5, #12]
 800cba0:	0598      	lsls	r0, r3, #22
 800cba2:	d4ed      	bmi.n	800cb80 <_vfiprintf_r+0x4c>
 800cba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cba6:	f7ff fbc5 	bl	800c334 <__retarget_lock_release_recursive>
 800cbaa:	e7e9      	b.n	800cb80 <_vfiprintf_r+0x4c>
 800cbac:	2300      	movs	r3, #0
 800cbae:	9309      	str	r3, [sp, #36]	; 0x24
 800cbb0:	2320      	movs	r3, #32
 800cbb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbba:	2330      	movs	r3, #48	; 0x30
 800cbbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd80 <_vfiprintf_r+0x24c>
 800cbc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbc4:	f04f 0901 	mov.w	r9, #1
 800cbc8:	4623      	mov	r3, r4
 800cbca:	469a      	mov	sl, r3
 800cbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbd0:	b10a      	cbz	r2, 800cbd6 <_vfiprintf_r+0xa2>
 800cbd2:	2a25      	cmp	r2, #37	; 0x25
 800cbd4:	d1f9      	bne.n	800cbca <_vfiprintf_r+0x96>
 800cbd6:	ebba 0b04 	subs.w	fp, sl, r4
 800cbda:	d00b      	beq.n	800cbf4 <_vfiprintf_r+0xc0>
 800cbdc:	465b      	mov	r3, fp
 800cbde:	4622      	mov	r2, r4
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f7ff ff94 	bl	800cb10 <__sfputs_r>
 800cbe8:	3001      	adds	r0, #1
 800cbea:	f000 80aa 	beq.w	800cd42 <_vfiprintf_r+0x20e>
 800cbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbf0:	445a      	add	r2, fp
 800cbf2:	9209      	str	r2, [sp, #36]	; 0x24
 800cbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 80a2 	beq.w	800cd42 <_vfiprintf_r+0x20e>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f04f 32ff 	mov.w	r2, #4294967295
 800cc04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc08:	f10a 0a01 	add.w	sl, sl, #1
 800cc0c:	9304      	str	r3, [sp, #16]
 800cc0e:	9307      	str	r3, [sp, #28]
 800cc10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc14:	931a      	str	r3, [sp, #104]	; 0x68
 800cc16:	4654      	mov	r4, sl
 800cc18:	2205      	movs	r2, #5
 800cc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc1e:	4858      	ldr	r0, [pc, #352]	; (800cd80 <_vfiprintf_r+0x24c>)
 800cc20:	f7f3 fade 	bl	80001e0 <memchr>
 800cc24:	9a04      	ldr	r2, [sp, #16]
 800cc26:	b9d8      	cbnz	r0, 800cc60 <_vfiprintf_r+0x12c>
 800cc28:	06d1      	lsls	r1, r2, #27
 800cc2a:	bf44      	itt	mi
 800cc2c:	2320      	movmi	r3, #32
 800cc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc32:	0713      	lsls	r3, r2, #28
 800cc34:	bf44      	itt	mi
 800cc36:	232b      	movmi	r3, #43	; 0x2b
 800cc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc40:	2b2a      	cmp	r3, #42	; 0x2a
 800cc42:	d015      	beq.n	800cc70 <_vfiprintf_r+0x13c>
 800cc44:	9a07      	ldr	r2, [sp, #28]
 800cc46:	4654      	mov	r4, sl
 800cc48:	2000      	movs	r0, #0
 800cc4a:	f04f 0c0a 	mov.w	ip, #10
 800cc4e:	4621      	mov	r1, r4
 800cc50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc54:	3b30      	subs	r3, #48	; 0x30
 800cc56:	2b09      	cmp	r3, #9
 800cc58:	d94e      	bls.n	800ccf8 <_vfiprintf_r+0x1c4>
 800cc5a:	b1b0      	cbz	r0, 800cc8a <_vfiprintf_r+0x156>
 800cc5c:	9207      	str	r2, [sp, #28]
 800cc5e:	e014      	b.n	800cc8a <_vfiprintf_r+0x156>
 800cc60:	eba0 0308 	sub.w	r3, r0, r8
 800cc64:	fa09 f303 	lsl.w	r3, r9, r3
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	46a2      	mov	sl, r4
 800cc6e:	e7d2      	b.n	800cc16 <_vfiprintf_r+0xe2>
 800cc70:	9b03      	ldr	r3, [sp, #12]
 800cc72:	1d19      	adds	r1, r3, #4
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	9103      	str	r1, [sp, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	bfbb      	ittet	lt
 800cc7c:	425b      	neglt	r3, r3
 800cc7e:	f042 0202 	orrlt.w	r2, r2, #2
 800cc82:	9307      	strge	r3, [sp, #28]
 800cc84:	9307      	strlt	r3, [sp, #28]
 800cc86:	bfb8      	it	lt
 800cc88:	9204      	strlt	r2, [sp, #16]
 800cc8a:	7823      	ldrb	r3, [r4, #0]
 800cc8c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc8e:	d10c      	bne.n	800ccaa <_vfiprintf_r+0x176>
 800cc90:	7863      	ldrb	r3, [r4, #1]
 800cc92:	2b2a      	cmp	r3, #42	; 0x2a
 800cc94:	d135      	bne.n	800cd02 <_vfiprintf_r+0x1ce>
 800cc96:	9b03      	ldr	r3, [sp, #12]
 800cc98:	1d1a      	adds	r2, r3, #4
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	9203      	str	r2, [sp, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	bfb8      	it	lt
 800cca2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cca6:	3402      	adds	r4, #2
 800cca8:	9305      	str	r3, [sp, #20]
 800ccaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd90 <_vfiprintf_r+0x25c>
 800ccae:	7821      	ldrb	r1, [r4, #0]
 800ccb0:	2203      	movs	r2, #3
 800ccb2:	4650      	mov	r0, sl
 800ccb4:	f7f3 fa94 	bl	80001e0 <memchr>
 800ccb8:	b140      	cbz	r0, 800cccc <_vfiprintf_r+0x198>
 800ccba:	2340      	movs	r3, #64	; 0x40
 800ccbc:	eba0 000a 	sub.w	r0, r0, sl
 800ccc0:	fa03 f000 	lsl.w	r0, r3, r0
 800ccc4:	9b04      	ldr	r3, [sp, #16]
 800ccc6:	4303      	orrs	r3, r0
 800ccc8:	3401      	adds	r4, #1
 800ccca:	9304      	str	r3, [sp, #16]
 800cccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd0:	482c      	ldr	r0, [pc, #176]	; (800cd84 <_vfiprintf_r+0x250>)
 800ccd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccd6:	2206      	movs	r2, #6
 800ccd8:	f7f3 fa82 	bl	80001e0 <memchr>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d03f      	beq.n	800cd60 <_vfiprintf_r+0x22c>
 800cce0:	4b29      	ldr	r3, [pc, #164]	; (800cd88 <_vfiprintf_r+0x254>)
 800cce2:	bb1b      	cbnz	r3, 800cd2c <_vfiprintf_r+0x1f8>
 800cce4:	9b03      	ldr	r3, [sp, #12]
 800cce6:	3307      	adds	r3, #7
 800cce8:	f023 0307 	bic.w	r3, r3, #7
 800ccec:	3308      	adds	r3, #8
 800ccee:	9303      	str	r3, [sp, #12]
 800ccf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccf2:	443b      	add	r3, r7
 800ccf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf6:	e767      	b.n	800cbc8 <_vfiprintf_r+0x94>
 800ccf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	2001      	movs	r0, #1
 800cd00:	e7a5      	b.n	800cc4e <_vfiprintf_r+0x11a>
 800cd02:	2300      	movs	r3, #0
 800cd04:	3401      	adds	r4, #1
 800cd06:	9305      	str	r3, [sp, #20]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	f04f 0c0a 	mov.w	ip, #10
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd14:	3a30      	subs	r2, #48	; 0x30
 800cd16:	2a09      	cmp	r2, #9
 800cd18:	d903      	bls.n	800cd22 <_vfiprintf_r+0x1ee>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0c5      	beq.n	800ccaa <_vfiprintf_r+0x176>
 800cd1e:	9105      	str	r1, [sp, #20]
 800cd20:	e7c3      	b.n	800ccaa <_vfiprintf_r+0x176>
 800cd22:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd26:	4604      	mov	r4, r0
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e7f0      	b.n	800cd0e <_vfiprintf_r+0x1da>
 800cd2c:	ab03      	add	r3, sp, #12
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	462a      	mov	r2, r5
 800cd32:	4b16      	ldr	r3, [pc, #88]	; (800cd8c <_vfiprintf_r+0x258>)
 800cd34:	a904      	add	r1, sp, #16
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7fd ff46 	bl	800abc8 <_printf_float>
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	1c78      	adds	r0, r7, #1
 800cd40:	d1d6      	bne.n	800ccf0 <_vfiprintf_r+0x1bc>
 800cd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd44:	07d9      	lsls	r1, r3, #31
 800cd46:	d405      	bmi.n	800cd54 <_vfiprintf_r+0x220>
 800cd48:	89ab      	ldrh	r3, [r5, #12]
 800cd4a:	059a      	lsls	r2, r3, #22
 800cd4c:	d402      	bmi.n	800cd54 <_vfiprintf_r+0x220>
 800cd4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd50:	f7ff faf0 	bl	800c334 <__retarget_lock_release_recursive>
 800cd54:	89ab      	ldrh	r3, [r5, #12]
 800cd56:	065b      	lsls	r3, r3, #25
 800cd58:	f53f af12 	bmi.w	800cb80 <_vfiprintf_r+0x4c>
 800cd5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd5e:	e711      	b.n	800cb84 <_vfiprintf_r+0x50>
 800cd60:	ab03      	add	r3, sp, #12
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	462a      	mov	r2, r5
 800cd66:	4b09      	ldr	r3, [pc, #36]	; (800cd8c <_vfiprintf_r+0x258>)
 800cd68:	a904      	add	r1, sp, #16
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f7fe f9d0 	bl	800b110 <_printf_i>
 800cd70:	e7e4      	b.n	800cd3c <_vfiprintf_r+0x208>
 800cd72:	bf00      	nop
 800cd74:	0800eb38 	.word	0x0800eb38
 800cd78:	0800eb58 	.word	0x0800eb58
 800cd7c:	0800eb18 	.word	0x0800eb18
 800cd80:	0800ecd4 	.word	0x0800ecd4
 800cd84:	0800ecde 	.word	0x0800ecde
 800cd88:	0800abc9 	.word	0x0800abc9
 800cd8c:	0800cb11 	.word	0x0800cb11
 800cd90:	0800ecda 	.word	0x0800ecda

0800cd94 <__sread>:
 800cd94:	b510      	push	{r4, lr}
 800cd96:	460c      	mov	r4, r1
 800cd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd9c:	f000 faa4 	bl	800d2e8 <_read_r>
 800cda0:	2800      	cmp	r0, #0
 800cda2:	bfab      	itete	ge
 800cda4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cda6:	89a3      	ldrhlt	r3, [r4, #12]
 800cda8:	181b      	addge	r3, r3, r0
 800cdaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdae:	bfac      	ite	ge
 800cdb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdb2:	81a3      	strhlt	r3, [r4, #12]
 800cdb4:	bd10      	pop	{r4, pc}

0800cdb6 <__swrite>:
 800cdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdba:	461f      	mov	r7, r3
 800cdbc:	898b      	ldrh	r3, [r1, #12]
 800cdbe:	05db      	lsls	r3, r3, #23
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	460c      	mov	r4, r1
 800cdc4:	4616      	mov	r6, r2
 800cdc6:	d505      	bpl.n	800cdd4 <__swrite+0x1e>
 800cdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdcc:	2302      	movs	r3, #2
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f000 f9f8 	bl	800d1c4 <_lseek_r>
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdde:	81a3      	strh	r3, [r4, #12]
 800cde0:	4632      	mov	r2, r6
 800cde2:	463b      	mov	r3, r7
 800cde4:	4628      	mov	r0, r5
 800cde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdea:	f000 b869 	b.w	800cec0 <_write_r>

0800cdee <__sseek>:
 800cdee:	b510      	push	{r4, lr}
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf6:	f000 f9e5 	bl	800d1c4 <_lseek_r>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	bf15      	itete	ne
 800ce00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce0a:	81a3      	strheq	r3, [r4, #12]
 800ce0c:	bf18      	it	ne
 800ce0e:	81a3      	strhne	r3, [r4, #12]
 800ce10:	bd10      	pop	{r4, pc}

0800ce12 <__sclose>:
 800ce12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce16:	f000 b8f1 	b.w	800cffc <_close_r>
	...

0800ce1c <__swbuf_r>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	460e      	mov	r6, r1
 800ce20:	4614      	mov	r4, r2
 800ce22:	4605      	mov	r5, r0
 800ce24:	b118      	cbz	r0, 800ce2e <__swbuf_r+0x12>
 800ce26:	6983      	ldr	r3, [r0, #24]
 800ce28:	b90b      	cbnz	r3, 800ce2e <__swbuf_r+0x12>
 800ce2a:	f7ff f9df 	bl	800c1ec <__sinit>
 800ce2e:	4b21      	ldr	r3, [pc, #132]	; (800ceb4 <__swbuf_r+0x98>)
 800ce30:	429c      	cmp	r4, r3
 800ce32:	d12b      	bne.n	800ce8c <__swbuf_r+0x70>
 800ce34:	686c      	ldr	r4, [r5, #4]
 800ce36:	69a3      	ldr	r3, [r4, #24]
 800ce38:	60a3      	str	r3, [r4, #8]
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	071a      	lsls	r2, r3, #28
 800ce3e:	d52f      	bpl.n	800cea0 <__swbuf_r+0x84>
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	b36b      	cbz	r3, 800cea0 <__swbuf_r+0x84>
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	6820      	ldr	r0, [r4, #0]
 800ce48:	1ac0      	subs	r0, r0, r3
 800ce4a:	6963      	ldr	r3, [r4, #20]
 800ce4c:	b2f6      	uxtb	r6, r6
 800ce4e:	4283      	cmp	r3, r0
 800ce50:	4637      	mov	r7, r6
 800ce52:	dc04      	bgt.n	800ce5e <__swbuf_r+0x42>
 800ce54:	4621      	mov	r1, r4
 800ce56:	4628      	mov	r0, r5
 800ce58:	f000 f966 	bl	800d128 <_fflush_r>
 800ce5c:	bb30      	cbnz	r0, 800ceac <__swbuf_r+0x90>
 800ce5e:	68a3      	ldr	r3, [r4, #8]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	60a3      	str	r3, [r4, #8]
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	6022      	str	r2, [r4, #0]
 800ce6a:	701e      	strb	r6, [r3, #0]
 800ce6c:	6963      	ldr	r3, [r4, #20]
 800ce6e:	3001      	adds	r0, #1
 800ce70:	4283      	cmp	r3, r0
 800ce72:	d004      	beq.n	800ce7e <__swbuf_r+0x62>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	07db      	lsls	r3, r3, #31
 800ce78:	d506      	bpl.n	800ce88 <__swbuf_r+0x6c>
 800ce7a:	2e0a      	cmp	r6, #10
 800ce7c:	d104      	bne.n	800ce88 <__swbuf_r+0x6c>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4628      	mov	r0, r5
 800ce82:	f000 f951 	bl	800d128 <_fflush_r>
 800ce86:	b988      	cbnz	r0, 800ceac <__swbuf_r+0x90>
 800ce88:	4638      	mov	r0, r7
 800ce8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <__swbuf_r+0x9c>)
 800ce8e:	429c      	cmp	r4, r3
 800ce90:	d101      	bne.n	800ce96 <__swbuf_r+0x7a>
 800ce92:	68ac      	ldr	r4, [r5, #8]
 800ce94:	e7cf      	b.n	800ce36 <__swbuf_r+0x1a>
 800ce96:	4b09      	ldr	r3, [pc, #36]	; (800cebc <__swbuf_r+0xa0>)
 800ce98:	429c      	cmp	r4, r3
 800ce9a:	bf08      	it	eq
 800ce9c:	68ec      	ldreq	r4, [r5, #12]
 800ce9e:	e7ca      	b.n	800ce36 <__swbuf_r+0x1a>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	f000 f81e 	bl	800cee4 <__swsetup_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d0cb      	beq.n	800ce44 <__swbuf_r+0x28>
 800ceac:	f04f 37ff 	mov.w	r7, #4294967295
 800ceb0:	e7ea      	b.n	800ce88 <__swbuf_r+0x6c>
 800ceb2:	bf00      	nop
 800ceb4:	0800eb38 	.word	0x0800eb38
 800ceb8:	0800eb58 	.word	0x0800eb58
 800cebc:	0800eb18 	.word	0x0800eb18

0800cec0 <_write_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d07      	ldr	r5, [pc, #28]	; (800cee0 <_write_r+0x20>)
 800cec4:	4604      	mov	r4, r0
 800cec6:	4608      	mov	r0, r1
 800cec8:	4611      	mov	r1, r2
 800ceca:	2200      	movs	r2, #0
 800cecc:	602a      	str	r2, [r5, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	f7f6 ff6f 	bl	8003db2 <_write>
 800ced4:	1c43      	adds	r3, r0, #1
 800ced6:	d102      	bne.n	800cede <_write_r+0x1e>
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	b103      	cbz	r3, 800cede <_write_r+0x1e>
 800cedc:	6023      	str	r3, [r4, #0]
 800cede:	bd38      	pop	{r3, r4, r5, pc}
 800cee0:	20000ddc 	.word	0x20000ddc

0800cee4 <__swsetup_r>:
 800cee4:	4b32      	ldr	r3, [pc, #200]	; (800cfb0 <__swsetup_r+0xcc>)
 800cee6:	b570      	push	{r4, r5, r6, lr}
 800cee8:	681d      	ldr	r5, [r3, #0]
 800ceea:	4606      	mov	r6, r0
 800ceec:	460c      	mov	r4, r1
 800ceee:	b125      	cbz	r5, 800cefa <__swsetup_r+0x16>
 800cef0:	69ab      	ldr	r3, [r5, #24]
 800cef2:	b913      	cbnz	r3, 800cefa <__swsetup_r+0x16>
 800cef4:	4628      	mov	r0, r5
 800cef6:	f7ff f979 	bl	800c1ec <__sinit>
 800cefa:	4b2e      	ldr	r3, [pc, #184]	; (800cfb4 <__swsetup_r+0xd0>)
 800cefc:	429c      	cmp	r4, r3
 800cefe:	d10f      	bne.n	800cf20 <__swsetup_r+0x3c>
 800cf00:	686c      	ldr	r4, [r5, #4]
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf08:	0719      	lsls	r1, r3, #28
 800cf0a:	d42c      	bmi.n	800cf66 <__swsetup_r+0x82>
 800cf0c:	06dd      	lsls	r5, r3, #27
 800cf0e:	d411      	bmi.n	800cf34 <__swsetup_r+0x50>
 800cf10:	2309      	movs	r3, #9
 800cf12:	6033      	str	r3, [r6, #0]
 800cf14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1e:	e03e      	b.n	800cf9e <__swsetup_r+0xba>
 800cf20:	4b25      	ldr	r3, [pc, #148]	; (800cfb8 <__swsetup_r+0xd4>)
 800cf22:	429c      	cmp	r4, r3
 800cf24:	d101      	bne.n	800cf2a <__swsetup_r+0x46>
 800cf26:	68ac      	ldr	r4, [r5, #8]
 800cf28:	e7eb      	b.n	800cf02 <__swsetup_r+0x1e>
 800cf2a:	4b24      	ldr	r3, [pc, #144]	; (800cfbc <__swsetup_r+0xd8>)
 800cf2c:	429c      	cmp	r4, r3
 800cf2e:	bf08      	it	eq
 800cf30:	68ec      	ldreq	r4, [r5, #12]
 800cf32:	e7e6      	b.n	800cf02 <__swsetup_r+0x1e>
 800cf34:	0758      	lsls	r0, r3, #29
 800cf36:	d512      	bpl.n	800cf5e <__swsetup_r+0x7a>
 800cf38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf3a:	b141      	cbz	r1, 800cf4e <__swsetup_r+0x6a>
 800cf3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf40:	4299      	cmp	r1, r3
 800cf42:	d002      	beq.n	800cf4a <__swsetup_r+0x66>
 800cf44:	4630      	mov	r0, r6
 800cf46:	f7fd fcbf 	bl	800a8c8 <_free_r>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	6363      	str	r3, [r4, #52]	; 0x34
 800cf4e:	89a3      	ldrh	r3, [r4, #12]
 800cf50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf54:	81a3      	strh	r3, [r4, #12]
 800cf56:	2300      	movs	r3, #0
 800cf58:	6063      	str	r3, [r4, #4]
 800cf5a:	6923      	ldr	r3, [r4, #16]
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f043 0308 	orr.w	r3, r3, #8
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	6923      	ldr	r3, [r4, #16]
 800cf68:	b94b      	cbnz	r3, 800cf7e <__swsetup_r+0x9a>
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf74:	d003      	beq.n	800cf7e <__swsetup_r+0x9a>
 800cf76:	4621      	mov	r1, r4
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f000 f95b 	bl	800d234 <__smakebuf_r>
 800cf7e:	89a0      	ldrh	r0, [r4, #12]
 800cf80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf84:	f010 0301 	ands.w	r3, r0, #1
 800cf88:	d00a      	beq.n	800cfa0 <__swsetup_r+0xbc>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	60a3      	str	r3, [r4, #8]
 800cf8e:	6963      	ldr	r3, [r4, #20]
 800cf90:	425b      	negs	r3, r3
 800cf92:	61a3      	str	r3, [r4, #24]
 800cf94:	6923      	ldr	r3, [r4, #16]
 800cf96:	b943      	cbnz	r3, 800cfaa <__swsetup_r+0xc6>
 800cf98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf9c:	d1ba      	bne.n	800cf14 <__swsetup_r+0x30>
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}
 800cfa0:	0781      	lsls	r1, r0, #30
 800cfa2:	bf58      	it	pl
 800cfa4:	6963      	ldrpl	r3, [r4, #20]
 800cfa6:	60a3      	str	r3, [r4, #8]
 800cfa8:	e7f4      	b.n	800cf94 <__swsetup_r+0xb0>
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e7f7      	b.n	800cf9e <__swsetup_r+0xba>
 800cfae:	bf00      	nop
 800cfb0:	20000010 	.word	0x20000010
 800cfb4:	0800eb38 	.word	0x0800eb38
 800cfb8:	0800eb58 	.word	0x0800eb58
 800cfbc:	0800eb18 	.word	0x0800eb18

0800cfc0 <__assert_func>:
 800cfc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfc2:	4614      	mov	r4, r2
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4b09      	ldr	r3, [pc, #36]	; (800cfec <__assert_func+0x2c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4605      	mov	r5, r0
 800cfcc:	68d8      	ldr	r0, [r3, #12]
 800cfce:	b14c      	cbz	r4, 800cfe4 <__assert_func+0x24>
 800cfd0:	4b07      	ldr	r3, [pc, #28]	; (800cff0 <__assert_func+0x30>)
 800cfd2:	9100      	str	r1, [sp, #0]
 800cfd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfd8:	4906      	ldr	r1, [pc, #24]	; (800cff4 <__assert_func+0x34>)
 800cfda:	462b      	mov	r3, r5
 800cfdc:	f000 f8e0 	bl	800d1a0 <fiprintf>
 800cfe0:	f7fd fc22 	bl	800a828 <abort>
 800cfe4:	4b04      	ldr	r3, [pc, #16]	; (800cff8 <__assert_func+0x38>)
 800cfe6:	461c      	mov	r4, r3
 800cfe8:	e7f3      	b.n	800cfd2 <__assert_func+0x12>
 800cfea:	bf00      	nop
 800cfec:	20000010 	.word	0x20000010
 800cff0:	0800ece5 	.word	0x0800ece5
 800cff4:	0800ecf2 	.word	0x0800ecf2
 800cff8:	0800ed20 	.word	0x0800ed20

0800cffc <_close_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	4d06      	ldr	r5, [pc, #24]	; (800d018 <_close_r+0x1c>)
 800d000:	2300      	movs	r3, #0
 800d002:	4604      	mov	r4, r0
 800d004:	4608      	mov	r0, r1
 800d006:	602b      	str	r3, [r5, #0]
 800d008:	f7f6 feef 	bl	8003dea <_close>
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d102      	bne.n	800d016 <_close_r+0x1a>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	b103      	cbz	r3, 800d016 <_close_r+0x1a>
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	20000ddc 	.word	0x20000ddc

0800d01c <__sflush_r>:
 800d01c:	898a      	ldrh	r2, [r1, #12]
 800d01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d022:	4605      	mov	r5, r0
 800d024:	0710      	lsls	r0, r2, #28
 800d026:	460c      	mov	r4, r1
 800d028:	d458      	bmi.n	800d0dc <__sflush_r+0xc0>
 800d02a:	684b      	ldr	r3, [r1, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dc05      	bgt.n	800d03c <__sflush_r+0x20>
 800d030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d032:	2b00      	cmp	r3, #0
 800d034:	dc02      	bgt.n	800d03c <__sflush_r+0x20>
 800d036:	2000      	movs	r0, #0
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d03e:	2e00      	cmp	r6, #0
 800d040:	d0f9      	beq.n	800d036 <__sflush_r+0x1a>
 800d042:	2300      	movs	r3, #0
 800d044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d048:	682f      	ldr	r7, [r5, #0]
 800d04a:	602b      	str	r3, [r5, #0]
 800d04c:	d032      	beq.n	800d0b4 <__sflush_r+0x98>
 800d04e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	075a      	lsls	r2, r3, #29
 800d054:	d505      	bpl.n	800d062 <__sflush_r+0x46>
 800d056:	6863      	ldr	r3, [r4, #4]
 800d058:	1ac0      	subs	r0, r0, r3
 800d05a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d05c:	b10b      	cbz	r3, 800d062 <__sflush_r+0x46>
 800d05e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d060:	1ac0      	subs	r0, r0, r3
 800d062:	2300      	movs	r3, #0
 800d064:	4602      	mov	r2, r0
 800d066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d068:	6a21      	ldr	r1, [r4, #32]
 800d06a:	4628      	mov	r0, r5
 800d06c:	47b0      	blx	r6
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	89a3      	ldrh	r3, [r4, #12]
 800d072:	d106      	bne.n	800d082 <__sflush_r+0x66>
 800d074:	6829      	ldr	r1, [r5, #0]
 800d076:	291d      	cmp	r1, #29
 800d078:	d82c      	bhi.n	800d0d4 <__sflush_r+0xb8>
 800d07a:	4a2a      	ldr	r2, [pc, #168]	; (800d124 <__sflush_r+0x108>)
 800d07c:	40ca      	lsrs	r2, r1
 800d07e:	07d6      	lsls	r6, r2, #31
 800d080:	d528      	bpl.n	800d0d4 <__sflush_r+0xb8>
 800d082:	2200      	movs	r2, #0
 800d084:	6062      	str	r2, [r4, #4]
 800d086:	04d9      	lsls	r1, r3, #19
 800d088:	6922      	ldr	r2, [r4, #16]
 800d08a:	6022      	str	r2, [r4, #0]
 800d08c:	d504      	bpl.n	800d098 <__sflush_r+0x7c>
 800d08e:	1c42      	adds	r2, r0, #1
 800d090:	d101      	bne.n	800d096 <__sflush_r+0x7a>
 800d092:	682b      	ldr	r3, [r5, #0]
 800d094:	b903      	cbnz	r3, 800d098 <__sflush_r+0x7c>
 800d096:	6560      	str	r0, [r4, #84]	; 0x54
 800d098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d09a:	602f      	str	r7, [r5, #0]
 800d09c:	2900      	cmp	r1, #0
 800d09e:	d0ca      	beq.n	800d036 <__sflush_r+0x1a>
 800d0a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0a4:	4299      	cmp	r1, r3
 800d0a6:	d002      	beq.n	800d0ae <__sflush_r+0x92>
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7fd fc0d 	bl	800a8c8 <_free_r>
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	6360      	str	r0, [r4, #52]	; 0x34
 800d0b2:	e7c1      	b.n	800d038 <__sflush_r+0x1c>
 800d0b4:	6a21      	ldr	r1, [r4, #32]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b0      	blx	r6
 800d0bc:	1c41      	adds	r1, r0, #1
 800d0be:	d1c7      	bne.n	800d050 <__sflush_r+0x34>
 800d0c0:	682b      	ldr	r3, [r5, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d0c4      	beq.n	800d050 <__sflush_r+0x34>
 800d0c6:	2b1d      	cmp	r3, #29
 800d0c8:	d001      	beq.n	800d0ce <__sflush_r+0xb2>
 800d0ca:	2b16      	cmp	r3, #22
 800d0cc:	d101      	bne.n	800d0d2 <__sflush_r+0xb6>
 800d0ce:	602f      	str	r7, [r5, #0]
 800d0d0:	e7b1      	b.n	800d036 <__sflush_r+0x1a>
 800d0d2:	89a3      	ldrh	r3, [r4, #12]
 800d0d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d8:	81a3      	strh	r3, [r4, #12]
 800d0da:	e7ad      	b.n	800d038 <__sflush_r+0x1c>
 800d0dc:	690f      	ldr	r7, [r1, #16]
 800d0de:	2f00      	cmp	r7, #0
 800d0e0:	d0a9      	beq.n	800d036 <__sflush_r+0x1a>
 800d0e2:	0793      	lsls	r3, r2, #30
 800d0e4:	680e      	ldr	r6, [r1, #0]
 800d0e6:	bf08      	it	eq
 800d0e8:	694b      	ldreq	r3, [r1, #20]
 800d0ea:	600f      	str	r7, [r1, #0]
 800d0ec:	bf18      	it	ne
 800d0ee:	2300      	movne	r3, #0
 800d0f0:	eba6 0807 	sub.w	r8, r6, r7
 800d0f4:	608b      	str	r3, [r1, #8]
 800d0f6:	f1b8 0f00 	cmp.w	r8, #0
 800d0fa:	dd9c      	ble.n	800d036 <__sflush_r+0x1a>
 800d0fc:	6a21      	ldr	r1, [r4, #32]
 800d0fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d100:	4643      	mov	r3, r8
 800d102:	463a      	mov	r2, r7
 800d104:	4628      	mov	r0, r5
 800d106:	47b0      	blx	r6
 800d108:	2800      	cmp	r0, #0
 800d10a:	dc06      	bgt.n	800d11a <__sflush_r+0xfe>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	e78e      	b.n	800d038 <__sflush_r+0x1c>
 800d11a:	4407      	add	r7, r0
 800d11c:	eba8 0800 	sub.w	r8, r8, r0
 800d120:	e7e9      	b.n	800d0f6 <__sflush_r+0xda>
 800d122:	bf00      	nop
 800d124:	20400001 	.word	0x20400001

0800d128 <_fflush_r>:
 800d128:	b538      	push	{r3, r4, r5, lr}
 800d12a:	690b      	ldr	r3, [r1, #16]
 800d12c:	4605      	mov	r5, r0
 800d12e:	460c      	mov	r4, r1
 800d130:	b913      	cbnz	r3, 800d138 <_fflush_r+0x10>
 800d132:	2500      	movs	r5, #0
 800d134:	4628      	mov	r0, r5
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	b118      	cbz	r0, 800d142 <_fflush_r+0x1a>
 800d13a:	6983      	ldr	r3, [r0, #24]
 800d13c:	b90b      	cbnz	r3, 800d142 <_fflush_r+0x1a>
 800d13e:	f7ff f855 	bl	800c1ec <__sinit>
 800d142:	4b14      	ldr	r3, [pc, #80]	; (800d194 <_fflush_r+0x6c>)
 800d144:	429c      	cmp	r4, r3
 800d146:	d11b      	bne.n	800d180 <_fflush_r+0x58>
 800d148:	686c      	ldr	r4, [r5, #4]
 800d14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d0ef      	beq.n	800d132 <_fflush_r+0xa>
 800d152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d154:	07d0      	lsls	r0, r2, #31
 800d156:	d404      	bmi.n	800d162 <_fflush_r+0x3a>
 800d158:	0599      	lsls	r1, r3, #22
 800d15a:	d402      	bmi.n	800d162 <_fflush_r+0x3a>
 800d15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d15e:	f7ff f8e8 	bl	800c332 <__retarget_lock_acquire_recursive>
 800d162:	4628      	mov	r0, r5
 800d164:	4621      	mov	r1, r4
 800d166:	f7ff ff59 	bl	800d01c <__sflush_r>
 800d16a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d16c:	07da      	lsls	r2, r3, #31
 800d16e:	4605      	mov	r5, r0
 800d170:	d4e0      	bmi.n	800d134 <_fflush_r+0xc>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	059b      	lsls	r3, r3, #22
 800d176:	d4dd      	bmi.n	800d134 <_fflush_r+0xc>
 800d178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d17a:	f7ff f8db 	bl	800c334 <__retarget_lock_release_recursive>
 800d17e:	e7d9      	b.n	800d134 <_fflush_r+0xc>
 800d180:	4b05      	ldr	r3, [pc, #20]	; (800d198 <_fflush_r+0x70>)
 800d182:	429c      	cmp	r4, r3
 800d184:	d101      	bne.n	800d18a <_fflush_r+0x62>
 800d186:	68ac      	ldr	r4, [r5, #8]
 800d188:	e7df      	b.n	800d14a <_fflush_r+0x22>
 800d18a:	4b04      	ldr	r3, [pc, #16]	; (800d19c <_fflush_r+0x74>)
 800d18c:	429c      	cmp	r4, r3
 800d18e:	bf08      	it	eq
 800d190:	68ec      	ldreq	r4, [r5, #12]
 800d192:	e7da      	b.n	800d14a <_fflush_r+0x22>
 800d194:	0800eb38 	.word	0x0800eb38
 800d198:	0800eb58 	.word	0x0800eb58
 800d19c:	0800eb18 	.word	0x0800eb18

0800d1a0 <fiprintf>:
 800d1a0:	b40e      	push	{r1, r2, r3}
 800d1a2:	b503      	push	{r0, r1, lr}
 800d1a4:	4601      	mov	r1, r0
 800d1a6:	ab03      	add	r3, sp, #12
 800d1a8:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <fiprintf+0x20>)
 800d1aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ae:	6800      	ldr	r0, [r0, #0]
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	f7ff fcbf 	bl	800cb34 <_vfiprintf_r>
 800d1b6:	b002      	add	sp, #8
 800d1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1bc:	b003      	add	sp, #12
 800d1be:	4770      	bx	lr
 800d1c0:	20000010 	.word	0x20000010

0800d1c4 <_lseek_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	4d07      	ldr	r5, [pc, #28]	; (800d1e4 <_lseek_r+0x20>)
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	4608      	mov	r0, r1
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	602a      	str	r2, [r5, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f7f6 fe30 	bl	8003e38 <_lseek>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_lseek_r+0x1e>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_lseek_r+0x1e>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	20000ddc 	.word	0x20000ddc

0800d1e8 <__swhatbuf_r>:
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	460e      	mov	r6, r1
 800d1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f0:	2900      	cmp	r1, #0
 800d1f2:	b096      	sub	sp, #88	; 0x58
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	461d      	mov	r5, r3
 800d1f8:	da08      	bge.n	800d20c <__swhatbuf_r+0x24>
 800d1fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	602a      	str	r2, [r5, #0]
 800d202:	061a      	lsls	r2, r3, #24
 800d204:	d410      	bmi.n	800d228 <__swhatbuf_r+0x40>
 800d206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d20a:	e00e      	b.n	800d22a <__swhatbuf_r+0x42>
 800d20c:	466a      	mov	r2, sp
 800d20e:	f000 f88b 	bl	800d328 <_fstat_r>
 800d212:	2800      	cmp	r0, #0
 800d214:	dbf1      	blt.n	800d1fa <__swhatbuf_r+0x12>
 800d216:	9a01      	ldr	r2, [sp, #4]
 800d218:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d21c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d220:	425a      	negs	r2, r3
 800d222:	415a      	adcs	r2, r3
 800d224:	602a      	str	r2, [r5, #0]
 800d226:	e7ee      	b.n	800d206 <__swhatbuf_r+0x1e>
 800d228:	2340      	movs	r3, #64	; 0x40
 800d22a:	2000      	movs	r0, #0
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	b016      	add	sp, #88	; 0x58
 800d230:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d234 <__smakebuf_r>:
 800d234:	898b      	ldrh	r3, [r1, #12]
 800d236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d238:	079d      	lsls	r5, r3, #30
 800d23a:	4606      	mov	r6, r0
 800d23c:	460c      	mov	r4, r1
 800d23e:	d507      	bpl.n	800d250 <__smakebuf_r+0x1c>
 800d240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	6123      	str	r3, [r4, #16]
 800d248:	2301      	movs	r3, #1
 800d24a:	6163      	str	r3, [r4, #20]
 800d24c:	b002      	add	sp, #8
 800d24e:	bd70      	pop	{r4, r5, r6, pc}
 800d250:	ab01      	add	r3, sp, #4
 800d252:	466a      	mov	r2, sp
 800d254:	f7ff ffc8 	bl	800d1e8 <__swhatbuf_r>
 800d258:	9900      	ldr	r1, [sp, #0]
 800d25a:	4605      	mov	r5, r0
 800d25c:	4630      	mov	r0, r6
 800d25e:	f7fd fb9f 	bl	800a9a0 <_malloc_r>
 800d262:	b948      	cbnz	r0, 800d278 <__smakebuf_r+0x44>
 800d264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d268:	059a      	lsls	r2, r3, #22
 800d26a:	d4ef      	bmi.n	800d24c <__smakebuf_r+0x18>
 800d26c:	f023 0303 	bic.w	r3, r3, #3
 800d270:	f043 0302 	orr.w	r3, r3, #2
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	e7e3      	b.n	800d240 <__smakebuf_r+0xc>
 800d278:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <__smakebuf_r+0x7c>)
 800d27a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	6020      	str	r0, [r4, #0]
 800d280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d284:	81a3      	strh	r3, [r4, #12]
 800d286:	9b00      	ldr	r3, [sp, #0]
 800d288:	6163      	str	r3, [r4, #20]
 800d28a:	9b01      	ldr	r3, [sp, #4]
 800d28c:	6120      	str	r0, [r4, #16]
 800d28e:	b15b      	cbz	r3, 800d2a8 <__smakebuf_r+0x74>
 800d290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d294:	4630      	mov	r0, r6
 800d296:	f000 f859 	bl	800d34c <_isatty_r>
 800d29a:	b128      	cbz	r0, 800d2a8 <__smakebuf_r+0x74>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	f023 0303 	bic.w	r3, r3, #3
 800d2a2:	f043 0301 	orr.w	r3, r3, #1
 800d2a6:	81a3      	strh	r3, [r4, #12]
 800d2a8:	89a0      	ldrh	r0, [r4, #12]
 800d2aa:	4305      	orrs	r5, r0
 800d2ac:	81a5      	strh	r5, [r4, #12]
 800d2ae:	e7cd      	b.n	800d24c <__smakebuf_r+0x18>
 800d2b0:	0800c185 	.word	0x0800c185

0800d2b4 <__ascii_mbtowc>:
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	b901      	cbnz	r1, 800d2ba <__ascii_mbtowc+0x6>
 800d2b8:	a901      	add	r1, sp, #4
 800d2ba:	b142      	cbz	r2, 800d2ce <__ascii_mbtowc+0x1a>
 800d2bc:	b14b      	cbz	r3, 800d2d2 <__ascii_mbtowc+0x1e>
 800d2be:	7813      	ldrb	r3, [r2, #0]
 800d2c0:	600b      	str	r3, [r1, #0]
 800d2c2:	7812      	ldrb	r2, [r2, #0]
 800d2c4:	1e10      	subs	r0, r2, #0
 800d2c6:	bf18      	it	ne
 800d2c8:	2001      	movne	r0, #1
 800d2ca:	b002      	add	sp, #8
 800d2cc:	4770      	bx	lr
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	e7fb      	b.n	800d2ca <__ascii_mbtowc+0x16>
 800d2d2:	f06f 0001 	mvn.w	r0, #1
 800d2d6:	e7f8      	b.n	800d2ca <__ascii_mbtowc+0x16>

0800d2d8 <_malloc_usable_size_r>:
 800d2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2dc:	1f18      	subs	r0, r3, #4
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	bfbc      	itt	lt
 800d2e2:	580b      	ldrlt	r3, [r1, r0]
 800d2e4:	18c0      	addlt	r0, r0, r3
 800d2e6:	4770      	bx	lr

0800d2e8 <_read_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d07      	ldr	r5, [pc, #28]	; (800d308 <_read_r+0x20>)
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	4608      	mov	r0, r1
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	602a      	str	r2, [r5, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f7f6 fd3e 	bl	8003d78 <_read>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_read_r+0x1e>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_read_r+0x1e>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20000ddc 	.word	0x20000ddc

0800d30c <__ascii_wctomb>:
 800d30c:	b149      	cbz	r1, 800d322 <__ascii_wctomb+0x16>
 800d30e:	2aff      	cmp	r2, #255	; 0xff
 800d310:	bf85      	ittet	hi
 800d312:	238a      	movhi	r3, #138	; 0x8a
 800d314:	6003      	strhi	r3, [r0, #0]
 800d316:	700a      	strbls	r2, [r1, #0]
 800d318:	f04f 30ff 	movhi.w	r0, #4294967295
 800d31c:	bf98      	it	ls
 800d31e:	2001      	movls	r0, #1
 800d320:	4770      	bx	lr
 800d322:	4608      	mov	r0, r1
 800d324:	4770      	bx	lr
	...

0800d328 <_fstat_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4d07      	ldr	r5, [pc, #28]	; (800d348 <_fstat_r+0x20>)
 800d32c:	2300      	movs	r3, #0
 800d32e:	4604      	mov	r4, r0
 800d330:	4608      	mov	r0, r1
 800d332:	4611      	mov	r1, r2
 800d334:	602b      	str	r3, [r5, #0]
 800d336:	f7f6 fd64 	bl	8003e02 <_fstat>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	d102      	bne.n	800d344 <_fstat_r+0x1c>
 800d33e:	682b      	ldr	r3, [r5, #0]
 800d340:	b103      	cbz	r3, 800d344 <_fstat_r+0x1c>
 800d342:	6023      	str	r3, [r4, #0]
 800d344:	bd38      	pop	{r3, r4, r5, pc}
 800d346:	bf00      	nop
 800d348:	20000ddc 	.word	0x20000ddc

0800d34c <_isatty_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4d06      	ldr	r5, [pc, #24]	; (800d368 <_isatty_r+0x1c>)
 800d350:	2300      	movs	r3, #0
 800d352:	4604      	mov	r4, r0
 800d354:	4608      	mov	r0, r1
 800d356:	602b      	str	r3, [r5, #0]
 800d358:	f7f6 fd63 	bl	8003e22 <_isatty>
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	d102      	bne.n	800d366 <_isatty_r+0x1a>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	b103      	cbz	r3, 800d366 <_isatty_r+0x1a>
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	20000ddc 	.word	0x20000ddc

0800d36c <_init>:
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	bf00      	nop
 800d370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d372:	bc08      	pop	{r3}
 800d374:	469e      	mov	lr, r3
 800d376:	4770      	bx	lr

0800d378 <_fini>:
 800d378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37a:	bf00      	nop
 800d37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d37e:	bc08      	pop	{r3}
 800d380:	469e      	mov	lr, r3
 800d382:	4770      	bx	lr
