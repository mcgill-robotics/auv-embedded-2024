
hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d260  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d0  0800d3f0  0800d3f0  0000e3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edc0  0800edc0  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800edc0  0800edc0  0000fdc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edc8  0800edc8  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800edc8  0800edc8  0000fdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edd0  0800edd0  0000fdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800edd4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf8  200001d4  0800efa8  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ecc  0800efa8  00010ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bee  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004253  00000000  00000000  00032df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001131  00000000  00000000  00038708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f77  00000000  00000000  00039839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab3b  00000000  00000000  000607b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efc32  00000000  00000000  0007b2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0016af1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007438  00000000  00000000  0016afd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00172410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000284c  00000000  00000000  0017247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  00174ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3d8 	.word	0x0800d3d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d3d8 	.word	0x0800d3d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <_ZN3ros3MsgC1Ev+0x1c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	0800d64c 	.word	0x0800d64c

08000f1c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
      data()
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffe8 	bl	8000efc <_ZN3ros3MsgC1Ev>
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3304      	adds	r3, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ffce 	bl	8000ed8 <_ZN3ros4TimeC1Ev>
    {
    }
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	0800d634 	.word	0x0800d634

08000f4c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6859      	ldr	r1, [r3, #4]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	b2ca      	uxtb	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	0a19      	lsrs	r1, r3, #8
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3301      	adds	r3, #1
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	b2ca      	uxtb	r2, r1
 8000f78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	0c19      	lsrs	r1, r3, #16
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3302      	adds	r3, #2
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	b2ca      	uxtb	r2, r1
 8000f8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	0e19      	lsrs	r1, r3, #24
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3303      	adds	r3, #3
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6899      	ldr	r1, [r3, #8]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	4413      	add	r3, r2
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	0a19      	lsrs	r1, r3, #8
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b2ca      	uxtb	r2, r1
 8000fc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	0c19      	lsrs	r1, r3, #16
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	0e19      	lsrs	r1, r3, #24
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3303      	adds	r3, #3
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b2ca      	uxtb	r2, r1
 8000fe6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3304      	adds	r3, #4
 8000fec:	60fb      	str	r3, [r7, #12]
      return offset;
 8000fee:	68fb      	ldr	r3, [r7, #12]
    }
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	440b      	add	r3, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3302      	adds	r3, #2
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	440b      	add	r3, r1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3303      	adds	r3, #3
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	440b      	add	r3, r1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	061b      	lsls	r3, r3, #24
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3304      	adds	r3, #4
 800105e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3301      	adds	r3, #1
 8001076:	6839      	ldr	r1, [r7, #0]
 8001078:	440b      	add	r3, r1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3302      	adds	r3, #2
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	440b      	add	r3, r1
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	041b      	lsls	r3, r3, #16
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3303      	adds	r3, #3
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	440b      	add	r3, r1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	061b      	lsls	r3, r3, #24
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3304      	adds	r3, #4
 80010b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80010b6:	68fb      	ldr	r3, [r7, #12]
    }
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	0800d3f0 	.word	0x0800d3f0

080010e0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	0800d400 	.word	0x0800d400

080010fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fef8 	bl	8000efc <_ZN3ros3MsgC1Ev>
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800111c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001122:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001128:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
    {
    }
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	0800d61c 	.word	0x0800d61c
 8001140:	0800d424 	.word	0x0800d424

08001144 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	8899      	ldrh	r1, [r3, #4]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b2ca      	uxtb	r2, r1
 800115e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	b299      	uxth	r1, r3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	3301      	adds	r3, #1
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	b2ca      	uxtb	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3302      	adds	r3, #2
 8001178:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f876 	bl	8000270 <strlen>
 8001184:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	69b9      	ldr	r1, [r7, #24]
 800118e:	4618      	mov	r0, r3
 8001190:	f001 ff22 	bl	8002fd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	3304      	adds	r3, #4
 8001198:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	18d0      	adds	r0, r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4619      	mov	r1, r3
 80011a8:	f00a fa69 	bl	800b67e <memcpy>
      offset += length_topic_name;
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4413      	add	r3, r2
 80011b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f859 	bl	8000270 <strlen>
 80011be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	6979      	ldr	r1, [r7, #20]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 ff05 	bl	8002fd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	18d0      	adds	r0, r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f00a fa4c 	bl	800b67e <memcpy>
      offset += length_message_type;
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	4413      	add	r3, r2
 80011ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f83c 	bl	8000270 <strlen>
 80011f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	6939      	ldr	r1, [r7, #16]
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fee8 	bl	8002fd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	3304      	adds	r3, #4
 800120c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	18d0      	adds	r0, r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4619      	mov	r1, r3
 800121c:	f00a fa2f 	bl	800b67e <memcpy>
      offset += length_md5sum;
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4413      	add	r3, r2
 8001226:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	0a19      	lsrs	r1, r3, #8
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	0c19      	lsrs	r1, r3, #16
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3302      	adds	r3, #2
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	b2ca      	uxtb	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	0e19      	lsrs	r1, r3, #24
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3303      	adds	r3, #3
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001270:	69fb      	ldr	r3, [r7, #28]
    }
 8001272:	4618      	mov	r0, r3
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800127a:	b580      	push	{r7, lr}
 800127c:	b08a      	sub	sp, #40	@ 0x28
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	b21a      	sxth	r2, r3
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	3301      	adds	r3, #1
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	440b      	add	r3, r1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3302      	adds	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	441a      	add	r2, r3
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fea5 	bl	8003016 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	3304      	adds	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d6:	e00b      	b.n	80012f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	441a      	add	r2, r3
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	3b01      	subs	r3, #1
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	440b      	add	r3, r1
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	3301      	adds	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	4413      	add	r3, r2
 80012f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3ed      	bcc.n	80012d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	4413      	add	r3, r2
 8001302:	3b01      	subs	r3, #1
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	3b01      	subs	r3, #1
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	441a      	add	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	4413      	add	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	441a      	add	r2, r3
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fe72 	bl	8003016 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	3304      	adds	r3, #4
 8001336:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	e00b      	b.n	8001356 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	441a      	add	r2, r3
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	3b01      	subs	r3, #1
 8001348:	6839      	ldr	r1, [r7, #0]
 800134a:	440b      	add	r3, r1
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	3301      	adds	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4413      	add	r3, r2
 800135c:	6a3a      	ldr	r2, [r7, #32]
 800135e:	429a      	cmp	r2, r3
 8001360:	d3ed      	bcc.n	800133e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4413      	add	r3, r2
 8001368:	3b01      	subs	r3, #1
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3b01      	subs	r3, #1
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	441a      	add	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4413      	add	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	441a      	add	r2, r3
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fe3f 	bl	8003016 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	3304      	adds	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e00b      	b.n	80013bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	441a      	add	r2, r3
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	440b      	add	r3, r1
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3ed      	bcc.n	80013a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	3b01      	subs	r3, #1
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3b01      	subs	r3, #1
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	441a      	add	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	6839      	ldr	r1, [r7, #0]
 80013f6:	440a      	add	r2, r1
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	3301      	adds	r3, #1
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	440b      	add	r3, r1
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	4313      	orrs	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	3302      	adds	r3, #2
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	440b      	add	r3, r1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	041b      	lsls	r3, r3, #16
 800141e:	4313      	orrs	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	3303      	adds	r3, #3
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	440b      	add	r3, r1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	061b      	lsls	r3, r3, #24
 8001430:	4313      	orrs	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	3304      	adds	r3, #4
 800143e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001440:	69bb      	ldr	r3, [r7, #24]
    }
 8001442:	4618      	mov	r0, r3
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	0800d428 	.word	0x0800d428

08001468 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	0800d444 	.word	0x0800d444

08001484 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fd34 	bl	8000efc <_ZN3ros3MsgC1Ev>
 8001494:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	601a      	str	r2, [r3, #0]
      level(0),
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	711a      	strb	r2, [r3, #4]
      msg("")
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80014a4:	609a      	str	r2, [r3, #8]
    {
    }
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800d604 	.word	0x0800d604
 80014b4:	0800d424 	.word	0x0800d424

080014b8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	7912      	ldrb	r2, [r2, #4]
 80014d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe fec7 	bl	8000270 <strlen>
 80014e2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fd73 	bl	8002fd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3304      	adds	r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	18d0      	adds	r0, r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4619      	mov	r1, r3
 8001506:	f00a f8ba 	bl	800b67e <memcpy>
      offset += length_msg;
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
      return offset;
 8001512:	68fb      	ldr	r3, [r7, #12]
    }
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	4413      	add	r3, r2
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	3301      	adds	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	441a      	add	r2, r3
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fd64 	bl	8003016 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3304      	adds	r3, #4
 8001552:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e00b      	b.n	8001572 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	441a      	add	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3b01      	subs	r3, #1
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3ed      	bcc.n	800155a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	3b01      	subs	r3, #1
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	4413      	add	r3, r2
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3b01      	subs	r3, #1
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	441a      	add	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
     return offset;
 80015a2:	693b      	ldr	r3, [r7, #16]
    }
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	0800d468 	.word	0x0800d468

080015c8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	0800d47c 	.word	0x0800d47c

080015e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fc84 	bl	8000efc <_ZN3ros3MsgC1Ev>
 80015f4:	4a11      	ldr	r2, [pc, #68]	@ (800163c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	0800d5ec 	.word	0x0800d5ec

08001640 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	b2ca      	uxtb	r2, r1
 800165a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	0a19      	lsrs	r1, r3, #8
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	3301      	adds	r3, #1
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	0c19      	lsrs	r1, r3, #16
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	3302      	adds	r3, #2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	4413      	add	r3, r2
 800167c:	b2ca      	uxtb	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	0e19      	lsrs	r1, r3, #24
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	3303      	adds	r3, #3
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	b2ca      	uxtb	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	3304      	adds	r3, #4
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
 800169c:	e02a      	b.n	80016f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80016ac:	6939      	ldr	r1, [r7, #16]
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	0a19      	lsrs	r1, r3, #8
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	3301      	adds	r3, #1
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	b2ca      	uxtb	r2, r1
 80016c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	0c19      	lsrs	r1, r3, #16
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	3302      	adds	r3, #2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	b2ca      	uxtb	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	0e19      	lsrs	r1, r3, #24
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	3303      	adds	r3, #3
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2ca      	uxtb	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	3304      	adds	r3, #4
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	3301      	adds	r3, #1
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	6a3a      	ldr	r2, [r7, #32]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3cf      	bcc.n	800169e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6919      	ldr	r1, [r3, #16]
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	0a19      	lsrs	r1, r3, #8
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	4413      	add	r3, r2
 800171a:	b2ca      	uxtb	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	0c19      	lsrs	r1, r3, #16
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	3302      	adds	r3, #2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	b2ca      	uxtb	r2, r1
 800172e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	0e19      	lsrs	r1, r3, #24
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	3303      	adds	r3, #3
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4413      	add	r3, r2
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	3304      	adds	r3, #4
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	e02a      	b.n	80017a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	b2ca      	uxtb	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	0a19      	lsrs	r1, r3, #8
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	3301      	adds	r3, #1
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	b2ca      	uxtb	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	0c19      	lsrs	r1, r3, #16
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	3302      	adds	r3, #2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	0e19      	lsrs	r1, r3, #24
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	3303      	adds	r3, #3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	4413      	add	r3, r2
 8001794:	b2ca      	uxtb	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	3304      	adds	r3, #4
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d3cf      	bcc.n	800174e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69d9      	ldr	r1, [r3, #28]
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	b2ca      	uxtb	r2, r1
 80017ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	0a19      	lsrs	r1, r3, #8
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	b2ca      	uxtb	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	0c19      	lsrs	r1, r3, #16
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	3302      	adds	r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	0e19      	lsrs	r1, r3, #24
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	3303      	adds	r3, #3
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	3304      	adds	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	e027      	b.n	800184e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fd30 	bl	8000270 <strlen>
 8001810:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	6979      	ldr	r1, [r7, #20]
 800181a:	4618      	mov	r0, r3
 800181c:	f001 fbdc 	bl	8002fd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	3304      	adds	r3, #4
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	18d0      	adds	r0, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4619      	mov	r1, r3
 800183c:	f009 ff1f 	bl	800b67e <memcpy>
      offset += length_stringsi;
 8001840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	3301      	adds	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	429a      	cmp	r2, r3
 8001856:	d3d2      	bcc.n	80017fe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800185a:	4618      	mov	r0, r3
 800185c:	3728      	adds	r7, #40	@ 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001862:	b580      	push	{r7, lr}
 8001864:	b08e      	sub	sp, #56	@ 0x38
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800187a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800187c:	3301      	adds	r3, #1
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	4313      	orrs	r3, r2
 800188a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800188c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188e:	3302      	adds	r3, #2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	6a3a      	ldr	r2, [r7, #32]
 800189a:	4313      	orrs	r3, r2
 800189c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800189e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a0:	3303      	adds	r3, #3
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	6a3a      	ldr	r2, [r7, #32]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80018b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b2:	3304      	adds	r3, #4
 80018b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	6a3a      	ldr	r2, [r7, #32]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d90a      	bls.n	80018d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f009 f8b2 	bl	800aa34 <realloc>
 80018d0:	4602      	mov	r2, r0
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a3a      	ldr	r2, [r7, #32]
 80018da:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	@ 0x30
 80018e0:	e035      	b.n	800194e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	440a      	add	r2, r1
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f8:	3301      	adds	r3, #1
 80018fa:	6839      	ldr	r1, [r7, #0]
 80018fc:	440b      	add	r3, r1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4313      	orrs	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190a:	3302      	adds	r3, #2
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	440b      	add	r3, r1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	4313      	orrs	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800191c:	3303      	adds	r3, #3
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	440b      	add	r3, r1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001932:	3304      	adds	r3, #4
 8001934:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800194a:	3301      	adds	r3, #1
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001954:	429a      	cmp	r2, r3
 8001956:	d3c4      	bcc.n	80018e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001964:	3301      	adds	r3, #1
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	4313      	orrs	r3, r2
 8001972:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001976:	3302      	adds	r3, #2
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	041b      	lsls	r3, r3, #16
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	4313      	orrs	r3, r2
 8001984:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001988:	3303      	adds	r3, #3
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	4313      	orrs	r3, r2
 8001996:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	3304      	adds	r3, #4
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d90a      	bls.n	80019be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f009 f83e 	bl	800aa34 <realloc>
 80019b8:	4602      	mov	r2, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c8:	e035      	b.n	8001a36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	440a      	add	r2, r1
 80019d6:	7812      	ldrb	r2, [r2, #0]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	3301      	adds	r3, #1
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	440b      	add	r3, r1
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f2:	3302      	adds	r3, #2
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	440b      	add	r3, r1
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a04:	3303      	adds	r3, #3
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	440b      	add	r3, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	3214      	adds	r2, #20
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a32:	3301      	adds	r3, #1
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d3c4      	bcc.n	80019ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5e:	3302      	adds	r3, #2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a70:	3303      	adds	r3, #3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a82:	3304      	adds	r3, #4
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d90a      	bls.n	8001aa6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f008 ffca 	bl	800aa34 <realloc>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab0:	e03e      	b.n	8001b30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	441a      	add	r2, r3
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 faa9 	bl	8003016 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	e00b      	b.n	8001ae8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	441a      	add	r2, r3
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	440b      	add	r3, r1
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3ed      	bcc.n	8001ad0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001af4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	3b01      	subs	r3, #1
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b06:	3b01      	subs	r3, #1
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001b10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	3220      	adds	r2, #32
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3bb      	bcc.n	8001ab2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3738      	adds	r7, #56	@ 0x38
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	0800d588 	.word	0x0800d588

08001b60 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	0800d4a0 	.word	0x0800d4a0

08001b7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68d8      	ldr	r0, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6891      	ldr	r1, [r2, #8]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4798      	blx	r3
 8001bc8:	4603      	mov	r3, r0
  };
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
  }
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <_ZN13STM32HardwareC1Ev+0x34>)
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	200002ec 	.word	0x200002ec

08001c48 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f804 	bl	8001c5e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c72:	4619      	mov	r1, r3
 8001c74:	f006 f8de 	bl	8007e34 <HAL_UART_Receive_DMA>
    }
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c8c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffa8 	bl	8001bea <_ZN13STM32Hardware10getRdmaIndEv>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	429c      	cmp	r4, r3
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d012      	beq.n	8001cd0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	791b      	ldrb	r3, [r3, #4]
 8001cbe:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    }
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
	...

08001cdc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d108      	bne.n	8001d00 <_ZN13STM32Hardware5flushEv+0x24>
 8001cee:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <_ZN13STM32Hardware5flushEv+0xe0>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <_ZN13STM32Hardware5flushEv+0x24>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <_ZN13STM32Hardware5flushEv+0x26>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d055      	beq.n	8001db2 <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d047      	beq.n	8001dac <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d217      	bcs.n	8001d60 <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d4e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	89fa      	ldrh	r2, [r7, #14]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f005 ffef 	bl	8007d3c <HAL_UART_Transmit_DMA>
 8001d5e:	e01f      	b.n	8001da0 <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001d6c:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001d78:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	89fa      	ldrh	r2, [r7, #14]
 8001d82:	4619      	mov	r1, r3
 8001d84:	f005 ffda 	bl	8007d3c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f503 7102 	add.w	r1, r3, #520	@ 0x208
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f005 ffce 	bl	8007d3c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <_ZN13STM32Hardware5flushEv+0xe0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
      }
    }
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001f0 	.word	0x200001f0

08001dc0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
      int n = length;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd6:	bfa8      	it	ge
 8001dd8:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8001ddc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001de4:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	4293      	cmp	r3, r2
 8001dec:	bf28      	it	cs
 8001dee:	4613      	movcs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001df8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f009 fc3a 	bl	800b67e <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	4413      	add	r3, r2
 8001e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d00b      	beq.n	8001e3e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	18d1      	adds	r1, r2, r3
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f009 fc20 	bl	800b67e <memcpy>
      }

      flush();
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff ff4c 	bl	8001cdc <_ZN13STM32Hardware5flushEv>
    }
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	f002 fa54 	bl	8004300 <HAL_GetTick>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <_ZN8auv_msgs17HydrophonePayloadC1Ev>:
      typedef uint32_t _frequency_type;
      _frequency_type frequency;
      typedef uint32_t _time_type;
      _time_type time;

    HydrophonePayload():
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
      hydrophone(0),
      frequency(0),
      time(0)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f844 	bl	8000efc <_ZN3ros3MsgC1Ev>
 8001e74:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <_ZN8auv_msgs17HydrophonePayloadC1Ev+0x34>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
      hydrophone(0),
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	711a      	strb	r2, [r3, #4]
      frequency(0),
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
      time(0)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
    {
    }
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	0800d5c0 	.word	0x0800d5c0

08001e9c <_ZNK8auv_msgs17HydrophonePayload9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->hydrophone >> (8 * 0)) & 0xFF;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	7912      	ldrb	r2, [r2, #4]
 8001eb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->hydrophone);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->frequency >> (8 * 0)) & 0xFF;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->frequency >> (8 * 1)) & 0xFF;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0a19      	lsrs	r1, r3, #8
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2ca      	uxtb	r2, r1
 8001eda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->frequency >> (8 * 2)) & 0xFF;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	0c19      	lsrs	r1, r3, #16
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->frequency >> (8 * 3)) & 0xFF;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0e19      	lsrs	r1, r3, #24
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3303      	adds	r3, #3
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	b2ca      	uxtb	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->frequency);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3304      	adds	r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->time >> (8 * 0)) & 0xFF;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68d9      	ldr	r1, [r3, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2ca      	uxtb	r2, r1
 8001f12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->time >> (8 * 1)) & 0xFF;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a19      	lsrs	r1, r3, #8
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	b2ca      	uxtb	r2, r1
 8001f24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->time >> (8 * 2)) & 0xFF;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	0c19      	lsrs	r1, r3, #16
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	b2ca      	uxtb	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->time >> (8 * 3)) & 0xFF;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0e19      	lsrs	r1, r3, #24
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3303      	adds	r3, #3
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->time);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f50:	68fb      	ldr	r3, [r7, #12]
    }
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_ZN8auv_msgs17HydrophonePayload11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
      this->hydrophone =  ((uint8_t) (*(inbuffer + offset)));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->hydrophone);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
      this->frequency =  ((uint32_t) (*(inbuffer + offset)));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	6839      	ldr	r1, [r7, #0]
 8001f96:	440b      	add	r3, r1
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	6839      	ldr	r1, [r7, #0]
 8001fac:	440b      	add	r3, r1
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
      this->frequency |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	6839      	ldr	r1, [r7, #0]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->frequency);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
      this->time =  ((uint32_t) (*(inbuffer + offset)));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	440b      	add	r3, r1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3302      	adds	r3, #2
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	440b      	add	r3, r1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60da      	str	r2, [r3, #12]
      this->time |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3303      	adds	r3, #3
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	440b      	add	r3, r1
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->time);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3304      	adds	r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
     return offset;
 800202a:	68fb      	ldr	r3, [r7, #12]
    }
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_ZN8auv_msgs17HydrophonePayload7getTypeEv>:

    virtual const char * getType() override { return "auv_msgs/HydrophonePayload"; };
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <_ZN8auv_msgs17HydrophonePayload7getTypeEv+0x18>)
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	0800d4c4 	.word	0x0800d4c4

08002054 <_ZN8auv_msgs17HydrophonePayload6getMD5Ev>:
    virtual const char * getMD5() override { return "b1876360f6462dc4928877125c2982d9"; };
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <_ZN8auv_msgs17HydrophonePayload6getMD5Ev+0x18>)
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	0800d4e0 	.word	0x0800d4e0

08002070 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4a04      	ldr	r2, [pc, #16]	@ (800208c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	0800d5d8 	.word	0x0800d5d8

08002090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ffe8 	bl	8002070 <_ZN3ros15NodeHandleBase_C1Ev>
 80020a0:	4a36      	ldr	r2, [pc, #216]	@ (800217c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fdb0 	bl	8001c10 <_ZN13STM32HardwareC1Ev>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80020d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f009 fa4e 	bl	800b57e <memset>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80020e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f009 fa45 	bl	800b57e <memset>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 80020fa:	2264      	movs	r2, #100	@ 0x64
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f009 fa3d 	bl	800b57e <memset>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800210a:	2264      	movs	r2, #100	@ 0x64
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f009 fa35 	bl	800b57e <memset>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fa3a 	bl	80015e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	0800d5ac 	.word	0x0800d5ac

08002180 <HAL_UART_TxCpltCallback>:
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
	*pSum = 0;
	*pSumSquares = 0;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002188:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <HAL_UART_TxCpltCallback+0x20>)
 800218a:	f000 ff6a 	bl	8003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800218e:	4603      	mov	r3, r0
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fda3 	bl	8001cdc <_ZN13STM32Hardware5flushEv>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000404 	.word	0x20000404

080021a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80021ac:	4805      	ldr	r0, [pc, #20]	@ (80021c4 <HAL_UART_RxCpltCallback+0x20>)
 80021ae:	f000 ff58 	bl	8003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fd52 	bl	8001c5e <_ZN13STM32Hardware10reset_rbufEv>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000404 	.word	0x20000404

080021c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	ed2d 8b02 	vpush	{d8}
 80021ce:	f5ad 5d42 	sub.w	sp, sp, #12416	@ 0x3080
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d6:	f002 f823 	bl	8004220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021da:	f000 fc83 	bl	8002ae4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021de:	f000 fe4d 	bl	8002e7c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80021e2:	f000 fe1d 	bl	8002e20 <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 80021e6:	f000 fd8b 	bl	8002d00 <_ZL12MX_TIM2_Initv>
  MX_USART2_UART_Init();
 80021ea:	f000 fde5 	bl	8002db8 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80021ee:	f000 fcd9 	bl	8002ba4 <_ZL12MX_ADC1_Initv>
  float32_t hydrophone1[1024];
  float32_t hydrophone2[1024];
  float32_t hydrophone3[1024];
  float32_t V1, V2, V3;
  float32_t v1Variance;
  float32_t v1Sum = 0;
 80021f2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80021f6:	461a      	mov	r2, r3
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f842 3c80 	str.w	r3, [r2, #-128]
  float32_t v1SumSquares = 0;
 8002200:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002204:	461a      	mov	r2, r3
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f842 3c84 	str.w	r3, [r2, #-132]
  float32_t v2Variance;
  float32_t v2Sum = 0;
 800220e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002212:	461a      	mov	r2, r3
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f842 3c8c 	str.w	r3, [r2, #-140]
  float32_t v2SumSquares = 0;
 800221c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002220:	461a      	mov	r2, r3
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	f842 3c90 	str.w	r3, [r2, #-144]
  float32_t v3Variance;
  float32_t v3Sum = 0;
 800222a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800222e:	461a      	mov	r2, r3
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f842 3c98 	str.w	r3, [r2, #-152]
  float32_t v3SumSquares = 0;
 8002238:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800223c:	461a      	mov	r2, r3
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	f842 3c9c 	str.w	r3, [r2, #-156]
  uint32_t index = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 800224c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002250:	6013      	str	r3, [r2, #0]
  uint32_t times[3];
  uint32_t frequency0 = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002258:	f102 0218 	add.w	r2, r2, #24
 800225c:	6013      	str	r3, [r2, #0]
  uint32_t frequency1 = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002264:	f102 0214 	add.w	r2, r2, #20
 8002268:	6013      	str	r3, [r2, #0]
  uint32_t frequency2 = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002270:	f102 0210 	add.w	r2, r2, #16
 8002274:	6013      	str	r3, [r2, #0]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002276:	217f      	movs	r1, #127	@ 0x7f
 8002278:	48a1      	ldr	r0, [pc, #644]	@ (8002500 <main+0x338>)
 800227a:	f003 f99d 	bl	80055b8 <HAL_ADCEx_Calibration_Start>
  for (int i = 0; i < 512; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002284:	f102 0220 	add.w	r2, r2, #32
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e03b      	b.n	8002304 <main+0x13c>
	  hydrophone1[2*i + 1] = 0;
 800228c:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002290:	f103 0320 	add.w	r3, r3, #32
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	3301      	adds	r3, #1
 800229a:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 800229e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b6c      	subs	r3, #108	@ 0x6c
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
	  hydrophone2[2*i + 1] = 0;
 80022ae:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80022b2:	f103 0320 	add.w	r3, r3, #32
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	3301      	adds	r3, #1
 80022bc:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 80022c0:	f102 0208 	add.w	r2, r2, #8
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b6c      	subs	r3, #108	@ 0x6c
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
	  hydrophone3[2*i + 1] = 0;
 80022d0:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80022d4:	f103 0320 	add.w	r3, r3, #32
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	3301      	adds	r3, #1
 80022de:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b6c      	subs	r3, #108	@ 0x6c
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 512; i++) {
 80022ee:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80022f2:	f103 0320 	add.w	r3, r3, #32
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80022fe:	f102 0220 	add.w	r2, r2, #32
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002308:	f103 0320 	add.w	r3, r3, #32
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002312:	dbbb      	blt.n	800228c <main+0xc4>
  }
  nh.initNode();
 8002314:	487b      	ldr	r0, [pc, #492]	@ (8002504 <main+0x33c>)
 8002316:	f000 feb0 	bl	800307a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(hpub1);
 800231a:	497b      	ldr	r1, [pc, #492]	@ (8002508 <main+0x340>)
 800231c:	4879      	ldr	r0, [pc, #484]	@ (8002504 <main+0x33c>)
 800231e:	f000 fec9 	bl	80030b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  HAL_TIM_Base_Start_IT(&htim2);
 8002322:	487a      	ldr	r0, [pc, #488]	@ (800250c <main+0x344>)
 8002324:	f005 f8f2 	bl	800750c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8002328:	4878      	ldr	r0, [pc, #480]	@ (800250c <main+0x344>)
 800232a:	f005 f8ef 	bl	800750c <HAL_TIM_Base_Start_IT>
  //printf("HI!\n\r");
  while (1)
  {
    index = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002334:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002338:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 800233a:	2300      	movs	r3, #0
 800233c:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 8002340:	f102 021c 	add.w	r2, r2, #28
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e240      	b.n	80027ca <main+0x602>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcChannels, 4);
 8002348:	2204      	movs	r2, #4
 800234a:	4971      	ldr	r1, [pc, #452]	@ (8002510 <main+0x348>)
 800234c:	486c      	ldr	r0, [pc, #432]	@ (8002500 <main+0x338>)
 800234e:	f002 fb13 	bl	8004978 <HAL_ADC_Start_DMA>
		  while (conversionComplete == 0) {
 8002352:	e000      	b.n	8002356 <main+0x18e>
			  continue;
 8002354:	bf00      	nop
		  while (conversionComplete == 0) {
 8002356:	4b6f      	ldr	r3, [pc, #444]	@ (8002514 <main+0x34c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f5      	bne.n	8002354 <main+0x18c>
		  }
		  conversionComplete = 0;
 8002368:	4b6a      	ldr	r3, [pc, #424]	@ (8002514 <main+0x34c>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
      if (i == 0)
 800236e:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002372:	f103 031c 	add.w	r3, r3, #28
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <main+0x1c0>
        times[0] = usecs_elapsed;
 800237c:	4b66      	ldr	r3, [pc, #408]	@ (8002518 <main+0x350>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002384:	f842 3ca8 	str.w	r3, [r2, #-168]
      if (i == 1)
 8002388:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800238c:	f103 031c 	add.w	r3, r3, #28
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <main+0x1da>
        times[1] = usecs_elapsed;
 8002396:	4b60      	ldr	r3, [pc, #384]	@ (8002518 <main+0x350>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800239e:	f842 3ca4 	str.w	r3, [r2, #-164]
      if (i == 3)
 80023a2:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80023a6:	f103 031c 	add.w	r3, r3, #28
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d105      	bne.n	80023bc <main+0x1f4>
        times[3] = usecs_elapsed;
 80023b0:	4b59      	ldr	r3, [pc, #356]	@ (8002518 <main+0x350>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80023b8:	f842 3c9c 	str.w	r3, [r2, #-156]
      switch (curPhone) {
 80023bc:	4b57      	ldr	r3, [pc, #348]	@ (800251c <main+0x354>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	f200 81db 	bhi.w	800277e <main+0x5b6>
 80023c8:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <main+0x208>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	0800277f 	.word	0x0800277f
 80023d4:	080023e1 	.word	0x080023e1
 80023d8:	08002529 	.word	0x08002529
 80023dc:	0800265d 	.word	0x0800265d
      	case INIT:
      		break;
      	case HYDROPHONE1:
      		calculateVoltage(adcChannels[0], adcChannels[1], &V1);
 80023e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002510 <main+0x348>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002510 <main+0x348>)
 80023e8:	885b      	ldrh	r3, [r3, #2]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f507 5142 	add.w	r1, r7, #12416	@ 0x3080
 80023f0:	f101 010e 	add.w	r1, r1, #14
 80023f4:	800a      	strh	r2, [r1, #0]
 80023f6:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80023fa:	f102 020c 	add.w	r2, r2, #12
 80023fe:	8013      	strh	r3, [r2, #0]
 8002400:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002404:	3b30      	subs	r3, #48	@ 0x30
 8002406:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 800240a:	f102 0208 	add.w	r2, r2, #8
 800240e:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002410:	4b43      	ldr	r3, [pc, #268]	@ (8002520 <main+0x358>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241c:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002420:	f103 0304 	add.w	r3, r3, #4
 8002424:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002428:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800242c:	f103 030e 	add.w	r3, r3, #14
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243a:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800243e:	f103 0304 	add.w	r3, r3, #4
 8002442:	edd3 6a00 	vldr	s13, [r3]
 8002446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800244a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002452:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002456:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 800245a:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002524 <main+0x35c>
 8002466:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800246a:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800246e:	f103 030c 	add.w	r3, r3, #12
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002484:	f103 0308 	add.w	r3, r3, #8
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	edc3 7a00 	vstr	s15, [r3]
}
 800248e:	bf00      	nop
      		v1Sum += V1;
 8002490:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002494:	ed13 7a20 	vldr	s14, [r3, #-128]	@ 0xffffff80
 8002498:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800249c:	ed53 7a1c 	vldr	s15, [r3, #-112]	@ 0xffffff90
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80024a8:	ed43 7a20 	vstr	s15, [r3, #-128]	@ 0xffffff80
      		v1SumSquares += powf(V1, 2);
 80024ac:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80024b0:	ed53 7a1c 	vldr	s15, [r3, #-112]	@ 0xffffff90
 80024b4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80024b8:	eeb0 0a67 	vmov.f32	s0, s15
 80024bc:	f007 fe8c 	bl	800a1d8 <powf>
 80024c0:	eeb0 7a40 	vmov.f32	s14, s0
 80024c4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80024c8:	ed53 7a21 	vldr	s15, [r3, #-132]	@ 0xffffff7c
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80024d4:	ed43 7a21 	vstr	s15, [r3, #-132]	@ 0xffffff7c
      		hydrophone1[2*index] = V1;
 80024d8:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80024dc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80024e8:	f852 2c70 	ldr.w	r2, [r2, #-112]
 80024ec:	f507 5102 	add.w	r1, r7, #8320	@ 0x2080
 80024f0:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3b6c      	subs	r3, #108	@ 0x6c
 80024fa:	601a      	str	r2, [r3, #0]
      		break;
 80024fc:	e13f      	b.n	800277e <main+0x5b6>
 80024fe:	bf00      	nop
 8002500:	200001f4 	.word	0x200001f4
 8002504:	20000404 	.word	0x20000404
 8002508:	20000d50 	.word	0x20000d50
 800250c:	200002a0 	.word	0x200002a0
 8002510:	20000d68 	.word	0x20000d68
 8002514:	20000d70 	.word	0x20000d70
 8002518:	20000d64 	.word	0x20000d64
 800251c:	20000d74 	.word	0x20000d74
 8002520:	1fff75aa 	.word	0x1fff75aa
 8002524:	457ff000 	.word	0x457ff000
        case HYDROPHONE2:
        	calculateVoltage(adcChannels[0], adcChannels[2], &V2);
 8002528:	4b49      	ldr	r3, [pc, #292]	@ (8002650 <main+0x488>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29a      	uxth	r2, r3
 800252e:	4b48      	ldr	r3, [pc, #288]	@ (8002650 <main+0x488>)
 8002530:	889b      	ldrh	r3, [r3, #4]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f507 5141 	add.w	r1, r7, #12352	@ 0x3040
 8002538:	f101 013e 	add.w	r1, r1, #62	@ 0x3e
 800253c:	800a      	strh	r2, [r1, #0]
 800253e:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002542:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002546:	8013      	strh	r3, [r2, #0]
 8002548:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800254c:	3b34      	subs	r3, #52	@ 0x34
 800254e:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002552:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002556:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 8002558:	4b3e      	ldr	r3, [pc, #248]	@ (8002654 <main+0x48c>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002564:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002568:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800256c:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 8002570:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002574:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002582:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002586:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800258a:	edd3 6a00 	vldr	s13, [r3]
 800258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002592:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259a:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800259e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80025a2:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80025a6:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80025aa:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8002658 <main+0x490>
 80025b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025ba:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80025be:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d0:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80025d4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	edc3 7a00 	vstr	s15, [r3]
}
 80025de:	bf00      	nop
      		v2Sum += V2;
 80025e0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025e4:	ed13 7a23 	vldr	s14, [r3, #-140]	@ 0xffffff74
 80025e8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025ec:	ed53 7a1d 	vldr	s15, [r3, #-116]	@ 0xffffff8c
 80025f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80025f8:	ed43 7a23 	vstr	s15, [r3, #-140]	@ 0xffffff74
      		v2SumSquares += powf(V2, 2);
 80025fc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002600:	ed53 7a1d 	vldr	s15, [r3, #-116]	@ 0xffffff8c
 8002604:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002608:	eeb0 0a67 	vmov.f32	s0, s15
 800260c:	f007 fde4 	bl	800a1d8 <powf>
 8002610:	eeb0 7a40 	vmov.f32	s14, s0
 8002614:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002618:	ed53 7a24 	vldr	s15, [r3, #-144]	@ 0xffffff70
 800261c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002620:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002624:	ed43 7a24 	vstr	s15, [r3, #-144]	@ 0xffffff70
        	hydrophone2[2*index] = V2;
 8002628:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 800262c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002638:	f852 2c74 	ldr.w	r2, [r2, #-116]
 800263c:	f507 5185 	add.w	r1, r7, #4256	@ 0x10a0
 8002640:	f101 0108 	add.w	r1, r1, #8
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3b6c      	subs	r3, #108	@ 0x6c
 800264a:	601a      	str	r2, [r3, #0]
        	break;
 800264c:	e097      	b.n	800277e <main+0x5b6>
 800264e:	bf00      	nop
 8002650:	20000d68 	.word	0x20000d68
 8002654:	1fff75aa 	.word	0x1fff75aa
 8002658:	457ff000 	.word	0x457ff000
        case HYDROPHONE3:
        	calculateVoltage(adcChannels[0], adcChannels[3], &V3);
 800265c:	4be1      	ldr	r3, [pc, #900]	@ (80029e4 <main+0x81c>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29a      	uxth	r2, r3
 8002662:	4be0      	ldr	r3, [pc, #896]	@ (80029e4 <main+0x81c>)
 8002664:	88db      	ldrh	r3, [r3, #6]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f507 5141 	add.w	r1, r7, #12352	@ 0x3040
 800266c:	f101 012e 	add.w	r1, r1, #46	@ 0x2e
 8002670:	800a      	strh	r2, [r1, #0]
 8002672:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002676:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800267a:	8013      	strh	r3, [r2, #0]
 800267c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002680:	3b38      	subs	r3, #56	@ 0x38
 8002682:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002686:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800268a:	6013      	str	r3, [r2, #0]
	float32_t VREFINT_CAL = (float32_t) *((uint16_t*) VREFINT_CAL_ADDR);
 800268c:	4bd6      	ldr	r3, [pc, #856]	@ (80029e8 <main+0x820>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002698:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800269c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80026a0:	edc3 7a00 	vstr	s15, [r3]
	float32_t Vdda = 3.0 * (VREFINT_CAL / VREFINT_DATA);
 80026a4:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026a8:	f103 032e 	add.w	r3, r3, #46	@ 0x2e
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b6:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026ba:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80026be:	edd3 6a00 	vldr	s13, [r3]
 80026c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80026ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ce:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026d2:	f103 0320 	add.w	r3, r3, #32
 80026d6:	edc3 7a00 	vstr	s15, [r3]
	*pOut = (Vdda / 4095) * (float32_t)ADC_DATA;
 80026da:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026de:	f103 0320 	add.w	r3, r3, #32
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 80029ec <main+0x824>
 80026ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026ee:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80026f2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002704:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002708:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	edc3 7a00 	vstr	s15, [r3]
}
 8002712:	bf00      	nop
        	hydrophone3[2*index] = V3;
 8002714:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002718:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8002724:	f852 2c78 	ldr.w	r2, [r2, #-120]
 8002728:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3b6c      	subs	r3, #108	@ 0x6c
 8002732:	601a      	str	r2, [r3, #0]
      		v3Sum += V3;
 8002734:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002738:	ed13 7a26 	vldr	s14, [r3, #-152]	@ 0xffffff68
 800273c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002740:	ed53 7a1e 	vldr	s15, [r3, #-120]	@ 0xffffff88
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800274c:	ed43 7a26 	vstr	s15, [r3, #-152]	@ 0xffffff68
      		v3SumSquares += powf(V3, 2);
 8002750:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002754:	ed53 7a1e 	vldr	s15, [r3, #-120]	@ 0xffffff88
 8002758:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800275c:	eeb0 0a67 	vmov.f32	s0, s15
 8002760:	f007 fd3a 	bl	800a1d8 <powf>
 8002764:	eeb0 7a40 	vmov.f32	s14, s0
 8002768:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800276c:	ed53 7a27 	vldr	s15, [r3, #-156]	@ 0xffffff64
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002778:	ed43 7a27 	vstr	s15, [r3, #-156]	@ 0xffffff64
        	break;
 800277c:	bf00      	nop
      }
      if (i % 3 == 2) {
 800277e:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002782:	f103 031c 	add.w	r3, r3, #28
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	4b99      	ldr	r3, [pc, #612]	@ (80029f0 <main+0x828>)
 800278a:	fb83 3201 	smull	r3, r2, r3, r1
 800278e:	17cb      	asrs	r3, r1, #31
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	1aca      	subs	r2, r1, r3
 800279a:	2a02      	cmp	r2, #2
 800279c:	d10a      	bne.n	80027b4 <main+0x5ec>
    	  index++;
 800279e:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80027a2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80027ae:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80027b2:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 1536; i++) {
 80027b4:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80027b8:	f103 031c 	add.w	r3, r3, #28
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	f507 5242 	add.w	r2, r7, #12416	@ 0x3080
 80027c4:	f102 021c 	add.w	r2, r2, #28
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80027ce:	f103 031c 	add.w	r3, r3, #28
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80027d8:	f6ff adb6 	blt.w	8002348 <main+0x180>
 80027dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027e0:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80027e4:	f102 0204 	add.w	r2, r2, #4
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027ee:	3b04      	subs	r3, #4
 80027f0:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80027fa:	3b3c      	subs	r3, #60	@ 0x3c
 80027fc:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8002800:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8002804:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 8002806:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	ed93 8a00 	vldr	s16, [r3]
 8002810:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002814:	f103 0304 	add.w	r3, r3, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002822:	eeb0 0a67 	vmov.f32	s0, s15
 8002826:	f007 fcd7 	bl	800a1d8 <powf>
 800282a:	eeb0 7a40 	vmov.f32	s14, s0
 800282e:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80029f4 <main+0x82c>
 8002832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002836:	ee38 7a67 	vsub.f32	s14, s16, s15
 800283a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80029f8 <main+0x830>
 800283e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002842:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8002846:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 8002850:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002854:	f103 0304 	add.w	r3, r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 8002860:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	bf00      	nop
 800286e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002872:	3b0c      	subs	r3, #12
 8002874:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002878:	f102 0210 	add.w	r2, r2, #16
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002882:	3b10      	subs	r3, #16
 8002884:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002888:	f102 020c 	add.w	r2, r2, #12
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002892:	3b08      	subs	r3, #8
 8002894:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002898:	f102 0208 	add.w	r2, r2, #8
 800289c:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 800289e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80028a2:	f103 030c 	add.w	r3, r3, #12
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	ed93 8a00 	vldr	s16, [r3]
 80028ac:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80028b0:	f103 0310 	add.w	r3, r3, #16
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80028be:	eeb0 0a67 	vmov.f32	s0, s15
 80028c2:	f007 fc89 	bl	800a1d8 <powf>
 80028c6:	eeb0 7a40 	vmov.f32	s14, s0
 80028ca:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80029f4 <main+0x82c>
 80028ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d2:	ee38 7a67 	vsub.f32	s14, s16, s15
 80028d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80029f8 <main+0x830>
 80028da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028de:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80028e2:	f103 0308 	add.w	r3, r3, #8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 80028ec:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80028f0:	f103 0310 	add.w	r3, r3, #16
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 80028fc:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002900:	f103 030c 	add.w	r3, r3, #12
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002912:	3b18      	subs	r3, #24
 8002914:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002918:	f102 021c 	add.w	r2, r2, #28
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002922:	3b1c      	subs	r3, #28
 8002924:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002928:	f102 0218 	add.w	r2, r2, #24
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002932:	3b14      	subs	r3, #20
 8002934:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8002938:	f102 0214 	add.w	r2, r2, #20
 800293c:	6013      	str	r3, [r2, #0]
	*pResult = ((*pSumSquares) - ((powf((*pSum), 2))/512.0f)) / (512.0f - 1.0f);
 800293e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002942:	f103 0318 	add.w	r3, r3, #24
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	ed93 8a00 	vldr	s16, [r3]
 800294c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002950:	f103 031c 	add.w	r3, r3, #28
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800295e:	eeb0 0a67 	vmov.f32	s0, s15
 8002962:	f007 fc39 	bl	800a1d8 <powf>
 8002966:	eeb0 7a40 	vmov.f32	s14, s0
 800296a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80029f4 <main+0x82c>
 800296e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002972:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002976:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80029f8 <main+0x830>
 800297a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002982:	f103 0314 	add.w	r3, r3, #20
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	edc3 7a00 	vstr	s15, [r3]
	*pSum = 0;
 800298c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8002990:	f103 031c 	add.w	r3, r3, #28
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
	*pSumSquares = 0;
 800299c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80029a0:	f103 0318 	add.w	r3, r3, #24
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	bf00      	nop
      }
	 }
    calculateVariance(&v1Sum, &v1SumSquares, &v1Variance);
    calculateVariance(&v2Sum, &v2SumSquares, &v2Variance);
    calculateVariance(&v3Sum, &v3SumSquares, &v3Variance);
    frequency0 = get_frequency(hydrophone1, 1024, 4705882.3529);
 80029ae:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80029b2:	f103 0308 	add.w	r3, r3, #8
 80029b6:	3b0c      	subs	r3, #12
 80029b8:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80029fc <main+0x834>
 80029bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 f803 	bl	80039cc <get_frequency>
 80029c6:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 80029ca:	f103 0318 	add.w	r3, r3, #24
 80029ce:	6018      	str	r0, [r3, #0]
    frequency1 = get_frequency(hydrophone2, 1024, 4705882.3529);
 80029d0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80029d4:	f103 0308 	add.w	r3, r3, #8
 80029d8:	3b2c      	subs	r3, #44	@ 0x2c
 80029da:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80029fc <main+0x834>
 80029de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029e2:	e00d      	b.n	8002a00 <main+0x838>
 80029e4:	20000d68 	.word	0x20000d68
 80029e8:	1fff75aa 	.word	0x1fff75aa
 80029ec:	457ff000 	.word	0x457ff000
 80029f0:	55555556 	.word	0x55555556
 80029f4:	44000000 	.word	0x44000000
 80029f8:	43ff8000 	.word	0x43ff8000
 80029fc:	4a8f9cb5 	.word	0x4a8f9cb5
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 ffe3 	bl	80039cc <get_frequency>
 8002a06:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002a0a:	f103 0314 	add.w	r3, r3, #20
 8002a0e:	6018      	str	r0, [r3, #0]
    frequency2 = get_frequency(hydrophone3, 1024, 4705882.3529);
 8002a10:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002a14:	3b2c      	subs	r3, #44	@ 0x2c
 8002a16:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 80029fc <main+0x834>
 8002a1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 ffd4 	bl	80039cc <get_frequency>
 8002a24:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002a28:	f103 0310 	add.w	r3, r3, #16
 8002a2c:	6018      	str	r0, [r3, #0]
    v1Sum = 0;
 8002a2e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002a32:	461a      	mov	r2, r3
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f842 3c80 	str.w	r3, [r2, #-128]
    v1SumSquares = 0;
 8002a3c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002a40:	461a      	mov	r2, r3
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	f842 3c84 	str.w	r3, [r2, #-132]
	v2Sum = 0;
 8002a4a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f842 3c8c 	str.w	r3, [r2, #-140]
	v2SumSquares = 0;
 8002a58:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	f842 3c90 	str.w	r3, [r2, #-144]
	v3Sum = 0;
 8002a66:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	f842 3c98 	str.w	r3, [r2, #-152]
	v3SumSquares = 0;
 8002a74:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f842 3c9c 	str.w	r3, [r2, #-156]
    if (frequency0 == frequency1 && frequency0 == frequency2) {
 8002a82:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002a86:	f103 0318 	add.w	r3, r3, #24
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002a90:	f103 0314 	add.w	r3, r3, #20
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d117      	bne.n	8002aca <main+0x902>
 8002a9a:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002a9e:	f103 0318 	add.w	r3, r3, #24
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002aa8:	f103 0310 	add.w	r3, r3, #16
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d10b      	bne.n	8002aca <main+0x902>
		printf("frequency from hydrophones: %lu\r\n", frequency0);
 8002ab2:	f507 5342 	add.w	r3, r7, #12416	@ 0x3080
 8002ab6:	f103 0318 	add.w	r3, r3, #24
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	4805      	ldr	r0, [pc, #20]	@ (8002ad4 <main+0x90c>)
 8002abe:	f008 fd09 	bl	800b4d4 <iprintf>
      hpub1.publish(&hmsg);
 8002ac2:	4905      	ldr	r1, [pc, #20]	@ (8002ad8 <main+0x910>)
 8002ac4:	4805      	ldr	r0, [pc, #20]	@ (8002adc <main+0x914>)
 8002ac6:	f7ff f870 	bl	8001baa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    }
	  nh.spinOnce();
 8002aca:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <main+0x918>)
 8002acc:	f000 fb22 	bl	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002ad0:	e42d      	b.n	800232e <main+0x166>
 8002ad2:	bf00      	nop
 8002ad4:	0800d504 	.word	0x0800d504
 8002ad8:	20000d40 	.word	0x20000d40
 8002adc:	20000d50 	.word	0x20000d50
 8002ae0:	20000404 	.word	0x20000404

08002ae4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b096      	sub	sp, #88	@ 0x58
 8002ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	2244      	movs	r2, #68	@ 0x44
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f008 fd43 	bl	800b57e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af8:	463b      	mov	r3, r7
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002b0a:	f003 fadd 	bl	80060c8 <HAL_PWREx_ControlVoltageScaling>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002b1e:	f000 fa55 	bl	8002fcc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b22:	2302      	movs	r3, #2
 8002b24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b30:	2302      	movs	r3, #2
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b34:	2302      	movs	r3, #2
 8002b36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b3c:	230a      	movs	r3, #10
 8002b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b40:	2307      	movs	r3, #7
 8002b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b44:	2302      	movs	r3, #2
 8002b46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 fb0f 	bl	8006174 <HAL_RCC_OscConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002b66:	f000 fa31 	bl	8002fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b6a:	230f      	movs	r3, #15
 8002b6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b7e:	463b      	mov	r3, r7
 8002b80:	2104      	movs	r1, #4
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 ff0a 	bl	800699c <HAL_RCC_ClockConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002b98:	f000 fa18 	bl	8002fcc <Error_Handler>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3758      	adds	r7, #88	@ 0x58
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002baa:	463b      	mov	r3, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
 8002bb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002bba:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002cec <_ZL12MX_ADC1_Initv+0x148>)
 8002bbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002bc0:	4b49      	ldr	r3, [pc, #292]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bc6:	4b48      	ldr	r3, [pc, #288]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bcc:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002bd2:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bd8:	4b43      	ldr	r3, [pc, #268]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bda:	2204      	movs	r2, #4
 8002bdc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002bde:	4b42      	ldr	r3, [pc, #264]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002be4:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8002bea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bec:	2204      	movs	r2, #4
 8002bee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c04:	4b38      	ldr	r3, [pc, #224]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c12:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002c14:	4b34      	ldr	r3, [pc, #208]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c1c:	4832      	ldr	r0, [pc, #200]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c1e:	f001 fd69 	bl	80046f4 <HAL_ADC_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <_ZL12MX_ADC1_Initv+0x92>
  {
    Error_Handler();
 8002c32:	f000 f9cb 	bl	8002fcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002c36:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf0 <_ZL12MX_ADC1_Initv+0x14c>)
 8002c38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c42:	237f      	movs	r3, #127	@ 0x7f
 8002c44:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c46:	2304      	movs	r3, #4
 8002c48:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	4619      	mov	r1, r3
 8002c52:	4825      	ldr	r0, [pc, #148]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c54:	f001 ff28 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <_ZL12MX_ADC1_Initv+0xc8>
  {
    Error_Handler();
 8002c68:	f000 f9b0 	bl	8002fcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002c6c:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <_ZL12MX_ADC1_Initv+0x150>)
 8002c6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c70:	230c      	movs	r3, #12
 8002c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	481b      	ldr	r0, [pc, #108]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002c7a:	f001 ff15 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <_ZL12MX_ADC1_Initv+0xee>
  {
    Error_Handler();
 8002c8e:	f000 f99d 	bl	8002fcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002c92:	4b19      	ldr	r3, [pc, #100]	@ (8002cf8 <_ZL12MX_ADC1_Initv+0x154>)
 8002c94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c96:	2312      	movs	r3, #18
 8002c98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4812      	ldr	r0, [pc, #72]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002ca0:	f001 ff02 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <_ZL12MX_ADC1_Initv+0x114>
  {
    Error_Handler();
 8002cb4:	f000 f98a 	bl	8002fcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <_ZL12MX_ADC1_Initv+0x158>)
 8002cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002cbc:	2318      	movs	r3, #24
 8002cbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4808      	ldr	r0, [pc, #32]	@ (8002ce8 <_ZL12MX_ADC1_Initv+0x144>)
 8002cc6:	f001 feef 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8002cda:	f000 f977 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200001f4 	.word	0x200001f4
 8002cec:	50040000 	.word	0x50040000
 8002cf0:	80000001 	.word	0x80000001
 8002cf4:	43210000 	.word	0x43210000
 8002cf8:	2e300800 	.word	0x2e300800
 8002cfc:	25b00200 	.word	0x25b00200

08002d00 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d1e:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d26:	4b23      	ldr	r3, [pc, #140]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8002d32:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d34:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002d38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d46:	481b      	ldr	r0, [pc, #108]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d48:	f004 fb88 	bl	800745c <HAL_TIM_Base_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002d5c:	f000 f936 	bl	8002fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d66:	f107 0310 	add.w	r3, r7, #16
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4811      	ldr	r0, [pc, #68]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d6e:	f004 fd23 	bl	80077b8 <HAL_TIM_ConfigClockSource>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8002d82:	f000 f923 	bl	8002fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4808      	ldr	r0, [pc, #32]	@ (8002db4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002d94:	f004 ff00 	bl	8007b98 <HAL_TIMEx_MasterConfigSynchronization>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002da8:	f000 f910 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dac:	bf00      	nop
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200002a0 	.word	0x200002a0

08002db8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dbe:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <_ZL19MX_USART2_UART_Initv+0x64>)
 8002dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dca:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dde:	220c      	movs	r2, #12
 8002de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df4:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dfa:	4807      	ldr	r0, [pc, #28]	@ (8002e18 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002dfc:	f004 ff50 	bl	8007ca0 <HAL_UART_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8002e10:	f000 f8dc 	bl	8002fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200002ec 	.word	0x200002ec
 8002e1c:	40004400 	.word	0x40004400

08002e20 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <_ZL11MX_DMA_Initv+0x58>)
 8002e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <_ZL11MX_DMA_Initv+0x58>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <_ZL11MX_DMA_Initv+0x58>)
 8002e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	200b      	movs	r0, #11
 8002e44:	f002 fcf3 	bl	800582e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e48:	200b      	movs	r0, #11
 8002e4a:	f002 fd0c 	bl	8005866 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	2010      	movs	r0, #16
 8002e54:	f002 fceb 	bl	800582e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002e58:	2010      	movs	r0, #16
 8002e5a:	f002 fd04 	bl	8005866 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	2011      	movs	r0, #17
 8002e64:	f002 fce3 	bl	800582e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002e68:	2011      	movs	r0, #17
 8002e6a:	f002 fcfc 	bl	8005866 <HAL_NVIC_EnableIRQ>

}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000

08002e7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	4a2a      	ldr	r2, [pc, #168]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e9e:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eaa:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	4a24      	ldr	r2, [pc, #144]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ece:	4b1c      	ldr	r3, [pc, #112]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	4a18      	ldr	r2, [pc, #96]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ee6:	4b16      	ldr	r3, [pc, #88]	@ (8002f40 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	21a0      	movs	r1, #160	@ 0xa0
 8002ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002efa:	f003 f8bf 	bl	800607c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	480b      	ldr	r0, [pc, #44]	@ (8002f44 <_ZL12MX_GPIO_Initv+0xc8>)
 8002f16:	f002 ff37 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_V1_Pin|SMPS_SW_Pin;
 8002f1a:	23a0      	movs	r3, #160	@ 0xa0
 8002f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f34:	f002 ff28 	bl	8005d88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f38:	bf00      	nop
 8002f3a:	3728      	adds	r7, #40	@ 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000
 8002f44:	48000800 	.word	0x48000800

08002f48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	usecs_elapsed += 10;
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330a      	adds	r3, #10
 8002f56:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f58:	6013      	str	r3, [r2, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000d64 	.word	0x20000d64

08002f6c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	switch (curPhone) {
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_ADC_ConvCpltCallback+0x58>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d819      	bhi.n	8002fb2 <HAL_ADC_ConvCpltCallback+0x46>
 8002f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <HAL_ADC_ConvCpltCallback+0x18>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002f9d 	.word	0x08002f9d
 8002f8c:	08002fa5 	.word	0x08002fa5
 8002f90:	08002fad 	.word	0x08002fad
	case INIT:
		curPhone = HYDROPHONE1;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_ADC_ConvCpltCallback+0x58>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
		break;
 8002f9a:	e00a      	b.n	8002fb2 <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE1:
		curPhone = HYDROPHONE2;
 8002f9c:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <HAL_ADC_ConvCpltCallback+0x58>)
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	701a      	strb	r2, [r3, #0]
		break;
 8002fa2:	e006      	b.n	8002fb2 <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE2:
		curPhone = HYDROPHONE3;
 8002fa4:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <HAL_ADC_ConvCpltCallback+0x58>)
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	701a      	strb	r2, [r3, #0]
		break;
 8002faa:	e002      	b.n	8002fb2 <HAL_ADC_ConvCpltCallback+0x46>
	case HYDROPHONE3:
		curPhone = HYDROPHONE1;
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_ADC_ConvCpltCallback+0x58>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
  }
  conversionComplete = 1;
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	20000d74 	.word	0x20000d74
 8002fc8:	20000d70 	.word	0x20000d70

08002fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd0:	b672      	cpsid	i
}
 8002fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <Error_Handler+0x8>

08002fd8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e00c      	b.n	8003002 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	fa22 f103 	lsr.w	r1, r2, r3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2ca      	uxtb	r2, r1
 8002ffa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d9ef      	bls.n	8002fe8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	e010      	b.n	800304e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	440a      	add	r2, r1
 8003036:	7812      	ldrb	r2, [r2, #0]
 8003038:	4611      	mov	r1, r2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	00d2      	lsls	r2, r2, #3
 800303e:	fa01 f202 	lsl.w	r2, r1, r2
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3301      	adds	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d9eb      	bls.n	800302c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3304      	adds	r3, #4
  }
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fdde 	bl	8001c48 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e01d      	b.n	8003100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d111      	bne.n	80030fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	60da      	str	r2, [r3, #12]
        return true;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e006      	b.n	8003108 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b18      	cmp	r3, #24
 8003104:	ddde      	ble.n	80030c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8003106:	2300      	movs	r3, #0
  }
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe fe93 	bl	8001e4c <_ZN13STM32Hardware4timeEv>
 8003126:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003136:	4293      	cmp	r3, r2
 8003138:	d903      	bls.n	8003142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	429a      	cmp	r2, r3
 8003156:	d903      	bls.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8003166:	2b00      	cmp	r3, #0
 8003168:	d014      	beq.n	8003194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fe6c 	bl	8001e4c <_ZN13STM32Hardware4timeEv>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad2      	subs	r2, r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8003180:	429a      	cmp	r2, r3
 8003182:	bf8c      	ite	hi
 8003184:	2301      	movhi	r3, #1
 8003186:	2300      	movls	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800318e:	f06f 0301 	mvn.w	r3, #1
 8003192:	e194      	b.n	80034be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fd71 	bl	8001c80 <_ZN13STM32Hardware4readEv>
 800319e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f2c0 8174 	blt.w	8003490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80031be:	2b07      	cmp	r3, #7
 80031c0:	d11e      	bne.n	8003200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	b2d1      	uxtb	r1, r2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	460a      	mov	r2, r1
 80031da:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1b4      	bne.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2208      	movs	r2, #8
 80031fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80031fe:	e7af      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003206:	2b00      	cmp	r3, #0
 8003208:	d128      	bne.n	800325c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2bff      	cmp	r3, #255	@ 0xff
 800320e:	d10d      	bne.n	800322c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f103 0214 	add.w	r2, r3, #20
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 800322a:	e799      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe fe0b 	bl	8001e4c <_ZN13STM32Hardware4timeEv>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	bf8c      	ite	hi
 8003244:	2301      	movhi	r3, #1
 8003246:	2300      	movls	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d088      	beq.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8003256:	f06f 0301 	mvn.w	r3, #1
 800325a:	e130      	b.n	80034be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003262:	2b01      	cmp	r3, #1
 8003264:	d118      	bne.n	8003298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2bfe      	cmp	r3, #254	@ 0xfe
 800326a:	d107      	bne.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800327a:	e771      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f af68 	bne.w	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f918 	bl	80034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003296:	e763      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d113      	bne.n	80032ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80032c8:	e74a      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d110      	bne.n	80032f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	441a      	add	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80032f4:	e734      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d116      	bne.n	800332e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8003306:	425a      	negs	r2, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	bf58      	it	pl
 800330e:	4253      	negpl	r3, r2
 8003310:	2bff      	cmp	r3, #255	@ 0xff
 8003312:	d107      	bne.n	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003322:	e71d      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800332c:	e718      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10f      	bne.n	8003358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8003356:	e703      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800335e:	2b06      	cmp	r3, #6
 8003360:	d117      	bne.n	8003392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2207      	movs	r2, #7
 8003378:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8003382:	2b00      	cmp	r3, #0
 8003384:	f47f aeec 	bne.w	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2208      	movs	r2, #8
 800338c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003390:	e6e6      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003398:	2b08      	cmp	r3, #8
 800339a:	f47f aee1 	bne.w	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80033ac:	425a      	negs	r2, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	bf58      	it	pl
 80033b4:	4253      	negpl	r3, r2
 80033b6:	2bff      	cmp	r3, #255	@ 0xff
 80033b8:	f47f aed2 	bne.w	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d110      	bne.n	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f87d 	bl	80034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f898 	bl	8003502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033e6:	e06a      	b.n	80034be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80033ee:	2b0a      	cmp	r3, #10
 80033f0:	d107      	bne.n	8003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f960 	bl	80036c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003400:	e6ae      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003408:	2b06      	cmp	r3, #6
 800340a:	d10e      	bne.n	800342a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f7fe fa21 	bl	8001862 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8003428:	e69a      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003430:	2b0b      	cmp	r3, #11
 8003432:	d104      	bne.n	800343e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 800343c:	e690      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003444:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800344e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f43f ae84 	beq.w	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800345e:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003468:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003472:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 800348a:	4611      	mov	r1, r2
 800348c:	4798      	blx	r3
    while (true)
 800348e:	e667      	b.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003490:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00f      	beq.n	80034bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d906      	bls.n	80034bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f809 	bl	80034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 80034bc:	2300      	movs	r3, #0
  }
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fd22 	bl	8000f1c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f107 020c 	add.w	r2, r7, #12
 80034e2:	210a      	movs	r1, #10
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
    rt_time = hardware_.time();
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fcad 	bl	8001e4c <_ZN13STM32Hardware4timeEv>
 80034f2:	4602      	mov	r2, r0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003502:	b590      	push	{r4, r7, lr}
 8003504:	b08b      	sub	sp, #44	@ 0x2c
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd fdf4 	bl	80010fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
 8003518:	e062      	b.n	80035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d056      	beq.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	b29b      	uxth	r3, r3
 800353e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3308      	adds	r3, #8
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4608      	mov	r0, r1
 800357a:	4798      	blx	r3
 800357c:	4603      	mov	r3, r0
 800357e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4608      	mov	r0, r1
 80035a8:	4798      	blx	r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80035ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035b2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681c      	ldr	r4, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fb02 	bl	8001bd2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80035ce:	4601      	mov	r1, r0
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	461a      	mov	r2, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	3301      	adds	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	2b18      	cmp	r3, #24
 80035e4:	dd99      	ble.n	800351a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ea:	e05e      	b.n	80036aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80035f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d053      	beq.n	80036a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003600:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	b29b      	uxth	r3, r3
 800360c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003612:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003622:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003626:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4608      	mov	r0, r1
 800363e:	4798      	blx	r3
 8003640:	4603      	mov	r3, r0
 8003642:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800364c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003654:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4608      	mov	r0, r1
 8003664:	4798      	blx	r3
 8003666:	4603      	mov	r3, r0
 8003668:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800366a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800366e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681c      	ldr	r4, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800367e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003686:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3304      	adds	r3, #4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4608      	mov	r0, r1
 8003696:	4798      	blx	r3
 8003698:	4601      	mov	r1, r0
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	461a      	mov	r2, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	3301      	adds	r3, #1
 80036a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	2b18      	cmp	r3, #24
 80036ae:	dd9d      	ble.n	80035ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 80036b8:	bf00      	nop
 80036ba:	372c      	adds	r7, #44	@ 0x2c
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fc24 	bl	8000f1c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fbb7 	bl	8001e4c <_ZN13STM32Hardware4timeEv>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80036ea:	f107 0308 	add.w	r3, r7, #8
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fc83 	bl	8000ffc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	4915      	ldr	r1, [pc, #84]	@ (8003750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80036fc:	fba1 1303 	umull	r1, r3, r1, r3
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003706:	6939      	ldr	r1, [r7, #16]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800370c:	fba3 0302 	umull	r0, r3, r3, r2
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	440b      	add	r3, r1
 8003724:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	3304      	adds	r3, #4
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8a6 	bl	8003880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe fb87 	bl	8001e4c <_ZN13STM32Hardware4timeEv>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	10624dd3 	.word	0x10624dd3
 8003754:	000f4240 	.word	0x000f4240

08003758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b63      	cmp	r3, #99	@ 0x63
 8003768:	dd09      	ble.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003770:	f083 0301 	eor.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800377a:	2300      	movs	r3, #0
 800377c:	e079      	b.n	8003872 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 800378a:	3207      	adds	r2, #7
 800378c:	4611      	mov	r1, r2
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	22ff      	movs	r2, #255	@ 0xff
 8003798:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	22fe      	movs	r2, #254	@ 0xfe
 80037a0:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 80037ca:	4413      	add	r3, r2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	121b      	asrs	r3, r3, #8
 80037e8:	b21b      	sxth	r3, r3
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80037f6:	2305      	movs	r3, #5
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e00c      	b.n	8003816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4413      	add	r3, r2
 8003802:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	3301      	adds	r3, #1
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	3306      	adds	r3, #6
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	429a      	cmp	r2, r3
 800381e:	dded      	ble.n	80037fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3307      	adds	r3, #7
 8003824:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	425a      	negs	r2, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	bf58      	it	pl
 8003830:	4253      	negpl	r3, r2
 8003832:	b2da      	uxtb	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	6179      	str	r1, [r7, #20]
 800383a:	43d2      	mvns	r2, r2
 800383c:	b2d1      	uxtb	r1, r2
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	460a      	mov	r2, r1
 8003844:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800384e:	dc0a      	bgt.n	8003866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1d18      	adds	r0, r3, #4
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4619      	mov	r1, r3
 800385e:	f7fe faaf 	bl	8001dc0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	e005      	b.n	8003872 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003866:	4905      	ldr	r1, [pc, #20]	@ (800387c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f849 	bl	8003900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	0800d528 	.word	0x0800d528

08003880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fadc 	bl	8001e4c <_ZN13STM32Hardware4timeEv>
 8003894:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4915      	ldr	r1, [pc, #84]	@ (80038f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800389e:	fba1 1303 	umull	r1, r3, r1, r3
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	1e5a      	subs	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80038b6:	fba3 0302 	umull	r0, r3, r3, r2
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038c0:	fb00 f303 	mul.w	r3, r0, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	4a0c      	ldr	r2, [pc, #48]	@ (80038f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	1aca      	subs	r2, r1, r3
 80038ce:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80038d0:	4413      	add	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 fc44 	bl	8004174 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	10624dd3 	.word	0x10624dd3
 80038f8:	000f4240 	.word	0x000f4240
 80038fc:	3b9aca00 	.word	0x3b9aca00

08003900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	2103      	movs	r1, #3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f804 	bl	800391c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	460b      	mov	r3, r1
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fda8 	bl	8001484 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003934:	7afb      	ldrb	r3, [r7, #11]
 8003936:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f107 0214 	add.w	r2, r7, #20
 8003946:	2107      	movs	r1, #7
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	4798      	blx	r3
  }
 800394c:	bf00      	nop
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d110      	bne.n	8003986 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800396a:	4293      	cmp	r3, r2
 800396c:	d10b      	bne.n	8003986 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 800396e:	4808      	ldr	r0, [pc, #32]	@ (8003990 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003970:	f7fe fb8e 	bl	8002090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
auv_msgs::HydrophonePayload hmsg;
 8003974:	4807      	ldr	r0, [pc, #28]	@ (8003994 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003976:	f7fe fa75 	bl	8001e64 <_ZN8auv_msgs17HydrophonePayloadC1Ev>
ros::Publisher hpub1("hydrophones", &hmsg);
 800397a:	2300      	movs	r3, #0
 800397c:	4a05      	ldr	r2, [pc, #20]	@ (8003994 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800397e:	4906      	ldr	r1, [pc, #24]	@ (8003998 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003980:	4806      	ldr	r0, [pc, #24]	@ (800399c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003982:	f7fe f8fb 	bl	8001b7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000404 	.word	0x20000404
 8003994:	20000d40 	.word	0x20000d40
 8003998:	0800d564 	.word	0x0800d564
 800399c:	20000d50 	.word	0x20000d50

080039a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    return configured_;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_GLOBAL__sub_I_hadc1>:
 80039ba:	b580      	push	{r7, lr}
 80039bc:	af00      	add	r7, sp, #0
 80039be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7ff ffc6 	bl	8003954 <_Z41__static_initialization_and_destruction_0ii>
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <get_frequency>:
    return freq[target_bin] / sum;
}


uint32_t get_frequency(float32_t* buff, uint32_t size, float32_t fs)
{
 80039cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d0:	b095      	sub	sp, #84	@ 0x54
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6178      	str	r0, [r7, #20]
 80039d6:	6139      	str	r1, [r7, #16]
 80039d8:	ed87 0a03 	vstr	s0, [r7, #12]
 80039dc:	466b      	mov	r3, sp
 80039de:	60bb      	str	r3, [r7, #8]
    uint32_t target_frequencies[] = {25000, 30000, 35000, 40000};
 80039e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b94 <get_frequency+0x1c8>)
 80039e2:	f107 061c 	add.w	r6, r7, #28
 80039e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    float32_t temp_buff[size];
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	460b      	mov	r3, r1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039f4:	2300      	movs	r3, #0
 80039f6:	6039      	str	r1, [r7, #0]
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	0143      	lsls	r3, r0, #5
 8003a06:	6838      	ldr	r0, [r7, #0]
 8003a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a0c:	6838      	ldr	r0, [r7, #0]
 8003a0e:	0142      	lsls	r2, r0, #5
 8003a10:	2300      	movs	r3, #0
 8003a12:	468a      	mov	sl, r1
 8003a14:	469b      	mov	fp, r3
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8003a22:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003a26:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003a2a:	008b      	lsls	r3, r1, #2
 8003a2c:	3307      	adds	r3, #7
 8003a2e:	08db      	lsrs	r3, r3, #3
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	ebad 0d03 	sub.w	sp, sp, r3
 8003a36:	466b      	mov	r3, sp
 8003a38:	3303      	adds	r3, #3
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (int i = 0; i < size; i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a44:	e00c      	b.n	8003a60 <get_frequency+0x94>
    {
        temp_buff[i] = buff[i];
 8003a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d8ee      	bhi.n	8003a46 <get_frequency+0x7a>
    }

    arm_cfft_f32(&instance, temp_buff, 0, 0);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a6e:	484a      	ldr	r0, [pc, #296]	@ (8003b98 <get_frequency+0x1cc>)
 8003a70:	f005 ff36 	bl	80098e0 <arm_cfft_f32>

    float32_t freq[size / 2];
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	0859      	lsrs	r1, r3, #1
 8003a78:	460b      	mov	r3, r1
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4688      	mov	r8, r1
 8003a82:	4699      	mov	r9, r3
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003a90:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003a94:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003a98:	2300      	movs	r3, #0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	016b      	lsls	r3, r5, #5
 8003aa8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003aac:	0162      	lsls	r2, r4, #5
 8003aae:	008b      	lsls	r3, r1, #2
 8003ab0:	3307      	adds	r3, #7
 8003ab2:	08db      	lsrs	r3, r3, #3
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	ebad 0d03 	sub.w	sp, sp, r3
 8003aba:	466b      	mov	r3, sp
 8003abc:	3303      	adds	r3, #3
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	633b      	str	r3, [r7, #48]	@ 0x30
    arm_cmplx_mag_f32(temp_buff, freq, size / 2);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003acc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003ace:	f005 ff9f 	bl	8009a10 <arm_cmplx_mag_f32>

    uint32_t max = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t frequency = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t target_bin = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (int i = 0; i < 4; i++) {
 8003ade:	2300      	movs	r3, #0
 8003ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ae2:	e04b      	b.n	8003b7c <get_frequency+0x1b0>
        target_bin = (uint32_t) round(target_frequencies[i] * size / fs);
 8003ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3348      	adds	r3, #72	@ 0x48
 8003aea:	f107 0208 	add.w	r2, r7, #8
 8003aee:	4413      	add	r3, r2
 8003af0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b0a:	ee16 0a90 	vmov	r0, s13
 8003b0e:	f7fc fd1b 	bl	8000548 <__aeabi_f2d>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	ec43 2b10 	vmov	d0, r2, r3
 8003b1a:	f006 fbe1 	bl	800a2e0 <round>
 8003b1e:	ec53 2b10 	vmov	r2, r3, d0
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	f7fd f83f 	bl	8000ba8 <__aeabi_d2uiz>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (freq[target_bin] > max) {
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	dd13      	ble.n	8003b76 <get_frequency+0x1aa>
        	frequency = target_frequencies[i];
 8003b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3348      	adds	r3, #72	@ 0x48
 8003b54:	f107 0208 	add.w	r2, r7, #8
 8003b58:	4413      	add	r3, r2
 8003b5a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003b5e:	647b      	str	r3, [r7, #68]	@ 0x44
        	max = freq[target_bin];
 8003b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b70:	ee17 3a90 	vmov	r3, s15
 8003b74:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < 4; i++) {
 8003b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b78:	3301      	adds	r3, #1
 8003b7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	ddb0      	ble.n	8003ae4 <get_frequency+0x118>
        }
    }

    return frequency;
 8003b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b84:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3754      	adds	r7, #84	@ 0x54
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b92:	bf00      	nop
 8003b94:	0800d570 	.word	0x0800d570
 8003b98:	0800d65c 	.word	0x0800d65c

08003b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <HAL_MspInit+0x44>)
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8003be0 <HAL_MspInit+0x44>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bae:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <HAL_MspInit+0x44>)
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_MspInit+0x44>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbe:	4a08      	ldr	r2, [pc, #32]	@ (8003be0 <HAL_MspInit+0x44>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_MspInit+0x44>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b0a2      	sub	sp, #136	@ 0x88
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	2260      	movs	r2, #96	@ 0x60
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f007 fcba 	bl	800b57e <memset>
  if(hadc->Instance==ADC1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a47      	ldr	r2, [pc, #284]	@ (8003d2c <HAL_ADC_MspInit+0x148>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	f040 8087 	bne.w	8003d24 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003c16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003c1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003c20:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003c22:	2302      	movs	r3, #2
 8003c24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003c2e:	2307      	movs	r3, #7
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003c32:	2302      	movs	r3, #2
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003c36:	2302      	movs	r3, #2
 8003c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003c3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 f8cd 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003c50:	f7ff f9bc 	bl	8002fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003c54:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c58:	4a35      	ldr	r2, [pc, #212]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c60:	4b33      	ldr	r3, [pc, #204]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6c:	4b30      	ldr	r3, [pc, #192]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c70:	4a2f      	ldr	r2, [pc, #188]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c78:	4b2d      	ldr	r3, [pc, #180]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c84:	4b2a      	ldr	r3, [pc, #168]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c88:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c90:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <HAL_ADC_MspInit+0x14c>)
 8003c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA6     ------> ADC1_IN11
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003c9c:	2350      	movs	r3, #80	@ 0x50
 8003c9e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ca0:	230b      	movs	r3, #11
 8003ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003cac:	4619      	mov	r1, r3
 8003cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cb2:	f002 f869 	bl	8005d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003cba:	230b      	movs	r3, #11
 8003cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	481a      	ldr	r0, [pc, #104]	@ (8003d34 <HAL_ADC_MspInit+0x150>)
 8003cca:	f002 f85d 	bl	8005d88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <HAL_ADC_MspInit+0x158>)
 8003cd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cda:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ce6:	4b14      	ldr	r3, [pc, #80]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003ce8:	2280      	movs	r2, #128	@ 0x80
 8003cea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cec:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d02:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d08:	480b      	ldr	r0, [pc, #44]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003d0a:	f001 fdc7 	bl	800589c <HAL_DMA_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8003d14:	f7ff f95a 	bl	8002fcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a07      	ldr	r2, [pc, #28]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003d1e:	4a06      	ldr	r2, [pc, #24]	@ (8003d38 <HAL_ADC_MspInit+0x154>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d24:	bf00      	nop
 8003d26:	3788      	adds	r7, #136	@ 0x88
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	50040000 	.word	0x50040000
 8003d30:	40021000 	.word	0x40021000
 8003d34:	48000400 	.word	0x48000400
 8003d38:	20000258 	.word	0x20000258
 8003d3c:	40020008 	.word	0x40020008

08003d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d50:	d113      	bne.n	8003d7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d52:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <HAL_TIM_Base_MspInit+0x44>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	4a0b      	ldr	r2, [pc, #44]	@ (8003d84 <HAL_TIM_Base_MspInit+0x44>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5e:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <HAL_TIM_Base_MspInit+0x44>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	201c      	movs	r0, #28
 8003d70:	f001 fd5d 	bl	800582e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d74:	201c      	movs	r0, #28
 8003d76:	f001 fd76 	bl	8005866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000

08003d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0a2      	sub	sp, #136	@ 0x88
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	2260      	movs	r2, #96	@ 0x60
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f007 fbe8 	bl	800b57e <memset>
  if(huart->Instance==USART2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4d      	ldr	r2, [pc, #308]	@ (8003ee8 <HAL_UART_MspInit+0x160>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	f040 8093 	bne.w	8003ee0 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 f80c 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003dd2:	f7ff f8fb 	bl	8002fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003dd6:	4b45      	ldr	r3, [pc, #276]	@ (8003eec <HAL_UART_MspInit+0x164>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	4a44      	ldr	r2, [pc, #272]	@ (8003eec <HAL_UART_MspInit+0x164>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de2:	4b42      	ldr	r3, [pc, #264]	@ (8003eec <HAL_UART_MspInit+0x164>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dee:	4b3f      	ldr	r3, [pc, #252]	@ (8003eec <HAL_UART_MspInit+0x164>)
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	4a3e      	ldr	r2, [pc, #248]	@ (8003eec <HAL_UART_MspInit+0x164>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8003eec <HAL_UART_MspInit+0x164>)
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e06:	230c      	movs	r3, #12
 8003e08:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e18:	2307      	movs	r3, #7
 8003e1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003e22:	4619      	mov	r1, r3
 8003e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e28:	f001 ffae 	bl	8005d88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003e2c:	4b30      	ldr	r3, [pc, #192]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e2e:	4a31      	ldr	r2, [pc, #196]	@ (8003ef4 <HAL_UART_MspInit+0x16c>)
 8003e30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003e32:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e34:	2202      	movs	r2, #2
 8003e36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e38:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e46:	2280      	movs	r2, #128	@ 0x80
 8003e48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e50:	4b27      	ldr	r3, [pc, #156]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e56:	4b26      	ldr	r3, [pc, #152]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e62:	4823      	ldr	r0, [pc, #140]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e64:	f001 fd1a 	bl	800589c <HAL_DMA_Init>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8003e6e:	f7ff f8ad 	bl	8002fcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e76:	675a      	str	r2, [r3, #116]	@ 0x74
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_UART_MspInit+0x168>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003e80:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <HAL_UART_MspInit+0x174>)
 8003e82:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003e84:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003e86:	2202      	movs	r2, #2
 8003e88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e90:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003e98:	2280      	movs	r2, #128	@ 0x80
 8003e9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e9c:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea2:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003ea8:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003eae:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003eb4:	4810      	ldr	r0, [pc, #64]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003eb6:	f001 fcf1 	bl	800589c <HAL_DMA_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8003ec0:	f7ff f884 	bl	8002fcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003ec8:	671a      	str	r2, [r3, #112]	@ 0x70
 8003eca:	4a0b      	ldr	r2, [pc, #44]	@ (8003ef8 <HAL_UART_MspInit+0x170>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	2026      	movs	r0, #38	@ 0x26
 8003ed6:	f001 fcaa 	bl	800582e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003eda:	2026      	movs	r0, #38	@ 0x26
 8003edc:	f001 fcc3 	bl	8005866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ee0:	bf00      	nop
 8003ee2:	3788      	adds	r7, #136	@ 0x88
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40004400 	.word	0x40004400
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	20000374 	.word	0x20000374
 8003ef4:	4002006c 	.word	0x4002006c
 8003ef8:	200003bc 	.word	0x200003bc
 8003efc:	40020080 	.word	0x40020080

08003f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <NMI_Handler+0x4>

08003f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <HardFault_Handler+0x4>

08003f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <MemManage_Handler+0x4>

08003f18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f1c:	bf00      	nop
 8003f1e:	e7fd      	b.n	8003f1c <BusFault_Handler+0x4>

08003f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <UsageFault_Handler+0x4>

08003f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f56:	f000 f9bf 	bl	80042d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f64:	4802      	ldr	r0, [pc, #8]	@ (8003f70 <DMA1_Channel1_IRQHandler+0x10>)
 8003f66:	f001 fe30 	bl	8005bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000258 	.word	0x20000258

08003f74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f78:	4802      	ldr	r0, [pc, #8]	@ (8003f84 <DMA1_Channel6_IRQHandler+0x10>)
 8003f7a:	f001 fe26 	bl	8005bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000374 	.word	0x20000374

08003f88 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003f8c:	4802      	ldr	r0, [pc, #8]	@ (8003f98 <DMA1_Channel7_IRQHandler+0x10>)
 8003f8e:	f001 fe1c 	bl	8005bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200003bc 	.word	0x200003bc

08003f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fa0:	4802      	ldr	r0, [pc, #8]	@ (8003fac <TIM2_IRQHandler+0x10>)
 8003fa2:	f003 fb07 	bl	80075b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200002a0 	.word	0x200002a0

08003fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fb4:	4802      	ldr	r0, [pc, #8]	@ (8003fc0 <USART2_IRQHandler+0x10>)
 8003fb6:	f003 ff89 	bl	8007ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200002ec 	.word	0x200002ec

08003fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return 1;
 8003fc8:	2301      	movs	r3, #1
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_kill>:

int _kill(int pid, int sig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fde:	f007 fb21 	bl	800b624 <__errno>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2216      	movs	r2, #22
 8003fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_exit>:

void _exit (int status)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ffc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ffe7 	bl	8003fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <_exit+0x12>

0800400a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e00a      	b.n	8004032 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800401c:	f3af 8000 	nop.w
 8004020:	4601      	mov	r1, r0
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	60ba      	str	r2, [r7, #8]
 8004028:	b2ca      	uxtb	r2, r1
 800402a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3301      	adds	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	429a      	cmp	r2, r3
 8004038:	dbf0      	blt.n	800401c <_read+0x12>
  }

  return len;
 800403a:	687b      	ldr	r3, [r7, #4]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e009      	b.n	800406a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	60ba      	str	r2, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	dbf1      	blt.n	8004056 <_write+0x12>
  }
  return len;
 8004072:	687b      	ldr	r3, [r7, #4]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <_close>:

int _close(int file)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040a4:	605a      	str	r2, [r3, #4]
  return 0;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_isatty>:

int _isatty(int file)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040bc:	2301      	movs	r3, #1
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040ec:	4a14      	ldr	r2, [pc, #80]	@ (8004140 <_sbrk+0x5c>)
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <_sbrk+0x60>)
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f8:	4b13      	ldr	r3, [pc, #76]	@ (8004148 <_sbrk+0x64>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004100:	4b11      	ldr	r3, [pc, #68]	@ (8004148 <_sbrk+0x64>)
 8004102:	4a12      	ldr	r2, [pc, #72]	@ (800414c <_sbrk+0x68>)
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004106:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <_sbrk+0x64>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	429a      	cmp	r2, r3
 8004112:	d207      	bcs.n	8004124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004114:	f007 fa86 	bl	800b624 <__errno>
 8004118:	4603      	mov	r3, r0
 800411a:	220c      	movs	r2, #12
 800411c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800411e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004122:	e009      	b.n	8004138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004124:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <_sbrk+0x64>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800412a:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <_sbrk+0x64>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	4a05      	ldr	r2, [pc, #20]	@ (8004148 <_sbrk+0x64>)
 8004134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20010000 	.word	0x20010000
 8004144:	00000400 	.word	0x00000400
 8004148:	20000d78 	.word	0x20000d78
 800414c:	20000ed0 	.word	0x20000ed0

08004150 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004154:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <SystemInit+0x20>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	4a05      	ldr	r2, [pc, #20]	@ (8004170 <SystemInit+0x20>)
 800415c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	0a5a      	lsrs	r2, r3, #9
 8004184:	490f      	ldr	r1, [pc, #60]	@ (80041c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004186:	fba1 1202 	umull	r1, r2, r1, r2
 800418a:	09d2      	lsrs	r2, r2, #7
 800418c:	490e      	ldr	r1, [pc, #56]	@ (80041c8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800418e:	fb01 f202 	mul.w	r2, r1, r2
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	0a5b      	lsrs	r3, r3, #9
 800419c:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	09db      	lsrs	r3, r3, #7
 80041a4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	441a      	add	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	00044b83 	.word	0x00044b83
 80041c8:	3b9aca00 	.word	0x3b9aca00

080041cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80041cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004204 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80041d0:	f7ff ffbe 	bl	8004150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041d4:	480c      	ldr	r0, [pc, #48]	@ (8004208 <LoopForever+0x6>)
  ldr r1, =_edata
 80041d6:	490d      	ldr	r1, [pc, #52]	@ (800420c <LoopForever+0xa>)
  ldr r2, =_sidata
 80041d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004210 <LoopForever+0xe>)
  movs r3, #0
 80041da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041dc:	e002      	b.n	80041e4 <LoopCopyDataInit>

080041de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041e2:	3304      	adds	r3, #4

080041e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041e8:	d3f9      	bcc.n	80041de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004218 <LoopForever+0x16>)
  movs r3, #0
 80041ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041f0:	e001      	b.n	80041f6 <LoopFillZerobss>

080041f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041f4:	3204      	adds	r2, #4

080041f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041f8:	d3fb      	bcc.n	80041f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041fa:	f007 fa19 	bl	800b630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041fe:	f7fd ffe3 	bl	80021c8 <main>

08004202 <LoopForever>:

LoopForever:
    b LoopForever
 8004202:	e7fe      	b.n	8004202 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004204:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800420c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004210:	0800edd4 	.word	0x0800edd4
  ldr r2, =_sbss
 8004214:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004218:	20000ecc 	.word	0x20000ecc

0800421c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800421c:	e7fe      	b.n	800421c <ADC1_IRQHandler>
	...

08004220 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800422a:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <HAL_Init+0x3c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a0b      	ldr	r2, [pc, #44]	@ (800425c <HAL_Init+0x3c>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004234:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004236:	2003      	movs	r0, #3
 8004238:	f001 faee 	bl	8005818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800423c:	2000      	movs	r0, #0
 800423e:	f000 f80f 	bl	8004260 <HAL_InitTick>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	71fb      	strb	r3, [r7, #7]
 800424c:	e001      	b.n	8004252 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800424e:	f7ff fca5 	bl	8003b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004252:	79fb      	ldrb	r3, [r7, #7]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40022000 	.word	0x40022000

08004260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800426c:	4b17      	ldr	r3, [pc, #92]	@ (80042cc <HAL_InitTick+0x6c>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004274:	4b16      	ldr	r3, [pc, #88]	@ (80042d0 <HAL_InitTick+0x70>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <HAL_InitTick+0x6c>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	4619      	mov	r1, r3
 800427e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004282:	fbb3 f3f1 	udiv	r3, r3, r1
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	4618      	mov	r0, r3
 800428c:	f001 faf9 	bl	8005882 <HAL_SYSTICK_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b0f      	cmp	r3, #15
 800429a:	d809      	bhi.n	80042b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800429c:	2200      	movs	r2, #0
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042a4:	f001 fac3 	bl	800582e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042a8:	4a0a      	ldr	r2, [pc, #40]	@ (80042d4 <HAL_InitTick+0x74>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e007      	b.n	80042c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e004      	b.n	80042c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e001      	b.n	80042c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000008 	.word	0x20000008
 80042d0:	20000000 	.word	0x20000000
 80042d4:	20000004 	.word	0x20000004

080042d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <HAL_IncTick+0x20>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_IncTick+0x24>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4413      	add	r3, r2
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <HAL_IncTick+0x24>)
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000008 	.word	0x20000008
 80042fc:	20000d7c 	.word	0x20000d7c

08004300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return uwTick;
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <HAL_GetTick+0x14>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000d7c 	.word	0x20000d7c

08004318 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3360      	adds	r3, #96	@ 0x60
 8004392:	461a      	mov	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <LL_ADC_SetOffset+0x44>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80043b8:	bf00      	nop
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	03fff000 	.word	0x03fff000

080043c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3360      	adds	r3, #96	@ 0x60
 80043d6:	461a      	mov	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3360      	adds	r3, #96	@ 0x60
 8004404:	461a      	mov	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	431a      	orrs	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3330      	adds	r3, #48	@ 0x30
 8004460:	461a      	mov	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	4413      	add	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	211f      	movs	r1, #31
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0e9b      	lsrs	r3, r3, #26
 8004488:	f003 011f 	and.w	r1, r3, #31
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	431a      	orrs	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3314      	adds	r3, #20
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	0e5b      	lsrs	r3, r3, #25
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	4413      	add	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	0d1b      	lsrs	r3, r3, #20
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2107      	movs	r1, #7
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	401a      	ands	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0d1b      	lsrs	r3, r3, #20
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004518:	43db      	mvns	r3, r3
 800451a:	401a      	ands	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0318 	and.w	r3, r3, #24
 8004522:	4908      	ldr	r1, [pc, #32]	@ (8004544 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004524:	40d9      	lsrs	r1, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	400b      	ands	r3, r1
 800452a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452e:	431a      	orrs	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	0007ffff 	.word	0x0007ffff

08004548 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004558:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6093      	str	r3, [r2, #8]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004580:	d101      	bne.n	8004586 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80045a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d0:	d101      	bne.n	80045d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800461c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004620:	f043 0202 	orr.w	r2, r3, #2
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <LL_ADC_IsEnabled+0x18>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <LL_ADC_IsEnabled+0x1a>
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d101      	bne.n	8004672 <LL_ADC_IsDisableOngoing+0x18>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <LL_ADC_IsDisableOngoing+0x1a>
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004690:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004694:	f043 0204 	orr.w	r2, r3, #4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d101      	bne.n	80046c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d101      	bne.n	80046e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e126      	b.n	800495c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff fa61 	bl	8003be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff19 	bl	800456c <LL_ADC_IsDeepPowerDownEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff feff 	bl	8004548 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff ff34 	bl	80045bc <LL_ADC_IsInternalRegulatorEnabled>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d115      	bne.n	8004786 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff ff18 	bl	8004594 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004764:	4b7f      	ldr	r3, [pc, #508]	@ (8004964 <HAL_ADC_Init+0x270>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	4a7f      	ldr	r2, [pc, #508]	@ (8004968 <HAL_ADC_Init+0x274>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	099b      	lsrs	r3, r3, #6
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004778:	e002      	b.n	8004780 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3b01      	subs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f9      	bne.n	800477a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff16 	bl	80045bc <LL_ADC_IsInternalRegulatorEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	f043 0210 	orr.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	f043 0201 	orr.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ff76 	bl	80046a8 <LL_ADC_REG_IsConversionOngoing>
 80047bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80bf 	bne.w	800494a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 80bb 	bne.w	800494a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80047dc:	f043 0202 	orr.w	r2, r3, #2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff23 	bl	8004634 <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047f4:	485d      	ldr	r0, [pc, #372]	@ (800496c <HAL_ADC_Init+0x278>)
 80047f6:	f7ff ff1d 	bl	8004634 <LL_ADC_IsEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4619      	mov	r1, r3
 8004806:	485a      	ldr	r0, [pc, #360]	@ (8004970 <HAL_ADC_Init+0x27c>)
 8004808:	f7ff fd86 	bl	8004318 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7e5b      	ldrb	r3, [r3, #25]
 8004810:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004816:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800481c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004822:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800482a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d106      	bne.n	8004848 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	3b01      	subs	r3, #1
 8004840:	045b      	lsls	r3, r3, #17
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	4b42      	ldr	r3, [pc, #264]	@ (8004974 <HAL_ADC_Init+0x280>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	430b      	orrs	r3, r1
 8004876:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff26 	bl	80046ce <LL_ADC_INJ_IsConversionOngoing>
 8004882:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d13d      	bne.n	8004906 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d13a      	bne.n	8004906 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004894:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800489c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ac:	f023 0302 	bic.w	r3, r3, #2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	430b      	orrs	r3, r1
 80048b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d118      	bne.n	80048f6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80048ce:	f023 0304 	bic.w	r3, r3, #4
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048da:	4311      	orrs	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80048e0:	4311      	orrs	r1, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048e6:	430a      	orrs	r2, r1
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	611a      	str	r2, [r3, #16]
 80048f4:	e007      	b.n	8004906 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d10c      	bne.n	8004928 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	f023 010f 	bic.w	r1, r3, #15
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	1e5a      	subs	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	631a      	str	r2, [r3, #48]	@ 0x30
 8004926:	e007      	b.n	8004938 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 020f 	bic.w	r2, r2, #15
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493c:	f023 0303 	bic.w	r3, r3, #3
 8004940:	f043 0201 	orr.w	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	655a      	str	r2, [r3, #84]	@ 0x54
 8004948:	e007      	b.n	800495a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	f043 0210 	orr.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800495a:	7ffb      	ldrb	r3, [r7, #31]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000000 	.word	0x20000000
 8004968:	053e2d63 	.word	0x053e2d63
 800496c:	50040000 	.word	0x50040000
 8004970:	50040300 	.word	0x50040300
 8004974:	fff0c007 	.word	0xfff0c007

08004978 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fe8d 	bl	80046a8 <LL_ADC_REG_IsConversionOngoing>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d167      	bne.n	8004a64 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_ADC_Start_DMA+0x2a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e063      	b.n	8004a6a <HAL_ADC_Start_DMA+0xf2>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fc5e 	bl	800526c <ADC_Enable>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d14f      	bne.n	8004a5a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d006      	beq.n	80049e8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049de:	f023 0206 	bic.w	r2, r3, #6
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80049e6:	e002      	b.n	80049ee <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f2:	4a20      	ldr	r2, [pc, #128]	@ (8004a74 <HAL_ADC_Start_DMA+0xfc>)
 80049f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004a78 <HAL_ADC_Start_DMA+0x100>)
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	4a1e      	ldr	r2, [pc, #120]	@ (8004a7c <HAL_ADC_Start_DMA+0x104>)
 8004a04:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	221c      	movs	r2, #28
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0210 	orr.w	r2, r2, #16
 8004a24:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3340      	adds	r3, #64	@ 0x40
 8004a40:	4619      	mov	r1, r3
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f000 ffe1 	bl	8005a0c <HAL_DMA_Start_IT>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fe14 	bl	8004680 <LL_ADC_REG_StartConversion>
 8004a58:	e006      	b.n	8004a68 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004a62:	e001      	b.n	8004a68 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a64:	2302      	movs	r3, #2
 8004a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	08005437 	.word	0x08005437
 8004a78:	0800550f 	.word	0x0800550f
 8004a7c:	0800552b 	.word	0x0800552b

08004a80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b0b6      	sub	sp, #216	@ 0xd8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x22>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e3bb      	b.n	8005242 <HAL_ADC_ConfigChannel+0x79a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fde6 	bl	80046a8 <LL_ADC_REG_IsConversionOngoing>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 83a0 	bne.w	8005224 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d824      	bhi.n	8004b3e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	3b02      	subs	r3, #2
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d81b      	bhi.n	8004b36 <HAL_ADC_ConfigChannel+0x8e>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <HAL_ADC_ConfigChannel+0x5c>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b1d 	.word	0x08004b1d
 8004b0c:	08004b25 	.word	0x08004b25
 8004b10:	08004b2d 	.word	0x08004b2d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004b14:	230c      	movs	r3, #12
 8004b16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004b1a:	e010      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004b1c:	2312      	movs	r3, #18
 8004b1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004b22:	e00c      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004b24:	2318      	movs	r3, #24
 8004b26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004b2a:	e008      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004b34:	e003      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004b36:	2306      	movs	r3, #6
 8004b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004b3c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b4c:	f7ff fc80 	bl	8004450 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fda7 	bl	80046a8 <LL_ADC_REG_IsConversionOngoing>
 8004b5a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fdb3 	bl	80046ce <LL_ADC_INJ_IsConversionOngoing>
 8004b68:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 81a4 	bne.w	8004ebe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 819f 	bne.w	8004ebe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f7ff fc8b 	bl	80044a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	08db      	lsrs	r3, r3, #3
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d00a      	beq.n	8004bca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	6919      	ldr	r1, [r3, #16]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bc4:	f7ff fbdc 	bl	8004380 <LL_ADC_SetOffset>
 8004bc8:	e179      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fbf9 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x14e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fbee 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004bec:	4603      	mov	r3, r0
 8004bee:	0e9b      	lsrs	r3, r3, #26
 8004bf0:	f003 021f 	and.w	r2, r3, #31
 8004bf4:	e01e      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x18c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fbe3 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c0c:	fa93 f3a3 	rbit	r3, r3
 8004c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004c24:	2320      	movs	r3, #32
 8004c26:	e004      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c2c:	fab3 f383 	clz	r3, r3
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x1a4>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	0e9b      	lsrs	r3, r3, #26
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	e018      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x1d6>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004c70:	2320      	movs	r3, #32
 8004c72:	e004      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d106      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fbb2 	bl	80043f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fb96 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x214>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fb8b 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	0e9b      	lsrs	r3, r3, #26
 8004cb6:	f003 021f 	and.w	r2, r3, #31
 8004cba:	e01e      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x252>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fb80 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004cea:	2320      	movs	r3, #32
 8004cec:	e004      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x26a>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0e9b      	lsrs	r3, r3, #26
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	e018      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x29c>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e004      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d106      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fb4f 	bl	80043f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fb33 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x2da>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2102      	movs	r1, #2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fb28 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	0e9b      	lsrs	r3, r3, #26
 8004d7c:	f003 021f 	and.w	r2, r3, #31
 8004d80:	e01e      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x318>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2102      	movs	r1, #2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fb1d 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004db0:	2320      	movs	r3, #32
 8004db2:	e004      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d105      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x330>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	0e9b      	lsrs	r3, r3, #26
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	e014      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x35a>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004de6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004de8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004df4:	2320      	movs	r3, #32
 8004df6:	e004      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d106      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff faf0 	bl	80043f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2103      	movs	r1, #3
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fad4 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x398>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2103      	movs	r1, #3
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fac9 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004e36:	4603      	mov	r3, r0
 8004e38:	0e9b      	lsrs	r3, r3, #26
 8004e3a:	f003 021f 	and.w	r2, r3, #31
 8004e3e:	e017      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x3c8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2103      	movs	r1, #3
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fabe 	bl	80043c8 <LL_ADC_GetOffsetChannel>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e5a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004e62:	2320      	movs	r3, #32
 8004e64:	e003      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x3e0>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0e9b      	lsrs	r3, r3, #26
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	e011      	b.n	8004eac <HAL_ADC_ConfigChannel+0x404>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e98:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	e003      	b.n	8004eac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ea6:	fab3 f383 	clz	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d106      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2103      	movs	r1, #3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fa9b 	bl	80043f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fbb6 	bl	8004634 <LL_ADC_IsEnabled>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 8140 	bne.w	8005150 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	461a      	mov	r2, r3
 8004ede:	f7ff fb0f 	bl	8004500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a8f      	ldr	r2, [pc, #572]	@ (8005124 <HAL_ADC_ConfigChannel+0x67c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	f040 8131 	bne.w	8005150 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x46e>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	0e9b      	lsrs	r3, r3, #26
 8004f04:	3301      	adds	r3, #1
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	bf94      	ite	ls
 8004f0e:	2301      	movls	r3, #1
 8004f10:	2300      	movhi	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e019      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x4a2>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004f2e:	2320      	movs	r3, #32
 8004f30:	e003      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2b09      	cmp	r3, #9
 8004f42:	bf94      	ite	ls
 8004f44:	2301      	movls	r3, #1
 8004f46:	2300      	movhi	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d079      	beq.n	8005042 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x4c2>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	0e9b      	lsrs	r3, r3, #26
 8004f60:	3301      	adds	r3, #1
 8004f62:	069b      	lsls	r3, r3, #26
 8004f64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f68:	e015      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x4ee>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f7a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004f82:	2320      	movs	r3, #32
 8004f84:	e003      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f88:	fab3 f383 	clz	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	069b      	lsls	r3, r3, #26
 8004f92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x50e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	0e9b      	lsrs	r3, r3, #26
 8004fa8:	3301      	adds	r3, #1
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	e017      	b.n	8004fe6 <HAL_ADC_ConfigChannel+0x53e>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004fce:	2320      	movs	r3, #32
 8004fd0:	e003      	b.n	8004fda <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd4:	fab3 f383 	clz	r3, r3
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	ea42 0103 	orr.w	r1, r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <HAL_ADC_ConfigChannel+0x564>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	0e9b      	lsrs	r3, r3, #26
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f003 021f 	and.w	r2, r3, #31
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	051b      	lsls	r3, r3, #20
 800500a:	e018      	b.n	800503e <HAL_ADC_ConfigChannel+0x596>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800501e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005024:	2320      	movs	r3, #32
 8005026:	e003      	b.n	8005030 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3301      	adds	r3, #1
 8005032:	f003 021f 	and.w	r2, r3, #31
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800503e:	430b      	orrs	r3, r1
 8005040:	e081      	b.n	8005146 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_ADC_ConfigChannel+0x5b6>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	0e9b      	lsrs	r3, r3, #26
 8005054:	3301      	adds	r3, #1
 8005056:	069b      	lsls	r3, r3, #26
 8005058:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800505c:	e015      	b.n	800508a <HAL_ADC_ConfigChannel+0x5e2>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005076:	2320      	movs	r3, #32
 8005078:	e003      	b.n	8005082 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800507a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	3301      	adds	r3, #1
 8005084:	069b      	lsls	r3, r3, #26
 8005086:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x602>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	0e9b      	lsrs	r3, r3, #26
 800509c:	3301      	adds	r3, #1
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2101      	movs	r1, #1
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	e017      	b.n	80050da <HAL_ADC_ConfigChannel+0x632>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	fa93 f3a3 	rbit	r3, r3
 80050b6:	61bb      	str	r3, [r7, #24]
  return result;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80050c2:	2320      	movs	r3, #32
 80050c4:	e003      	b.n	80050ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	fab3 f383 	clz	r3, r3
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	3301      	adds	r3, #1
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	ea42 0103 	orr.w	r1, r2, r3
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x65e>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	0e9b      	lsrs	r3, r3, #26
 80050f0:	3301      	adds	r3, #1
 80050f2:	f003 021f 	and.w	r2, r3, #31
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	3b1e      	subs	r3, #30
 80050fe:	051b      	lsls	r3, r3, #20
 8005100:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005104:	e01e      	b.n	8005144 <HAL_ADC_ConfigChannel+0x69c>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	60fb      	str	r3, [r7, #12]
  return result;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800511e:	2320      	movs	r3, #32
 8005120:	e006      	b.n	8005130 <HAL_ADC_ConfigChannel+0x688>
 8005122:	bf00      	nop
 8005124:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3301      	adds	r3, #1
 8005132:	f003 021f 	and.w	r2, r3, #31
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	3b1e      	subs	r3, #30
 800513e:	051b      	lsls	r3, r3, #20
 8005140:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005144:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800514a:	4619      	mov	r1, r3
 800514c:	f7ff f9ac 	bl	80044a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b3d      	ldr	r3, [pc, #244]	@ (800524c <HAL_ADC_ConfigChannel+0x7a4>)
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d06c      	beq.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800515c:	483c      	ldr	r0, [pc, #240]	@ (8005250 <HAL_ADC_ConfigChannel+0x7a8>)
 800515e:	f7ff f901 	bl	8004364 <LL_ADC_GetCommonPathInternalCh>
 8005162:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3a      	ldr	r2, [pc, #232]	@ (8005254 <HAL_ADC_ConfigChannel+0x7ac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d127      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d121      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a35      	ldr	r2, [pc, #212]	@ (8005258 <HAL_ADC_ConfigChannel+0x7b0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d157      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800518a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800518e:	4619      	mov	r1, r3
 8005190:	482f      	ldr	r0, [pc, #188]	@ (8005250 <HAL_ADC_ConfigChannel+0x7a8>)
 8005192:	f7ff f8d4 	bl	800433e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005196:	4b31      	ldr	r3, [pc, #196]	@ (800525c <HAL_ADC_ConfigChannel+0x7b4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	4a30      	ldr	r2, [pc, #192]	@ (8005260 <HAL_ADC_ConfigChannel+0x7b8>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80051b0:	e002      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f9      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051be:	e03a      	b.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a27      	ldr	r2, [pc, #156]	@ (8005264 <HAL_ADC_ConfigChannel+0x7bc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d113      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80051ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10d      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1f      	ldr	r2, [pc, #124]	@ (8005258 <HAL_ADC_ConfigChannel+0x7b0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d12a      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80051e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051e8:	4619      	mov	r1, r3
 80051ea:	4819      	ldr	r0, [pc, #100]	@ (8005250 <HAL_ADC_ConfigChannel+0x7a8>)
 80051ec:	f7ff f8a7 	bl	800433e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051f0:	e021      	b.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <HAL_ADC_ConfigChannel+0x7c0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d11c      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d116      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a12      	ldr	r2, [pc, #72]	@ (8005258 <HAL_ADC_ConfigChannel+0x7b0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d111      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005216:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800521a:	4619      	mov	r1, r3
 800521c:	480c      	ldr	r0, [pc, #48]	@ (8005250 <HAL_ADC_ConfigChannel+0x7a8>)
 800521e:	f7ff f88e 	bl	800433e <LL_ADC_SetCommonPathInternalCh>
 8005222:	e008      	b.n	8005236 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800523e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005242:	4618      	mov	r0, r3
 8005244:	37d8      	adds	r7, #216	@ 0xd8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	80080000 	.word	0x80080000
 8005250:	50040300 	.word	0x50040300
 8005254:	c7520000 	.word	0xc7520000
 8005258:	50040000 	.word	0x50040000
 800525c:	20000000 	.word	0x20000000
 8005260:	053e2d63 	.word	0x053e2d63
 8005264:	cb840000 	.word	0xcb840000
 8005268:	80000001 	.word	0x80000001

0800526c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005274:	2300      	movs	r3, #0
 8005276:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff f9d9 	bl	8004634 <LL_ADC_IsEnabled>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d169      	bne.n	800535c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <ADC_Enable+0xfc>)
 8005290:	4013      	ands	r3, r2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529a:	f043 0210 	orr.w	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a6:	f043 0201 	orr.w	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e055      	b.n	800535e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff f994 	bl	80045e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80052bc:	482b      	ldr	r0, [pc, #172]	@ (800536c <ADC_Enable+0x100>)
 80052be:	f7ff f851 	bl	8004364 <LL_ADC_GetCommonPathInternalCh>
 80052c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80052c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d013      	beq.n	80052f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052cc:	4b28      	ldr	r3, [pc, #160]	@ (8005370 <ADC_Enable+0x104>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	099b      	lsrs	r3, r3, #6
 80052d2:	4a28      	ldr	r2, [pc, #160]	@ (8005374 <ADC_Enable+0x108>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	099b      	lsrs	r3, r3, #6
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	4613      	mov	r3, r2
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052e6:	e002      	b.n	80052ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f9      	bne.n	80052e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052f4:	f7ff f804 	bl	8004300 <HAL_GetTick>
 80052f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052fa:	e028      	b.n	800534e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff f997 	bl	8004634 <LL_ADC_IsEnabled>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff f967 	bl	80045e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005316:	f7fe fff3 	bl	8004300 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d914      	bls.n	800534e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d00d      	beq.n	800534e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	f043 0210 	orr.w	r2, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	f043 0201 	orr.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e007      	b.n	800535e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d1cf      	bne.n	80052fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	8000003f 	.word	0x8000003f
 800536c:	50040300 	.word	0x50040300
 8005370:	20000000 	.word	0x20000000
 8005374:	053e2d63 	.word	0x053e2d63

08005378 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff f968 	bl	800465a <LL_ADC_IsDisableOngoing>
 800538a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff f94f 	bl	8004634 <LL_ADC_IsEnabled>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d047      	beq.n	800542c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d144      	bne.n	800542c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 030d 	and.w	r3, r3, #13
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10c      	bne.n	80053ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff f929 	bl	800460c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2203      	movs	r2, #3
 80053c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053c2:	f7fe ff9d 	bl	8004300 <HAL_GetTick>
 80053c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053c8:	e029      	b.n	800541e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	f043 0210 	orr.w	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	f043 0201 	orr.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e023      	b.n	800542e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053e6:	f7fe ff8b 	bl	8004300 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d914      	bls.n	800541e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	f043 0210 	orr.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e007      	b.n	800542e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1dc      	bne.n	80053e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005442:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800544c:	2b00      	cmp	r3, #0
 800544e:	d14b      	bne.n	80054e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005454:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d021      	beq.n	80054ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe ffdb 	bl	800442a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d032      	beq.n	80054e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d12b      	bne.n	80054e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d11f      	bne.n	80054e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80054ac:	e018      	b.n	80054e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d111      	bne.n	80054e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d105      	bne.n	80054e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7fd fd43 	bl	8002f6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054e6:	e00e      	b.n	8005506 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff facd 	bl	8004a94 <HAL_ADC_ErrorCallback>
}
 80054fa:	e004      	b.n	8005506 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	4798      	blx	r3
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff faaf 	bl	8004a80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	f043 0204 	orr.w	r2, r3, #4
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff fa9f 	bl	8004a94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005556:	bf00      	nop
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <LL_ADC_StartCalibration>:
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005570:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800557a:	4313      	orrs	r3, r2
 800557c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_ADC_IsCalibrationOnGoing>:
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055a4:	d101      	bne.n	80055aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e04d      	b.n	8005670 <HAL_ADCEx_Calibration_Start+0xb8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff fecb 	bl	8005378 <ADC_Disable>
 80055e2:	4603      	mov	r3, r0
 80055e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d136      	bne.n	800565a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055f4:	f023 0302 	bic.w	r3, r3, #2
 80055f8:	f043 0202 	orr.w	r2, r3, #2
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff ffa9 	bl	800555e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800560c:	e014      	b.n	8005638 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800561a:	d30d      	bcc.n	8005638 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005620:	f023 0312 	bic.w	r3, r3, #18
 8005624:	f043 0210 	orr.w	r2, r3, #16
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e01b      	b.n	8005670 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ffa7 	bl	8005590 <LL_ADC_IsCalibrationOnGoing>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e2      	bne.n	800560e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	f023 0303 	bic.w	r3, r3, #3
 8005650:	f043 0201 	orr.w	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
 8005658:	e005      	b.n	8005666 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	f043 0210 	orr.w	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005688:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <__NVIC_SetPriorityGrouping+0x44>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005694:	4013      	ands	r3, r2
 8005696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056aa:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <__NVIC_SetPriorityGrouping+0x44>)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	60d3      	str	r3, [r2, #12]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000ed00 	.word	0xe000ed00

080056c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056c4:	4b04      	ldr	r3, [pc, #16]	@ (80056d8 <__NVIC_GetPriorityGrouping+0x18>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	f003 0307 	and.w	r3, r3, #7
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	e000ed00 	.word	0xe000ed00

080056dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	db0b      	blt.n	8005706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	f003 021f 	and.w	r2, r3, #31
 80056f4:	4907      	ldr	r1, [pc, #28]	@ (8005714 <__NVIC_EnableIRQ+0x38>)
 80056f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	2001      	movs	r0, #1
 80056fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	e000e100 	.word	0xe000e100

08005718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	6039      	str	r1, [r7, #0]
 8005722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005728:	2b00      	cmp	r3, #0
 800572a:	db0a      	blt.n	8005742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	b2da      	uxtb	r2, r3
 8005730:	490c      	ldr	r1, [pc, #48]	@ (8005764 <__NVIC_SetPriority+0x4c>)
 8005732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005736:	0112      	lsls	r2, r2, #4
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	440b      	add	r3, r1
 800573c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005740:	e00a      	b.n	8005758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	4908      	ldr	r1, [pc, #32]	@ (8005768 <__NVIC_SetPriority+0x50>)
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	3b04      	subs	r3, #4
 8005750:	0112      	lsls	r2, r2, #4
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	440b      	add	r3, r1
 8005756:	761a      	strb	r2, [r3, #24]
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	e000e100 	.word	0xe000e100
 8005768:	e000ed00 	.word	0xe000ed00

0800576c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	@ 0x24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f1c3 0307 	rsb	r3, r3, #7
 8005786:	2b04      	cmp	r3, #4
 8005788:	bf28      	it	cs
 800578a:	2304      	movcs	r3, #4
 800578c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3304      	adds	r3, #4
 8005792:	2b06      	cmp	r3, #6
 8005794:	d902      	bls.n	800579c <NVIC_EncodePriority+0x30>
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3b03      	subs	r3, #3
 800579a:	e000      	b.n	800579e <NVIC_EncodePriority+0x32>
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43da      	mvns	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	401a      	ands	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	fa01 f303 	lsl.w	r3, r1, r3
 80057be:	43d9      	mvns	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c4:	4313      	orrs	r3, r2
         );
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3724      	adds	r7, #36	@ 0x24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3b01      	subs	r3, #1
 80057e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e4:	d301      	bcc.n	80057ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057e6:	2301      	movs	r3, #1
 80057e8:	e00f      	b.n	800580a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005814 <SysTick_Config+0x40>)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057f2:	210f      	movs	r1, #15
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057f8:	f7ff ff8e 	bl	8005718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <SysTick_Config+0x40>)
 80057fe:	2200      	movs	r2, #0
 8005800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005802:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <SysTick_Config+0x40>)
 8005804:	2207      	movs	r2, #7
 8005806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	e000e010 	.word	0xe000e010

08005818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff29 	bl	8005678 <__NVIC_SetPriorityGrouping>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	4603      	mov	r3, r0
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005840:	f7ff ff3e 	bl	80056c0 <__NVIC_GetPriorityGrouping>
 8005844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	6978      	ldr	r0, [r7, #20]
 800584c:	f7ff ff8e 	bl	800576c <NVIC_EncodePriority>
 8005850:	4602      	mov	r2, r0
 8005852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005856:	4611      	mov	r1, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ff5d 	bl	8005718 <__NVIC_SetPriority>
}
 800585e:	bf00      	nop
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	4603      	mov	r3, r0
 800586e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff ff31 	bl	80056dc <__NVIC_EnableIRQ>
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff ffa2 	bl	80057d4 <SysTick_Config>
 8005890:	4603      	mov	r3, r0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e098      	b.n	80059e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	4b4d      	ldr	r3, [pc, #308]	@ (80059ec <HAL_DMA_Init+0x150>)
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d80f      	bhi.n	80058da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	4b4b      	ldr	r3, [pc, #300]	@ (80059f0 <HAL_DMA_Init+0x154>)
 80058c2:	4413      	add	r3, r2
 80058c4:	4a4b      	ldr	r2, [pc, #300]	@ (80059f4 <HAL_DMA_Init+0x158>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	009a      	lsls	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a48      	ldr	r2, [pc, #288]	@ (80059f8 <HAL_DMA_Init+0x15c>)
 80058d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80058d8:	e00e      	b.n	80058f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	4b46      	ldr	r3, [pc, #280]	@ (80059fc <HAL_DMA_Init+0x160>)
 80058e2:	4413      	add	r3, r2
 80058e4:	4a43      	ldr	r2, [pc, #268]	@ (80059f4 <HAL_DMA_Init+0x158>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	009a      	lsls	r2, r3, #2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a42      	ldr	r2, [pc, #264]	@ (8005a00 <HAL_DMA_Init+0x164>)
 80058f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800591c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005952:	d039      	beq.n	80059c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	4a27      	ldr	r2, [pc, #156]	@ (80059f8 <HAL_DMA_Init+0x15c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d11a      	bne.n	8005994 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800595e:	4b29      	ldr	r3, [pc, #164]	@ (8005a04 <HAL_DMA_Init+0x168>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005966:	f003 031c 	and.w	r3, r3, #28
 800596a:	210f      	movs	r1, #15
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	4924      	ldr	r1, [pc, #144]	@ (8005a04 <HAL_DMA_Init+0x168>)
 8005974:	4013      	ands	r3, r2
 8005976:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005978:	4b22      	ldr	r3, [pc, #136]	@ (8005a04 <HAL_DMA_Init+0x168>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6859      	ldr	r1, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005984:	f003 031c 	and.w	r3, r3, #28
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	491d      	ldr	r1, [pc, #116]	@ (8005a04 <HAL_DMA_Init+0x168>)
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]
 8005992:	e019      	b.n	80059c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005994:	4b1c      	ldr	r3, [pc, #112]	@ (8005a08 <HAL_DMA_Init+0x16c>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599c:	f003 031c 	and.w	r3, r3, #28
 80059a0:	210f      	movs	r1, #15
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	4917      	ldr	r1, [pc, #92]	@ (8005a08 <HAL_DMA_Init+0x16c>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059ae:	4b16      	ldr	r3, [pc, #88]	@ (8005a08 <HAL_DMA_Init+0x16c>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6859      	ldr	r1, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ba:	f003 031c 	and.w	r3, r3, #28
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	4911      	ldr	r1, [pc, #68]	@ (8005a08 <HAL_DMA_Init+0x16c>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40020407 	.word	0x40020407
 80059f0:	bffdfff8 	.word	0xbffdfff8
 80059f4:	cccccccd 	.word	0xcccccccd
 80059f8:	40020000 	.word	0x40020000
 80059fc:	bffdfbf8 	.word	0xbffdfbf8
 8005a00:	40020400 	.word	0x40020400
 8005a04:	400200a8 	.word	0x400200a8
 8005a08:	400204a8 	.word	0x400204a8

08005a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_DMA_Start_IT+0x20>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e04b      	b.n	8005ac4 <HAL_DMA_Start_IT+0xb8>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d13a      	bne.n	8005ab6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f95f 	bl	8005d28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 020e 	orr.w	r2, r2, #14
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e00f      	b.n	8005aa4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0204 	bic.w	r2, r2, #4
 8005a92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 020a 	orr.w	r2, r2, #10
 8005aa2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e005      	b.n	8005ac2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d008      	beq.n	8005af6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e022      	b.n	8005b3c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 020e 	bic.w	r2, r2, #14
 8005b04:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1a:	f003 021c 	and.w	r2, r3, #28
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	2101      	movs	r1, #1
 8005b24:	fa01 f202 	lsl.w	r2, r1, r2
 8005b28:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d005      	beq.n	8005b6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2204      	movs	r2, #4
 8005b64:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	73fb      	strb	r3, [r7, #15]
 8005b6a:	e029      	b.n	8005bc0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 020e 	bic.w	r2, r2, #14
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b90:	f003 021c 	and.w	r2, r3, #28
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b9e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
    }
  }
  return status;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	f003 031c 	and.w	r3, r3, #28
 8005bea:	2204      	movs	r2, #4
 8005bec:	409a      	lsls	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d026      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x7a>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d021      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d107      	bne.n	8005c1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0204 	bic.w	r2, r2, #4
 8005c1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	f003 021c 	and.w	r2, r3, #28
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d071      	beq.n	8005d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c42:	e06c      	b.n	8005d1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c48:	f003 031c 	and.w	r3, r3, #28
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d02e      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xec>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d029      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 020a 	bic.w	r2, r2, #10
 8005c7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8c:	f003 021c 	and.w	r2, r3, #28
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	2102      	movs	r1, #2
 8005c96:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d038      	beq.n	8005d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005cb4:	e033      	b.n	8005d1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cba:	f003 031c 	and.w	r3, r3, #28
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d02a      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x156>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d025      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 020e 	bic.w	r2, r2, #14
 8005ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	f003 021c 	and.w	r2, r3, #28
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d004      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
}
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f003 021c 	and.w	r2, r3, #28
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f202 	lsl.w	r2, r1, r2
 8005d48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d108      	bne.n	8005d6c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d6a:	e007      	b.n	8005d7c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d96:	e154      	b.n	8006042 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	4013      	ands	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8146 	beq.w	800603c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d005      	beq.n	8005dc8 <HAL_GPIO_Init+0x40>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d130      	bne.n	8005e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dfe:	2201      	movs	r2, #1
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 0201 	and.w	r2, r3, #1
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d017      	beq.n	8005e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	2203      	movs	r2, #3
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d123      	bne.n	8005eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	08da      	lsrs	r2, r3, #3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3208      	adds	r2, #8
 8005e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	220f      	movs	r2, #15
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	08da      	lsrs	r2, r3, #3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3208      	adds	r2, #8
 8005eb4:	6939      	ldr	r1, [r7, #16]
 8005eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0203 	and.w	r2, r3, #3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80a0 	beq.w	800603c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efc:	4b58      	ldr	r3, [pc, #352]	@ (8006060 <HAL_GPIO_Init+0x2d8>)
 8005efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f00:	4a57      	ldr	r2, [pc, #348]	@ (8006060 <HAL_GPIO_Init+0x2d8>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f08:	4b55      	ldr	r3, [pc, #340]	@ (8006060 <HAL_GPIO_Init+0x2d8>)
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f14:	4a53      	ldr	r2, [pc, #332]	@ (8006064 <HAL_GPIO_Init+0x2dc>)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	089b      	lsrs	r3, r3, #2
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	220f      	movs	r2, #15
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	43db      	mvns	r3, r3
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4013      	ands	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f3e:	d019      	beq.n	8005f74 <HAL_GPIO_Init+0x1ec>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a49      	ldr	r2, [pc, #292]	@ (8006068 <HAL_GPIO_Init+0x2e0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <HAL_GPIO_Init+0x1e8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a48      	ldr	r2, [pc, #288]	@ (800606c <HAL_GPIO_Init+0x2e4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00d      	beq.n	8005f6c <HAL_GPIO_Init+0x1e4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a47      	ldr	r2, [pc, #284]	@ (8006070 <HAL_GPIO_Init+0x2e8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d007      	beq.n	8005f68 <HAL_GPIO_Init+0x1e0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a46      	ldr	r2, [pc, #280]	@ (8006074 <HAL_GPIO_Init+0x2ec>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_GPIO_Init+0x1dc>
 8005f60:	2304      	movs	r3, #4
 8005f62:	e008      	b.n	8005f76 <HAL_GPIO_Init+0x1ee>
 8005f64:	2307      	movs	r3, #7
 8005f66:	e006      	b.n	8005f76 <HAL_GPIO_Init+0x1ee>
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e004      	b.n	8005f76 <HAL_GPIO_Init+0x1ee>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e002      	b.n	8005f76 <HAL_GPIO_Init+0x1ee>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <HAL_GPIO_Init+0x1ee>
 8005f74:	2300      	movs	r3, #0
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	f002 0203 	and.w	r2, r2, #3
 8005f7c:	0092      	lsls	r2, r2, #2
 8005f7e:	4093      	lsls	r3, r2
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f86:	4937      	ldr	r1, [pc, #220]	@ (8006064 <HAL_GPIO_Init+0x2dc>)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	089b      	lsrs	r3, r3, #2
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f94:	4b38      	ldr	r3, [pc, #224]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fe2:	4a25      	ldr	r2, [pc, #148]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fe8:	4b23      	ldr	r3, [pc, #140]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800600c:	4a1a      	ldr	r2, [pc, #104]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006012:	4b19      	ldr	r3, [pc, #100]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	43db      	mvns	r3, r3
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4013      	ands	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006036:	4a10      	ldr	r2, [pc, #64]	@ (8006078 <HAL_GPIO_Init+0x2f0>)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	3301      	adds	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	f47f aea3 	bne.w	8005d98 <HAL_GPIO_Init+0x10>
  }
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	40021000 	.word	0x40021000
 8006064:	40010000 	.word	0x40010000
 8006068:	48000400 	.word	0x48000400
 800606c:	48000800 	.word	0x48000800
 8006070:	48000c00 	.word	0x48000c00
 8006074:	48001000 	.word	0x48001000
 8006078:	40010400 	.word	0x40010400

0800607c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	807b      	strh	r3, [r7, #2]
 8006088:	4613      	mov	r3, r2
 800608a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800608c:	787b      	ldrb	r3, [r7, #1]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006098:	e002      	b.n	80060a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80060b0:	4b04      	ldr	r3, [pc, #16]	@ (80060c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40007000 	.word	0x40007000

080060c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d6:	d130      	bne.n	800613a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80060d8:	4b23      	ldr	r3, [pc, #140]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e4:	d038      	beq.n	8006158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060e6:	4b20      	ldr	r3, [pc, #128]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060f6:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2232      	movs	r2, #50	@ 0x32
 80060fc:	fb02 f303 	mul.w	r3, r2, r3
 8006100:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	0c9b      	lsrs	r3, r3, #18
 8006108:	3301      	adds	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800610c:	e002      	b.n	8006114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b01      	subs	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006114:	4b14      	ldr	r3, [pc, #80]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800611c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006120:	d102      	bne.n	8006128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f2      	bne.n	800610e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006128:	4b0f      	ldr	r3, [pc, #60]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006134:	d110      	bne.n	8006158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e00f      	b.n	800615a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800613a:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006146:	d007      	beq.n	8006158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006148:	4b07      	ldr	r3, [pc, #28]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006150:	4a05      	ldr	r2, [pc, #20]	@ (8006168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006152:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40007000 	.word	0x40007000
 800616c:	20000000 	.word	0x20000000
 8006170:	431bde83 	.word	0x431bde83

08006174 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f000 bc02 	b.w	800698c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006188:	4b96      	ldr	r3, [pc, #600]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006192:	4b94      	ldr	r3, [pc, #592]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80e4 	beq.w	8006372 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <HAL_RCC_OscConfig+0x4c>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	f040 808b 	bne.w	80062ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	f040 8087 	bne.w	80062ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061c0:	4b88      	ldr	r3, [pc, #544]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_OscConfig+0x64>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e3d9      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	4b81      	ldr	r3, [pc, #516]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <HAL_RCC_OscConfig+0x7e>
 80061e8:	4b7e      	ldr	r3, [pc, #504]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061f0:	e005      	b.n	80061fe <HAL_RCC_OscConfig+0x8a>
 80061f2:	4b7c      	ldr	r3, [pc, #496]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80061f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061fe:	4293      	cmp	r3, r2
 8006200:	d223      	bcs.n	800624a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fd8c 	bl	8006d24 <RCC_SetFlashLatencyFromMSIRange>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e3ba      	b.n	800698c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006216:	4b73      	ldr	r3, [pc, #460]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a72      	ldr	r2, [pc, #456]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800621c:	f043 0308 	orr.w	r3, r3, #8
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	4b70      	ldr	r3, [pc, #448]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	496d      	ldr	r1, [pc, #436]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006230:	4313      	orrs	r3, r2
 8006232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006234:	4b6b      	ldr	r3, [pc, #428]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	4968      	ldr	r1, [pc, #416]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006244:	4313      	orrs	r3, r2
 8006246:	604b      	str	r3, [r1, #4]
 8006248:	e025      	b.n	8006296 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800624a:	4b66      	ldr	r3, [pc, #408]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a65      	ldr	r2, [pc, #404]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006250:	f043 0308 	orr.w	r3, r3, #8
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b63      	ldr	r3, [pc, #396]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	4960      	ldr	r1, [pc, #384]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006264:	4313      	orrs	r3, r2
 8006266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006268:	4b5e      	ldr	r3, [pc, #376]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	495b      	ldr	r1, [pc, #364]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006278:	4313      	orrs	r3, r2
 800627a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fd4c 	bl	8006d24 <RCC_SetFlashLatencyFromMSIRange>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e37a      	b.n	800698c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006296:	f000 fc81 	bl	8006b9c <HAL_RCC_GetSysClockFreq>
 800629a:	4602      	mov	r2, r0
 800629c:	4b51      	ldr	r3, [pc, #324]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	4950      	ldr	r1, [pc, #320]	@ (80063e8 <HAL_RCC_OscConfig+0x274>)
 80062a8:	5ccb      	ldrb	r3, [r1, r3]
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	fa22 f303 	lsr.w	r3, r2, r3
 80062b2:	4a4e      	ldr	r2, [pc, #312]	@ (80063ec <HAL_RCC_OscConfig+0x278>)
 80062b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062b6:	4b4e      	ldr	r3, [pc, #312]	@ (80063f0 <HAL_RCC_OscConfig+0x27c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fd ffd0 	bl	8004260 <HAL_InitTick>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d052      	beq.n	8006370 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	e35e      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d032      	beq.n	800633c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062d6:	4b43      	ldr	r3, [pc, #268]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a42      	ldr	r2, [pc, #264]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062e2:	f7fe f80d 	bl	8004300 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062ea:	f7fe f809 	bl	8004300 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e347      	b.n	800698c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062fc:	4b39      	ldr	r3, [pc, #228]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f0      	beq.n	80062ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006308:	4b36      	ldr	r3, [pc, #216]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a35      	ldr	r2, [pc, #212]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800630e:	f043 0308 	orr.w	r3, r3, #8
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	4b33      	ldr	r3, [pc, #204]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	4930      	ldr	r1, [pc, #192]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006326:	4b2f      	ldr	r3, [pc, #188]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	492b      	ldr	r1, [pc, #172]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]
 800633a:	e01a      	b.n	8006372 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800633c:	4b29      	ldr	r3, [pc, #164]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a28      	ldr	r2, [pc, #160]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006348:	f7fd ffda 	bl	8004300 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006350:	f7fd ffd6 	bl	8004300 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e314      	b.n	800698c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006362:	4b20      	ldr	r3, [pc, #128]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x1dc>
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d073      	beq.n	8006466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b08      	cmp	r3, #8
 8006382:	d005      	beq.n	8006390 <HAL_RCC_OscConfig+0x21c>
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b0c      	cmp	r3, #12
 8006388:	d10e      	bne.n	80063a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d10b      	bne.n	80063a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006390:	4b14      	ldr	r3, [pc, #80]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d063      	beq.n	8006464 <HAL_RCC_OscConfig+0x2f0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d15f      	bne.n	8006464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e2f1      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b0:	d106      	bne.n	80063c0 <HAL_RCC_OscConfig+0x24c>
 80063b2:	4b0c      	ldr	r3, [pc, #48]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a0b      	ldr	r2, [pc, #44]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80063b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e025      	b.n	800640c <HAL_RCC_OscConfig+0x298>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063c8:	d114      	bne.n	80063f4 <HAL_RCC_OscConfig+0x280>
 80063ca:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a05      	ldr	r2, [pc, #20]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80063d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	4b03      	ldr	r3, [pc, #12]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a02      	ldr	r2, [pc, #8]	@ (80063e4 <HAL_RCC_OscConfig+0x270>)
 80063dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e013      	b.n	800640c <HAL_RCC_OscConfig+0x298>
 80063e4:	40021000 	.word	0x40021000
 80063e8:	0800d66c 	.word	0x0800d66c
 80063ec:	20000000 	.word	0x20000000
 80063f0:	20000004 	.word	0x20000004
 80063f4:	4ba0      	ldr	r3, [pc, #640]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a9f      	ldr	r2, [pc, #636]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b9d      	ldr	r3, [pc, #628]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a9c      	ldr	r2, [pc, #624]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fd ff74 	bl	8004300 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fd ff70 	bl	8004300 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	@ 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e2ae      	b.n	800698c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800642e:	4b92      	ldr	r3, [pc, #584]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x2a8>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fd ff60 	bl	8004300 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fd ff5c 	bl	8004300 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	@ 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e29a      	b.n	800698c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006456:	4b88      	ldr	r3, [pc, #544]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x2d0>
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d060      	beq.n	8006534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d005      	beq.n	8006484 <HAL_RCC_OscConfig+0x310>
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b0c      	cmp	r3, #12
 800647c:	d119      	bne.n	80064b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d116      	bne.n	80064b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006484:	4b7c      	ldr	r3, [pc, #496]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_RCC_OscConfig+0x328>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e277      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800649c:	4b76      	ldr	r3, [pc, #472]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	061b      	lsls	r3, r3, #24
 80064aa:	4973      	ldr	r1, [pc, #460]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b0:	e040      	b.n	8006534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d023      	beq.n	8006502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a6e      	ldr	r2, [pc, #440]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80064c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fd ff1b 	bl	8004300 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ce:	f7fd ff17 	bl	8004300 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e255      	b.n	800698c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064e0:	4b65      	ldr	r3, [pc, #404]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ec:	4b62      	ldr	r3, [pc, #392]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	495f      	ldr	r1, [pc, #380]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	604b      	str	r3, [r1, #4]
 8006500:	e018      	b.n	8006534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006502:	4b5d      	ldr	r3, [pc, #372]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a5c      	ldr	r2, [pc, #368]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800650c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650e:	f7fd fef7 	bl	8004300 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006514:	e008      	b.n	8006528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006516:	f7fd fef3 	bl	8004300 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e231      	b.n	800698c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006528:	4b53      	ldr	r3, [pc, #332]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1f0      	bne.n	8006516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d03c      	beq.n	80065ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01c      	beq.n	8006582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006548:	4b4b      	ldr	r3, [pc, #300]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 800654a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800654e:	4a4a      	ldr	r2, [pc, #296]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fd fed2 	bl	8004300 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006560:	f7fd fece 	bl	8004300 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e20c      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006572:	4b41      	ldr	r3, [pc, #260]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0ef      	beq.n	8006560 <HAL_RCC_OscConfig+0x3ec>
 8006580:	e01b      	b.n	80065ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006582:	4b3d      	ldr	r3, [pc, #244]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006588:	4a3b      	ldr	r2, [pc, #236]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006592:	f7fd feb5 	bl	8004300 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800659a:	f7fd feb1 	bl	8004300 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e1ef      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065ac:	4b32      	ldr	r3, [pc, #200]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80065ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1ef      	bne.n	800659a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80a6 	beq.w	8006714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c8:	2300      	movs	r3, #0
 80065ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80065cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80065ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d8:	4b27      	ldr	r3, [pc, #156]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80065da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065dc:	4a26      	ldr	r2, [pc, #152]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80065de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065e4:	4b24      	ldr	r3, [pc, #144]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 80065e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f0:	2301      	movs	r3, #1
 80065f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065f4:	4b21      	ldr	r3, [pc, #132]	@ (800667c <HAL_RCC_OscConfig+0x508>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d118      	bne.n	8006632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006600:	4b1e      	ldr	r3, [pc, #120]	@ (800667c <HAL_RCC_OscConfig+0x508>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1d      	ldr	r2, [pc, #116]	@ (800667c <HAL_RCC_OscConfig+0x508>)
 8006606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800660a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800660c:	f7fd fe78 	bl	8004300 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006614:	f7fd fe74 	bl	8004300 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e1b2      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006626:	4b15      	ldr	r3, [pc, #84]	@ (800667c <HAL_RCC_OscConfig+0x508>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f0      	beq.n	8006614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d108      	bne.n	800664c <HAL_RCC_OscConfig+0x4d8>
 800663a:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 800663c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006640:	4a0d      	ldr	r2, [pc, #52]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800664a:	e029      	b.n	80066a0 <HAL_RCC_OscConfig+0x52c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b05      	cmp	r3, #5
 8006652:	d115      	bne.n	8006680 <HAL_RCC_OscConfig+0x50c>
 8006654:	4b08      	ldr	r3, [pc, #32]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665a:	4a07      	ldr	r2, [pc, #28]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 800665c:	f043 0304 	orr.w	r3, r3, #4
 8006660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006664:	4b04      	ldr	r3, [pc, #16]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	4a03      	ldr	r2, [pc, #12]	@ (8006678 <HAL_RCC_OscConfig+0x504>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006674:	e014      	b.n	80066a0 <HAL_RCC_OscConfig+0x52c>
 8006676:	bf00      	nop
 8006678:	40021000 	.word	0x40021000
 800667c:	40007000 	.word	0x40007000
 8006680:	4b9a      	ldr	r3, [pc, #616]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006686:	4a99      	ldr	r2, [pc, #612]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006690:	4b96      	ldr	r3, [pc, #600]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006696:	4a95      	ldr	r2, [pc, #596]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006698:	f023 0304 	bic.w	r3, r3, #4
 800669c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d016      	beq.n	80066d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fd fe2a 	bl	8004300 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ae:	e00a      	b.n	80066c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b0:	f7fd fe26 	bl	8004300 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e162      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066c6:	4b89      	ldr	r3, [pc, #548]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80066c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0ed      	beq.n	80066b0 <HAL_RCC_OscConfig+0x53c>
 80066d4:	e015      	b.n	8006702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d6:	f7fd fe13 	bl	8004300 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066dc:	e00a      	b.n	80066f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066de:	f7fd fe0f 	bl	8004300 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e14b      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066f4:	4b7d      	ldr	r3, [pc, #500]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1ed      	bne.n	80066de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006702:	7ffb      	ldrb	r3, [r7, #31]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d105      	bne.n	8006714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006708:	4b78      	ldr	r3, [pc, #480]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 800670a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670c:	4a77      	ldr	r2, [pc, #476]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 800670e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006712:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d03c      	beq.n	800679a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01c      	beq.n	8006762 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006728:	4b70      	ldr	r3, [pc, #448]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 800672a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800672e:	4a6f      	ldr	r2, [pc, #444]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006730:	f043 0301 	orr.w	r3, r3, #1
 8006734:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fd fde2 	bl	8004300 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006740:	f7fd fdde 	bl	8004300 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e11c      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006752:	4b66      	ldr	r3, [pc, #408]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006754:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0ef      	beq.n	8006740 <HAL_RCC_OscConfig+0x5cc>
 8006760:	e01b      	b.n	800679a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006762:	4b62      	ldr	r3, [pc, #392]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006768:	4a60      	ldr	r2, [pc, #384]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fd fdc5 	bl	8004300 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800677a:	f7fd fdc1 	bl	8004300 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e0ff      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800678c:	4b57      	ldr	r3, [pc, #348]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 800678e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1ef      	bne.n	800677a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80f3 	beq.w	800698a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	f040 80c9 	bne.w	8006940 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80067ae:	4b4f      	ldr	r3, [pc, #316]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f003 0203 	and.w	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	429a      	cmp	r2, r3
 80067c0:	d12c      	bne.n	800681c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067cc:	3b01      	subs	r3, #1
 80067ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d123      	bne.n	800681c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d11b      	bne.n	800681c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d113      	bne.n	800681c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	3b01      	subs	r3, #1
 8006802:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d109      	bne.n	800681c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	3b01      	subs	r3, #1
 8006816:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006818:	429a      	cmp	r2, r3
 800681a:	d06b      	beq.n	80068f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b0c      	cmp	r3, #12
 8006820:	d062      	beq.n	80068e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006822:	4b32      	ldr	r3, [pc, #200]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e0ac      	b.n	800698c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006832:	4b2e      	ldr	r3, [pc, #184]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a2d      	ldr	r2, [pc, #180]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006838:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800683c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800683e:	f7fd fd5f 	bl	8004300 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006846:	f7fd fd5b 	bl	8004300 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e099      	b.n	800698c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006858:	4b24      	ldr	r3, [pc, #144]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1f0      	bne.n	8006846 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006864:	4b21      	ldr	r3, [pc, #132]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	4b21      	ldr	r3, [pc, #132]	@ (80068f0 <HAL_RCC_OscConfig+0x77c>)
 800686a:	4013      	ands	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006874:	3a01      	subs	r2, #1
 8006876:	0112      	lsls	r2, r2, #4
 8006878:	4311      	orrs	r1, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800687e:	0212      	lsls	r2, r2, #8
 8006880:	4311      	orrs	r1, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006886:	0852      	lsrs	r2, r2, #1
 8006888:	3a01      	subs	r2, #1
 800688a:	0552      	lsls	r2, r2, #21
 800688c:	4311      	orrs	r1, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006892:	0852      	lsrs	r2, r2, #1
 8006894:	3a01      	subs	r2, #1
 8006896:	0652      	lsls	r2, r2, #25
 8006898:	4311      	orrs	r1, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800689e:	06d2      	lsls	r2, r2, #27
 80068a0:	430a      	orrs	r2, r1
 80068a2:	4912      	ldr	r1, [pc, #72]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068a8:	4b10      	ldr	r3, [pc, #64]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a0f      	ldr	r2, [pc, #60]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80068ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068b4:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4a0c      	ldr	r2, [pc, #48]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80068ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068c0:	f7fd fd1e 	bl	8004300 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fd fd1a 	bl	8004300 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e058      	b.n	800698c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068da:	4b04      	ldr	r3, [pc, #16]	@ (80068ec <HAL_RCC_OscConfig+0x778>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068e6:	e050      	b.n	800698a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e04f      	b.n	800698c <HAL_RCC_OscConfig+0x818>
 80068ec:	40021000 	.word	0x40021000
 80068f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068f4:	4b27      	ldr	r3, [pc, #156]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d144      	bne.n	800698a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006900:	4b24      	ldr	r3, [pc, #144]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 8006906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800690a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800690c:	4b21      	ldr	r3, [pc, #132]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4a20      	ldr	r2, [pc, #128]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 8006912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006918:	f7fd fcf2 	bl	8004300 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006920:	f7fd fcee 	bl	8004300 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e02c      	b.n	800698c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006932:	4b18      	ldr	r3, [pc, #96]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x7ac>
 800693e:	e024      	b.n	800698a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b0c      	cmp	r3, #12
 8006944:	d01f      	beq.n	8006986 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006946:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a12      	ldr	r2, [pc, #72]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 800694c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006952:	f7fd fcd5 	bl	8004300 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800695a:	f7fd fcd1 	bl	8004300 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e00f      	b.n	800698c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800696c:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f0      	bne.n	800695a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006978:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	4905      	ldr	r1, [pc, #20]	@ (8006994 <HAL_RCC_OscConfig+0x820>)
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <HAL_RCC_OscConfig+0x824>)
 8006980:	4013      	ands	r3, r2
 8006982:	60cb      	str	r3, [r1, #12]
 8006984:	e001      	b.n	800698a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3720      	adds	r7, #32
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40021000 	.word	0x40021000
 8006998:	feeefffc 	.word	0xfeeefffc

0800699c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0e7      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069b0:	4b75      	ldr	r3, [pc, #468]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d910      	bls.n	80069e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b72      	ldr	r3, [pc, #456]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 0207 	bic.w	r2, r3, #7
 80069c6:	4970      	ldr	r1, [pc, #448]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ce:	4b6e      	ldr	r3, [pc, #440]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0cf      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	4b66      	ldr	r3, [pc, #408]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d908      	bls.n	8006a0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069fc:	4b63      	ldr	r3, [pc, #396]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	4960      	ldr	r1, [pc, #384]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d04c      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a22:	4b5a      	ldr	r3, [pc, #360]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d121      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e0a6      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a3a:	4b54      	ldr	r3, [pc, #336]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d115      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e09a      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d107      	bne.n	8006a62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a52:	4b4e      	ldr	r3, [pc, #312]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e08e      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a62:	4b4a      	ldr	r3, [pc, #296]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e086      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a72:	4b46      	ldr	r3, [pc, #280]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f023 0203 	bic.w	r2, r3, #3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4943      	ldr	r1, [pc, #268]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a84:	f7fd fc3c 	bl	8004300 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8a:	e00a      	b.n	8006aa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a8c:	f7fd fc38 	bl	8004300 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e06e      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 020c 	and.w	r2, r3, #12
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d1eb      	bne.n	8006a8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d010      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	4b31      	ldr	r3, [pc, #196]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d208      	bcs.n	8006ae2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	492b      	ldr	r1, [pc, #172]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ae2:	4b29      	ldr	r3, [pc, #164]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d210      	bcs.n	8006b12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af0:	4b25      	ldr	r3, [pc, #148]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f023 0207 	bic.w	r2, r3, #7
 8006af8:	4923      	ldr	r1, [pc, #140]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b00:	4b21      	ldr	r3, [pc, #132]	@ (8006b88 <HAL_RCC_ClockConfig+0x1ec>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d001      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e036      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	4918      	ldr	r1, [pc, #96]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b3c:	4b13      	ldr	r3, [pc, #76]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	4910      	ldr	r1, [pc, #64]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b50:	f000 f824 	bl	8006b9c <HAL_RCC_GetSysClockFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b0d      	ldr	r3, [pc, #52]	@ (8006b8c <HAL_RCC_ClockConfig+0x1f0>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	091b      	lsrs	r3, r3, #4
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	490b      	ldr	r1, [pc, #44]	@ (8006b90 <HAL_RCC_ClockConfig+0x1f4>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	4a09      	ldr	r2, [pc, #36]	@ (8006b94 <HAL_RCC_ClockConfig+0x1f8>)
 8006b6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b70:	4b09      	ldr	r3, [pc, #36]	@ (8006b98 <HAL_RCC_ClockConfig+0x1fc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fd fb73 	bl	8004260 <HAL_InitTick>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40022000 	.word	0x40022000
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	0800d66c 	.word	0x0800d66c
 8006b94:	20000000 	.word	0x20000000
 8006b98:	20000004 	.word	0x20000004

08006b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	@ 0x24
 8006ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006baa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 030c 	and.w	r3, r3, #12
 8006bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b0c      	cmp	r3, #12
 8006bc8:	d121      	bne.n	8006c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d11e      	bne.n	8006c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006bd0:	4b34      	ldr	r3, [pc, #208]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d107      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006bdc:	4b31      	ldr	r3, [pc, #196]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	61fb      	str	r3, [r7, #28]
 8006bea:	e005      	b.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006bec:	4b2d      	ldr	r3, [pc, #180]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8006ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10d      	bne.n	8006c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d102      	bne.n	8006c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c14:	4b25      	ldr	r3, [pc, #148]	@ (8006cac <HAL_RCC_GetSysClockFreq+0x110>)
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	e004      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c20:	4b23      	ldr	r3, [pc, #140]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b0c      	cmp	r3, #12
 8006c28:	d134      	bne.n	8006c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d003      	beq.n	8006c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d003      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0xac>
 8006c40:	e005      	b.n	8006c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c42:	4b1a      	ldr	r3, [pc, #104]	@ (8006cac <HAL_RCC_GetSysClockFreq+0x110>)
 8006c44:	617b      	str	r3, [r7, #20]
      break;
 8006c46:	e005      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c48:	4b19      	ldr	r3, [pc, #100]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c4a:	617b      	str	r3, [r7, #20]
      break;
 8006c4c:	e002      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	617b      	str	r3, [r7, #20]
      break;
 8006c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c54:	4b13      	ldr	r3, [pc, #76]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	3301      	adds	r3, #1
 8006c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c62:	4b10      	ldr	r3, [pc, #64]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	fb03 f202 	mul.w	r2, r3, r2
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	0e5b      	lsrs	r3, r3, #25
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	3301      	adds	r3, #1
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c94:	69bb      	ldr	r3, [r7, #24]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3724      	adds	r7, #36	@ 0x24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	0800d684 	.word	0x0800d684
 8006cac:	00f42400 	.word	0x00f42400
 8006cb0:	007a1200 	.word	0x007a1200

08006cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cb8:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cba:	681b      	ldr	r3, [r3, #0]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	20000000 	.word	0x20000000

08006ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006cd0:	f7ff fff0 	bl	8006cb4 <HAL_RCC_GetHCLKFreq>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4b06      	ldr	r3, [pc, #24]	@ (8006cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	4904      	ldr	r1, [pc, #16]	@ (8006cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ce2:	5ccb      	ldrb	r3, [r1, r3]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	0800d67c 	.word	0x0800d67c

08006cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006cfc:	f7ff ffda 	bl	8006cb4 <HAL_RCC_GetHCLKFreq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	0adb      	lsrs	r3, r3, #11
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	4904      	ldr	r1, [pc, #16]	@ (8006d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d0e:	5ccb      	ldrb	r3, [r1, r3]
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	0800d67c 	.word	0x0800d67c

08006d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d30:	4b2a      	ldr	r3, [pc, #168]	@ (8006ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d3c:	f7ff f9b6 	bl	80060ac <HAL_PWREx_GetVoltageRange>
 8006d40:	6178      	str	r0, [r7, #20]
 8006d42:	e014      	b.n	8006d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d44:	4b25      	ldr	r3, [pc, #148]	@ (8006ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d48:	4a24      	ldr	r2, [pc, #144]	@ (8006ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d50:	4b22      	ldr	r3, [pc, #136]	@ (8006ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d5c:	f7ff f9a6 	bl	80060ac <HAL_PWREx_GetVoltageRange>
 8006d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d62:	4b1e      	ldr	r3, [pc, #120]	@ (8006ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d66:	4a1d      	ldr	r2, [pc, #116]	@ (8006ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d74:	d10b      	bne.n	8006d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b80      	cmp	r3, #128	@ 0x80
 8006d7a:	d919      	bls.n	8006db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006d80:	d902      	bls.n	8006d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d82:	2302      	movs	r3, #2
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	e013      	b.n	8006db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d88:	2301      	movs	r3, #1
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	e010      	b.n	8006db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b80      	cmp	r3, #128	@ 0x80
 8006d92:	d902      	bls.n	8006d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d94:	2303      	movs	r3, #3
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	e00a      	b.n	8006db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b80      	cmp	r3, #128	@ 0x80
 8006d9e:	d102      	bne.n	8006da6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006da0:	2302      	movs	r3, #2
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	e004      	b.n	8006db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b70      	cmp	r3, #112	@ 0x70
 8006daa:	d101      	bne.n	8006db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006dac:	2301      	movs	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006db0:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f023 0207 	bic.w	r2, r3, #7
 8006db8:	4909      	ldr	r1, [pc, #36]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006dc0:	4b07      	ldr	r3, [pc, #28]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d001      	beq.n	8006dd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	40022000 	.word	0x40022000

08006de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dec:	2300      	movs	r3, #0
 8006dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006df0:	2300      	movs	r3, #0
 8006df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d031      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e08:	d01a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006e0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e0e:	d814      	bhi.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e18:	d10f      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e26:	e00c      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fa22 	bl	8007278 <RCCEx_PLLSAI1_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e38:	e003      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8006e3e:	e000      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e42:	7cfb      	ldrb	r3, [r7, #19]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e48:	4b51      	ldr	r3, [pc, #324]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e56:	494e      	ldr	r1, [pc, #312]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006e5e:	e001      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	7cfb      	ldrb	r3, [r7, #19]
 8006e62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 809e 	beq.w	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e72:	2300      	movs	r3, #0
 8006e74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e76:	4b46      	ldr	r3, [pc, #280]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006e86:	2300      	movs	r3, #0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e8c:	4b40      	ldr	r3, [pc, #256]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e90:	4a3f      	ldr	r2, [pc, #252]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e98:	4b3d      	ldr	r3, [pc, #244]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a39      	ldr	r2, [pc, #228]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eb4:	f7fd fa24 	bl	8004300 <HAL_GetTick>
 8006eb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006eba:	e009      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ebc:	f7fd fa20 	bl	8004300 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d902      	bls.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8006ece:	e005      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ed0:	4b30      	ldr	r3, [pc, #192]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0ef      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006edc:	7cfb      	ldrb	r3, [r7, #19]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d15a      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01e      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d019      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006efe:	4b24      	ldr	r3, [pc, #144]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f0a:	4b21      	ldr	r3, [pc, #132]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f10:	4a1f      	ldr	r2, [pc, #124]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f20:	4a1b      	ldr	r2, [pc, #108]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f2a:	4a19      	ldr	r2, [pc, #100]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3c:	f7fd f9e0 	bl	8004300 <HAL_GetTick>
 8006f40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f42:	e00b      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f44:	f7fd f9dc 	bl	8004300 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d902      	bls.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	74fb      	strb	r3, [r7, #19]
            break;
 8006f5a:	e006      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0ec      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006f6a:	7cfb      	ldrb	r3, [r7, #19]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f70:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7e:	4904      	ldr	r1, [pc, #16]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006f86:	e009      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f88:	7cfb      	ldrb	r3, [r7, #19]
 8006f8a:	74bb      	strb	r3, [r7, #18]
 8006f8c:	e006      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006f8e:	bf00      	nop
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f98:	7cfb      	ldrb	r3, [r7, #19]
 8006f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f9c:	7c7b      	ldrb	r3, [r7, #17]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d105      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa6:	4a8c      	ldr	r2, [pc, #560]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fba:	4b87      	ldr	r3, [pc, #540]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	f023 0203 	bic.w	r2, r3, #3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	4983      	ldr	r1, [pc, #524]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe2:	f023 020c 	bic.w	r2, r3, #12
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	497b      	ldr	r1, [pc, #492]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ffe:	4b76      	ldr	r3, [pc, #472]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007004:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700c:	4972      	ldr	r1, [pc, #456]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007020:	4b6d      	ldr	r3, [pc, #436]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007026:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	496a      	ldr	r1, [pc, #424]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007042:	4b65      	ldr	r3, [pc, #404]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007048:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007050:	4961      	ldr	r1, [pc, #388]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007064:	4b5c      	ldr	r3, [pc, #368]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007072:	4959      	ldr	r1, [pc, #356]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007086:	4b54      	ldr	r3, [pc, #336]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007094:	4950      	ldr	r1, [pc, #320]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070a8:	4b4b      	ldr	r3, [pc, #300]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b6:	4948      	ldr	r1, [pc, #288]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070ca:	4b43      	ldr	r3, [pc, #268]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	493f      	ldr	r1, [pc, #252]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d028      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ec:	4b3a      	ldr	r3, [pc, #232]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070fa:	4937      	ldr	r1, [pc, #220]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800710a:	d106      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800710c:	4b32      	ldr	r3, [pc, #200]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4a31      	ldr	r2, [pc, #196]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007116:	60d3      	str	r3, [r2, #12]
 8007118:	e011      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800711e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007122:	d10c      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3304      	adds	r3, #4
 8007128:	2101      	movs	r1, #1
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f8a4 	bl	8007278 <RCCEx_PLLSAI1_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007134:	7cfb      	ldrb	r3, [r7, #19]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800713a:	7cfb      	ldrb	r3, [r7, #19]
 800713c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d028      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800714a:	4b23      	ldr	r3, [pc, #140]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007158:	491f      	ldr	r1, [pc, #124]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007168:	d106      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800716a:	4b1b      	ldr	r3, [pc, #108]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	4a1a      	ldr	r2, [pc, #104]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007170:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007174:	60d3      	str	r3, [r2, #12]
 8007176:	e011      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800717c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007180:	d10c      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3304      	adds	r3, #4
 8007186:	2101      	movs	r1, #1
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f875 	bl	8007278 <RCCEx_PLLSAI1_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007192:	7cfb      	ldrb	r3, [r7, #19]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007198:	7cfb      	ldrb	r3, [r7, #19]
 800719a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d02b      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071a8:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b6:	4908      	ldr	r1, [pc, #32]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071c6:	d109      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c8:	4b03      	ldr	r3, [pc, #12]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	4a02      	ldr	r2, [pc, #8]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80071ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071d2:	60d3      	str	r3, [r2, #12]
 80071d4:	e014      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80071d6:	bf00      	nop
 80071d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071e4:	d10c      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	2101      	movs	r1, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f843 	bl	8007278 <RCCEx_PLLSAI1_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071f6:	7cfb      	ldrb	r3, [r7, #19]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80071fc:	7cfb      	ldrb	r3, [r7, #19]
 80071fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01c      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800720c:	4b19      	ldr	r3, [pc, #100]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007212:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721a:	4916      	ldr	r1, [pc, #88]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800721c:	4313      	orrs	r3, r2
 800721e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800722a:	d10c      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3304      	adds	r3, #4
 8007230:	2102      	movs	r1, #2
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f820 	bl	8007278 <RCCEx_PLLSAI1_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800723c:	7cfb      	ldrb	r3, [r7, #19]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8007242:	7cfb      	ldrb	r3, [r7, #19]
 8007244:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007252:	4b08      	ldr	r3, [pc, #32]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007258:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007260:	4904      	ldr	r1, [pc, #16]	@ (8007274 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007268:	7cbb      	ldrb	r3, [r7, #18]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40021000 	.word	0x40021000

08007278 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007286:	4b74      	ldr	r3, [pc, #464]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d018      	beq.n	80072c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007292:	4b71      	ldr	r3, [pc, #452]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0203 	and.w	r2, r3, #3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d10d      	bne.n	80072be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
       ||
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80072aa:	4b6b      	ldr	r3, [pc, #428]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	091b      	lsrs	r3, r3, #4
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
       ||
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d047      	beq.n	800734e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
 80072c2:	e044      	b.n	800734e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d018      	beq.n	80072fe <RCCEx_PLLSAI1_Config+0x86>
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d825      	bhi.n	800731c <RCCEx_PLLSAI1_Config+0xa4>
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d002      	beq.n	80072da <RCCEx_PLLSAI1_Config+0x62>
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d009      	beq.n	80072ec <RCCEx_PLLSAI1_Config+0x74>
 80072d8:	e020      	b.n	800731c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072da:	4b5f      	ldr	r3, [pc, #380]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d11d      	bne.n	8007322 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072ea:	e01a      	b.n	8007322 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d116      	bne.n	8007326 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072fc:	e013      	b.n	8007326 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072fe:	4b56      	ldr	r3, [pc, #344]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10f      	bne.n	800732a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800730a:	4b53      	ldr	r3, [pc, #332]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800731a:	e006      	b.n	800732a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
      break;
 8007320:	e004      	b.n	800732c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007322:	bf00      	nop
 8007324:	e002      	b.n	800732c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800732a:	bf00      	nop
    }

    if(status == HAL_OK)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10d      	bne.n	800734e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007332:	4b49      	ldr	r3, [pc, #292]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	3b01      	subs	r3, #1
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	430b      	orrs	r3, r1
 8007348:	4943      	ldr	r1, [pc, #268]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800734a:	4313      	orrs	r3, r2
 800734c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d17c      	bne.n	800744e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007354:	4b40      	ldr	r3, [pc, #256]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a3f      	ldr	r2, [pc, #252]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800735a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800735e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007360:	f7fc ffce 	bl	8004300 <HAL_GetTick>
 8007364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007366:	e009      	b.n	800737c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007368:	f7fc ffca 	bl	8004300 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d902      	bls.n	800737c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	73fb      	strb	r3, [r7, #15]
        break;
 800737a:	e005      	b.n	8007388 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800737c:	4b36      	ldr	r3, [pc, #216]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1ef      	bne.n	8007368 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d15f      	bne.n	800744e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d110      	bne.n	80073b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007394:	4b30      	ldr	r3, [pc, #192]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800739c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6892      	ldr	r2, [r2, #8]
 80073a4:	0211      	lsls	r1, r2, #8
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	68d2      	ldr	r2, [r2, #12]
 80073aa:	06d2      	lsls	r2, r2, #27
 80073ac:	430a      	orrs	r2, r1
 80073ae:	492a      	ldr	r1, [pc, #168]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	610b      	str	r3, [r1, #16]
 80073b4:	e027      	b.n	8007406 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d112      	bne.n	80073e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073bc:	4b26      	ldr	r3, [pc, #152]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80073c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6892      	ldr	r2, [r2, #8]
 80073cc:	0211      	lsls	r1, r2, #8
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6912      	ldr	r2, [r2, #16]
 80073d2:	0852      	lsrs	r2, r2, #1
 80073d4:	3a01      	subs	r2, #1
 80073d6:	0552      	lsls	r2, r2, #21
 80073d8:	430a      	orrs	r2, r1
 80073da:	491f      	ldr	r1, [pc, #124]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	610b      	str	r3, [r1, #16]
 80073e0:	e011      	b.n	8007406 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80073ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6892      	ldr	r2, [r2, #8]
 80073f2:	0211      	lsls	r1, r2, #8
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6952      	ldr	r2, [r2, #20]
 80073f8:	0852      	lsrs	r2, r2, #1
 80073fa:	3a01      	subs	r2, #1
 80073fc:	0652      	lsls	r2, r2, #25
 80073fe:	430a      	orrs	r2, r1
 8007400:	4915      	ldr	r1, [pc, #84]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007402:	4313      	orrs	r3, r2
 8007404:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007406:	4b14      	ldr	r3, [pc, #80]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a13      	ldr	r2, [pc, #76]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800740c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007410:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007412:	f7fc ff75 	bl	8004300 <HAL_GetTick>
 8007416:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007418:	e009      	b.n	800742e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800741a:	f7fc ff71 	bl	8004300 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d902      	bls.n	800742e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	73fb      	strb	r3, [r7, #15]
          break;
 800742c:	e005      	b.n	800743a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800742e:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0ef      	beq.n	800741a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007440:	4b05      	ldr	r3, [pc, #20]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	4903      	ldr	r1, [pc, #12]	@ (8007458 <RCCEx_PLLSAI1_Config+0x1e0>)
 800744a:	4313      	orrs	r3, r2
 800744c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	40021000 	.word	0x40021000

0800745c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e049      	b.n	8007502 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fc fc5c 	bl	8003d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f000 fa7e 	bl	800799c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	d001      	beq.n	8007524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e03b      	b.n	800759c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0201 	orr.w	r2, r2, #1
 800753a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a19      	ldr	r2, [pc, #100]	@ (80075a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <HAL_TIM_Base_Start_IT+0x4e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800754e:	d004      	beq.n	800755a <HAL_TIM_Base_Start_IT+0x4e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a15      	ldr	r2, [pc, #84]	@ (80075ac <HAL_TIM_Base_Start_IT+0xa0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d115      	bne.n	8007586 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	4b13      	ldr	r3, [pc, #76]	@ (80075b0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007562:	4013      	ands	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b06      	cmp	r3, #6
 800756a:	d015      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x8c>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007572:	d011      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007584:	e008      	b.n	8007598 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e000      	b.n	800759a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007598:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	40012c00 	.word	0x40012c00
 80075ac:	40014000 	.word	0x40014000
 80075b0:	00010007 	.word	0x00010007

080075b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d020      	beq.n	8007618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01b      	beq.n	8007618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0202 	mvn.w	r2, #2
 80075e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9ad 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 8007604:	e005      	b.n	8007612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f99f 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f9b0 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d020      	beq.n	8007664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01b      	beq.n	8007664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0204 	mvn.w	r2, #4
 8007634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f987 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 8007650:	e005      	b.n	800765e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f979 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f98a 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d020      	beq.n	80076b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01b      	beq.n	80076b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0208 	mvn.w	r2, #8
 8007680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2204      	movs	r2, #4
 8007686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f961 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 800769c:	e005      	b.n	80076aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f953 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f964 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d020      	beq.n	80076fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01b      	beq.n	80076fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0210 	mvn.w	r2, #16
 80076cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2208      	movs	r2, #8
 80076d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f93b 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f92d 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f93e 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00c      	beq.n	8007720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0201 	mvn.w	r2, #1
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7fb fc14 	bl	8002f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800773c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa9a 	bl	8007c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa92 	bl	8007c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00c      	beq.n	800778c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8fd 	bl	8007986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00c      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0220 	mvn.w	r2, #32
 80077a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa5a 	bl	8007c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_TIM_ConfigClockSource+0x1c>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e0b6      	b.n	8007942 <HAL_TIM_ConfigClockSource+0x18a>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007810:	d03e      	beq.n	8007890 <HAL_TIM_ConfigClockSource+0xd8>
 8007812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007816:	f200 8087 	bhi.w	8007928 <HAL_TIM_ConfigClockSource+0x170>
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800781e:	f000 8086 	beq.w	800792e <HAL_TIM_ConfigClockSource+0x176>
 8007822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007826:	d87f      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
 8007828:	2b70      	cmp	r3, #112	@ 0x70
 800782a:	d01a      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0xaa>
 800782c:	2b70      	cmp	r3, #112	@ 0x70
 800782e:	d87b      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
 8007830:	2b60      	cmp	r3, #96	@ 0x60
 8007832:	d050      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0x11e>
 8007834:	2b60      	cmp	r3, #96	@ 0x60
 8007836:	d877      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
 8007838:	2b50      	cmp	r3, #80	@ 0x50
 800783a:	d03c      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0xfe>
 800783c:	2b50      	cmp	r3, #80	@ 0x50
 800783e:	d873      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
 8007840:	2b40      	cmp	r3, #64	@ 0x40
 8007842:	d058      	beq.n	80078f6 <HAL_TIM_ConfigClockSource+0x13e>
 8007844:	2b40      	cmp	r3, #64	@ 0x40
 8007846:	d86f      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
 8007848:	2b30      	cmp	r3, #48	@ 0x30
 800784a:	d064      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x15e>
 800784c:	2b30      	cmp	r3, #48	@ 0x30
 800784e:	d86b      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
 8007850:	2b20      	cmp	r3, #32
 8007852:	d060      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x15e>
 8007854:	2b20      	cmp	r3, #32
 8007856:	d867      	bhi.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d05c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x15e>
 800785c:	2b10      	cmp	r3, #16
 800785e:	d05a      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x15e>
 8007860:	e062      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007872:	f000 f971 	bl	8007b58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	609a      	str	r2, [r3, #8]
      break;
 800788e:	e04f      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078a0:	f000 f95a 	bl	8007b58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078b2:	609a      	str	r2, [r3, #8]
      break;
 80078b4:	e03c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	461a      	mov	r2, r3
 80078c4:	f000 f8ce 	bl	8007a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2150      	movs	r1, #80	@ 0x50
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f927 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 80078d4:	e02c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078e2:	461a      	mov	r2, r3
 80078e4:	f000 f8ed 	bl	8007ac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2160      	movs	r1, #96	@ 0x60
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f917 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 80078f4:	e01c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	461a      	mov	r2, r3
 8007904:	f000 f8ae 	bl	8007a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2140      	movs	r1, #64	@ 0x40
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f907 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 8007914:	e00c      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f000 f8fe 	bl	8007b22 <TIM_ITRx_SetConfig>
      break;
 8007926:	e003      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
      break;
 800792c:	e000      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800792e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007a58 <TIM_Base_SetConfig+0xbc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x20>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ba:	d108      	bne.n	80079ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a21      	ldr	r2, [pc, #132]	@ (8007a58 <TIM_Base_SetConfig+0xbc>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00b      	beq.n	80079ee <TIM_Base_SetConfig+0x52>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079dc:	d007      	beq.n	80079ee <TIM_Base_SetConfig+0x52>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a1e      	ldr	r2, [pc, #120]	@ (8007a5c <TIM_Base_SetConfig+0xc0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d003      	beq.n	80079ee <TIM_Base_SetConfig+0x52>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a60 <TIM_Base_SetConfig+0xc4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d108      	bne.n	8007a00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a0c      	ldr	r2, [pc, #48]	@ (8007a58 <TIM_Base_SetConfig+0xbc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d007      	beq.n	8007a3c <TIM_Base_SetConfig+0xa0>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8007a5c <TIM_Base_SetConfig+0xc0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d003      	beq.n	8007a3c <TIM_Base_SetConfig+0xa0>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a0a      	ldr	r2, [pc, #40]	@ (8007a60 <TIM_Base_SetConfig+0xc4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d103      	bne.n	8007a44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	615a      	str	r2, [r3, #20]
}
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40012c00 	.word	0x40012c00
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40014400 	.word	0x40014400

08007a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f023 0201 	bic.w	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f023 030a 	bic.w	r3, r3, #10
 8007aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	f023 0210 	bic.w	r2, r3, #16
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	031b      	lsls	r3, r3, #12
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007afe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	621a      	str	r2, [r3, #32]
}
 8007b16:	bf00      	nop
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	f043 0307 	orr.w	r3, r3, #7
 8007b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	609a      	str	r2, [r3, #8]
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	021a      	lsls	r2, r3, #8
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	609a      	str	r2, [r3, #8]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e04f      	b.n	8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a21      	ldr	r2, [pc, #132]	@ (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d108      	bne.n	8007bec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007be0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a14      	ldr	r2, [pc, #80]	@ (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d009      	beq.n	8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c18:	d004      	beq.n	8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a10      	ldr	r2, [pc, #64]	@ (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d10c      	bne.n	8007c3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40014000 	.word	0x40014000

08007c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e040      	b.n	8007d34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7fc f860 	bl	8003d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2224      	movs	r2, #36	@ 0x24
 8007ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0201 	bic.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fe5e 	bl	80089a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc01 	bl	80084f4 <UART_SetConfig>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e01b      	b.n	8007d34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fedd 	bl	8008aec <UART_CheckIdleState>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	@ 0x28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d165      	bne.n	8007e1e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_UART_Transmit_DMA+0x22>
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e05e      	b.n	8007e20 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2221      	movs	r2, #33	@ 0x21
 8007d84:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d027      	beq.n	8007dde <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d92:	4a25      	ldr	r2, [pc, #148]	@ (8007e28 <HAL_UART_Transmit_DMA+0xec>)
 8007d94:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9a:	4a24      	ldr	r2, [pc, #144]	@ (8007e2c <HAL_UART_Transmit_DMA+0xf0>)
 8007d9c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da2:	4a23      	ldr	r2, [pc, #140]	@ (8007e30 <HAL_UART_Transmit_DMA+0xf4>)
 8007da4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007daa:	2200      	movs	r2, #0
 8007dac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db6:	4619      	mov	r1, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3328      	adds	r3, #40	@ 0x28
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	f7fd fe23 	bl	8005a0c <HAL_DMA_Start_IT>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e020      	b.n	8007e20 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2240      	movs	r2, #64	@ 0x40
 8007de4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	613b      	str	r3, [r7, #16]
   return(result);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e06:	623a      	str	r2, [r7, #32]
 8007e08:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	69f9      	ldr	r1, [r7, #28]
 8007e0c:	6a3a      	ldr	r2, [r7, #32]
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e5      	bne.n	8007de6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e000      	b.n	8007e20 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007e1e:	2302      	movs	r3, #2
  }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3728      	adds	r7, #40	@ 0x28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	08008f61 	.word	0x08008f61
 8007e2c:	08008ffb 	.word	0x08008ffb
 8007e30:	08009181 	.word	0x08009181

08007e34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	@ 0x28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d137      	bne.n	8007ebc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <HAL_UART_Receive_DMA+0x24>
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e030      	b.n	8007ebe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a18      	ldr	r2, [pc, #96]	@ (8007ec8 <HAL_UART_Receive_DMA+0x94>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d01f      	beq.n	8007eac <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d018      	beq.n	8007eac <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	613b      	str	r3, [r7, #16]
   return(result);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	69f9      	ldr	r1, [r7, #28]
 8007e9e:	6a3a      	ldr	r2, [r7, #32]
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 ff2a 	bl	8008d0c <UART_Start_Receive_DMA>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	e000      	b.n	8007ebe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3728      	adds	r7, #40	@ 0x28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40008000 	.word	0x40008000

08007ecc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b0ba      	sub	sp, #232	@ 0xe8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ef2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ef6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007efa:	4013      	ands	r3, r2
 8007efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d115      	bne.n	8007f34 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f0c:	f003 0320 	and.w	r3, r3, #32
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00f      	beq.n	8007f34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 82ae 	beq.w	8008486 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
      }
      return;
 8007f32:	e2a8      	b.n	8008486 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8117 	beq.w	800816c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f4e:	4b85      	ldr	r3, [pc, #532]	@ (8008164 <HAL_UART_IRQHandler+0x298>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 810a 	beq.w	800816c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d011      	beq.n	8007f88 <HAL_UART_IRQHandler+0xbc>
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00b      	beq.n	8007f88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f7e:	f043 0201 	orr.w	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d011      	beq.n	8007fb8 <HAL_UART_IRQHandler+0xec>
 8007f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fae:	f043 0204 	orr.w	r2, r3, #4
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d011      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x11c>
 8007fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fde:	f043 0202 	orr.w	r2, r3, #2
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff8:	f003 0320 	and.w	r3, r3, #32
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008004:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2208      	movs	r2, #8
 8008012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800801a:	f043 0208 	orr.w	r2, r3, #8
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <HAL_UART_IRQHandler+0x18a>
 8008030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008034:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800804c:	f043 0220 	orr.w	r2, r3, #32
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8214 	beq.w	800848a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00d      	beq.n	800808a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800806e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d007      	beq.n	800808a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008090:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809e:	2b40      	cmp	r3, #64	@ 0x40
 80080a0:	d005      	beq.n	80080ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d04f      	beq.n	800814e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fef2 	bl	8008e98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d141      	bne.n	8008146 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3308      	adds	r3, #8
 80080c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3308      	adds	r3, #8
 80080ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80080ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80080f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80080fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1d9      	bne.n	80080c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008112:	2b00      	cmp	r3, #0
 8008114:	d013      	beq.n	800813e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800811a:	4a13      	ldr	r2, [pc, #76]	@ (8008168 <HAL_UART_IRQHandler+0x29c>)
 800811c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008122:	4618      	mov	r0, r3
 8008124:	f7fd fd10 	bl	8005b48 <HAL_DMA_Abort_IT>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d017      	beq.n	800815e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813c:	e00f      	b.n	800815e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f9c2 	bl	80084c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008144:	e00b      	b.n	800815e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9be 	bl	80084c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814c:	e007      	b.n	800815e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f9ba 	bl	80084c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800815c:	e195      	b.n	800848a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815e:	bf00      	nop
    return;
 8008160:	e193      	b.n	800848a <HAL_UART_IRQHandler+0x5be>
 8008162:	bf00      	nop
 8008164:	04000120 	.word	0x04000120
 8008168:	080091ff 	.word	0x080091ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008170:	2b01      	cmp	r3, #1
 8008172:	f040 814e 	bne.w	8008412 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817a:	f003 0310 	and.w	r3, r3, #16
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8147 	beq.w	8008412 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8140 	beq.w	8008412 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2210      	movs	r2, #16
 8008198:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a4:	2b40      	cmp	r3, #64	@ 0x40
 80081a6:	f040 80b8 	bne.w	800831a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8167 	beq.w	800848e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80081c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f080 815f 	bcs.w	800848e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 8086 	bne.w	80082f8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008216:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800821a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008222:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800822e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1da      	bne.n	80081ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800825a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800825e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008262:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800826c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e1      	bne.n	8008236 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008296:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008298:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800829c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e3      	bne.n	8008272 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082c8:	f023 0310 	bic.w	r3, r3, #16
 80082cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e4      	bne.n	80082b8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fd fbea 	bl	8005acc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800830a:	b29b      	uxth	r3, r3
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	b29b      	uxth	r3, r3
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f8e2 	bl	80084dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008318:	e0b9      	b.n	800848e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008326:	b29b      	uxth	r3, r3
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80ab 	beq.w	8008492 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800833c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80a6 	beq.w	8008492 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008356:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800835a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008368:	647b      	str	r3, [r7, #68]	@ 0x44
 800836a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800836e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e4      	bne.n	8008346 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	623b      	str	r3, [r7, #32]
   return(result);
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80083a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e3      	bne.n	800837c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f023 0310 	bic.w	r3, r3, #16
 80083dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083ea:	61fb      	str	r3, [r7, #28]
 80083ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	69b9      	ldr	r1, [r7, #24]
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	617b      	str	r3, [r7, #20]
   return(result);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e4      	bne.n	80083c8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2202      	movs	r2, #2
 8008402:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008404:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f866 	bl	80084dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008410:	e03f      	b.n	8008492 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <HAL_UART_IRQHandler+0x570>
 800841e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d008      	beq.n	800843c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 ff22 	bl	800927e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800843a:	e02d      	b.n	8008498 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800843c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00e      	beq.n	8008466 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800844c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01c      	beq.n	8008496 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
    }
    return;
 8008464:	e017      	b.n	8008496 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800846a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d012      	beq.n	8008498 <HAL_UART_IRQHandler+0x5cc>
 8008472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00c      	beq.n	8008498 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fed3 	bl	800922a <UART_EndTransmit_IT>
    return;
 8008484:	e008      	b.n	8008498 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008486:	bf00      	nop
 8008488:	e006      	b.n	8008498 <HAL_UART_IRQHandler+0x5cc>
    return;
 800848a:	bf00      	nop
 800848c:	e004      	b.n	8008498 <HAL_UART_IRQHandler+0x5cc>
      return;
 800848e:	bf00      	nop
 8008490:	e002      	b.n	8008498 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008492:	bf00      	nop
 8008494:	e000      	b.n	8008498 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008496:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008498:	37e8      	adds	r7, #232	@ 0xe8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop

080084a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084f8:	b08a      	sub	sp, #40	@ 0x28
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	431a      	orrs	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	431a      	orrs	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	4313      	orrs	r3, r2
 800851a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	4b9e      	ldr	r3, [pc, #632]	@ (800879c <UART_SetConfig+0x2a8>)
 8008524:	4013      	ands	r3, r2
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	6812      	ldr	r2, [r2, #0]
 800852a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800852c:	430b      	orrs	r3, r1
 800852e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a93      	ldr	r2, [pc, #588]	@ (80087a0 <UART_SetConfig+0x2ac>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d004      	beq.n	8008560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800855c:	4313      	orrs	r3, r2
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008570:	430a      	orrs	r2, r1
 8008572:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a8a      	ldr	r2, [pc, #552]	@ (80087a4 <UART_SetConfig+0x2b0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d126      	bne.n	80085cc <UART_SetConfig+0xd8>
 800857e:	4b8a      	ldr	r3, [pc, #552]	@ (80087a8 <UART_SetConfig+0x2b4>)
 8008580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	2b03      	cmp	r3, #3
 800858a:	d81b      	bhi.n	80085c4 <UART_SetConfig+0xd0>
 800858c:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <UART_SetConfig+0xa0>)
 800858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008592:	bf00      	nop
 8008594:	080085a5 	.word	0x080085a5
 8008598:	080085b5 	.word	0x080085b5
 800859c:	080085ad 	.word	0x080085ad
 80085a0:	080085bd 	.word	0x080085bd
 80085a4:	2301      	movs	r3, #1
 80085a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085aa:	e0ab      	b.n	8008704 <UART_SetConfig+0x210>
 80085ac:	2302      	movs	r3, #2
 80085ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085b2:	e0a7      	b.n	8008704 <UART_SetConfig+0x210>
 80085b4:	2304      	movs	r3, #4
 80085b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ba:	e0a3      	b.n	8008704 <UART_SetConfig+0x210>
 80085bc:	2308      	movs	r3, #8
 80085be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085c2:	e09f      	b.n	8008704 <UART_SetConfig+0x210>
 80085c4:	2310      	movs	r3, #16
 80085c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ca:	e09b      	b.n	8008704 <UART_SetConfig+0x210>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a76      	ldr	r2, [pc, #472]	@ (80087ac <UART_SetConfig+0x2b8>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d138      	bne.n	8008648 <UART_SetConfig+0x154>
 80085d6:	4b74      	ldr	r3, [pc, #464]	@ (80087a8 <UART_SetConfig+0x2b4>)
 80085d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085dc:	f003 030c 	and.w	r3, r3, #12
 80085e0:	2b0c      	cmp	r3, #12
 80085e2:	d82d      	bhi.n	8008640 <UART_SetConfig+0x14c>
 80085e4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ec <UART_SetConfig+0xf8>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	08008621 	.word	0x08008621
 80085f0:	08008641 	.word	0x08008641
 80085f4:	08008641 	.word	0x08008641
 80085f8:	08008641 	.word	0x08008641
 80085fc:	08008631 	.word	0x08008631
 8008600:	08008641 	.word	0x08008641
 8008604:	08008641 	.word	0x08008641
 8008608:	08008641 	.word	0x08008641
 800860c:	08008629 	.word	0x08008629
 8008610:	08008641 	.word	0x08008641
 8008614:	08008641 	.word	0x08008641
 8008618:	08008641 	.word	0x08008641
 800861c:	08008639 	.word	0x08008639
 8008620:	2300      	movs	r3, #0
 8008622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008626:	e06d      	b.n	8008704 <UART_SetConfig+0x210>
 8008628:	2302      	movs	r3, #2
 800862a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862e:	e069      	b.n	8008704 <UART_SetConfig+0x210>
 8008630:	2304      	movs	r3, #4
 8008632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008636:	e065      	b.n	8008704 <UART_SetConfig+0x210>
 8008638:	2308      	movs	r3, #8
 800863a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800863e:	e061      	b.n	8008704 <UART_SetConfig+0x210>
 8008640:	2310      	movs	r3, #16
 8008642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008646:	e05d      	b.n	8008704 <UART_SetConfig+0x210>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a58      	ldr	r2, [pc, #352]	@ (80087b0 <UART_SetConfig+0x2bc>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d125      	bne.n	800869e <UART_SetConfig+0x1aa>
 8008652:	4b55      	ldr	r3, [pc, #340]	@ (80087a8 <UART_SetConfig+0x2b4>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008658:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800865c:	2b30      	cmp	r3, #48	@ 0x30
 800865e:	d016      	beq.n	800868e <UART_SetConfig+0x19a>
 8008660:	2b30      	cmp	r3, #48	@ 0x30
 8008662:	d818      	bhi.n	8008696 <UART_SetConfig+0x1a2>
 8008664:	2b20      	cmp	r3, #32
 8008666:	d00a      	beq.n	800867e <UART_SetConfig+0x18a>
 8008668:	2b20      	cmp	r3, #32
 800866a:	d814      	bhi.n	8008696 <UART_SetConfig+0x1a2>
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <UART_SetConfig+0x182>
 8008670:	2b10      	cmp	r3, #16
 8008672:	d008      	beq.n	8008686 <UART_SetConfig+0x192>
 8008674:	e00f      	b.n	8008696 <UART_SetConfig+0x1a2>
 8008676:	2300      	movs	r3, #0
 8008678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800867c:	e042      	b.n	8008704 <UART_SetConfig+0x210>
 800867e:	2302      	movs	r3, #2
 8008680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008684:	e03e      	b.n	8008704 <UART_SetConfig+0x210>
 8008686:	2304      	movs	r3, #4
 8008688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868c:	e03a      	b.n	8008704 <UART_SetConfig+0x210>
 800868e:	2308      	movs	r3, #8
 8008690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008694:	e036      	b.n	8008704 <UART_SetConfig+0x210>
 8008696:	2310      	movs	r3, #16
 8008698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869c:	e032      	b.n	8008704 <UART_SetConfig+0x210>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a3f      	ldr	r2, [pc, #252]	@ (80087a0 <UART_SetConfig+0x2ac>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d12a      	bne.n	80086fe <UART_SetConfig+0x20a>
 80086a8:	4b3f      	ldr	r3, [pc, #252]	@ (80087a8 <UART_SetConfig+0x2b4>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80086b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086b6:	d01a      	beq.n	80086ee <UART_SetConfig+0x1fa>
 80086b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086bc:	d81b      	bhi.n	80086f6 <UART_SetConfig+0x202>
 80086be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c2:	d00c      	beq.n	80086de <UART_SetConfig+0x1ea>
 80086c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c8:	d815      	bhi.n	80086f6 <UART_SetConfig+0x202>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <UART_SetConfig+0x1e2>
 80086ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d2:	d008      	beq.n	80086e6 <UART_SetConfig+0x1f2>
 80086d4:	e00f      	b.n	80086f6 <UART_SetConfig+0x202>
 80086d6:	2300      	movs	r3, #0
 80086d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086dc:	e012      	b.n	8008704 <UART_SetConfig+0x210>
 80086de:	2302      	movs	r3, #2
 80086e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e4:	e00e      	b.n	8008704 <UART_SetConfig+0x210>
 80086e6:	2304      	movs	r3, #4
 80086e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ec:	e00a      	b.n	8008704 <UART_SetConfig+0x210>
 80086ee:	2308      	movs	r3, #8
 80086f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f4:	e006      	b.n	8008704 <UART_SetConfig+0x210>
 80086f6:	2310      	movs	r3, #16
 80086f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fc:	e002      	b.n	8008704 <UART_SetConfig+0x210>
 80086fe:	2310      	movs	r3, #16
 8008700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a25      	ldr	r2, [pc, #148]	@ (80087a0 <UART_SetConfig+0x2ac>)
 800870a:	4293      	cmp	r3, r2
 800870c:	f040 808a 	bne.w	8008824 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008710:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008714:	2b08      	cmp	r3, #8
 8008716:	d824      	bhi.n	8008762 <UART_SetConfig+0x26e>
 8008718:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <UART_SetConfig+0x22c>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008745 	.word	0x08008745
 8008724:	08008763 	.word	0x08008763
 8008728:	0800874d 	.word	0x0800874d
 800872c:	08008763 	.word	0x08008763
 8008730:	08008753 	.word	0x08008753
 8008734:	08008763 	.word	0x08008763
 8008738:	08008763 	.word	0x08008763
 800873c:	08008763 	.word	0x08008763
 8008740:	0800875b 	.word	0x0800875b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fe fac2 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8008748:	61f8      	str	r0, [r7, #28]
        break;
 800874a:	e010      	b.n	800876e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800874c:	4b19      	ldr	r3, [pc, #100]	@ (80087b4 <UART_SetConfig+0x2c0>)
 800874e:	61fb      	str	r3, [r7, #28]
        break;
 8008750:	e00d      	b.n	800876e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008752:	f7fe fa23 	bl	8006b9c <HAL_RCC_GetSysClockFreq>
 8008756:	61f8      	str	r0, [r7, #28]
        break;
 8008758:	e009      	b.n	800876e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800875e:	61fb      	str	r3, [r7, #28]
        break;
 8008760:	e005      	b.n	800876e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800876c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8109 	beq.w	8008988 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	4413      	add	r3, r2
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	429a      	cmp	r2, r3
 8008784:	d305      	bcc.n	8008792 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	429a      	cmp	r2, r3
 8008790:	d912      	bls.n	80087b8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008798:	e0f6      	b.n	8008988 <UART_SetConfig+0x494>
 800879a:	bf00      	nop
 800879c:	efff69f3 	.word	0xefff69f3
 80087a0:	40008000 	.word	0x40008000
 80087a4:	40013800 	.word	0x40013800
 80087a8:	40021000 	.word	0x40021000
 80087ac:	40004400 	.word	0x40004400
 80087b0:	40004800 	.word	0x40004800
 80087b4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	2200      	movs	r2, #0
 80087bc:	461c      	mov	r4, r3
 80087be:	4615      	mov	r5, r2
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	f04f 0300 	mov.w	r3, #0
 80087c8:	022b      	lsls	r3, r5, #8
 80087ca:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80087ce:	0222      	lsls	r2, r4, #8
 80087d0:	68f9      	ldr	r1, [r7, #12]
 80087d2:	6849      	ldr	r1, [r1, #4]
 80087d4:	0849      	lsrs	r1, r1, #1
 80087d6:	2000      	movs	r0, #0
 80087d8:	4688      	mov	r8, r1
 80087da:	4681      	mov	r9, r0
 80087dc:	eb12 0a08 	adds.w	sl, r2, r8
 80087e0:	eb43 0b09 	adc.w	fp, r3, r9
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f2:	4650      	mov	r0, sl
 80087f4:	4659      	mov	r1, fp
 80087f6:	f7f8 f9f7 	bl	8000be8 <__aeabi_uldivmod>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4613      	mov	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008808:	d308      	bcc.n	800881c <UART_SetConfig+0x328>
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008810:	d204      	bcs.n	800881c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	e0b5      	b.n	8008988 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008822:	e0b1      	b.n	8008988 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800882c:	d15d      	bne.n	80088ea <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800882e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008832:	2b08      	cmp	r3, #8
 8008834:	d827      	bhi.n	8008886 <UART_SetConfig+0x392>
 8008836:	a201      	add	r2, pc, #4	@ (adr r2, 800883c <UART_SetConfig+0x348>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	08008887 	.word	0x08008887
 800884c:	08008877 	.word	0x08008877
 8008850:	08008887 	.word	0x08008887
 8008854:	08008887 	.word	0x08008887
 8008858:	08008887 	.word	0x08008887
 800885c:	0800887f 	.word	0x0800887f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008860:	f7fe fa34 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8008864:	61f8      	str	r0, [r7, #28]
        break;
 8008866:	e014      	b.n	8008892 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008868:	f7fe fa46 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 800886c:	61f8      	str	r0, [r7, #28]
        break;
 800886e:	e010      	b.n	8008892 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008870:	4b4c      	ldr	r3, [pc, #304]	@ (80089a4 <UART_SetConfig+0x4b0>)
 8008872:	61fb      	str	r3, [r7, #28]
        break;
 8008874:	e00d      	b.n	8008892 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008876:	f7fe f991 	bl	8006b9c <HAL_RCC_GetSysClockFreq>
 800887a:	61f8      	str	r0, [r7, #28]
        break;
 800887c:	e009      	b.n	8008892 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008882:	61fb      	str	r3, [r7, #28]
        break;
 8008884:	e005      	b.n	8008892 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d077      	beq.n	8008988 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	005a      	lsls	r2, r3, #1
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	441a      	add	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b0f      	cmp	r3, #15
 80088b2:	d916      	bls.n	80088e2 <UART_SetConfig+0x3ee>
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ba:	d212      	bcs.n	80088e2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f023 030f 	bic.w	r3, r3, #15
 80088c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	8afb      	ldrh	r3, [r7, #22]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	8afa      	ldrh	r2, [r7, #22]
 80088de:	60da      	str	r2, [r3, #12]
 80088e0:	e052      	b.n	8008988 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088e8:	e04e      	b.n	8008988 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d827      	bhi.n	8008942 <UART_SetConfig+0x44e>
 80088f2:	a201      	add	r2, pc, #4	@ (adr r2, 80088f8 <UART_SetConfig+0x404>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	08008925 	.word	0x08008925
 8008900:	0800892d 	.word	0x0800892d
 8008904:	08008943 	.word	0x08008943
 8008908:	08008933 	.word	0x08008933
 800890c:	08008943 	.word	0x08008943
 8008910:	08008943 	.word	0x08008943
 8008914:	08008943 	.word	0x08008943
 8008918:	0800893b 	.word	0x0800893b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800891c:	f7fe f9d6 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8008920:	61f8      	str	r0, [r7, #28]
        break;
 8008922:	e014      	b.n	800894e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008924:	f7fe f9e8 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 8008928:	61f8      	str	r0, [r7, #28]
        break;
 800892a:	e010      	b.n	800894e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800892c:	4b1d      	ldr	r3, [pc, #116]	@ (80089a4 <UART_SetConfig+0x4b0>)
 800892e:	61fb      	str	r3, [r7, #28]
        break;
 8008930:	e00d      	b.n	800894e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008932:	f7fe f933 	bl	8006b9c <HAL_RCC_GetSysClockFreq>
 8008936:	61f8      	str	r0, [r7, #28]
        break;
 8008938:	e009      	b.n	800894e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800893a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800893e:	61fb      	str	r3, [r7, #28]
        break;
 8008940:	e005      	b.n	800894e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800894c:	bf00      	nop
    }

    if (pclk != 0U)
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d019      	beq.n	8008988 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	085a      	lsrs	r2, r3, #1
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d909      	bls.n	8008982 <UART_SetConfig+0x48e>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008974:	d205      	bcs.n	8008982 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60da      	str	r2, [r3, #12]
 8008980:	e002      	b.n	8008988 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008994:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	@ 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089a2:	bf00      	nop
 80089a4:	00f42400 	.word	0x00f42400

080089a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00a      	beq.n	8008a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	f003 0310 	and.w	r3, r3, #16
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00a      	beq.n	8008a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00a      	beq.n	8008a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01a      	beq.n	8008abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa6:	d10a      	bne.n	8008abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	605a      	str	r2, [r3, #4]
  }
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b098      	sub	sp, #96	@ 0x60
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008afc:	f7fb fc00 	bl	8004300 <HAL_GetTick>
 8008b00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d12e      	bne.n	8008b6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f88c 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d021      	beq.n	8008b6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e6      	bne.n	8008b2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e062      	b.n	8008c34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d149      	bne.n	8008c10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b84:	2200      	movs	r2, #0
 8008b86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f856 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d03c      	beq.n	8008c10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e6      	bne.n	8008b96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008be8:	61fa      	str	r2, [r7, #28]
 8008bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	69b9      	ldr	r1, [r7, #24]
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e5      	bne.n	8008bc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e011      	b.n	8008c34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3758      	adds	r7, #88	@ 0x58
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4c:	e049      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c54:	d045      	beq.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c56:	f7fb fb53 	bl	8004300 <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d302      	bcc.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e048      	b.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d031      	beq.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d110      	bne.n	8008cae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2208      	movs	r2, #8
 8008c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f8ff 	bl	8008e98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e029      	b.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cbc:	d111      	bne.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 f8e5 	bl	8008e98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e00f      	b.n	8008d02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69da      	ldr	r2, [r3, #28]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4013      	ands	r3, r2
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	bf0c      	ite	eq
 8008cf2:	2301      	moveq	r3, #1
 8008cf4:	2300      	movne	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d0a6      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b096      	sub	sp, #88	@ 0x58
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	88fa      	ldrh	r2, [r7, #6]
 8008d24:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2222      	movs	r2, #34	@ 0x22
 8008d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d028      	beq.n	8008d92 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d44:	4a3e      	ldr	r2, [pc, #248]	@ (8008e40 <UART_Start_Receive_DMA+0x134>)
 8008d46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d4c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e44 <UART_Start_Receive_DMA+0x138>)
 8008d4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d54:	4a3c      	ldr	r2, [pc, #240]	@ (8008e48 <UART_Start_Receive_DMA+0x13c>)
 8008d56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3324      	adds	r3, #36	@ 0x24
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d70:	461a      	mov	r2, r3
 8008d72:	88fb      	ldrh	r3, [r7, #6]
 8008d74:	f7fc fe4a 	bl	8005a0c <HAL_DMA_Start_IT>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2210      	movs	r2, #16
 8008d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e051      	b.n	8008e36 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d018      	beq.n	8008dcc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dae:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e6      	bne.n	8008d9a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	f043 0301 	orr.w	r3, r3, #1
 8008de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008dec:	637a      	str	r2, [r7, #52]	@ 0x34
 8008dee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008df2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e5      	bne.n	8008dcc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3308      	adds	r3, #8
 8008e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e20:	623a      	str	r2, [r7, #32]
 8008e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	69f9      	ldr	r1, [r7, #28]
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e5      	bne.n	8008e00 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3758      	adds	r7, #88	@ 0x58
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	08009017 	.word	0x08009017
 8008e44:	08009143 	.word	0x08009143
 8008e48:	08009181 	.word	0x08009181

08008e4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b089      	sub	sp, #36	@ 0x24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	61bb      	str	r3, [r7, #24]
 8008e74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6979      	ldr	r1, [r7, #20]
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e6      	bne.n	8008e54 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008e8c:	bf00      	nop
 8008e8e:	3724      	adds	r7, #36	@ 0x24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b095      	sub	sp, #84	@ 0x54
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ebe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ec0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e6      	bne.n	8008ea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f023 0301 	bic.w	r3, r3, #1
 8008ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e5      	bne.n	8008ed2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d118      	bne.n	8008f40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f023 0310 	bic.w	r3, r3, #16
 8008f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6979      	ldr	r1, [r7, #20]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	613b      	str	r3, [r7, #16]
   return(result);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e6      	bne.n	8008f0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008f54:	bf00      	nop
 8008f56:	3754      	adds	r7, #84	@ 0x54
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b090      	sub	sp, #64	@ 0x40
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d137      	bne.n	8008fec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3308      	adds	r3, #8
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	623b      	str	r3, [r7, #32]
   return(result);
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fa4:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e5      	bne.n	8008f84 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd6:	61fb      	str	r3, [r7, #28]
 8008fd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	69b9      	ldr	r1, [r7, #24]
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fea:	e002      	b.n	8008ff2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008fec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008fee:	f7f9 f8c7 	bl	8002180 <HAL_UART_TxCpltCallback>
}
 8008ff2:	bf00      	nop
 8008ff4:	3740      	adds	r7, #64	@ 0x40
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7ff fa49 	bl	80084a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b09c      	sub	sp, #112	@ 0x70
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d171      	bne.n	8009116 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009034:	2200      	movs	r2, #0
 8009036:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800903a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800904a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800904e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009058:	65bb      	str	r3, [r7, #88]	@ 0x58
 800905a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800905e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e6      	bne.n	800903a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3308      	adds	r3, #8
 8009072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800907c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800907e:	f023 0301 	bic.w	r3, r3, #1
 8009082:	667b      	str	r3, [r7, #100]	@ 0x64
 8009084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3308      	adds	r3, #8
 800908a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800908c:	647a      	str	r2, [r7, #68]	@ 0x44
 800908e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800909a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e5      	bne.n	800906c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	623b      	str	r3, [r7, #32]
   return(result);
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80090b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3308      	adds	r3, #8
 80090be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80090c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80090c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e5      	bne.n	80090a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090d6:	2220      	movs	r2, #32
 80090d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d118      	bne.n	8009116 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	e853 3f00 	ldrex	r3, [r3]
 80090f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f023 0310 	bic.w	r3, r3, #16
 80090f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	69b9      	ldr	r1, [r7, #24]
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	617b      	str	r3, [r7, #20]
   return(result);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e6      	bne.n	80090e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009118:	2200      	movs	r2, #0
 800911a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800911c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800911e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009120:	2b01      	cmp	r3, #1
 8009122:	d107      	bne.n	8009134 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009126:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800912a:	4619      	mov	r1, r3
 800912c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800912e:	f7ff f9d5 	bl	80084dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009132:	e002      	b.n	800913a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009134:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009136:	f7f9 f835 	bl	80021a4 <HAL_UART_RxCpltCallback>
}
 800913a:	bf00      	nop
 800913c:	3770      	adds	r7, #112	@ 0x70
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800915a:	2b01      	cmp	r3, #1
 800915c:	d109      	bne.n	8009172 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009164:	085b      	lsrs	r3, r3, #1
 8009166:	b29b      	uxth	r3, r3
 8009168:	4619      	mov	r1, r3
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff f9b6 	bl	80084dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009170:	e002      	b.n	8009178 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff f99e 	bl	80084b4 <HAL_UART_RxHalfCpltCallback>
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009192:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800919a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a6:	2b80      	cmp	r3, #128	@ 0x80
 80091a8:	d109      	bne.n	80091be <UART_DMAError+0x3e>
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b21      	cmp	r3, #33	@ 0x21
 80091ae:	d106      	bne.n	80091be <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80091b8:	6978      	ldr	r0, [r7, #20]
 80091ba:	f7ff fe47 	bl	8008e4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c8:	2b40      	cmp	r3, #64	@ 0x40
 80091ca:	d109      	bne.n	80091e0 <UART_DMAError+0x60>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b22      	cmp	r3, #34	@ 0x22
 80091d0:	d106      	bne.n	80091e0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80091da:	6978      	ldr	r0, [r7, #20]
 80091dc:	f7ff fe5c 	bl	8008e98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e6:	f043 0210 	orr.w	r2, r3, #16
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091f0:	6978      	ldr	r0, [r7, #20]
 80091f2:	f7ff f969 	bl	80084c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091f6:	bf00      	nop
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f7ff f953 	bl	80084c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b088      	sub	sp, #32
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009246:	61fb      	str	r3, [r7, #28]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6979      	ldr	r1, [r7, #20]
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	613b      	str	r3, [r7, #16]
   return(result);
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e6      	bne.n	8009232 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7f8 ff85 	bl	8002180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009276:	bf00      	nop
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <arm_cfft_radix8by2_f32>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	ed2d 8b08 	vpush	{d8-d11}
 800929c:	4607      	mov	r7, r0
 800929e:	4608      	mov	r0, r1
 80092a0:	f8b7 c000 	ldrh.w	ip, [r7]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80092aa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80092ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092b2:	f000 80b0 	beq.w	8009416 <arm_cfft_radix8by2_f32+0x182>
 80092b6:	008c      	lsls	r4, r1, #2
 80092b8:	3410      	adds	r4, #16
 80092ba:	f100 0310 	add.w	r3, r0, #16
 80092be:	1906      	adds	r6, r0, r4
 80092c0:	3210      	adds	r2, #16
 80092c2:	4444      	add	r4, r8
 80092c4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80092c8:	f108 0510 	add.w	r5, r8, #16
 80092cc:	ed15 2a04 	vldr	s4, [r5, #-16]
 80092d0:	ed55 2a03 	vldr	s5, [r5, #-12]
 80092d4:	ed54 4a04 	vldr	s9, [r4, #-16]
 80092d8:	ed14 4a03 	vldr	s8, [r4, #-12]
 80092dc:	ed14 6a02 	vldr	s12, [r4, #-8]
 80092e0:	ed54 5a01 	vldr	s11, [r4, #-4]
 80092e4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80092e8:	ed15 0a02 	vldr	s0, [r5, #-8]
 80092ec:	ed55 0a01 	vldr	s1, [r5, #-4]
 80092f0:	ed56 6a04 	vldr	s13, [r6, #-16]
 80092f4:	ed16 3a03 	vldr	s6, [r6, #-12]
 80092f8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80092fc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009300:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009304:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009308:	ed56 1a01 	vldr	s3, [r6, #-4]
 800930c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009310:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009314:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009318:	ee33 9a04 	vadd.f32	s18, s6, s8
 800931c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009320:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009324:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009328:	ee71 8a06 	vadd.f32	s17, s2, s12
 800932c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009330:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009334:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009338:	ed03 aa01 	vstr	s20, [r3, #-4]
 800933c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009340:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009344:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009348:	ed46 8a02 	vstr	s17, [r6, #-8]
 800934c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009350:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009354:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009358:	ed52 6a03 	vldr	s13, [r2, #-12]
 800935c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009360:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009364:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009368:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800936c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009370:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009374:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009378:	ee27 7a03 	vmul.f32	s14, s14, s6
 800937c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009380:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009384:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009388:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800938c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009390:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009394:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009398:	ed05 3a04 	vstr	s6, [r5, #-16]
 800939c:	ed04 4a04 	vstr	s8, [r4, #-16]
 80093a0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80093a4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80093a8:	ee76 6a41 	vsub.f32	s13, s12, s2
 80093ac:	ee35 5a40 	vsub.f32	s10, s10, s0
 80093b0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80093b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80093b8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80093bc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80093c0:	ee66 4a87 	vmul.f32	s9, s13, s14
 80093c4:	ee25 4a25 	vmul.f32	s8, s10, s11
 80093c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80093cc:	ee25 5a07 	vmul.f32	s10, s10, s14
 80093d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80093d4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80093d8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80093dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80093e0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80093e4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80093e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80093ec:	3310      	adds	r3, #16
 80093ee:	4563      	cmp	r3, ip
 80093f0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80093f4:	f106 0610 	add.w	r6, r6, #16
 80093f8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80093fc:	f102 0210 	add.w	r2, r2, #16
 8009400:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009404:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009408:	f105 0510 	add.w	r5, r5, #16
 800940c:	f104 0410 	add.w	r4, r4, #16
 8009410:	f47f af5c 	bne.w	80092cc <arm_cfft_radix8by2_f32+0x38>
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	b28c      	uxth	r4, r1
 8009418:	4621      	mov	r1, r4
 800941a:	2302      	movs	r3, #2
 800941c:	f000 fc1c 	bl	8009c58 <arm_radix8_butterfly_f32>
 8009420:	ecbd 8b08 	vpop	{d8-d11}
 8009424:	4621      	mov	r1, r4
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4640      	mov	r0, r8
 800942a:	2302      	movs	r3, #2
 800942c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009430:	f000 bc12 	b.w	8009c58 <arm_radix8_butterfly_f32>

08009434 <arm_cfft_radix8by4_f32>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	ed2d 8b0a 	vpush	{d8-d12}
 800943c:	b08d      	sub	sp, #52	@ 0x34
 800943e:	460d      	mov	r5, r1
 8009440:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009442:	8801      	ldrh	r1, [r0, #0]
 8009444:	6842      	ldr	r2, [r0, #4]
 8009446:	900a      	str	r0, [sp, #40]	@ 0x28
 8009448:	0849      	lsrs	r1, r1, #1
 800944a:	008b      	lsls	r3, r1, #2
 800944c:	18ee      	adds	r6, r5, r3
 800944e:	18f0      	adds	r0, r6, r3
 8009450:	edd0 5a00 	vldr	s11, [r0]
 8009454:	edd5 7a00 	vldr	s15, [r5]
 8009458:	ed96 7a00 	vldr	s14, [r6]
 800945c:	edd0 3a01 	vldr	s7, [r0, #4]
 8009460:	ed96 4a01 	vldr	s8, [r6, #4]
 8009464:	ed95 5a01 	vldr	s10, [r5, #4]
 8009468:	9008      	str	r0, [sp, #32]
 800946a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800946e:	18c7      	adds	r7, r0, r3
 8009470:	edd7 4a00 	vldr	s9, [r7]
 8009474:	ed97 3a01 	vldr	s6, [r7, #4]
 8009478:	9701      	str	r7, [sp, #4]
 800947a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800947e:	462c      	mov	r4, r5
 8009480:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009484:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009488:	ee16 ca90 	vmov	ip, s13
 800948c:	f844 cb08 	str.w	ip, [r4], #8
 8009490:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009494:	edd6 5a01 	vldr	s11, [r6, #4]
 8009498:	edd7 2a01 	vldr	s5, [r7, #4]
 800949c:	9404      	str	r4, [sp, #16]
 800949e:	ee35 5a63 	vsub.f32	s10, s10, s7
 80094a2:	ee74 3a27 	vadd.f32	s7, s8, s15
 80094a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80094aa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80094ae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80094b2:	0849      	lsrs	r1, r1, #1
 80094b4:	f102 0e08 	add.w	lr, r2, #8
 80094b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80094bc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80094c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80094c2:	ee35 4a47 	vsub.f32	s8, s10, s14
 80094c6:	f1a1 0902 	sub.w	r9, r1, #2
 80094ca:	f8cd e00c 	str.w	lr, [sp, #12]
 80094ce:	4631      	mov	r1, r6
 80094d0:	ee13 ea90 	vmov	lr, s7
 80094d4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80094d8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80094dc:	4604      	mov	r4, r0
 80094de:	edc5 5a01 	vstr	s11, [r5, #4]
 80094e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80094e6:	f841 eb08 	str.w	lr, [r1], #8
 80094ea:	ee34 5a24 	vadd.f32	s10, s8, s9
 80094ee:	ee16 ea10 	vmov	lr, s12
 80094f2:	ed86 5a01 	vstr	s10, [r6, #4]
 80094f6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80094fa:	f844 eb08 	str.w	lr, [r4], #8
 80094fe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009502:	edc0 6a01 	vstr	s13, [r0, #4]
 8009506:	9405      	str	r4, [sp, #20]
 8009508:	4604      	mov	r4, r0
 800950a:	ee17 0a90 	vmov	r0, s15
 800950e:	9106      	str	r1, [sp, #24]
 8009510:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009514:	f102 0110 	add.w	r1, r2, #16
 8009518:	46bc      	mov	ip, r7
 800951a:	9100      	str	r1, [sp, #0]
 800951c:	f847 0b08 	str.w	r0, [r7], #8
 8009520:	f102 0118 	add.w	r1, r2, #24
 8009524:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8009528:	9102      	str	r1, [sp, #8]
 800952a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800952e:	9007      	str	r0, [sp, #28]
 8009530:	f000 8134 	beq.w	800979c <arm_cfft_radix8by4_f32+0x368>
 8009534:	f102 0920 	add.w	r9, r2, #32
 8009538:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800953c:	9a01      	ldr	r2, [sp, #4]
 800953e:	f8dd a000 	ldr.w	sl, [sp]
 8009542:	3b0c      	subs	r3, #12
 8009544:	4683      	mov	fp, r0
 8009546:	4463      	add	r3, ip
 8009548:	f105 0e10 	add.w	lr, r5, #16
 800954c:	f1a4 010c 	sub.w	r1, r4, #12
 8009550:	f104 0510 	add.w	r5, r4, #16
 8009554:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009558:	f1a2 040c 	sub.w	r4, r2, #12
 800955c:	f106 0010 	add.w	r0, r6, #16
 8009560:	3210      	adds	r2, #16
 8009562:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009566:	ed55 5a02 	vldr	s11, [r5, #-8]
 800956a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800956e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009572:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009576:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800957a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800957e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009582:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009586:	ee30 6a26 	vadd.f32	s12, s0, s13
 800958a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800958e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009592:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009596:	ee75 5a65 	vsub.f32	s11, s10, s11
 800959a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800959e:	ed10 7a01 	vldr	s14, [r0, #-4]
 80095a2:	ed52 6a01 	vldr	s13, [r2, #-4]
 80095a6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80095aa:	ee78 aa25 	vadd.f32	s21, s16, s11
 80095ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80095b2:	ee70 3a67 	vsub.f32	s7, s0, s15
 80095b6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80095ba:	ed94 7a02 	vldr	s14, [r4, #8]
 80095be:	ed9c 2a02 	vldr	s4, [ip, #8]
 80095c2:	ed91 ba02 	vldr	s22, [r1, #8]
 80095c6:	edd3 9a02 	vldr	s19, [r3, #8]
 80095ca:	edd4 2a01 	vldr	s5, [r4, #4]
 80095ce:	ed9c 9a01 	vldr	s18, [ip, #4]
 80095d2:	ed93 5a01 	vldr	s10, [r3, #4]
 80095d6:	edd1 0a01 	vldr	s1, [r1, #4]
 80095da:	ee72 6a07 	vadd.f32	s13, s4, s14
 80095de:	ee32 2a47 	vsub.f32	s4, s4, s14
 80095e2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80095e6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80095ea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80095ee:	ee79 2a62 	vsub.f32	s5, s18, s5
 80095f2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80095f6:	ed91 7a01 	vldr	s14, [r1, #4]
 80095fa:	edd3 8a01 	vldr	s17, [r3, #4]
 80095fe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8009602:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8009606:	ee37 7a28 	vadd.f32	s14, s14, s17
 800960a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800960e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009612:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8009616:	ed1a aa02 	vldr	s20, [sl, #-8]
 800961a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800961e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8009622:	ee7a aac1 	vsub.f32	s21, s21, s2
 8009626:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800962a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800962e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009632:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009636:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800963a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800963e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009642:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009646:	ee68 8a87 	vmul.f32	s17, s17, s14
 800964a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800964e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009652:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009656:	ee3b aaca 	vsub.f32	s20, s23, s20
 800965a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800965e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009662:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009666:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800966a:	ed00 7a02 	vstr	s14, [r0, #-8]
 800966e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009672:	edc1 8a01 	vstr	s17, [r1, #4]
 8009676:	ed81 aa02 	vstr	s20, [r1, #8]
 800967a:	ed59 3a04 	vldr	s7, [r9, #-16]
 800967e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009682:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009686:	ed59 6a03 	vldr	s13, [r9, #-12]
 800968a:	ee34 4a61 	vsub.f32	s8, s8, s3
 800968e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009692:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009696:	ee66 9a26 	vmul.f32	s19, s12, s13
 800969a:	ee24 9a23 	vmul.f32	s18, s8, s7
 800969e:	ee26 6a23 	vmul.f32	s12, s12, s7
 80096a2:	ee24 4a26 	vmul.f32	s8, s8, s13
 80096a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80096aa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80096ae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80096b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80096b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80096ba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 80096be:	ee79 3a29 	vadd.f32	s7, s18, s19
 80096c2:	ee75 6a60 	vsub.f32	s13, s10, s1
 80096c6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80096ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80096ce:	ed45 3a02 	vstr	s7, [r5, #-8]
 80096d2:	ed05 6a01 	vstr	s12, [r5, #-4]
 80096d6:	ed84 7a01 	vstr	s14, [r4, #4]
 80096da:	ed84 4a02 	vstr	s8, [r4, #8]
 80096de:	ee35 6a81 	vadd.f32	s12, s11, s2
 80096e2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80096e6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80096ea:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80096ee:	ee33 3a62 	vsub.f32	s6, s6, s5
 80096f2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80096f6:	ee67 2a26 	vmul.f32	s5, s14, s13
 80096fa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80096fe:	ee26 5a25 	vmul.f32	s10, s12, s11
 8009702:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009706:	ee26 6a26 	vmul.f32	s12, s12, s13
 800970a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800970e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8009712:	ee23 3a25 	vmul.f32	s6, s6, s11
 8009716:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800971a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800971e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009722:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009726:	f1bb 0b01 	subs.w	fp, fp, #1
 800972a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800972e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009732:	f10e 0e08 	add.w	lr, lr, #8
 8009736:	ed83 3a02 	vstr	s6, [r3, #8]
 800973a:	ed83 7a01 	vstr	s14, [r3, #4]
 800973e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009742:	f10a 0a08 	add.w	sl, sl, #8
 8009746:	f100 0008 	add.w	r0, r0, #8
 800974a:	f1a1 0108 	sub.w	r1, r1, #8
 800974e:	f109 0910 	add.w	r9, r9, #16
 8009752:	f105 0508 	add.w	r5, r5, #8
 8009756:	f1a4 0408 	sub.w	r4, r4, #8
 800975a:	f108 0818 	add.w	r8, r8, #24
 800975e:	f102 0208 	add.w	r2, r2, #8
 8009762:	f1a3 0308 	sub.w	r3, r3, #8
 8009766:	f47f aefc 	bne.w	8009562 <arm_cfft_radix8by4_f32+0x12e>
 800976a:	9907      	ldr	r1, [sp, #28]
 800976c:	9800      	ldr	r0, [sp, #0]
 800976e:	00cb      	lsls	r3, r1, #3
 8009770:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009774:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009778:	9100      	str	r1, [sp, #0]
 800977a:	9904      	ldr	r1, [sp, #16]
 800977c:	4419      	add	r1, r3
 800977e:	9104      	str	r1, [sp, #16]
 8009780:	9903      	ldr	r1, [sp, #12]
 8009782:	4419      	add	r1, r3
 8009784:	9103      	str	r1, [sp, #12]
 8009786:	9906      	ldr	r1, [sp, #24]
 8009788:	4419      	add	r1, r3
 800978a:	9106      	str	r1, [sp, #24]
 800978c:	9905      	ldr	r1, [sp, #20]
 800978e:	441f      	add	r7, r3
 8009790:	4419      	add	r1, r3
 8009792:	9b02      	ldr	r3, [sp, #8]
 8009794:	9105      	str	r1, [sp, #20]
 8009796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800979a:	9302      	str	r3, [sp, #8]
 800979c:	9904      	ldr	r1, [sp, #16]
 800979e:	9805      	ldr	r0, [sp, #20]
 80097a0:	ed91 4a00 	vldr	s8, [r1]
 80097a4:	edd0 6a00 	vldr	s13, [r0]
 80097a8:	9b06      	ldr	r3, [sp, #24]
 80097aa:	ed97 3a00 	vldr	s6, [r7]
 80097ae:	edd3 7a00 	vldr	s15, [r3]
 80097b2:	edd0 4a01 	vldr	s9, [r0, #4]
 80097b6:	edd1 3a01 	vldr	s7, [r1, #4]
 80097ba:	ed97 2a01 	vldr	s4, [r7, #4]
 80097be:	ed93 7a01 	vldr	s14, [r3, #4]
 80097c2:	9a03      	ldr	r2, [sp, #12]
 80097c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80097c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 80097cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80097d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80097d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80097d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80097dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 80097e0:	ed81 5a00 	vstr	s10, [r1]
 80097e4:	ed93 5a01 	vldr	s10, [r3, #4]
 80097e8:	edd7 4a01 	vldr	s9, [r7, #4]
 80097ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 80097f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80097f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80097f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80097fc:	ed81 5a01 	vstr	s10, [r1, #4]
 8009800:	edd2 1a00 	vldr	s3, [r2]
 8009804:	edd2 2a01 	vldr	s5, [r2, #4]
 8009808:	ee34 5a83 	vadd.f32	s10, s9, s6
 800980c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009810:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009814:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009818:	ee24 4a22 	vmul.f32	s8, s8, s5
 800981c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009820:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009824:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009828:	ee35 5a44 	vsub.f32	s10, s10, s8
 800982c:	edc3 2a00 	vstr	s5, [r3]
 8009830:	ed83 5a01 	vstr	s10, [r3, #4]
 8009834:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009838:	9b00      	ldr	r3, [sp, #0]
 800983a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800983e:	ed93 4a01 	vldr	s8, [r3, #4]
 8009842:	ed93 5a00 	vldr	s10, [r3]
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800984c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009850:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009854:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009858:	ee65 5a84 	vmul.f32	s11, s11, s8
 800985c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009860:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009864:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009868:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800986c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009870:	edc0 5a00 	vstr	s11, [r0]
 8009874:	edd3 5a01 	vldr	s11, [r3, #4]
 8009878:	edd3 6a00 	vldr	s13, [r3]
 800987c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009880:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009884:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009888:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800988c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009890:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009894:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009898:	ee76 7a27 	vadd.f32	s15, s12, s15
 800989c:	ed87 7a01 	vstr	s14, [r7, #4]
 80098a0:	edc7 7a00 	vstr	s15, [r7]
 80098a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 80098a8:	4621      	mov	r1, r4
 80098aa:	686a      	ldr	r2, [r5, #4]
 80098ac:	2304      	movs	r3, #4
 80098ae:	f000 f9d3 	bl	8009c58 <arm_radix8_butterfly_f32>
 80098b2:	4630      	mov	r0, r6
 80098b4:	4621      	mov	r1, r4
 80098b6:	686a      	ldr	r2, [r5, #4]
 80098b8:	2304      	movs	r3, #4
 80098ba:	f000 f9cd 	bl	8009c58 <arm_radix8_butterfly_f32>
 80098be:	9808      	ldr	r0, [sp, #32]
 80098c0:	686a      	ldr	r2, [r5, #4]
 80098c2:	4621      	mov	r1, r4
 80098c4:	2304      	movs	r3, #4
 80098c6:	f000 f9c7 	bl	8009c58 <arm_radix8_butterfly_f32>
 80098ca:	686a      	ldr	r2, [r5, #4]
 80098cc:	9801      	ldr	r0, [sp, #4]
 80098ce:	4621      	mov	r1, r4
 80098d0:	2304      	movs	r3, #4
 80098d2:	b00d      	add	sp, #52	@ 0x34
 80098d4:	ecbd 8b0a 	vpop	{d8-d12}
 80098d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	f000 b9bc 	b.w	8009c58 <arm_radix8_butterfly_f32>

080098e0 <arm_cfft_f32>:
 80098e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e4:	2a01      	cmp	r2, #1
 80098e6:	4606      	mov	r6, r0
 80098e8:	4617      	mov	r7, r2
 80098ea:	460c      	mov	r4, r1
 80098ec:	4698      	mov	r8, r3
 80098ee:	8805      	ldrh	r5, [r0, #0]
 80098f0:	d056      	beq.n	80099a0 <arm_cfft_f32+0xc0>
 80098f2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80098f6:	d063      	beq.n	80099c0 <arm_cfft_f32+0xe0>
 80098f8:	d916      	bls.n	8009928 <arm_cfft_f32+0x48>
 80098fa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80098fe:	d01a      	beq.n	8009936 <arm_cfft_f32+0x56>
 8009900:	d947      	bls.n	8009992 <arm_cfft_f32+0xb2>
 8009902:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8009906:	d05b      	beq.n	80099c0 <arm_cfft_f32+0xe0>
 8009908:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800990c:	d105      	bne.n	800991a <arm_cfft_f32+0x3a>
 800990e:	2301      	movs	r3, #1
 8009910:	6872      	ldr	r2, [r6, #4]
 8009912:	4629      	mov	r1, r5
 8009914:	4620      	mov	r0, r4
 8009916:	f000 f99f 	bl	8009c58 <arm_radix8_butterfly_f32>
 800991a:	f1b8 0f00 	cmp.w	r8, #0
 800991e:	d111      	bne.n	8009944 <arm_cfft_f32+0x64>
 8009920:	2f01      	cmp	r7, #1
 8009922:	d016      	beq.n	8009952 <arm_cfft_f32+0x72>
 8009924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009928:	2d20      	cmp	r5, #32
 800992a:	d049      	beq.n	80099c0 <arm_cfft_f32+0xe0>
 800992c:	d935      	bls.n	800999a <arm_cfft_f32+0xba>
 800992e:	2d40      	cmp	r5, #64	@ 0x40
 8009930:	d0ed      	beq.n	800990e <arm_cfft_f32+0x2e>
 8009932:	2d80      	cmp	r5, #128	@ 0x80
 8009934:	d1f1      	bne.n	800991a <arm_cfft_f32+0x3a>
 8009936:	4621      	mov	r1, r4
 8009938:	4630      	mov	r0, r6
 800993a:	f7ff fcab 	bl	8009294 <arm_cfft_radix8by2_f32>
 800993e:	f1b8 0f00 	cmp.w	r8, #0
 8009942:	d0ed      	beq.n	8009920 <arm_cfft_f32+0x40>
 8009944:	68b2      	ldr	r2, [r6, #8]
 8009946:	89b1      	ldrh	r1, [r6, #12]
 8009948:	4620      	mov	r0, r4
 800994a:	f000 f841 	bl	80099d0 <arm_bitreversal_32>
 800994e:	2f01      	cmp	r7, #1
 8009950:	d1e8      	bne.n	8009924 <arm_cfft_f32+0x44>
 8009952:	ee07 5a90 	vmov	s15, r5
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800995e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009962:	2d00      	cmp	r5, #0
 8009964:	d0de      	beq.n	8009924 <arm_cfft_f32+0x44>
 8009966:	f104 0108 	add.w	r1, r4, #8
 800996a:	2300      	movs	r3, #0
 800996c:	3301      	adds	r3, #1
 800996e:	429d      	cmp	r5, r3
 8009970:	f101 0108 	add.w	r1, r1, #8
 8009974:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009978:	ed51 7a03 	vldr	s15, [r1, #-12]
 800997c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009980:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009984:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009988:	ed41 7a03 	vstr	s15, [r1, #-12]
 800998c:	d1ee      	bne.n	800996c <arm_cfft_f32+0x8c>
 800998e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009992:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009996:	d0ba      	beq.n	800990e <arm_cfft_f32+0x2e>
 8009998:	e7bf      	b.n	800991a <arm_cfft_f32+0x3a>
 800999a:	2d10      	cmp	r5, #16
 800999c:	d0cb      	beq.n	8009936 <arm_cfft_f32+0x56>
 800999e:	e7bc      	b.n	800991a <arm_cfft_f32+0x3a>
 80099a0:	b19d      	cbz	r5, 80099ca <arm_cfft_f32+0xea>
 80099a2:	f101 030c 	add.w	r3, r1, #12
 80099a6:	2200      	movs	r2, #0
 80099a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80099ac:	3201      	adds	r2, #1
 80099ae:	eef1 7a67 	vneg.f32	s15, s15
 80099b2:	4295      	cmp	r5, r2
 80099b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80099b8:	f103 0308 	add.w	r3, r3, #8
 80099bc:	d1f4      	bne.n	80099a8 <arm_cfft_f32+0xc8>
 80099be:	e798      	b.n	80098f2 <arm_cfft_f32+0x12>
 80099c0:	4621      	mov	r1, r4
 80099c2:	4630      	mov	r0, r6
 80099c4:	f7ff fd36 	bl	8009434 <arm_cfft_radix8by4_f32>
 80099c8:	e7a7      	b.n	800991a <arm_cfft_f32+0x3a>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0aa      	beq.n	8009924 <arm_cfft_f32+0x44>
 80099ce:	e7b9      	b.n	8009944 <arm_cfft_f32+0x64>

080099d0 <arm_bitreversal_32>:
 80099d0:	b1e9      	cbz	r1, 8009a0e <arm_bitreversal_32+0x3e>
 80099d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d4:	2500      	movs	r5, #0
 80099d6:	f102 0e02 	add.w	lr, r2, #2
 80099da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80099de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80099e2:	08a4      	lsrs	r4, r4, #2
 80099e4:	089b      	lsrs	r3, r3, #2
 80099e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80099ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80099ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80099f2:	00a6      	lsls	r6, r4, #2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80099fa:	3304      	adds	r3, #4
 80099fc:	1d34      	adds	r4, r6, #4
 80099fe:	3502      	adds	r5, #2
 8009a00:	58c6      	ldr	r6, [r0, r3]
 8009a02:	5907      	ldr	r7, [r0, r4]
 8009a04:	50c7      	str	r7, [r0, r3]
 8009a06:	428d      	cmp	r5, r1
 8009a08:	5106      	str	r6, [r0, r4]
 8009a0a:	d3e6      	bcc.n	80099da <arm_bitreversal_32+0xa>
 8009a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a0e:	4770      	bx	lr

08009a10 <arm_cmplx_mag_f32>:
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	ed2d 8b02 	vpush	{d8}
 8009a18:	0897      	lsrs	r7, r2, #2
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	d077      	beq.n	8009b0e <arm_cmplx_mag_f32+0xfe>
 8009a1e:	f04f 0800 	mov.w	r8, #0
 8009a22:	f100 0420 	add.w	r4, r0, #32
 8009a26:	f101 0510 	add.w	r5, r1, #16
 8009a2a:	463e      	mov	r6, r7
 8009a2c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8009a30:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8009a34:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009a38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009a3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a48:	f2c0 80c5 	blt.w	8009bd6 <arm_cmplx_mag_f32+0x1c6>
 8009a4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a54:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009a58:	f100 80cb 	bmi.w	8009bf2 <arm_cmplx_mag_f32+0x1e2>
 8009a5c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8009a60:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8009a64:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8009a68:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009a6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009a70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	f2c0 80a8 	blt.w	8009bd0 <arm_cmplx_mag_f32+0x1c0>
 8009a80:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a88:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009a8c:	f100 80a8 	bmi.w	8009be0 <arm_cmplx_mag_f32+0x1d0>
 8009a90:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009a94:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009a98:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009a9c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009aa0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009aa4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009aa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab0:	f2c0 808b 	blt.w	8009bca <arm_cmplx_mag_f32+0x1ba>
 8009ab4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009ac0:	f100 80a9 	bmi.w	8009c16 <arm_cmplx_mag_f32+0x206>
 8009ac4:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009ac8:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009acc:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009ad0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ad4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009ad8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009adc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae4:	db6e      	blt.n	8009bc4 <arm_cmplx_mag_f32+0x1b4>
 8009ae6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009af2:	f100 8087 	bmi.w	8009c04 <arm_cmplx_mag_f32+0x1f4>
 8009af6:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009afa:	3e01      	subs	r6, #1
 8009afc:	f104 0420 	add.w	r4, r4, #32
 8009b00:	f105 0510 	add.w	r5, r5, #16
 8009b04:	d192      	bne.n	8009a2c <arm_cmplx_mag_f32+0x1c>
 8009b06:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009b0a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009b0e:	f012 0203 	ands.w	r2, r2, #3
 8009b12:	d052      	beq.n	8009bba <arm_cmplx_mag_f32+0x1aa>
 8009b14:	ed90 0a00 	vldr	s0, [r0]
 8009b18:	edd0 7a01 	vldr	s15, [r0, #4]
 8009b1c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b24:	2300      	movs	r3, #0
 8009b26:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009b2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b32:	bfb8      	it	lt
 8009b34:	600b      	strlt	r3, [r1, #0]
 8009b36:	db08      	blt.n	8009b4a <arm_cmplx_mag_f32+0x13a>
 8009b38:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b40:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009b44:	d479      	bmi.n	8009c3a <arm_cmplx_mag_f32+0x22a>
 8009b46:	ed81 8a00 	vstr	s16, [r1]
 8009b4a:	3a01      	subs	r2, #1
 8009b4c:	d035      	beq.n	8009bba <arm_cmplx_mag_f32+0x1aa>
 8009b4e:	ed90 0a02 	vldr	s0, [r0, #8]
 8009b52:	edd0 7a03 	vldr	s15, [r0, #12]
 8009b56:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b5e:	2300      	movs	r3, #0
 8009b60:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009b64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6c:	bfb8      	it	lt
 8009b6e:	604b      	strlt	r3, [r1, #4]
 8009b70:	db08      	blt.n	8009b84 <arm_cmplx_mag_f32+0x174>
 8009b72:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009b7e:	d453      	bmi.n	8009c28 <arm_cmplx_mag_f32+0x218>
 8009b80:	ed81 8a01 	vstr	s16, [r1, #4]
 8009b84:	2a01      	cmp	r2, #1
 8009b86:	d018      	beq.n	8009bba <arm_cmplx_mag_f32+0x1aa>
 8009b88:	ed90 0a04 	vldr	s0, [r0, #16]
 8009b8c:	edd0 7a05 	vldr	s15, [r0, #20]
 8009b90:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009b98:	2300      	movs	r3, #0
 8009b9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba6:	db19      	blt.n	8009bdc <arm_cmplx_mag_f32+0x1cc>
 8009ba8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009bb4:	d44a      	bmi.n	8009c4c <arm_cmplx_mag_f32+0x23c>
 8009bb6:	ed81 8a02 	vstr	s16, [r1, #8]
 8009bba:	b004      	add	sp, #16
 8009bbc:	ecbd 8b02 	vpop	{d8}
 8009bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc4:	f845 8c04 	str.w	r8, [r5, #-4]
 8009bc8:	e797      	b.n	8009afa <arm_cmplx_mag_f32+0xea>
 8009bca:	f845 8c08 	str.w	r8, [r5, #-8]
 8009bce:	e77b      	b.n	8009ac8 <arm_cmplx_mag_f32+0xb8>
 8009bd0:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009bd4:	e75e      	b.n	8009a94 <arm_cmplx_mag_f32+0x84>
 8009bd6:	f845 8c10 	str.w	r8, [r5, #-16]
 8009bda:	e741      	b.n	8009a60 <arm_cmplx_mag_f32+0x50>
 8009bdc:	608b      	str	r3, [r1, #8]
 8009bde:	e7ec      	b.n	8009bba <arm_cmplx_mag_f32+0x1aa>
 8009be0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009be4:	9001      	str	r0, [sp, #4]
 8009be6:	f000 fb4f 	bl	800a288 <sqrtf>
 8009bea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009bee:	9801      	ldr	r0, [sp, #4]
 8009bf0:	e74e      	b.n	8009a90 <arm_cmplx_mag_f32+0x80>
 8009bf2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009bf6:	9001      	str	r0, [sp, #4]
 8009bf8:	f000 fb46 	bl	800a288 <sqrtf>
 8009bfc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009c00:	9801      	ldr	r0, [sp, #4]
 8009c02:	e72b      	b.n	8009a5c <arm_cmplx_mag_f32+0x4c>
 8009c04:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009c08:	9001      	str	r0, [sp, #4]
 8009c0a:	f000 fb3d 	bl	800a288 <sqrtf>
 8009c0e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009c12:	9801      	ldr	r0, [sp, #4]
 8009c14:	e76f      	b.n	8009af6 <arm_cmplx_mag_f32+0xe6>
 8009c16:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009c1a:	9001      	str	r0, [sp, #4]
 8009c1c:	f000 fb34 	bl	800a288 <sqrtf>
 8009c20:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009c24:	9801      	ldr	r0, [sp, #4]
 8009c26:	e74d      	b.n	8009ac4 <arm_cmplx_mag_f32+0xb4>
 8009c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c2c:	9201      	str	r2, [sp, #4]
 8009c2e:	f000 fb2b 	bl	800a288 <sqrtf>
 8009c32:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009c36:	9903      	ldr	r1, [sp, #12]
 8009c38:	e7a2      	b.n	8009b80 <arm_cmplx_mag_f32+0x170>
 8009c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c3e:	9201      	str	r2, [sp, #4]
 8009c40:	f000 fb22 	bl	800a288 <sqrtf>
 8009c44:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009c48:	9903      	ldr	r1, [sp, #12]
 8009c4a:	e77c      	b.n	8009b46 <arm_cmplx_mag_f32+0x136>
 8009c4c:	9101      	str	r1, [sp, #4]
 8009c4e:	f000 fb1b 	bl	800a288 <sqrtf>
 8009c52:	9901      	ldr	r1, [sp, #4]
 8009c54:	e7af      	b.n	8009bb6 <arm_cmplx_mag_f32+0x1a6>
 8009c56:	bf00      	nop

08009c58 <arm_radix8_butterfly_f32>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	ed2d 8b10 	vpush	{d8-d15}
 8009c60:	b095      	sub	sp, #84	@ 0x54
 8009c62:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8009c66:	4603      	mov	r3, r0
 8009c68:	3304      	adds	r3, #4
 8009c6a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8009f50 <arm_radix8_butterfly_f32+0x2f8>
 8009c6e:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c70:	468b      	mov	fp, r1
 8009c72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c74:	4689      	mov	r9, r1
 8009c76:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009c7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c7c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8009c7e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8009c82:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8009c86:	eb03 0508 	add.w	r5, r3, r8
 8009c8a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8009c8e:	eb05 040e 	add.w	r4, r5, lr
 8009c92:	0137      	lsls	r7, r6, #4
 8009c94:	eba6 030a 	sub.w	r3, r6, sl
 8009c98:	eb04 000e 	add.w	r0, r4, lr
 8009c9c:	44b2      	add	sl, r6
 8009c9e:	1d3a      	adds	r2, r7, #4
 8009ca0:	9702      	str	r7, [sp, #8]
 8009ca2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009ca6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8009caa:	ebae 0c06 	sub.w	ip, lr, r6
 8009cae:	9703      	str	r7, [sp, #12]
 8009cb0:	eb03 0708 	add.w	r7, r3, r8
 8009cb4:	9701      	str	r7, [sp, #4]
 8009cb6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8009cba:	9706      	str	r7, [sp, #24]
 8009cbc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8009cbe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8009cc2:	f10e 0104 	add.w	r1, lr, #4
 8009cc6:	4439      	add	r1, r7
 8009cc8:	443a      	add	r2, r7
 8009cca:	0137      	lsls	r7, r6, #4
 8009ccc:	00f6      	lsls	r6, r6, #3
 8009cce:	9704      	str	r7, [sp, #16]
 8009cd0:	9605      	str	r6, [sp, #20]
 8009cd2:	9f01      	ldr	r7, [sp, #4]
 8009cd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009cd6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8009cda:	f04f 0c00 	mov.w	ip, #0
 8009cde:	edd4 6a00 	vldr	s13, [r4]
 8009ce2:	edd7 1a00 	vldr	s3, [r7]
 8009ce6:	ed16 aa01 	vldr	s20, [r6, #-4]
 8009cea:	edd5 5a00 	vldr	s11, [r5]
 8009cee:	ed52 9a01 	vldr	s19, [r2, #-4]
 8009cf2:	ed90 6a00 	vldr	s12, [r0]
 8009cf6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009cfa:	ed93 3a00 	vldr	s6, [r3]
 8009cfe:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009d02:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009d06:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009d0a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009d0e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009d12:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009d16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d1a:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009d1e:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009d22:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009d26:	ed85 4a00 	vstr	s8, [r5]
 8009d2a:	edd1 6a00 	vldr	s13, [r1]
 8009d2e:	ed94 9a01 	vldr	s18, [r4, #4]
 8009d32:	edd3 2a01 	vldr	s5, [r3, #4]
 8009d36:	edd7 8a01 	vldr	s17, [r7, #4]
 8009d3a:	edd6 0a00 	vldr	s1, [r6]
 8009d3e:	edd5 3a01 	vldr	s7, [r5, #4]
 8009d42:	ed90 8a01 	vldr	s16, [r0, #4]
 8009d46:	ed92 7a00 	vldr	s14, [r2]
 8009d4a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009d4e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009d52:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009d56:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009d5a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009d5e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009d62:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009d66:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009d6a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009d6e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009d72:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009d76:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009d7a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009d7e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009d82:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009d86:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009d8a:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009d8e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8009d92:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009d96:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009d9a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009d9e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8009da2:	ee33 2a20 	vadd.f32	s4, s6, s1
 8009da6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009daa:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009dae:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8009db2:	ee77 0a01 	vadd.f32	s1, s14, s2
 8009db6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009dba:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009dbe:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009dc2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009dc6:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009dca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009dce:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009dd2:	ee33 1a45 	vsub.f32	s2, s6, s10
 8009dd6:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009dda:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009dde:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009de2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8009de6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009dea:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009dee:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009df2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8009df6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009dfa:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009dfe:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009e02:	44dc      	add	ip, fp
 8009e04:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009e08:	45e1      	cmp	r9, ip
 8009e0a:	ed86 8a00 	vstr	s16, [r6]
 8009e0e:	ed85 2a01 	vstr	s4, [r5, #4]
 8009e12:	4456      	add	r6, sl
 8009e14:	ed02 0a01 	vstr	s0, [r2, #-4]
 8009e18:	4455      	add	r5, sl
 8009e1a:	edc0 6a00 	vstr	s13, [r0]
 8009e1e:	ed82 1a00 	vstr	s2, [r2]
 8009e22:	ed80 5a01 	vstr	s10, [r0, #4]
 8009e26:	4452      	add	r2, sl
 8009e28:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009e2c:	4450      	add	r0, sl
 8009e2e:	edc7 2a00 	vstr	s5, [r7]
 8009e32:	edc4 4a00 	vstr	s9, [r4]
 8009e36:	ed83 7a00 	vstr	s14, [r3]
 8009e3a:	edc1 5a00 	vstr	s11, [r1]
 8009e3e:	edc7 3a01 	vstr	s7, [r7, #4]
 8009e42:	4451      	add	r1, sl
 8009e44:	ed84 6a01 	vstr	s12, [r4, #4]
 8009e48:	4457      	add	r7, sl
 8009e4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8009e4e:	4454      	add	r4, sl
 8009e50:	4453      	add	r3, sl
 8009e52:	f63f af44 	bhi.w	8009cde <arm_radix8_butterfly_f32+0x86>
 8009e56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e58:	2b07      	cmp	r3, #7
 8009e5a:	f240 81b7 	bls.w	800a1cc <arm_radix8_butterfly_f32+0x574>
 8009e5e:	9b06      	ldr	r3, [sp, #24]
 8009e60:	9903      	ldr	r1, [sp, #12]
 8009e62:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009e64:	9e05      	ldr	r6, [sp, #20]
 8009e66:	9a04      	ldr	r2, [sp, #16]
 8009e68:	f103 0c08 	add.w	ip, r3, #8
 8009e6c:	9b02      	ldr	r3, [sp, #8]
 8009e6e:	3108      	adds	r1, #8
 8009e70:	f108 0808 	add.w	r8, r8, #8
 8009e74:	1841      	adds	r1, r0, r1
 8009e76:	3608      	adds	r6, #8
 8009e78:	330c      	adds	r3, #12
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	4444      	add	r4, r8
 8009e7e:	18c3      	adds	r3, r0, r3
 8009e80:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e82:	1981      	adds	r1, r0, r6
 8009e84:	f10e 0e08 	add.w	lr, lr, #8
 8009e88:	3208      	adds	r2, #8
 8009e8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e8c:	9107      	str	r1, [sp, #28]
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4601      	mov	r1, r0
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	f100 030c 	add.w	r3, r0, #12
 8009e98:	4474      	add	r4, lr
 8009e9a:	f04f 0801 	mov.w	r8, #1
 8009e9e:	1882      	adds	r2, r0, r2
 8009ea0:	4461      	add	r1, ip
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ea8:	46c1      	mov	r9, r8
 8009eaa:	9208      	str	r2, [sp, #32]
 8009eac:	46d8      	mov	r8, fp
 8009eae:	9106      	str	r1, [sp, #24]
 8009eb0:	f04f 0e00 	mov.w	lr, #0
 8009eb4:	469b      	mov	fp, r3
 8009eb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009eb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009eba:	449e      	add	lr, r3
 8009ebc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8009ec0:	441a      	add	r2, r3
 8009ec2:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ec4:	441a      	add	r2, r3
 8009ec6:	18d4      	adds	r4, r2, r3
 8009ec8:	18e5      	adds	r5, r4, r3
 8009eca:	18ee      	adds	r6, r5, r3
 8009ecc:	18f7      	adds	r7, r6, r3
 8009ece:	eb07 0c03 	add.w	ip, r7, r3
 8009ed2:	920d      	str	r2, [sp, #52]	@ 0x34
 8009ed4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8009ed8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8009edc:	910c      	str	r1, [sp, #48]	@ 0x30
 8009ede:	4419      	add	r1, r3
 8009ee0:	9103      	str	r1, [sp, #12]
 8009ee2:	4419      	add	r1, r3
 8009ee4:	18ca      	adds	r2, r1, r3
 8009ee6:	9202      	str	r2, [sp, #8]
 8009ee8:	441a      	add	r2, r3
 8009eea:	18d0      	adds	r0, r2, r3
 8009eec:	ed92 ea01 	vldr	s28, [r2, #4]
 8009ef0:	9a02      	ldr	r2, [sp, #8]
 8009ef2:	edd4 7a00 	vldr	s15, [r4]
 8009ef6:	edd2 da01 	vldr	s27, [r2, #4]
 8009efa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009efc:	ed91 da01 	vldr	s26, [r1, #4]
 8009f00:	ed92 ca01 	vldr	s24, [r2, #4]
 8009f04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f06:	9903      	ldr	r1, [sp, #12]
 8009f08:	edcd 7a03 	vstr	s15, [sp, #12]
 8009f0c:	edd2 7a00 	vldr	s15, [r2]
 8009f10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f12:	edcd 7a02 	vstr	s15, [sp, #8]
 8009f16:	edd2 7a00 	vldr	s15, [r2]
 8009f1a:	edd0 ea01 	vldr	s29, [r0, #4]
 8009f1e:	edd1 ca01 	vldr	s25, [r1, #4]
 8009f22:	eddc ba00 	vldr	s23, [ip]
 8009f26:	edd7 aa00 	vldr	s21, [r7]
 8009f2a:	ed96 aa00 	vldr	s20, [r6]
 8009f2e:	edd5 9a00 	vldr	s19, [r5]
 8009f32:	edcd 7a01 	vstr	s15, [sp, #4]
 8009f36:	4403      	add	r3, r0
 8009f38:	ed93 fa01 	vldr	s30, [r3, #4]
 8009f3c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8009f40:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8009f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8009f4c:	46cc      	mov	ip, r9
 8009f4e:	e001      	b.n	8009f54 <arm_radix8_butterfly_f32+0x2fc>
 8009f50:	3f3504f3 	.word	0x3f3504f3
 8009f54:	ed91 6a00 	vldr	s12, [r1]
 8009f58:	ed93 5a00 	vldr	s10, [r3]
 8009f5c:	edd0 fa00 	vldr	s31, [r0]
 8009f60:	edd4 7a00 	vldr	s15, [r4]
 8009f64:	ed95 7a00 	vldr	s14, [r5]
 8009f68:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009f6c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8009f70:	ed92 2a00 	vldr	s4, [r2]
 8009f74:	ed96 0a00 	vldr	s0, [r6]
 8009f78:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009f7c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009f80:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009f84:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009f88:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009f8c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009f90:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009f94:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f9c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009fa0:	edd4 8a01 	vldr	s17, [r4, #4]
 8009fa4:	ed92 9a01 	vldr	s18, [r2, #4]
 8009fa8:	edd7 0a00 	vldr	s1, [r7]
 8009fac:	edd1 2a01 	vldr	s5, [r1, #4]
 8009fb0:	ed95 7a01 	vldr	s14, [r5, #4]
 8009fb4:	ed93 6a01 	vldr	s12, [r3, #4]
 8009fb8:	edd0 5a01 	vldr	s11, [r0, #4]
 8009fbc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009fc0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8009fc4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009fc8:	ee78 fac7 	vsub.f32	s31, s17, s14
 8009fcc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009fd0:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009fd4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009fd8:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009fdc:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009fe0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009fe4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009fe8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8009fec:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009ff0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8009ff4:	ee32 1a08 	vadd.f32	s2, s4, s16
 8009ff8:	ee72 fa87 	vadd.f32	s31, s5, s14
 8009ffc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a000:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a004:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a008:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a00c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a010:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a014:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a018:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a01c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a020:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a024:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a028:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a02c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a030:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a034:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a038:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a03c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a040:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a044:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a048:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a04c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a050:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a054:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a058:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a05c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a060:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a064:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a068:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a06c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a070:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a074:	eddd 1a02 	vldr	s3, [sp, #8]
 800a078:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a07c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a080:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a084:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a088:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a08c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a090:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a094:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a098:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a09c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a0a0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a0a4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a0a8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a0ac:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a0b0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a0b4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a0b8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a0bc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a0c0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a0c4:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a0c8:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a0cc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a0d0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a0d4:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a0d8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a0dc:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a0e0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a0e4:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a0e8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a0ec:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a0f0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a0f4:	eddd 5a03 	vldr	s11, [sp, #12]
 800a0f8:	edc6 fa00 	vstr	s31, [r6]
 800a0fc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a100:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a104:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a108:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a10c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a110:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a114:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a118:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a11c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a120:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a124:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a128:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a12c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a130:	44c4      	add	ip, r8
 800a132:	45e3      	cmp	fp, ip
 800a134:	edc3 3a00 	vstr	s7, [r3]
 800a138:	edc3 6a01 	vstr	s13, [r3, #4]
 800a13c:	4456      	add	r6, sl
 800a13e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a142:	edc7 0a00 	vstr	s1, [r7]
 800a146:	4453      	add	r3, sl
 800a148:	ed80 2a00 	vstr	s4, [r0]
 800a14c:	edc0 2a01 	vstr	s5, [r0, #4]
 800a150:	4457      	add	r7, sl
 800a152:	edc2 1a00 	vstr	s3, [r2]
 800a156:	ed82 7a01 	vstr	s14, [r2, #4]
 800a15a:	4450      	add	r0, sl
 800a15c:	ed85 8a00 	vstr	s16, [r5]
 800a160:	ed85 0a01 	vstr	s0, [r5, #4]
 800a164:	4452      	add	r2, sl
 800a166:	edc1 4a00 	vstr	s9, [r1]
 800a16a:	4455      	add	r5, sl
 800a16c:	ed81 3a01 	vstr	s6, [r1, #4]
 800a170:	edc4 8a00 	vstr	s17, [r4]
 800a174:	ed84 6a01 	vstr	s12, [r4, #4]
 800a178:	4451      	add	r1, sl
 800a17a:	4454      	add	r4, sl
 800a17c:	f63f aeea 	bhi.w	8009f54 <arm_radix8_butterfly_f32+0x2fc>
 800a180:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a182:	3308      	adds	r3, #8
 800a184:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a186:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a188:	3308      	adds	r3, #8
 800a18a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18e:	3308      	adds	r3, #8
 800a190:	9309      	str	r3, [sp, #36]	@ 0x24
 800a192:	9b08      	ldr	r3, [sp, #32]
 800a194:	3308      	adds	r3, #8
 800a196:	9308      	str	r3, [sp, #32]
 800a198:	9b07      	ldr	r3, [sp, #28]
 800a19a:	3308      	adds	r3, #8
 800a19c:	9307      	str	r3, [sp, #28]
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	9306      	str	r3, [sp, #24]
 800a1a4:	9b05      	ldr	r3, [sp, #20]
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	9305      	str	r3, [sp, #20]
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1b2:	f109 0901 	add.w	r9, r9, #1
 800a1b6:	454b      	cmp	r3, r9
 800a1b8:	f47f ae7d 	bne.w	8009eb6 <arm_radix8_butterfly_f32+0x25e>
 800a1bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	46d9      	mov	r9, fp
 800a1c4:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1c6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800a1ca:	e554      	b.n	8009c76 <arm_radix8_butterfly_f32+0x1e>
 800a1cc:	b015      	add	sp, #84	@ 0x54
 800a1ce:	ecbd 8b10 	vpop	{d8-d15}
 800a1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d6:	bf00      	nop

0800a1d8 <powf>:
 800a1d8:	b508      	push	{r3, lr}
 800a1da:	ed2d 8b04 	vpush	{d8-d9}
 800a1de:	eeb0 8a60 	vmov.f32	s16, s1
 800a1e2:	eeb0 9a40 	vmov.f32	s18, s0
 800a1e6:	f000 f8c1 	bl	800a36c <__ieee754_powf>
 800a1ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800a1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f2:	eef0 8a40 	vmov.f32	s17, s0
 800a1f6:	d63e      	bvs.n	800a276 <powf+0x9e>
 800a1f8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a200:	d112      	bne.n	800a228 <powf+0x50>
 800a202:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20a:	d039      	beq.n	800a280 <powf+0xa8>
 800a20c:	eeb0 0a48 	vmov.f32	s0, s16
 800a210:	f000 f858 	bl	800a2c4 <finitef>
 800a214:	b378      	cbz	r0, 800a276 <powf+0x9e>
 800a216:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21e:	d52a      	bpl.n	800a276 <powf+0x9e>
 800a220:	f001 fa00 	bl	800b624 <__errno>
 800a224:	2322      	movs	r3, #34	@ 0x22
 800a226:	e014      	b.n	800a252 <powf+0x7a>
 800a228:	f000 f84c 	bl	800a2c4 <finitef>
 800a22c:	b998      	cbnz	r0, 800a256 <powf+0x7e>
 800a22e:	eeb0 0a49 	vmov.f32	s0, s18
 800a232:	f000 f847 	bl	800a2c4 <finitef>
 800a236:	b170      	cbz	r0, 800a256 <powf+0x7e>
 800a238:	eeb0 0a48 	vmov.f32	s0, s16
 800a23c:	f000 f842 	bl	800a2c4 <finitef>
 800a240:	b148      	cbz	r0, 800a256 <powf+0x7e>
 800a242:	eef4 8a68 	vcmp.f32	s17, s17
 800a246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24a:	d7e9      	bvc.n	800a220 <powf+0x48>
 800a24c:	f001 f9ea 	bl	800b624 <__errno>
 800a250:	2321      	movs	r3, #33	@ 0x21
 800a252:	6003      	str	r3, [r0, #0]
 800a254:	e00f      	b.n	800a276 <powf+0x9e>
 800a256:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25e:	d10a      	bne.n	800a276 <powf+0x9e>
 800a260:	eeb0 0a49 	vmov.f32	s0, s18
 800a264:	f000 f82e 	bl	800a2c4 <finitef>
 800a268:	b128      	cbz	r0, 800a276 <powf+0x9e>
 800a26a:	eeb0 0a48 	vmov.f32	s0, s16
 800a26e:	f000 f829 	bl	800a2c4 <finitef>
 800a272:	2800      	cmp	r0, #0
 800a274:	d1d4      	bne.n	800a220 <powf+0x48>
 800a276:	eeb0 0a68 	vmov.f32	s0, s17
 800a27a:	ecbd 8b04 	vpop	{d8-d9}
 800a27e:	bd08      	pop	{r3, pc}
 800a280:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a284:	e7f7      	b.n	800a276 <powf+0x9e>
	...

0800a288 <sqrtf>:
 800a288:	b508      	push	{r3, lr}
 800a28a:	ed2d 8b02 	vpush	{d8}
 800a28e:	eeb0 8a40 	vmov.f32	s16, s0
 800a292:	f000 f821 	bl	800a2d8 <__ieee754_sqrtf>
 800a296:	eeb4 8a48 	vcmp.f32	s16, s16
 800a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29e:	d60c      	bvs.n	800a2ba <sqrtf+0x32>
 800a2a0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a2c0 <sqrtf+0x38>
 800a2a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ac:	d505      	bpl.n	800a2ba <sqrtf+0x32>
 800a2ae:	f001 f9b9 	bl	800b624 <__errno>
 800a2b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a2b6:	2321      	movs	r3, #33	@ 0x21
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	ecbd 8b02 	vpop	{d8}
 800a2be:	bd08      	pop	{r3, pc}
 800a2c0:	00000000 	.word	0x00000000

0800a2c4 <finitef>:
 800a2c4:	ee10 3a10 	vmov	r3, s0
 800a2c8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a2cc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a2d0:	bfac      	ite	ge
 800a2d2:	2000      	movge	r0, #0
 800a2d4:	2001      	movlt	r0, #1
 800a2d6:	4770      	bx	lr

0800a2d8 <__ieee754_sqrtf>:
 800a2d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <round>:
 800a2e0:	ec51 0b10 	vmov	r0, r1, d0
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a2ea:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a2ee:	2a13      	cmp	r2, #19
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	dc1b      	bgt.n	800a32e <round+0x4e>
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	da0b      	bge.n	800a312 <round+0x32>
 800a2fa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a2fe:	3201      	adds	r2, #1
 800a300:	bf04      	itt	eq
 800a302:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a306:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a30a:	2200      	movs	r2, #0
 800a30c:	4619      	mov	r1, r3
 800a30e:	4610      	mov	r0, r2
 800a310:	e015      	b.n	800a33e <round+0x5e>
 800a312:	4c15      	ldr	r4, [pc, #84]	@ (800a368 <round+0x88>)
 800a314:	4114      	asrs	r4, r2
 800a316:	ea04 0601 	and.w	r6, r4, r1
 800a31a:	4306      	orrs	r6, r0
 800a31c:	d00f      	beq.n	800a33e <round+0x5e>
 800a31e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a322:	fa41 f202 	asr.w	r2, r1, r2
 800a326:	4413      	add	r3, r2
 800a328:	ea23 0304 	bic.w	r3, r3, r4
 800a32c:	e7ed      	b.n	800a30a <round+0x2a>
 800a32e:	2a33      	cmp	r2, #51	@ 0x33
 800a330:	dd08      	ble.n	800a344 <round+0x64>
 800a332:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a336:	d102      	bne.n	800a33e <round+0x5e>
 800a338:	4602      	mov	r2, r0
 800a33a:	f7f5 ffa7 	bl	800028c <__adddf3>
 800a33e:	ec41 0b10 	vmov	d0, r0, r1
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a348:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a34c:	40f4      	lsrs	r4, r6
 800a34e:	4204      	tst	r4, r0
 800a350:	d0f5      	beq.n	800a33e <round+0x5e>
 800a352:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a356:	2201      	movs	r2, #1
 800a358:	408a      	lsls	r2, r1
 800a35a:	1952      	adds	r2, r2, r5
 800a35c:	bf28      	it	cs
 800a35e:	3301      	addcs	r3, #1
 800a360:	ea22 0204 	bic.w	r2, r2, r4
 800a364:	e7d2      	b.n	800a30c <round+0x2c>
 800a366:	bf00      	nop
 800a368:	000fffff 	.word	0x000fffff

0800a36c <__ieee754_powf>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	ee10 4a90 	vmov	r4, s1
 800a374:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800a378:	ed2d 8b02 	vpush	{d8}
 800a37c:	ee10 6a10 	vmov	r6, s0
 800a380:	eeb0 8a40 	vmov.f32	s16, s0
 800a384:	eef0 8a60 	vmov.f32	s17, s1
 800a388:	d10c      	bne.n	800a3a4 <__ieee754_powf+0x38>
 800a38a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800a38e:	0076      	lsls	r6, r6, #1
 800a390:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800a394:	f240 829c 	bls.w	800a8d0 <__ieee754_powf+0x564>
 800a398:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a39c:	ecbd 8b02 	vpop	{d8}
 800a3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800a3a8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a3ac:	d802      	bhi.n	800a3b4 <__ieee754_powf+0x48>
 800a3ae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a3b2:	d908      	bls.n	800a3c6 <__ieee754_powf+0x5a>
 800a3b4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800a3b8:	d1ee      	bne.n	800a398 <__ieee754_powf+0x2c>
 800a3ba:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800a3be:	0064      	lsls	r4, r4, #1
 800a3c0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800a3c4:	e7e6      	b.n	800a394 <__ieee754_powf+0x28>
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	da1e      	bge.n	800a408 <__ieee754_powf+0x9c>
 800a3ca:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800a3ce:	d22b      	bcs.n	800a428 <__ieee754_powf+0xbc>
 800a3d0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a3d4:	d332      	bcc.n	800a43c <__ieee754_powf+0xd0>
 800a3d6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800a3da:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800a3de:	fa49 f503 	asr.w	r5, r9, r3
 800a3e2:	fa05 f303 	lsl.w	r3, r5, r3
 800a3e6:	454b      	cmp	r3, r9
 800a3e8:	d126      	bne.n	800a438 <__ieee754_powf+0xcc>
 800a3ea:	f005 0501 	and.w	r5, r5, #1
 800a3ee:	f1c5 0502 	rsb	r5, r5, #2
 800a3f2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a3f6:	d122      	bne.n	800a43e <__ieee754_powf+0xd2>
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	f280 826f 	bge.w	800a8dc <__ieee754_powf+0x570>
 800a3fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a402:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a406:	e7c9      	b.n	800a39c <__ieee754_powf+0x30>
 800a408:	2500      	movs	r5, #0
 800a40a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a40e:	d1f0      	bne.n	800a3f2 <__ieee754_powf+0x86>
 800a410:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800a414:	f000 825c 	beq.w	800a8d0 <__ieee754_powf+0x564>
 800a418:	d908      	bls.n	800a42c <__ieee754_powf+0xc0>
 800a41a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800a77c <__ieee754_powf+0x410>
 800a41e:	2c00      	cmp	r4, #0
 800a420:	bfa8      	it	ge
 800a422:	eeb0 0a68 	vmovge.f32	s0, s17
 800a426:	e7b9      	b.n	800a39c <__ieee754_powf+0x30>
 800a428:	2502      	movs	r5, #2
 800a42a:	e7ee      	b.n	800a40a <__ieee754_powf+0x9e>
 800a42c:	2c00      	cmp	r4, #0
 800a42e:	f280 8252 	bge.w	800a8d6 <__ieee754_powf+0x56a>
 800a432:	eeb1 0a68 	vneg.f32	s0, s17
 800a436:	e7b1      	b.n	800a39c <__ieee754_powf+0x30>
 800a438:	2500      	movs	r5, #0
 800a43a:	e7da      	b.n	800a3f2 <__ieee754_powf+0x86>
 800a43c:	2500      	movs	r5, #0
 800a43e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a442:	d102      	bne.n	800a44a <__ieee754_powf+0xde>
 800a444:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a448:	e7a8      	b.n	800a39c <__ieee754_powf+0x30>
 800a44a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a44e:	d109      	bne.n	800a464 <__ieee754_powf+0xf8>
 800a450:	2e00      	cmp	r6, #0
 800a452:	db07      	blt.n	800a464 <__ieee754_powf+0xf8>
 800a454:	eeb0 0a48 	vmov.f32	s0, s16
 800a458:	ecbd 8b02 	vpop	{d8}
 800a45c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a460:	f7ff bf3a 	b.w	800a2d8 <__ieee754_sqrtf>
 800a464:	eeb0 0a48 	vmov.f32	s0, s16
 800a468:	f000 fa50 	bl	800a90c <fabsf>
 800a46c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a470:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a474:	4647      	mov	r7, r8
 800a476:	d002      	beq.n	800a47e <__ieee754_powf+0x112>
 800a478:	f1b8 0f00 	cmp.w	r8, #0
 800a47c:	d117      	bne.n	800a4ae <__ieee754_powf+0x142>
 800a47e:	2c00      	cmp	r4, #0
 800a480:	bfbc      	itt	lt
 800a482:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800a486:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a48a:	2e00      	cmp	r6, #0
 800a48c:	da86      	bge.n	800a39c <__ieee754_powf+0x30>
 800a48e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a492:	ea58 0805 	orrs.w	r8, r8, r5
 800a496:	d104      	bne.n	800a4a2 <__ieee754_powf+0x136>
 800a498:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a49c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a4a0:	e77c      	b.n	800a39c <__ieee754_powf+0x30>
 800a4a2:	2d01      	cmp	r5, #1
 800a4a4:	f47f af7a 	bne.w	800a39c <__ieee754_powf+0x30>
 800a4a8:	eeb1 0a40 	vneg.f32	s0, s0
 800a4ac:	e776      	b.n	800a39c <__ieee754_powf+0x30>
 800a4ae:	0ff0      	lsrs	r0, r6, #31
 800a4b0:	3801      	subs	r0, #1
 800a4b2:	ea55 0300 	orrs.w	r3, r5, r0
 800a4b6:	d104      	bne.n	800a4c2 <__ieee754_powf+0x156>
 800a4b8:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a4bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a4c0:	e76c      	b.n	800a39c <__ieee754_powf+0x30>
 800a4c2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800a4c6:	d973      	bls.n	800a5b0 <__ieee754_powf+0x244>
 800a4c8:	4bad      	ldr	r3, [pc, #692]	@ (800a780 <__ieee754_powf+0x414>)
 800a4ca:	4598      	cmp	r8, r3
 800a4cc:	d808      	bhi.n	800a4e0 <__ieee754_powf+0x174>
 800a4ce:	2c00      	cmp	r4, #0
 800a4d0:	da0b      	bge.n	800a4ea <__ieee754_powf+0x17e>
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	ecbd 8b02 	vpop	{d8}
 800a4d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4dc:	f000 baa4 	b.w	800aa28 <__math_oflowf>
 800a4e0:	4ba8      	ldr	r3, [pc, #672]	@ (800a784 <__ieee754_powf+0x418>)
 800a4e2:	4598      	cmp	r8, r3
 800a4e4:	d908      	bls.n	800a4f8 <__ieee754_powf+0x18c>
 800a4e6:	2c00      	cmp	r4, #0
 800a4e8:	dcf3      	bgt.n	800a4d2 <__ieee754_powf+0x166>
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	ecbd 8b02 	vpop	{d8}
 800a4f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f4:	f000 ba92 	b.w	800aa1c <__math_uflowf>
 800a4f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a4fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a500:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800a788 <__ieee754_powf+0x41c>
 800a504:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800a508:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a50c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a510:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a514:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a51c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800a78c <__ieee754_powf+0x420>
 800a520:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a524:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800a790 <__ieee754_powf+0x424>
 800a528:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a52c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800a794 <__ieee754_powf+0x428>
 800a530:	eef0 6a67 	vmov.f32	s13, s15
 800a534:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a538:	ee16 3a90 	vmov	r3, s13
 800a53c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a540:	f023 030f 	bic.w	r3, r3, #15
 800a544:	ee06 3a90 	vmov	s13, r3
 800a548:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a54c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a550:	3d01      	subs	r5, #1
 800a552:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800a556:	4305      	orrs	r5, r0
 800a558:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a55c:	f024 040f 	bic.w	r4, r4, #15
 800a560:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800a564:	bf18      	it	ne
 800a566:	eeb0 8a47 	vmovne.f32	s16, s14
 800a56a:	ee07 4a10 	vmov	s14, r4
 800a56e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a572:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a57e:	ee07 4a10 	vmov	s14, r4
 800a582:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a586:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a58a:	ee17 1a10 	vmov	r1, s14
 800a58e:	2900      	cmp	r1, #0
 800a590:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a594:	f340 80dd 	ble.w	800a752 <__ieee754_powf+0x3e6>
 800a598:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800a59c:	f240 80ca 	bls.w	800a734 <__ieee754_powf+0x3c8>
 800a5a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a8:	bf4c      	ite	mi
 800a5aa:	2001      	movmi	r0, #1
 800a5ac:	2000      	movpl	r0, #0
 800a5ae:	e791      	b.n	800a4d4 <__ieee754_powf+0x168>
 800a5b0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a5b4:	bf01      	itttt	eq
 800a5b6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800a798 <__ieee754_powf+0x42c>
 800a5ba:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a5be:	f06f 0317 	mvneq.w	r3, #23
 800a5c2:	ee17 7a90 	vmoveq	r7, s15
 800a5c6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800a5ca:	bf18      	it	ne
 800a5cc:	2300      	movne	r3, #0
 800a5ce:	3a7f      	subs	r2, #127	@ 0x7f
 800a5d0:	441a      	add	r2, r3
 800a5d2:	4b72      	ldr	r3, [pc, #456]	@ (800a79c <__ieee754_powf+0x430>)
 800a5d4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800a5d8:	429f      	cmp	r7, r3
 800a5da:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800a5de:	dd06      	ble.n	800a5ee <__ieee754_powf+0x282>
 800a5e0:	4b6f      	ldr	r3, [pc, #444]	@ (800a7a0 <__ieee754_powf+0x434>)
 800a5e2:	429f      	cmp	r7, r3
 800a5e4:	f340 80a4 	ble.w	800a730 <__ieee754_powf+0x3c4>
 800a5e8:	3201      	adds	r2, #1
 800a5ea:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	4b6c      	ldr	r3, [pc, #432]	@ (800a7a4 <__ieee754_powf+0x438>)
 800a5f2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a5f6:	ee07 1a10 	vmov	s14, r1
 800a5fa:	edd3 5a00 	vldr	s11, [r3]
 800a5fe:	4b6a      	ldr	r3, [pc, #424]	@ (800a7a8 <__ieee754_powf+0x43c>)
 800a600:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a608:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a60c:	1049      	asrs	r1, r1, #1
 800a60e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800a612:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800a616:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800a61a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a61e:	ee07 1a90 	vmov	s15, r1
 800a622:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a626:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a62a:	ee15 7a10 	vmov	r7, s10
 800a62e:	401f      	ands	r7, r3
 800a630:	ee06 7a90 	vmov	s13, r7
 800a634:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a638:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a63c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a640:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a644:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a7ac <__ieee754_powf+0x440>
 800a648:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800a7b0 <__ieee754_powf+0x444>
 800a64c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a650:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800a7b4 <__ieee754_powf+0x448>
 800a654:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a658:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800a788 <__ieee754_powf+0x41c>
 800a65c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a660:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800a7b8 <__ieee754_powf+0x44c>
 800a664:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a668:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800a7bc <__ieee754_powf+0x450>
 800a66c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a670:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a674:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a678:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a67c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a680:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800a684:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a688:	eef0 5a67 	vmov.f32	s11, s15
 800a68c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a690:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a694:	ee15 1a90 	vmov	r1, s11
 800a698:	4019      	ands	r1, r3
 800a69a:	ee05 1a90 	vmov	s11, r1
 800a69e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a6a2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a6a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a6ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a6b2:	eeb0 6a67 	vmov.f32	s12, s15
 800a6b6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a6ba:	ee16 1a10 	vmov	r1, s12
 800a6be:	4019      	ands	r1, r3
 800a6c0:	ee06 1a10 	vmov	s12, r1
 800a6c4:	eeb0 7a46 	vmov.f32	s14, s12
 800a6c8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a6cc:	493c      	ldr	r1, [pc, #240]	@ (800a7c0 <__ieee754_powf+0x454>)
 800a6ce:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800a6d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6d6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800a7c4 <__ieee754_powf+0x458>
 800a6da:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800a7c8 <__ieee754_powf+0x45c>
 800a6de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6e2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a7cc <__ieee754_powf+0x460>
 800a6e6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a6ea:	ed91 7a00 	vldr	s14, [r1]
 800a6ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6f2:	ee07 2a10 	vmov	s14, r2
 800a6f6:	eef0 6a67 	vmov.f32	s13, s15
 800a6fa:	4a35      	ldr	r2, [pc, #212]	@ (800a7d0 <__ieee754_powf+0x464>)
 800a6fc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a700:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800a704:	ed92 5a00 	vldr	s10, [r2]
 800a708:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a70c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a710:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a714:	ee16 2a90 	vmov	r2, s13
 800a718:	4013      	ands	r3, r2
 800a71a:	ee06 3a90 	vmov	s13, r3
 800a71e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a722:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a726:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a72a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a72e:	e70f      	b.n	800a550 <__ieee754_powf+0x1e4>
 800a730:	2601      	movs	r6, #1
 800a732:	e75d      	b.n	800a5f0 <__ieee754_powf+0x284>
 800a734:	d152      	bne.n	800a7dc <__ieee754_powf+0x470>
 800a736:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a7d4 <__ieee754_powf+0x468>
 800a73a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a73e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a742:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74a:	f73f af29 	bgt.w	800a5a0 <__ieee754_powf+0x234>
 800a74e:	2386      	movs	r3, #134	@ 0x86
 800a750:	e048      	b.n	800a7e4 <__ieee754_powf+0x478>
 800a752:	4a21      	ldr	r2, [pc, #132]	@ (800a7d8 <__ieee754_powf+0x46c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d907      	bls.n	800a768 <__ieee754_powf+0x3fc>
 800a758:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a760:	bf4c      	ite	mi
 800a762:	2001      	movmi	r0, #1
 800a764:	2000      	movpl	r0, #0
 800a766:	e6c1      	b.n	800a4ec <__ieee754_powf+0x180>
 800a768:	d138      	bne.n	800a7dc <__ieee754_powf+0x470>
 800a76a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a76e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a776:	dbea      	blt.n	800a74e <__ieee754_powf+0x3e2>
 800a778:	e7ee      	b.n	800a758 <__ieee754_powf+0x3ec>
 800a77a:	bf00      	nop
 800a77c:	00000000 	.word	0x00000000
 800a780:	3f7ffff3 	.word	0x3f7ffff3
 800a784:	3f800007 	.word	0x3f800007
 800a788:	3eaaaaab 	.word	0x3eaaaaab
 800a78c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a790:	36eca570 	.word	0x36eca570
 800a794:	3fb8aa00 	.word	0x3fb8aa00
 800a798:	4b800000 	.word	0x4b800000
 800a79c:	001cc471 	.word	0x001cc471
 800a7a0:	005db3d6 	.word	0x005db3d6
 800a7a4:	0800ea44 	.word	0x0800ea44
 800a7a8:	fffff000 	.word	0xfffff000
 800a7ac:	3e6c3255 	.word	0x3e6c3255
 800a7b0:	3e53f142 	.word	0x3e53f142
 800a7b4:	3e8ba305 	.word	0x3e8ba305
 800a7b8:	3edb6db7 	.word	0x3edb6db7
 800a7bc:	3f19999a 	.word	0x3f19999a
 800a7c0:	0800ea34 	.word	0x0800ea34
 800a7c4:	3f76384f 	.word	0x3f76384f
 800a7c8:	3f763800 	.word	0x3f763800
 800a7cc:	369dc3a0 	.word	0x369dc3a0
 800a7d0:	0800ea3c 	.word	0x0800ea3c
 800a7d4:	3338aa3c 	.word	0x3338aa3c
 800a7d8:	43160000 	.word	0x43160000
 800a7dc:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a7e0:	d971      	bls.n	800a8c6 <__ieee754_powf+0x55a>
 800a7e2:	15db      	asrs	r3, r3, #23
 800a7e4:	3b7e      	subs	r3, #126	@ 0x7e
 800a7e6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a7ea:	4118      	asrs	r0, r3
 800a7ec:	4408      	add	r0, r1
 800a7ee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a7f2:	4a3c      	ldr	r2, [pc, #240]	@ (800a8e4 <__ieee754_powf+0x578>)
 800a7f4:	3b7f      	subs	r3, #127	@ 0x7f
 800a7f6:	411a      	asrs	r2, r3
 800a7f8:	4002      	ands	r2, r0
 800a7fa:	ee07 2a10 	vmov	s14, r2
 800a7fe:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a802:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800a806:	f1c3 0317 	rsb	r3, r3, #23
 800a80a:	4118      	asrs	r0, r3
 800a80c:	2900      	cmp	r1, #0
 800a80e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a812:	bfb8      	it	lt
 800a814:	4240      	neglt	r0, r0
 800a816:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a81a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800a8e8 <__ieee754_powf+0x57c>
 800a81e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800a8ec <__ieee754_powf+0x580>
 800a822:	ee17 3a10 	vmov	r3, s14
 800a826:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a82a:	f023 030f 	bic.w	r3, r3, #15
 800a82e:	ee07 3a10 	vmov	s14, r3
 800a832:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a836:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a83a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a83e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800a8f0 <__ieee754_powf+0x584>
 800a842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a846:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a84a:	eef0 6a67 	vmov.f32	s13, s15
 800a84e:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a852:	eef0 5a66 	vmov.f32	s11, s13
 800a856:	eee7 5a46 	vfms.f32	s11, s14, s12
 800a85a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a85e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a862:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800a8f4 <__ieee754_powf+0x588>
 800a866:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800a8f8 <__ieee754_powf+0x58c>
 800a86a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a86e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800a8fc <__ieee754_powf+0x590>
 800a872:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a876:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800a900 <__ieee754_powf+0x594>
 800a87a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a87e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800a904 <__ieee754_powf+0x598>
 800a882:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a886:	eeb0 6a66 	vmov.f32	s12, s13
 800a88a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800a88e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800a892:	ee66 5a86 	vmul.f32	s11, s13, s12
 800a896:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a89a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800a89e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800a8a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a8aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a8ae:	ee10 3a10 	vmov	r3, s0
 800a8b2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a8b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a8ba:	da06      	bge.n	800a8ca <__ieee754_powf+0x55e>
 800a8bc:	f000 f82e 	bl	800a91c <scalbnf>
 800a8c0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a8c4:	e56a      	b.n	800a39c <__ieee754_powf+0x30>
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	e7a5      	b.n	800a816 <__ieee754_powf+0x4aa>
 800a8ca:	ee00 3a10 	vmov	s0, r3
 800a8ce:	e7f7      	b.n	800a8c0 <__ieee754_powf+0x554>
 800a8d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a8d4:	e562      	b.n	800a39c <__ieee754_powf+0x30>
 800a8d6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a908 <__ieee754_powf+0x59c>
 800a8da:	e55f      	b.n	800a39c <__ieee754_powf+0x30>
 800a8dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a8e0:	e55c      	b.n	800a39c <__ieee754_powf+0x30>
 800a8e2:	bf00      	nop
 800a8e4:	ff800000 	.word	0xff800000
 800a8e8:	3f317218 	.word	0x3f317218
 800a8ec:	3f317200 	.word	0x3f317200
 800a8f0:	35bfbe8c 	.word	0x35bfbe8c
 800a8f4:	b5ddea0e 	.word	0xb5ddea0e
 800a8f8:	3331bb4c 	.word	0x3331bb4c
 800a8fc:	388ab355 	.word	0x388ab355
 800a900:	bb360b61 	.word	0xbb360b61
 800a904:	3e2aaaab 	.word	0x3e2aaaab
 800a908:	00000000 	.word	0x00000000

0800a90c <fabsf>:
 800a90c:	ee10 3a10 	vmov	r3, s0
 800a910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a914:	ee00 3a10 	vmov	s0, r3
 800a918:	4770      	bx	lr
	...

0800a91c <scalbnf>:
 800a91c:	ee10 3a10 	vmov	r3, s0
 800a920:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a924:	d02b      	beq.n	800a97e <scalbnf+0x62>
 800a926:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a92a:	d302      	bcc.n	800a932 <scalbnf+0x16>
 800a92c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a930:	4770      	bx	lr
 800a932:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a936:	d123      	bne.n	800a980 <scalbnf+0x64>
 800a938:	4b24      	ldr	r3, [pc, #144]	@ (800a9cc <scalbnf+0xb0>)
 800a93a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a9d0 <scalbnf+0xb4>
 800a93e:	4298      	cmp	r0, r3
 800a940:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a944:	db17      	blt.n	800a976 <scalbnf+0x5a>
 800a946:	ee10 3a10 	vmov	r3, s0
 800a94a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a94e:	3a19      	subs	r2, #25
 800a950:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a954:	4288      	cmp	r0, r1
 800a956:	dd15      	ble.n	800a984 <scalbnf+0x68>
 800a958:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a9d4 <scalbnf+0xb8>
 800a95c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a9d8 <scalbnf+0xbc>
 800a960:	ee10 3a10 	vmov	r3, s0
 800a964:	eeb0 7a67 	vmov.f32	s14, s15
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bfb8      	it	lt
 800a96c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a970:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a974:	4770      	bx	lr
 800a976:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a9dc <scalbnf+0xc0>
 800a97a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a97e:	4770      	bx	lr
 800a980:	0dd2      	lsrs	r2, r2, #23
 800a982:	e7e5      	b.n	800a950 <scalbnf+0x34>
 800a984:	4410      	add	r0, r2
 800a986:	28fe      	cmp	r0, #254	@ 0xfe
 800a988:	dce6      	bgt.n	800a958 <scalbnf+0x3c>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	dd06      	ble.n	800a99c <scalbnf+0x80>
 800a98e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a992:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a996:	ee00 3a10 	vmov	s0, r3
 800a99a:	4770      	bx	lr
 800a99c:	f110 0f16 	cmn.w	r0, #22
 800a9a0:	da09      	bge.n	800a9b6 <scalbnf+0x9a>
 800a9a2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a9dc <scalbnf+0xc0>
 800a9a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a9e0 <scalbnf+0xc4>
 800a9aa:	ee10 3a10 	vmov	r3, s0
 800a9ae:	eeb0 7a67 	vmov.f32	s14, s15
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	e7d9      	b.n	800a96a <scalbnf+0x4e>
 800a9b6:	3019      	adds	r0, #25
 800a9b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a9bc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a9c0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a9e4 <scalbnf+0xc8>
 800a9c4:	ee07 3a90 	vmov	s15, r3
 800a9c8:	e7d7      	b.n	800a97a <scalbnf+0x5e>
 800a9ca:	bf00      	nop
 800a9cc:	ffff3cb0 	.word	0xffff3cb0
 800a9d0:	4c000000 	.word	0x4c000000
 800a9d4:	7149f2ca 	.word	0x7149f2ca
 800a9d8:	f149f2ca 	.word	0xf149f2ca
 800a9dc:	0da24260 	.word	0x0da24260
 800a9e0:	8da24260 	.word	0x8da24260
 800a9e4:	33000000 	.word	0x33000000

0800a9e8 <with_errnof>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	ed2d 8b02 	vpush	{d8}
 800a9ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	f000 fe16 	bl	800b624 <__errno>
 800a9f8:	eeb0 0a48 	vmov.f32	s0, s16
 800a9fc:	ecbd 8b02 	vpop	{d8}
 800aa00:	6004      	str	r4, [r0, #0]
 800aa02:	bd10      	pop	{r4, pc}

0800aa04 <xflowf>:
 800aa04:	b130      	cbz	r0, 800aa14 <xflowf+0x10>
 800aa06:	eef1 7a40 	vneg.f32	s15, s0
 800aa0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa0e:	2022      	movs	r0, #34	@ 0x22
 800aa10:	f7ff bfea 	b.w	800a9e8 <with_errnof>
 800aa14:	eef0 7a40 	vmov.f32	s15, s0
 800aa18:	e7f7      	b.n	800aa0a <xflowf+0x6>
	...

0800aa1c <__math_uflowf>:
 800aa1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aa24 <__math_uflowf+0x8>
 800aa20:	f7ff bff0 	b.w	800aa04 <xflowf>
 800aa24:	10000000 	.word	0x10000000

0800aa28 <__math_oflowf>:
 800aa28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aa30 <__math_oflowf+0x8>
 800aa2c:	f7ff bfea 	b.w	800aa04 <xflowf>
 800aa30:	70000000 	.word	0x70000000

0800aa34 <realloc>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	@ (800aa40 <realloc+0xc>)
 800aa36:	460a      	mov	r2, r1
 800aa38:	4601      	mov	r1, r0
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	f000 b802 	b.w	800aa44 <_realloc_r>
 800aa40:	20000018 	.word	0x20000018

0800aa44 <_realloc_r>:
 800aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	4680      	mov	r8, r0
 800aa4a:	4615      	mov	r5, r2
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	b921      	cbnz	r1, 800aa5a <_realloc_r+0x16>
 800aa50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	4611      	mov	r1, r2
 800aa56:	f001 bce3 	b.w	800c420 <_malloc_r>
 800aa5a:	b92a      	cbnz	r2, 800aa68 <_realloc_r+0x24>
 800aa5c:	f001 fc6c 	bl	800c338 <_free_r>
 800aa60:	2400      	movs	r4, #0
 800aa62:	4620      	mov	r0, r4
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	f002 f8e8 	bl	800cc3c <_malloc_usable_size_r>
 800aa6c:	4285      	cmp	r5, r0
 800aa6e:	4606      	mov	r6, r0
 800aa70:	d802      	bhi.n	800aa78 <_realloc_r+0x34>
 800aa72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa76:	d8f4      	bhi.n	800aa62 <_realloc_r+0x1e>
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	f001 fcd0 	bl	800c420 <_malloc_r>
 800aa80:	4607      	mov	r7, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d0ec      	beq.n	800aa60 <_realloc_r+0x1c>
 800aa86:	42b5      	cmp	r5, r6
 800aa88:	462a      	mov	r2, r5
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	bf28      	it	cs
 800aa8e:	4632      	movcs	r2, r6
 800aa90:	f000 fdf5 	bl	800b67e <memcpy>
 800aa94:	4621      	mov	r1, r4
 800aa96:	4640      	mov	r0, r8
 800aa98:	f001 fc4e 	bl	800c338 <_free_r>
 800aa9c:	463c      	mov	r4, r7
 800aa9e:	e7e0      	b.n	800aa62 <_realloc_r+0x1e>

0800aaa0 <__cvt>:
 800aaa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa4:	ec57 6b10 	vmov	r6, r7, d0
 800aaa8:	2f00      	cmp	r7, #0
 800aaaa:	460c      	mov	r4, r1
 800aaac:	4619      	mov	r1, r3
 800aaae:	463b      	mov	r3, r7
 800aab0:	bfbb      	ittet	lt
 800aab2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aab6:	461f      	movlt	r7, r3
 800aab8:	2300      	movge	r3, #0
 800aaba:	232d      	movlt	r3, #45	@ 0x2d
 800aabc:	700b      	strb	r3, [r1, #0]
 800aabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aac0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aac4:	4691      	mov	r9, r2
 800aac6:	f023 0820 	bic.w	r8, r3, #32
 800aaca:	bfbc      	itt	lt
 800aacc:	4632      	movlt	r2, r6
 800aace:	4616      	movlt	r6, r2
 800aad0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aad4:	d005      	beq.n	800aae2 <__cvt+0x42>
 800aad6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aada:	d100      	bne.n	800aade <__cvt+0x3e>
 800aadc:	3401      	adds	r4, #1
 800aade:	2102      	movs	r1, #2
 800aae0:	e000      	b.n	800aae4 <__cvt+0x44>
 800aae2:	2103      	movs	r1, #3
 800aae4:	ab03      	add	r3, sp, #12
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	ab02      	add	r3, sp, #8
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	ec47 6b10 	vmov	d0, r6, r7
 800aaf0:	4653      	mov	r3, sl
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	f000 fe5c 	bl	800b7b0 <_dtoa_r>
 800aaf8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aafc:	4605      	mov	r5, r0
 800aafe:	d119      	bne.n	800ab34 <__cvt+0x94>
 800ab00:	f019 0f01 	tst.w	r9, #1
 800ab04:	d00e      	beq.n	800ab24 <__cvt+0x84>
 800ab06:	eb00 0904 	add.w	r9, r0, r4
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	f7f5 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab16:	b108      	cbz	r0, 800ab1c <__cvt+0x7c>
 800ab18:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab1c:	2230      	movs	r2, #48	@ 0x30
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	454b      	cmp	r3, r9
 800ab22:	d31e      	bcc.n	800ab62 <__cvt+0xc2>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab28:	1b5b      	subs	r3, r3, r5
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	b004      	add	sp, #16
 800ab30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab38:	eb00 0904 	add.w	r9, r0, r4
 800ab3c:	d1e5      	bne.n	800ab0a <__cvt+0x6a>
 800ab3e:	7803      	ldrb	r3, [r0, #0]
 800ab40:	2b30      	cmp	r3, #48	@ 0x30
 800ab42:	d10a      	bne.n	800ab5a <__cvt+0xba>
 800ab44:	2200      	movs	r2, #0
 800ab46:	2300      	movs	r3, #0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	f7f5 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab50:	b918      	cbnz	r0, 800ab5a <__cvt+0xba>
 800ab52:	f1c4 0401 	rsb	r4, r4, #1
 800ab56:	f8ca 4000 	str.w	r4, [sl]
 800ab5a:	f8da 3000 	ldr.w	r3, [sl]
 800ab5e:	4499      	add	r9, r3
 800ab60:	e7d3      	b.n	800ab0a <__cvt+0x6a>
 800ab62:	1c59      	adds	r1, r3, #1
 800ab64:	9103      	str	r1, [sp, #12]
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	e7d9      	b.n	800ab1e <__cvt+0x7e>

0800ab6a <__exponent>:
 800ab6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	bfba      	itte	lt
 800ab70:	4249      	neglt	r1, r1
 800ab72:	232d      	movlt	r3, #45	@ 0x2d
 800ab74:	232b      	movge	r3, #43	@ 0x2b
 800ab76:	2909      	cmp	r1, #9
 800ab78:	7002      	strb	r2, [r0, #0]
 800ab7a:	7043      	strb	r3, [r0, #1]
 800ab7c:	dd29      	ble.n	800abd2 <__exponent+0x68>
 800ab7e:	f10d 0307 	add.w	r3, sp, #7
 800ab82:	461d      	mov	r5, r3
 800ab84:	270a      	movs	r7, #10
 800ab86:	461a      	mov	r2, r3
 800ab88:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab8c:	fb07 1416 	mls	r4, r7, r6, r1
 800ab90:	3430      	adds	r4, #48	@ 0x30
 800ab92:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ab96:	460c      	mov	r4, r1
 800ab98:	2c63      	cmp	r4, #99	@ 0x63
 800ab9a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ab9e:	4631      	mov	r1, r6
 800aba0:	dcf1      	bgt.n	800ab86 <__exponent+0x1c>
 800aba2:	3130      	adds	r1, #48	@ 0x30
 800aba4:	1e94      	subs	r4, r2, #2
 800aba6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abaa:	1c41      	adds	r1, r0, #1
 800abac:	4623      	mov	r3, r4
 800abae:	42ab      	cmp	r3, r5
 800abb0:	d30a      	bcc.n	800abc8 <__exponent+0x5e>
 800abb2:	f10d 0309 	add.w	r3, sp, #9
 800abb6:	1a9b      	subs	r3, r3, r2
 800abb8:	42ac      	cmp	r4, r5
 800abba:	bf88      	it	hi
 800abbc:	2300      	movhi	r3, #0
 800abbe:	3302      	adds	r3, #2
 800abc0:	4403      	add	r3, r0
 800abc2:	1a18      	subs	r0, r3, r0
 800abc4:	b003      	add	sp, #12
 800abc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800abcc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800abd0:	e7ed      	b.n	800abae <__exponent+0x44>
 800abd2:	2330      	movs	r3, #48	@ 0x30
 800abd4:	3130      	adds	r1, #48	@ 0x30
 800abd6:	7083      	strb	r3, [r0, #2]
 800abd8:	70c1      	strb	r1, [r0, #3]
 800abda:	1d03      	adds	r3, r0, #4
 800abdc:	e7f1      	b.n	800abc2 <__exponent+0x58>
	...

0800abe0 <_printf_float>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	b08d      	sub	sp, #52	@ 0x34
 800abe6:	460c      	mov	r4, r1
 800abe8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800abec:	4616      	mov	r6, r2
 800abee:	461f      	mov	r7, r3
 800abf0:	4605      	mov	r5, r0
 800abf2:	f000 fccd 	bl	800b590 <_localeconv_r>
 800abf6:	6803      	ldr	r3, [r0, #0]
 800abf8:	9304      	str	r3, [sp, #16]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7f5 fb38 	bl	8000270 <strlen>
 800ac00:	2300      	movs	r3, #0
 800ac02:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac04:	f8d8 3000 	ldr.w	r3, [r8]
 800ac08:	9005      	str	r0, [sp, #20]
 800ac0a:	3307      	adds	r3, #7
 800ac0c:	f023 0307 	bic.w	r3, r3, #7
 800ac10:	f103 0208 	add.w	r2, r3, #8
 800ac14:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac18:	f8d4 b000 	ldr.w	fp, [r4]
 800ac1c:	f8c8 2000 	str.w	r2, [r8]
 800ac20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac28:	9307      	str	r3, [sp, #28]
 800ac2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac36:	4b9c      	ldr	r3, [pc, #624]	@ (800aea8 <_printf_float+0x2c8>)
 800ac38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac3c:	f7f5 ff76 	bl	8000b2c <__aeabi_dcmpun>
 800ac40:	bb70      	cbnz	r0, 800aca0 <_printf_float+0xc0>
 800ac42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac46:	4b98      	ldr	r3, [pc, #608]	@ (800aea8 <_printf_float+0x2c8>)
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac4c:	f7f5 ff50 	bl	8000af0 <__aeabi_dcmple>
 800ac50:	bb30      	cbnz	r0, 800aca0 <_printf_float+0xc0>
 800ac52:	2200      	movs	r2, #0
 800ac54:	2300      	movs	r3, #0
 800ac56:	4640      	mov	r0, r8
 800ac58:	4649      	mov	r1, r9
 800ac5a:	f7f5 ff3f 	bl	8000adc <__aeabi_dcmplt>
 800ac5e:	b110      	cbz	r0, 800ac66 <_printf_float+0x86>
 800ac60:	232d      	movs	r3, #45	@ 0x2d
 800ac62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac66:	4a91      	ldr	r2, [pc, #580]	@ (800aeac <_printf_float+0x2cc>)
 800ac68:	4b91      	ldr	r3, [pc, #580]	@ (800aeb0 <_printf_float+0x2d0>)
 800ac6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac6e:	bf94      	ite	ls
 800ac70:	4690      	movls	r8, r2
 800ac72:	4698      	movhi	r8, r3
 800ac74:	2303      	movs	r3, #3
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	f02b 0304 	bic.w	r3, fp, #4
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	f04f 0900 	mov.w	r9, #0
 800ac82:	9700      	str	r7, [sp, #0]
 800ac84:	4633      	mov	r3, r6
 800ac86:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f000 f9d2 	bl	800b034 <_printf_common>
 800ac90:	3001      	adds	r0, #1
 800ac92:	f040 808d 	bne.w	800adb0 <_printf_float+0x1d0>
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac9a:	b00d      	add	sp, #52	@ 0x34
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	4642      	mov	r2, r8
 800aca2:	464b      	mov	r3, r9
 800aca4:	4640      	mov	r0, r8
 800aca6:	4649      	mov	r1, r9
 800aca8:	f7f5 ff40 	bl	8000b2c <__aeabi_dcmpun>
 800acac:	b140      	cbz	r0, 800acc0 <_printf_float+0xe0>
 800acae:	464b      	mov	r3, r9
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bfbc      	itt	lt
 800acb4:	232d      	movlt	r3, #45	@ 0x2d
 800acb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acba:	4a7e      	ldr	r2, [pc, #504]	@ (800aeb4 <_printf_float+0x2d4>)
 800acbc:	4b7e      	ldr	r3, [pc, #504]	@ (800aeb8 <_printf_float+0x2d8>)
 800acbe:	e7d4      	b.n	800ac6a <_printf_float+0x8a>
 800acc0:	6863      	ldr	r3, [r4, #4]
 800acc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800acc6:	9206      	str	r2, [sp, #24]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	d13b      	bne.n	800ad44 <_printf_float+0x164>
 800accc:	2306      	movs	r3, #6
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800acd4:	2300      	movs	r3, #0
 800acd6:	6022      	str	r2, [r4, #0]
 800acd8:	9303      	str	r3, [sp, #12]
 800acda:	ab0a      	add	r3, sp, #40	@ 0x28
 800acdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ace0:	ab09      	add	r3, sp, #36	@ 0x24
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	6861      	ldr	r1, [r4, #4]
 800ace6:	ec49 8b10 	vmov	d0, r8, r9
 800acea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800acee:	4628      	mov	r0, r5
 800acf0:	f7ff fed6 	bl	800aaa0 <__cvt>
 800acf4:	9b06      	ldr	r3, [sp, #24]
 800acf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acf8:	2b47      	cmp	r3, #71	@ 0x47
 800acfa:	4680      	mov	r8, r0
 800acfc:	d129      	bne.n	800ad52 <_printf_float+0x172>
 800acfe:	1cc8      	adds	r0, r1, #3
 800ad00:	db02      	blt.n	800ad08 <_printf_float+0x128>
 800ad02:	6863      	ldr	r3, [r4, #4]
 800ad04:	4299      	cmp	r1, r3
 800ad06:	dd41      	ble.n	800ad8c <_printf_float+0x1ac>
 800ad08:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad0c:	fa5f fa8a 	uxtb.w	sl, sl
 800ad10:	3901      	subs	r1, #1
 800ad12:	4652      	mov	r2, sl
 800ad14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad18:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad1a:	f7ff ff26 	bl	800ab6a <__exponent>
 800ad1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad20:	1813      	adds	r3, r2, r0
 800ad22:	2a01      	cmp	r2, #1
 800ad24:	4681      	mov	r9, r0
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	dc02      	bgt.n	800ad30 <_printf_float+0x150>
 800ad2a:	6822      	ldr	r2, [r4, #0]
 800ad2c:	07d2      	lsls	r2, r2, #31
 800ad2e:	d501      	bpl.n	800ad34 <_printf_float+0x154>
 800ad30:	3301      	adds	r3, #1
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d0a2      	beq.n	800ac82 <_printf_float+0xa2>
 800ad3c:	232d      	movs	r3, #45	@ 0x2d
 800ad3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad42:	e79e      	b.n	800ac82 <_printf_float+0xa2>
 800ad44:	9a06      	ldr	r2, [sp, #24]
 800ad46:	2a47      	cmp	r2, #71	@ 0x47
 800ad48:	d1c2      	bne.n	800acd0 <_printf_float+0xf0>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1c0      	bne.n	800acd0 <_printf_float+0xf0>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e7bd      	b.n	800acce <_printf_float+0xee>
 800ad52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad56:	d9db      	bls.n	800ad10 <_printf_float+0x130>
 800ad58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad5c:	d118      	bne.n	800ad90 <_printf_float+0x1b0>
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	6863      	ldr	r3, [r4, #4]
 800ad62:	dd0b      	ble.n	800ad7c <_printf_float+0x19c>
 800ad64:	6121      	str	r1, [r4, #16]
 800ad66:	b913      	cbnz	r3, 800ad6e <_printf_float+0x18e>
 800ad68:	6822      	ldr	r2, [r4, #0]
 800ad6a:	07d0      	lsls	r0, r2, #31
 800ad6c:	d502      	bpl.n	800ad74 <_printf_float+0x194>
 800ad6e:	3301      	adds	r3, #1
 800ad70:	440b      	add	r3, r1
 800ad72:	6123      	str	r3, [r4, #16]
 800ad74:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad76:	f04f 0900 	mov.w	r9, #0
 800ad7a:	e7db      	b.n	800ad34 <_printf_float+0x154>
 800ad7c:	b913      	cbnz	r3, 800ad84 <_printf_float+0x1a4>
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	07d2      	lsls	r2, r2, #31
 800ad82:	d501      	bpl.n	800ad88 <_printf_float+0x1a8>
 800ad84:	3302      	adds	r3, #2
 800ad86:	e7f4      	b.n	800ad72 <_printf_float+0x192>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e7f2      	b.n	800ad72 <_printf_float+0x192>
 800ad8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ad90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad92:	4299      	cmp	r1, r3
 800ad94:	db05      	blt.n	800ada2 <_printf_float+0x1c2>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	6121      	str	r1, [r4, #16]
 800ad9a:	07d8      	lsls	r0, r3, #31
 800ad9c:	d5ea      	bpl.n	800ad74 <_printf_float+0x194>
 800ad9e:	1c4b      	adds	r3, r1, #1
 800ada0:	e7e7      	b.n	800ad72 <_printf_float+0x192>
 800ada2:	2900      	cmp	r1, #0
 800ada4:	bfd4      	ite	le
 800ada6:	f1c1 0202 	rsble	r2, r1, #2
 800adaa:	2201      	movgt	r2, #1
 800adac:	4413      	add	r3, r2
 800adae:	e7e0      	b.n	800ad72 <_printf_float+0x192>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	055a      	lsls	r2, r3, #21
 800adb4:	d407      	bmi.n	800adc6 <_printf_float+0x1e6>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	4642      	mov	r2, r8
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	d12b      	bne.n	800ae1c <_printf_float+0x23c>
 800adc4:	e767      	b.n	800ac96 <_printf_float+0xb6>
 800adc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800adca:	f240 80dd 	bls.w	800af88 <_printf_float+0x3a8>
 800adce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800add2:	2200      	movs	r2, #0
 800add4:	2300      	movs	r3, #0
 800add6:	f7f5 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 800adda:	2800      	cmp	r0, #0
 800addc:	d033      	beq.n	800ae46 <_printf_float+0x266>
 800adde:	4a37      	ldr	r2, [pc, #220]	@ (800aebc <_printf_float+0x2dc>)
 800ade0:	2301      	movs	r3, #1
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	f43f af54 	beq.w	800ac96 <_printf_float+0xb6>
 800adee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800adf2:	4543      	cmp	r3, r8
 800adf4:	db02      	blt.n	800adfc <_printf_float+0x21c>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	07d8      	lsls	r0, r3, #31
 800adfa:	d50f      	bpl.n	800ae1c <_printf_float+0x23c>
 800adfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae00:	4631      	mov	r1, r6
 800ae02:	4628      	mov	r0, r5
 800ae04:	47b8      	blx	r7
 800ae06:	3001      	adds	r0, #1
 800ae08:	f43f af45 	beq.w	800ac96 <_printf_float+0xb6>
 800ae0c:	f04f 0900 	mov.w	r9, #0
 800ae10:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ae14:	f104 0a1a 	add.w	sl, r4, #26
 800ae18:	45c8      	cmp	r8, r9
 800ae1a:	dc09      	bgt.n	800ae30 <_printf_float+0x250>
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	079b      	lsls	r3, r3, #30
 800ae20:	f100 8103 	bmi.w	800b02a <_printf_float+0x44a>
 800ae24:	68e0      	ldr	r0, [r4, #12]
 800ae26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae28:	4298      	cmp	r0, r3
 800ae2a:	bfb8      	it	lt
 800ae2c:	4618      	movlt	r0, r3
 800ae2e:	e734      	b.n	800ac9a <_printf_float+0xba>
 800ae30:	2301      	movs	r3, #1
 800ae32:	4652      	mov	r2, sl
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f43f af2b 	beq.w	800ac96 <_printf_float+0xb6>
 800ae40:	f109 0901 	add.w	r9, r9, #1
 800ae44:	e7e8      	b.n	800ae18 <_printf_float+0x238>
 800ae46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dc39      	bgt.n	800aec0 <_printf_float+0x2e0>
 800ae4c:	4a1b      	ldr	r2, [pc, #108]	@ (800aebc <_printf_float+0x2dc>)
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	f43f af1d 	beq.w	800ac96 <_printf_float+0xb6>
 800ae5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae60:	ea59 0303 	orrs.w	r3, r9, r3
 800ae64:	d102      	bne.n	800ae6c <_printf_float+0x28c>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	07d9      	lsls	r1, r3, #31
 800ae6a:	d5d7      	bpl.n	800ae1c <_printf_float+0x23c>
 800ae6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae70:	4631      	mov	r1, r6
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	f43f af0d 	beq.w	800ac96 <_printf_float+0xb6>
 800ae7c:	f04f 0a00 	mov.w	sl, #0
 800ae80:	f104 0b1a 	add.w	fp, r4, #26
 800ae84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae86:	425b      	negs	r3, r3
 800ae88:	4553      	cmp	r3, sl
 800ae8a:	dc01      	bgt.n	800ae90 <_printf_float+0x2b0>
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	e793      	b.n	800adb8 <_printf_float+0x1d8>
 800ae90:	2301      	movs	r3, #1
 800ae92:	465a      	mov	r2, fp
 800ae94:	4631      	mov	r1, r6
 800ae96:	4628      	mov	r0, r5
 800ae98:	47b8      	blx	r7
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f43f aefb 	beq.w	800ac96 <_printf_float+0xb6>
 800aea0:	f10a 0a01 	add.w	sl, sl, #1
 800aea4:	e7ee      	b.n	800ae84 <_printf_float+0x2a4>
 800aea6:	bf00      	nop
 800aea8:	7fefffff 	.word	0x7fefffff
 800aeac:	0800ea4c 	.word	0x0800ea4c
 800aeb0:	0800ea50 	.word	0x0800ea50
 800aeb4:	0800ea54 	.word	0x0800ea54
 800aeb8:	0800ea58 	.word	0x0800ea58
 800aebc:	0800ea5c 	.word	0x0800ea5c
 800aec0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aec2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aec6:	4553      	cmp	r3, sl
 800aec8:	bfa8      	it	ge
 800aeca:	4653      	movge	r3, sl
 800aecc:	2b00      	cmp	r3, #0
 800aece:	4699      	mov	r9, r3
 800aed0:	dc36      	bgt.n	800af40 <_printf_float+0x360>
 800aed2:	f04f 0b00 	mov.w	fp, #0
 800aed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aeda:	f104 021a 	add.w	r2, r4, #26
 800aede:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aee0:	9306      	str	r3, [sp, #24]
 800aee2:	eba3 0309 	sub.w	r3, r3, r9
 800aee6:	455b      	cmp	r3, fp
 800aee8:	dc31      	bgt.n	800af4e <_printf_float+0x36e>
 800aeea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeec:	459a      	cmp	sl, r3
 800aeee:	dc3a      	bgt.n	800af66 <_printf_float+0x386>
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	07da      	lsls	r2, r3, #31
 800aef4:	d437      	bmi.n	800af66 <_printf_float+0x386>
 800aef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef8:	ebaa 0903 	sub.w	r9, sl, r3
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	ebaa 0303 	sub.w	r3, sl, r3
 800af02:	4599      	cmp	r9, r3
 800af04:	bfa8      	it	ge
 800af06:	4699      	movge	r9, r3
 800af08:	f1b9 0f00 	cmp.w	r9, #0
 800af0c:	dc33      	bgt.n	800af76 <_printf_float+0x396>
 800af0e:	f04f 0800 	mov.w	r8, #0
 800af12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af16:	f104 0b1a 	add.w	fp, r4, #26
 800af1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1c:	ebaa 0303 	sub.w	r3, sl, r3
 800af20:	eba3 0309 	sub.w	r3, r3, r9
 800af24:	4543      	cmp	r3, r8
 800af26:	f77f af79 	ble.w	800ae1c <_printf_float+0x23c>
 800af2a:	2301      	movs	r3, #1
 800af2c:	465a      	mov	r2, fp
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	f43f aeae 	beq.w	800ac96 <_printf_float+0xb6>
 800af3a:	f108 0801 	add.w	r8, r8, #1
 800af3e:	e7ec      	b.n	800af1a <_printf_float+0x33a>
 800af40:	4642      	mov	r2, r8
 800af42:	4631      	mov	r1, r6
 800af44:	4628      	mov	r0, r5
 800af46:	47b8      	blx	r7
 800af48:	3001      	adds	r0, #1
 800af4a:	d1c2      	bne.n	800aed2 <_printf_float+0x2f2>
 800af4c:	e6a3      	b.n	800ac96 <_printf_float+0xb6>
 800af4e:	2301      	movs	r3, #1
 800af50:	4631      	mov	r1, r6
 800af52:	4628      	mov	r0, r5
 800af54:	9206      	str	r2, [sp, #24]
 800af56:	47b8      	blx	r7
 800af58:	3001      	adds	r0, #1
 800af5a:	f43f ae9c 	beq.w	800ac96 <_printf_float+0xb6>
 800af5e:	9a06      	ldr	r2, [sp, #24]
 800af60:	f10b 0b01 	add.w	fp, fp, #1
 800af64:	e7bb      	b.n	800aede <_printf_float+0x2fe>
 800af66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af6a:	4631      	mov	r1, r6
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b8      	blx	r7
 800af70:	3001      	adds	r0, #1
 800af72:	d1c0      	bne.n	800aef6 <_printf_float+0x316>
 800af74:	e68f      	b.n	800ac96 <_printf_float+0xb6>
 800af76:	9a06      	ldr	r2, [sp, #24]
 800af78:	464b      	mov	r3, r9
 800af7a:	4442      	add	r2, r8
 800af7c:	4631      	mov	r1, r6
 800af7e:	4628      	mov	r0, r5
 800af80:	47b8      	blx	r7
 800af82:	3001      	adds	r0, #1
 800af84:	d1c3      	bne.n	800af0e <_printf_float+0x32e>
 800af86:	e686      	b.n	800ac96 <_printf_float+0xb6>
 800af88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af8c:	f1ba 0f01 	cmp.w	sl, #1
 800af90:	dc01      	bgt.n	800af96 <_printf_float+0x3b6>
 800af92:	07db      	lsls	r3, r3, #31
 800af94:	d536      	bpl.n	800b004 <_printf_float+0x424>
 800af96:	2301      	movs	r3, #1
 800af98:	4642      	mov	r2, r8
 800af9a:	4631      	mov	r1, r6
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b8      	blx	r7
 800afa0:	3001      	adds	r0, #1
 800afa2:	f43f ae78 	beq.w	800ac96 <_printf_float+0xb6>
 800afa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afaa:	4631      	mov	r1, r6
 800afac:	4628      	mov	r0, r5
 800afae:	47b8      	blx	r7
 800afb0:	3001      	adds	r0, #1
 800afb2:	f43f ae70 	beq.w	800ac96 <_printf_float+0xb6>
 800afb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afba:	2200      	movs	r2, #0
 800afbc:	2300      	movs	r3, #0
 800afbe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800afc2:	f7f5 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc6:	b9c0      	cbnz	r0, 800affa <_printf_float+0x41a>
 800afc8:	4653      	mov	r3, sl
 800afca:	f108 0201 	add.w	r2, r8, #1
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	d10c      	bne.n	800aff2 <_printf_float+0x412>
 800afd8:	e65d      	b.n	800ac96 <_printf_float+0xb6>
 800afda:	2301      	movs	r3, #1
 800afdc:	465a      	mov	r2, fp
 800afde:	4631      	mov	r1, r6
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b8      	blx	r7
 800afe4:	3001      	adds	r0, #1
 800afe6:	f43f ae56 	beq.w	800ac96 <_printf_float+0xb6>
 800afea:	f108 0801 	add.w	r8, r8, #1
 800afee:	45d0      	cmp	r8, sl
 800aff0:	dbf3      	blt.n	800afda <_printf_float+0x3fa>
 800aff2:	464b      	mov	r3, r9
 800aff4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aff8:	e6df      	b.n	800adba <_printf_float+0x1da>
 800affa:	f04f 0800 	mov.w	r8, #0
 800affe:	f104 0b1a 	add.w	fp, r4, #26
 800b002:	e7f4      	b.n	800afee <_printf_float+0x40e>
 800b004:	2301      	movs	r3, #1
 800b006:	4642      	mov	r2, r8
 800b008:	e7e1      	b.n	800afce <_printf_float+0x3ee>
 800b00a:	2301      	movs	r3, #1
 800b00c:	464a      	mov	r2, r9
 800b00e:	4631      	mov	r1, r6
 800b010:	4628      	mov	r0, r5
 800b012:	47b8      	blx	r7
 800b014:	3001      	adds	r0, #1
 800b016:	f43f ae3e 	beq.w	800ac96 <_printf_float+0xb6>
 800b01a:	f108 0801 	add.w	r8, r8, #1
 800b01e:	68e3      	ldr	r3, [r4, #12]
 800b020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b022:	1a5b      	subs	r3, r3, r1
 800b024:	4543      	cmp	r3, r8
 800b026:	dcf0      	bgt.n	800b00a <_printf_float+0x42a>
 800b028:	e6fc      	b.n	800ae24 <_printf_float+0x244>
 800b02a:	f04f 0800 	mov.w	r8, #0
 800b02e:	f104 0919 	add.w	r9, r4, #25
 800b032:	e7f4      	b.n	800b01e <_printf_float+0x43e>

0800b034 <_printf_common>:
 800b034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b038:	4616      	mov	r6, r2
 800b03a:	4698      	mov	r8, r3
 800b03c:	688a      	ldr	r2, [r1, #8]
 800b03e:	690b      	ldr	r3, [r1, #16]
 800b040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b044:	4293      	cmp	r3, r2
 800b046:	bfb8      	it	lt
 800b048:	4613      	movlt	r3, r2
 800b04a:	6033      	str	r3, [r6, #0]
 800b04c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b050:	4607      	mov	r7, r0
 800b052:	460c      	mov	r4, r1
 800b054:	b10a      	cbz	r2, 800b05a <_printf_common+0x26>
 800b056:	3301      	adds	r3, #1
 800b058:	6033      	str	r3, [r6, #0]
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	0699      	lsls	r1, r3, #26
 800b05e:	bf42      	ittt	mi
 800b060:	6833      	ldrmi	r3, [r6, #0]
 800b062:	3302      	addmi	r3, #2
 800b064:	6033      	strmi	r3, [r6, #0]
 800b066:	6825      	ldr	r5, [r4, #0]
 800b068:	f015 0506 	ands.w	r5, r5, #6
 800b06c:	d106      	bne.n	800b07c <_printf_common+0x48>
 800b06e:	f104 0a19 	add.w	sl, r4, #25
 800b072:	68e3      	ldr	r3, [r4, #12]
 800b074:	6832      	ldr	r2, [r6, #0]
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	42ab      	cmp	r3, r5
 800b07a:	dc26      	bgt.n	800b0ca <_printf_common+0x96>
 800b07c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	3b00      	subs	r3, #0
 800b084:	bf18      	it	ne
 800b086:	2301      	movne	r3, #1
 800b088:	0692      	lsls	r2, r2, #26
 800b08a:	d42b      	bmi.n	800b0e4 <_printf_common+0xb0>
 800b08c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b090:	4641      	mov	r1, r8
 800b092:	4638      	mov	r0, r7
 800b094:	47c8      	blx	r9
 800b096:	3001      	adds	r0, #1
 800b098:	d01e      	beq.n	800b0d8 <_printf_common+0xa4>
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	6922      	ldr	r2, [r4, #16]
 800b09e:	f003 0306 	and.w	r3, r3, #6
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	bf02      	ittt	eq
 800b0a6:	68e5      	ldreq	r5, [r4, #12]
 800b0a8:	6833      	ldreq	r3, [r6, #0]
 800b0aa:	1aed      	subeq	r5, r5, r3
 800b0ac:	68a3      	ldr	r3, [r4, #8]
 800b0ae:	bf0c      	ite	eq
 800b0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0b4:	2500      	movne	r5, #0
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	bfc4      	itt	gt
 800b0ba:	1a9b      	subgt	r3, r3, r2
 800b0bc:	18ed      	addgt	r5, r5, r3
 800b0be:	2600      	movs	r6, #0
 800b0c0:	341a      	adds	r4, #26
 800b0c2:	42b5      	cmp	r5, r6
 800b0c4:	d11a      	bne.n	800b0fc <_printf_common+0xc8>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e008      	b.n	800b0dc <_printf_common+0xa8>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	4652      	mov	r2, sl
 800b0ce:	4641      	mov	r1, r8
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	47c8      	blx	r9
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d103      	bne.n	800b0e0 <_printf_common+0xac>
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	e7c6      	b.n	800b072 <_printf_common+0x3e>
 800b0e4:	18e1      	adds	r1, r4, r3
 800b0e6:	1c5a      	adds	r2, r3, #1
 800b0e8:	2030      	movs	r0, #48	@ 0x30
 800b0ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0ee:	4422      	add	r2, r4
 800b0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0f8:	3302      	adds	r3, #2
 800b0fa:	e7c7      	b.n	800b08c <_printf_common+0x58>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	4622      	mov	r2, r4
 800b100:	4641      	mov	r1, r8
 800b102:	4638      	mov	r0, r7
 800b104:	47c8      	blx	r9
 800b106:	3001      	adds	r0, #1
 800b108:	d0e6      	beq.n	800b0d8 <_printf_common+0xa4>
 800b10a:	3601      	adds	r6, #1
 800b10c:	e7d9      	b.n	800b0c2 <_printf_common+0x8e>
	...

0800b110 <_printf_i>:
 800b110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b114:	7e0f      	ldrb	r7, [r1, #24]
 800b116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b118:	2f78      	cmp	r7, #120	@ 0x78
 800b11a:	4691      	mov	r9, r2
 800b11c:	4680      	mov	r8, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	469a      	mov	sl, r3
 800b122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b126:	d807      	bhi.n	800b138 <_printf_i+0x28>
 800b128:	2f62      	cmp	r7, #98	@ 0x62
 800b12a:	d80a      	bhi.n	800b142 <_printf_i+0x32>
 800b12c:	2f00      	cmp	r7, #0
 800b12e:	f000 80d2 	beq.w	800b2d6 <_printf_i+0x1c6>
 800b132:	2f58      	cmp	r7, #88	@ 0x58
 800b134:	f000 80b9 	beq.w	800b2aa <_printf_i+0x19a>
 800b138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b13c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b140:	e03a      	b.n	800b1b8 <_printf_i+0xa8>
 800b142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b146:	2b15      	cmp	r3, #21
 800b148:	d8f6      	bhi.n	800b138 <_printf_i+0x28>
 800b14a:	a101      	add	r1, pc, #4	@ (adr r1, 800b150 <_printf_i+0x40>)
 800b14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b150:	0800b1a9 	.word	0x0800b1a9
 800b154:	0800b1bd 	.word	0x0800b1bd
 800b158:	0800b139 	.word	0x0800b139
 800b15c:	0800b139 	.word	0x0800b139
 800b160:	0800b139 	.word	0x0800b139
 800b164:	0800b139 	.word	0x0800b139
 800b168:	0800b1bd 	.word	0x0800b1bd
 800b16c:	0800b139 	.word	0x0800b139
 800b170:	0800b139 	.word	0x0800b139
 800b174:	0800b139 	.word	0x0800b139
 800b178:	0800b139 	.word	0x0800b139
 800b17c:	0800b2bd 	.word	0x0800b2bd
 800b180:	0800b1e7 	.word	0x0800b1e7
 800b184:	0800b277 	.word	0x0800b277
 800b188:	0800b139 	.word	0x0800b139
 800b18c:	0800b139 	.word	0x0800b139
 800b190:	0800b2df 	.word	0x0800b2df
 800b194:	0800b139 	.word	0x0800b139
 800b198:	0800b1e7 	.word	0x0800b1e7
 800b19c:	0800b139 	.word	0x0800b139
 800b1a0:	0800b139 	.word	0x0800b139
 800b1a4:	0800b27f 	.word	0x0800b27f
 800b1a8:	6833      	ldr	r3, [r6, #0]
 800b1aa:	1d1a      	adds	r2, r3, #4
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	6032      	str	r2, [r6, #0]
 800b1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e09d      	b.n	800b2f8 <_printf_i+0x1e8>
 800b1bc:	6833      	ldr	r3, [r6, #0]
 800b1be:	6820      	ldr	r0, [r4, #0]
 800b1c0:	1d19      	adds	r1, r3, #4
 800b1c2:	6031      	str	r1, [r6, #0]
 800b1c4:	0606      	lsls	r6, r0, #24
 800b1c6:	d501      	bpl.n	800b1cc <_printf_i+0xbc>
 800b1c8:	681d      	ldr	r5, [r3, #0]
 800b1ca:	e003      	b.n	800b1d4 <_printf_i+0xc4>
 800b1cc:	0645      	lsls	r5, r0, #25
 800b1ce:	d5fb      	bpl.n	800b1c8 <_printf_i+0xb8>
 800b1d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1d4:	2d00      	cmp	r5, #0
 800b1d6:	da03      	bge.n	800b1e0 <_printf_i+0xd0>
 800b1d8:	232d      	movs	r3, #45	@ 0x2d
 800b1da:	426d      	negs	r5, r5
 800b1dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1e0:	4859      	ldr	r0, [pc, #356]	@ (800b348 <_printf_i+0x238>)
 800b1e2:	230a      	movs	r3, #10
 800b1e4:	e011      	b.n	800b20a <_printf_i+0xfa>
 800b1e6:	6821      	ldr	r1, [r4, #0]
 800b1e8:	6833      	ldr	r3, [r6, #0]
 800b1ea:	0608      	lsls	r0, r1, #24
 800b1ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1f0:	d402      	bmi.n	800b1f8 <_printf_i+0xe8>
 800b1f2:	0649      	lsls	r1, r1, #25
 800b1f4:	bf48      	it	mi
 800b1f6:	b2ad      	uxthmi	r5, r5
 800b1f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1fa:	4853      	ldr	r0, [pc, #332]	@ (800b348 <_printf_i+0x238>)
 800b1fc:	6033      	str	r3, [r6, #0]
 800b1fe:	bf14      	ite	ne
 800b200:	230a      	movne	r3, #10
 800b202:	2308      	moveq	r3, #8
 800b204:	2100      	movs	r1, #0
 800b206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b20a:	6866      	ldr	r6, [r4, #4]
 800b20c:	60a6      	str	r6, [r4, #8]
 800b20e:	2e00      	cmp	r6, #0
 800b210:	bfa2      	ittt	ge
 800b212:	6821      	ldrge	r1, [r4, #0]
 800b214:	f021 0104 	bicge.w	r1, r1, #4
 800b218:	6021      	strge	r1, [r4, #0]
 800b21a:	b90d      	cbnz	r5, 800b220 <_printf_i+0x110>
 800b21c:	2e00      	cmp	r6, #0
 800b21e:	d04b      	beq.n	800b2b8 <_printf_i+0x1a8>
 800b220:	4616      	mov	r6, r2
 800b222:	fbb5 f1f3 	udiv	r1, r5, r3
 800b226:	fb03 5711 	mls	r7, r3, r1, r5
 800b22a:	5dc7      	ldrb	r7, [r0, r7]
 800b22c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b230:	462f      	mov	r7, r5
 800b232:	42bb      	cmp	r3, r7
 800b234:	460d      	mov	r5, r1
 800b236:	d9f4      	bls.n	800b222 <_printf_i+0x112>
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d10b      	bne.n	800b254 <_printf_i+0x144>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	07df      	lsls	r7, r3, #31
 800b240:	d508      	bpl.n	800b254 <_printf_i+0x144>
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	6861      	ldr	r1, [r4, #4]
 800b246:	4299      	cmp	r1, r3
 800b248:	bfde      	ittt	le
 800b24a:	2330      	movle	r3, #48	@ 0x30
 800b24c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b250:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b254:	1b92      	subs	r2, r2, r6
 800b256:	6122      	str	r2, [r4, #16]
 800b258:	f8cd a000 	str.w	sl, [sp]
 800b25c:	464b      	mov	r3, r9
 800b25e:	aa03      	add	r2, sp, #12
 800b260:	4621      	mov	r1, r4
 800b262:	4640      	mov	r0, r8
 800b264:	f7ff fee6 	bl	800b034 <_printf_common>
 800b268:	3001      	adds	r0, #1
 800b26a:	d14a      	bne.n	800b302 <_printf_i+0x1f2>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b270:	b004      	add	sp, #16
 800b272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	f043 0320 	orr.w	r3, r3, #32
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	4833      	ldr	r0, [pc, #204]	@ (800b34c <_printf_i+0x23c>)
 800b280:	2778      	movs	r7, #120	@ 0x78
 800b282:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	6831      	ldr	r1, [r6, #0]
 800b28a:	061f      	lsls	r7, r3, #24
 800b28c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b290:	d402      	bmi.n	800b298 <_printf_i+0x188>
 800b292:	065f      	lsls	r7, r3, #25
 800b294:	bf48      	it	mi
 800b296:	b2ad      	uxthmi	r5, r5
 800b298:	6031      	str	r1, [r6, #0]
 800b29a:	07d9      	lsls	r1, r3, #31
 800b29c:	bf44      	itt	mi
 800b29e:	f043 0320 	orrmi.w	r3, r3, #32
 800b2a2:	6023      	strmi	r3, [r4, #0]
 800b2a4:	b11d      	cbz	r5, 800b2ae <_printf_i+0x19e>
 800b2a6:	2310      	movs	r3, #16
 800b2a8:	e7ac      	b.n	800b204 <_printf_i+0xf4>
 800b2aa:	4827      	ldr	r0, [pc, #156]	@ (800b348 <_printf_i+0x238>)
 800b2ac:	e7e9      	b.n	800b282 <_printf_i+0x172>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	f023 0320 	bic.w	r3, r3, #32
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	e7f6      	b.n	800b2a6 <_printf_i+0x196>
 800b2b8:	4616      	mov	r6, r2
 800b2ba:	e7bd      	b.n	800b238 <_printf_i+0x128>
 800b2bc:	6833      	ldr	r3, [r6, #0]
 800b2be:	6825      	ldr	r5, [r4, #0]
 800b2c0:	6961      	ldr	r1, [r4, #20]
 800b2c2:	1d18      	adds	r0, r3, #4
 800b2c4:	6030      	str	r0, [r6, #0]
 800b2c6:	062e      	lsls	r6, r5, #24
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	d501      	bpl.n	800b2d0 <_printf_i+0x1c0>
 800b2cc:	6019      	str	r1, [r3, #0]
 800b2ce:	e002      	b.n	800b2d6 <_printf_i+0x1c6>
 800b2d0:	0668      	lsls	r0, r5, #25
 800b2d2:	d5fb      	bpl.n	800b2cc <_printf_i+0x1bc>
 800b2d4:	8019      	strh	r1, [r3, #0]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	6123      	str	r3, [r4, #16]
 800b2da:	4616      	mov	r6, r2
 800b2dc:	e7bc      	b.n	800b258 <_printf_i+0x148>
 800b2de:	6833      	ldr	r3, [r6, #0]
 800b2e0:	1d1a      	adds	r2, r3, #4
 800b2e2:	6032      	str	r2, [r6, #0]
 800b2e4:	681e      	ldr	r6, [r3, #0]
 800b2e6:	6862      	ldr	r2, [r4, #4]
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f7f4 ff70 	bl	80001d0 <memchr>
 800b2f0:	b108      	cbz	r0, 800b2f6 <_printf_i+0x1e6>
 800b2f2:	1b80      	subs	r0, r0, r6
 800b2f4:	6060      	str	r0, [r4, #4]
 800b2f6:	6863      	ldr	r3, [r4, #4]
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b300:	e7aa      	b.n	800b258 <_printf_i+0x148>
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	4632      	mov	r2, r6
 800b306:	4649      	mov	r1, r9
 800b308:	4640      	mov	r0, r8
 800b30a:	47d0      	blx	sl
 800b30c:	3001      	adds	r0, #1
 800b30e:	d0ad      	beq.n	800b26c <_printf_i+0x15c>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	079b      	lsls	r3, r3, #30
 800b314:	d413      	bmi.n	800b33e <_printf_i+0x22e>
 800b316:	68e0      	ldr	r0, [r4, #12]
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	4298      	cmp	r0, r3
 800b31c:	bfb8      	it	lt
 800b31e:	4618      	movlt	r0, r3
 800b320:	e7a6      	b.n	800b270 <_printf_i+0x160>
 800b322:	2301      	movs	r3, #1
 800b324:	4632      	mov	r2, r6
 800b326:	4649      	mov	r1, r9
 800b328:	4640      	mov	r0, r8
 800b32a:	47d0      	blx	sl
 800b32c:	3001      	adds	r0, #1
 800b32e:	d09d      	beq.n	800b26c <_printf_i+0x15c>
 800b330:	3501      	adds	r5, #1
 800b332:	68e3      	ldr	r3, [r4, #12]
 800b334:	9903      	ldr	r1, [sp, #12]
 800b336:	1a5b      	subs	r3, r3, r1
 800b338:	42ab      	cmp	r3, r5
 800b33a:	dcf2      	bgt.n	800b322 <_printf_i+0x212>
 800b33c:	e7eb      	b.n	800b316 <_printf_i+0x206>
 800b33e:	2500      	movs	r5, #0
 800b340:	f104 0619 	add.w	r6, r4, #25
 800b344:	e7f5      	b.n	800b332 <_printf_i+0x222>
 800b346:	bf00      	nop
 800b348:	0800ea5e 	.word	0x0800ea5e
 800b34c:	0800ea6f 	.word	0x0800ea6f

0800b350 <std>:
 800b350:	2300      	movs	r3, #0
 800b352:	b510      	push	{r4, lr}
 800b354:	4604      	mov	r4, r0
 800b356:	e9c0 3300 	strd	r3, r3, [r0]
 800b35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b35e:	6083      	str	r3, [r0, #8]
 800b360:	8181      	strh	r1, [r0, #12]
 800b362:	6643      	str	r3, [r0, #100]	@ 0x64
 800b364:	81c2      	strh	r2, [r0, #14]
 800b366:	6183      	str	r3, [r0, #24]
 800b368:	4619      	mov	r1, r3
 800b36a:	2208      	movs	r2, #8
 800b36c:	305c      	adds	r0, #92	@ 0x5c
 800b36e:	f000 f906 	bl	800b57e <memset>
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <std+0x58>)
 800b374:	6263      	str	r3, [r4, #36]	@ 0x24
 800b376:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ac <std+0x5c>)
 800b378:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b37a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b0 <std+0x60>)
 800b37c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b37e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b4 <std+0x64>)
 800b380:	6323      	str	r3, [r4, #48]	@ 0x30
 800b382:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b8 <std+0x68>)
 800b384:	6224      	str	r4, [r4, #32]
 800b386:	429c      	cmp	r4, r3
 800b388:	d006      	beq.n	800b398 <std+0x48>
 800b38a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b38e:	4294      	cmp	r4, r2
 800b390:	d002      	beq.n	800b398 <std+0x48>
 800b392:	33d0      	adds	r3, #208	@ 0xd0
 800b394:	429c      	cmp	r4, r3
 800b396:	d105      	bne.n	800b3a4 <std+0x54>
 800b398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a0:	f000 b96a 	b.w	800b678 <__retarget_lock_init_recursive>
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	bf00      	nop
 800b3a8:	0800b4f9 	.word	0x0800b4f9
 800b3ac:	0800b51b 	.word	0x0800b51b
 800b3b0:	0800b553 	.word	0x0800b553
 800b3b4:	0800b577 	.word	0x0800b577
 800b3b8:	20000d80 	.word	0x20000d80

0800b3bc <stdio_exit_handler>:
 800b3bc:	4a02      	ldr	r2, [pc, #8]	@ (800b3c8 <stdio_exit_handler+0xc>)
 800b3be:	4903      	ldr	r1, [pc, #12]	@ (800b3cc <stdio_exit_handler+0x10>)
 800b3c0:	4803      	ldr	r0, [pc, #12]	@ (800b3d0 <stdio_exit_handler+0x14>)
 800b3c2:	f000 b869 	b.w	800b498 <_fwalk_sglue>
 800b3c6:	bf00      	nop
 800b3c8:	2000000c 	.word	0x2000000c
 800b3cc:	0800cfd9 	.word	0x0800cfd9
 800b3d0:	2000001c 	.word	0x2000001c

0800b3d4 <cleanup_stdio>:
 800b3d4:	6841      	ldr	r1, [r0, #4]
 800b3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b408 <cleanup_stdio+0x34>)
 800b3d8:	4299      	cmp	r1, r3
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	4604      	mov	r4, r0
 800b3de:	d001      	beq.n	800b3e4 <cleanup_stdio+0x10>
 800b3e0:	f001 fdfa 	bl	800cfd8 <_fflush_r>
 800b3e4:	68a1      	ldr	r1, [r4, #8]
 800b3e6:	4b09      	ldr	r3, [pc, #36]	@ (800b40c <cleanup_stdio+0x38>)
 800b3e8:	4299      	cmp	r1, r3
 800b3ea:	d002      	beq.n	800b3f2 <cleanup_stdio+0x1e>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f001 fdf3 	bl	800cfd8 <_fflush_r>
 800b3f2:	68e1      	ldr	r1, [r4, #12]
 800b3f4:	4b06      	ldr	r3, [pc, #24]	@ (800b410 <cleanup_stdio+0x3c>)
 800b3f6:	4299      	cmp	r1, r3
 800b3f8:	d004      	beq.n	800b404 <cleanup_stdio+0x30>
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b400:	f001 bdea 	b.w	800cfd8 <_fflush_r>
 800b404:	bd10      	pop	{r4, pc}
 800b406:	bf00      	nop
 800b408:	20000d80 	.word	0x20000d80
 800b40c:	20000de8 	.word	0x20000de8
 800b410:	20000e50 	.word	0x20000e50

0800b414 <global_stdio_init.part.0>:
 800b414:	b510      	push	{r4, lr}
 800b416:	4b0b      	ldr	r3, [pc, #44]	@ (800b444 <global_stdio_init.part.0+0x30>)
 800b418:	4c0b      	ldr	r4, [pc, #44]	@ (800b448 <global_stdio_init.part.0+0x34>)
 800b41a:	4a0c      	ldr	r2, [pc, #48]	@ (800b44c <global_stdio_init.part.0+0x38>)
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	4620      	mov	r0, r4
 800b420:	2200      	movs	r2, #0
 800b422:	2104      	movs	r1, #4
 800b424:	f7ff ff94 	bl	800b350 <std>
 800b428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b42c:	2201      	movs	r2, #1
 800b42e:	2109      	movs	r1, #9
 800b430:	f7ff ff8e 	bl	800b350 <std>
 800b434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b438:	2202      	movs	r2, #2
 800b43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b43e:	2112      	movs	r1, #18
 800b440:	f7ff bf86 	b.w	800b350 <std>
 800b444:	20000eb8 	.word	0x20000eb8
 800b448:	20000d80 	.word	0x20000d80
 800b44c:	0800b3bd 	.word	0x0800b3bd

0800b450 <__sfp_lock_acquire>:
 800b450:	4801      	ldr	r0, [pc, #4]	@ (800b458 <__sfp_lock_acquire+0x8>)
 800b452:	f000 b912 	b.w	800b67a <__retarget_lock_acquire_recursive>
 800b456:	bf00      	nop
 800b458:	20000ec1 	.word	0x20000ec1

0800b45c <__sfp_lock_release>:
 800b45c:	4801      	ldr	r0, [pc, #4]	@ (800b464 <__sfp_lock_release+0x8>)
 800b45e:	f000 b90d 	b.w	800b67c <__retarget_lock_release_recursive>
 800b462:	bf00      	nop
 800b464:	20000ec1 	.word	0x20000ec1

0800b468 <__sinit>:
 800b468:	b510      	push	{r4, lr}
 800b46a:	4604      	mov	r4, r0
 800b46c:	f7ff fff0 	bl	800b450 <__sfp_lock_acquire>
 800b470:	6a23      	ldr	r3, [r4, #32]
 800b472:	b11b      	cbz	r3, 800b47c <__sinit+0x14>
 800b474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b478:	f7ff bff0 	b.w	800b45c <__sfp_lock_release>
 800b47c:	4b04      	ldr	r3, [pc, #16]	@ (800b490 <__sinit+0x28>)
 800b47e:	6223      	str	r3, [r4, #32]
 800b480:	4b04      	ldr	r3, [pc, #16]	@ (800b494 <__sinit+0x2c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1f5      	bne.n	800b474 <__sinit+0xc>
 800b488:	f7ff ffc4 	bl	800b414 <global_stdio_init.part.0>
 800b48c:	e7f2      	b.n	800b474 <__sinit+0xc>
 800b48e:	bf00      	nop
 800b490:	0800b3d5 	.word	0x0800b3d5
 800b494:	20000eb8 	.word	0x20000eb8

0800b498 <_fwalk_sglue>:
 800b498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b49c:	4607      	mov	r7, r0
 800b49e:	4688      	mov	r8, r1
 800b4a0:	4614      	mov	r4, r2
 800b4a2:	2600      	movs	r6, #0
 800b4a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4a8:	f1b9 0901 	subs.w	r9, r9, #1
 800b4ac:	d505      	bpl.n	800b4ba <_fwalk_sglue+0x22>
 800b4ae:	6824      	ldr	r4, [r4, #0]
 800b4b0:	2c00      	cmp	r4, #0
 800b4b2:	d1f7      	bne.n	800b4a4 <_fwalk_sglue+0xc>
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d907      	bls.n	800b4d0 <_fwalk_sglue+0x38>
 800b4c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	d003      	beq.n	800b4d0 <_fwalk_sglue+0x38>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	47c0      	blx	r8
 800b4ce:	4306      	orrs	r6, r0
 800b4d0:	3568      	adds	r5, #104	@ 0x68
 800b4d2:	e7e9      	b.n	800b4a8 <_fwalk_sglue+0x10>

0800b4d4 <iprintf>:
 800b4d4:	b40f      	push	{r0, r1, r2, r3}
 800b4d6:	b507      	push	{r0, r1, r2, lr}
 800b4d8:	4906      	ldr	r1, [pc, #24]	@ (800b4f4 <iprintf+0x20>)
 800b4da:	ab04      	add	r3, sp, #16
 800b4dc:	6808      	ldr	r0, [r1, #0]
 800b4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e2:	6881      	ldr	r1, [r0, #8]
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	f001 fbdb 	bl	800cca0 <_vfiprintf_r>
 800b4ea:	b003      	add	sp, #12
 800b4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4f0:	b004      	add	sp, #16
 800b4f2:	4770      	bx	lr
 800b4f4:	20000018 	.word	0x20000018

0800b4f8 <__sread>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b500:	f000 f86c 	bl	800b5dc <_read_r>
 800b504:	2800      	cmp	r0, #0
 800b506:	bfab      	itete	ge
 800b508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b50a:	89a3      	ldrhlt	r3, [r4, #12]
 800b50c:	181b      	addge	r3, r3, r0
 800b50e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b512:	bfac      	ite	ge
 800b514:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b516:	81a3      	strhlt	r3, [r4, #12]
 800b518:	bd10      	pop	{r4, pc}

0800b51a <__swrite>:
 800b51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51e:	461f      	mov	r7, r3
 800b520:	898b      	ldrh	r3, [r1, #12]
 800b522:	05db      	lsls	r3, r3, #23
 800b524:	4605      	mov	r5, r0
 800b526:	460c      	mov	r4, r1
 800b528:	4616      	mov	r6, r2
 800b52a:	d505      	bpl.n	800b538 <__swrite+0x1e>
 800b52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b530:	2302      	movs	r3, #2
 800b532:	2200      	movs	r2, #0
 800b534:	f000 f840 	bl	800b5b8 <_lseek_r>
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b53e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b542:	81a3      	strh	r3, [r4, #12]
 800b544:	4632      	mov	r2, r6
 800b546:	463b      	mov	r3, r7
 800b548:	4628      	mov	r0, r5
 800b54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b54e:	f000 b857 	b.w	800b600 <_write_r>

0800b552 <__sseek>:
 800b552:	b510      	push	{r4, lr}
 800b554:	460c      	mov	r4, r1
 800b556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55a:	f000 f82d 	bl	800b5b8 <_lseek_r>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	bf15      	itete	ne
 800b564:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b566:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b56a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b56e:	81a3      	strheq	r3, [r4, #12]
 800b570:	bf18      	it	ne
 800b572:	81a3      	strhne	r3, [r4, #12]
 800b574:	bd10      	pop	{r4, pc}

0800b576 <__sclose>:
 800b576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57a:	f000 b80d 	b.w	800b598 <_close_r>

0800b57e <memset>:
 800b57e:	4402      	add	r2, r0
 800b580:	4603      	mov	r3, r0
 800b582:	4293      	cmp	r3, r2
 800b584:	d100      	bne.n	800b588 <memset+0xa>
 800b586:	4770      	bx	lr
 800b588:	f803 1b01 	strb.w	r1, [r3], #1
 800b58c:	e7f9      	b.n	800b582 <memset+0x4>
	...

0800b590 <_localeconv_r>:
 800b590:	4800      	ldr	r0, [pc, #0]	@ (800b594 <_localeconv_r+0x4>)
 800b592:	4770      	bx	lr
 800b594:	20000158 	.word	0x20000158

0800b598 <_close_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d06      	ldr	r5, [pc, #24]	@ (800b5b4 <_close_r+0x1c>)
 800b59c:	2300      	movs	r3, #0
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	602b      	str	r3, [r5, #0]
 800b5a4:	f7f8 fd6a 	bl	800407c <_close>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_close_r+0x1a>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_close_r+0x1a>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	20000ebc 	.word	0x20000ebc

0800b5b8 <_lseek_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d07      	ldr	r5, [pc, #28]	@ (800b5d8 <_lseek_r+0x20>)
 800b5bc:	4604      	mov	r4, r0
 800b5be:	4608      	mov	r0, r1
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f7f8 fd7f 	bl	80040ca <_lseek>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_lseek_r+0x1e>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_lseek_r+0x1e>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20000ebc 	.word	0x20000ebc

0800b5dc <_read_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d07      	ldr	r5, [pc, #28]	@ (800b5fc <_read_r+0x20>)
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	602a      	str	r2, [r5, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f7f8 fd0d 	bl	800400a <_read>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_read_r+0x1e>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_read_r+0x1e>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20000ebc 	.word	0x20000ebc

0800b600 <_write_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4d07      	ldr	r5, [pc, #28]	@ (800b620 <_write_r+0x20>)
 800b604:	4604      	mov	r4, r0
 800b606:	4608      	mov	r0, r1
 800b608:	4611      	mov	r1, r2
 800b60a:	2200      	movs	r2, #0
 800b60c:	602a      	str	r2, [r5, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	f7f8 fd18 	bl	8004044 <_write>
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d102      	bne.n	800b61e <_write_r+0x1e>
 800b618:	682b      	ldr	r3, [r5, #0]
 800b61a:	b103      	cbz	r3, 800b61e <_write_r+0x1e>
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	20000ebc 	.word	0x20000ebc

0800b624 <__errno>:
 800b624:	4b01      	ldr	r3, [pc, #4]	@ (800b62c <__errno+0x8>)
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	20000018 	.word	0x20000018

0800b630 <__libc_init_array>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4d0d      	ldr	r5, [pc, #52]	@ (800b668 <__libc_init_array+0x38>)
 800b634:	4c0d      	ldr	r4, [pc, #52]	@ (800b66c <__libc_init_array+0x3c>)
 800b636:	1b64      	subs	r4, r4, r5
 800b638:	10a4      	asrs	r4, r4, #2
 800b63a:	2600      	movs	r6, #0
 800b63c:	42a6      	cmp	r6, r4
 800b63e:	d109      	bne.n	800b654 <__libc_init_array+0x24>
 800b640:	4d0b      	ldr	r5, [pc, #44]	@ (800b670 <__libc_init_array+0x40>)
 800b642:	4c0c      	ldr	r4, [pc, #48]	@ (800b674 <__libc_init_array+0x44>)
 800b644:	f001 fec8 	bl	800d3d8 <_init>
 800b648:	1b64      	subs	r4, r4, r5
 800b64a:	10a4      	asrs	r4, r4, #2
 800b64c:	2600      	movs	r6, #0
 800b64e:	42a6      	cmp	r6, r4
 800b650:	d105      	bne.n	800b65e <__libc_init_array+0x2e>
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	f855 3b04 	ldr.w	r3, [r5], #4
 800b658:	4798      	blx	r3
 800b65a:	3601      	adds	r6, #1
 800b65c:	e7ee      	b.n	800b63c <__libc_init_array+0xc>
 800b65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b662:	4798      	blx	r3
 800b664:	3601      	adds	r6, #1
 800b666:	e7f2      	b.n	800b64e <__libc_init_array+0x1e>
 800b668:	0800edc8 	.word	0x0800edc8
 800b66c:	0800edc8 	.word	0x0800edc8
 800b670:	0800edc8 	.word	0x0800edc8
 800b674:	0800edd0 	.word	0x0800edd0

0800b678 <__retarget_lock_init_recursive>:
 800b678:	4770      	bx	lr

0800b67a <__retarget_lock_acquire_recursive>:
 800b67a:	4770      	bx	lr

0800b67c <__retarget_lock_release_recursive>:
 800b67c:	4770      	bx	lr

0800b67e <memcpy>:
 800b67e:	440a      	add	r2, r1
 800b680:	4291      	cmp	r1, r2
 800b682:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b686:	d100      	bne.n	800b68a <memcpy+0xc>
 800b688:	4770      	bx	lr
 800b68a:	b510      	push	{r4, lr}
 800b68c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b690:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b694:	4291      	cmp	r1, r2
 800b696:	d1f9      	bne.n	800b68c <memcpy+0xe>
 800b698:	bd10      	pop	{r4, pc}

0800b69a <quorem>:
 800b69a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69e:	6903      	ldr	r3, [r0, #16]
 800b6a0:	690c      	ldr	r4, [r1, #16]
 800b6a2:	42a3      	cmp	r3, r4
 800b6a4:	4607      	mov	r7, r0
 800b6a6:	db7e      	blt.n	800b7a6 <quorem+0x10c>
 800b6a8:	3c01      	subs	r4, #1
 800b6aa:	f101 0814 	add.w	r8, r1, #20
 800b6ae:	00a3      	lsls	r3, r4, #2
 800b6b0:	f100 0514 	add.w	r5, r0, #20
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6d0:	d32e      	bcc.n	800b730 <quorem+0x96>
 800b6d2:	f04f 0a00 	mov.w	sl, #0
 800b6d6:	46c4      	mov	ip, r8
 800b6d8:	46ae      	mov	lr, r5
 800b6da:	46d3      	mov	fp, sl
 800b6dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6e0:	b298      	uxth	r0, r3
 800b6e2:	fb06 a000 	mla	r0, r6, r0, sl
 800b6e6:	0c02      	lsrs	r2, r0, #16
 800b6e8:	0c1b      	lsrs	r3, r3, #16
 800b6ea:	fb06 2303 	mla	r3, r6, r3, r2
 800b6ee:	f8de 2000 	ldr.w	r2, [lr]
 800b6f2:	b280      	uxth	r0, r0
 800b6f4:	b292      	uxth	r2, r2
 800b6f6:	1a12      	subs	r2, r2, r0
 800b6f8:	445a      	add	r2, fp
 800b6fa:	f8de 0000 	ldr.w	r0, [lr]
 800b6fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b702:	b29b      	uxth	r3, r3
 800b704:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b708:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b70c:	b292      	uxth	r2, r2
 800b70e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b712:	45e1      	cmp	r9, ip
 800b714:	f84e 2b04 	str.w	r2, [lr], #4
 800b718:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b71c:	d2de      	bcs.n	800b6dc <quorem+0x42>
 800b71e:	9b00      	ldr	r3, [sp, #0]
 800b720:	58eb      	ldr	r3, [r5, r3]
 800b722:	b92b      	cbnz	r3, 800b730 <quorem+0x96>
 800b724:	9b01      	ldr	r3, [sp, #4]
 800b726:	3b04      	subs	r3, #4
 800b728:	429d      	cmp	r5, r3
 800b72a:	461a      	mov	r2, r3
 800b72c:	d32f      	bcc.n	800b78e <quorem+0xf4>
 800b72e:	613c      	str	r4, [r7, #16]
 800b730:	4638      	mov	r0, r7
 800b732:	f001 f97b 	bl	800ca2c <__mcmp>
 800b736:	2800      	cmp	r0, #0
 800b738:	db25      	blt.n	800b786 <quorem+0xec>
 800b73a:	4629      	mov	r1, r5
 800b73c:	2000      	movs	r0, #0
 800b73e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b742:	f8d1 c000 	ldr.w	ip, [r1]
 800b746:	fa1f fe82 	uxth.w	lr, r2
 800b74a:	fa1f f38c 	uxth.w	r3, ip
 800b74e:	eba3 030e 	sub.w	r3, r3, lr
 800b752:	4403      	add	r3, r0
 800b754:	0c12      	lsrs	r2, r2, #16
 800b756:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b75a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b75e:	b29b      	uxth	r3, r3
 800b760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b764:	45c1      	cmp	r9, r8
 800b766:	f841 3b04 	str.w	r3, [r1], #4
 800b76a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b76e:	d2e6      	bcs.n	800b73e <quorem+0xa4>
 800b770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b774:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b778:	b922      	cbnz	r2, 800b784 <quorem+0xea>
 800b77a:	3b04      	subs	r3, #4
 800b77c:	429d      	cmp	r5, r3
 800b77e:	461a      	mov	r2, r3
 800b780:	d30b      	bcc.n	800b79a <quorem+0x100>
 800b782:	613c      	str	r4, [r7, #16]
 800b784:	3601      	adds	r6, #1
 800b786:	4630      	mov	r0, r6
 800b788:	b003      	add	sp, #12
 800b78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78e:	6812      	ldr	r2, [r2, #0]
 800b790:	3b04      	subs	r3, #4
 800b792:	2a00      	cmp	r2, #0
 800b794:	d1cb      	bne.n	800b72e <quorem+0x94>
 800b796:	3c01      	subs	r4, #1
 800b798:	e7c6      	b.n	800b728 <quorem+0x8e>
 800b79a:	6812      	ldr	r2, [r2, #0]
 800b79c:	3b04      	subs	r3, #4
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	d1ef      	bne.n	800b782 <quorem+0xe8>
 800b7a2:	3c01      	subs	r4, #1
 800b7a4:	e7ea      	b.n	800b77c <quorem+0xe2>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	e7ee      	b.n	800b788 <quorem+0xee>
 800b7aa:	0000      	movs	r0, r0
 800b7ac:	0000      	movs	r0, r0
	...

0800b7b0 <_dtoa_r>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	69c7      	ldr	r7, [r0, #28]
 800b7b6:	b099      	sub	sp, #100	@ 0x64
 800b7b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7bc:	ec55 4b10 	vmov	r4, r5, d0
 800b7c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b7c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b7c4:	4683      	mov	fp, r0
 800b7c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7ca:	b97f      	cbnz	r7, 800b7ec <_dtoa_r+0x3c>
 800b7cc:	2010      	movs	r0, #16
 800b7ce:	f000 fdfd 	bl	800c3cc <malloc>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b7d8:	b920      	cbnz	r0, 800b7e4 <_dtoa_r+0x34>
 800b7da:	4ba7      	ldr	r3, [pc, #668]	@ (800ba78 <_dtoa_r+0x2c8>)
 800b7dc:	21ef      	movs	r1, #239	@ 0xef
 800b7de:	48a7      	ldr	r0, [pc, #668]	@ (800ba7c <_dtoa_r+0x2cc>)
 800b7e0:	f001 fcc6 	bl	800d170 <__assert_func>
 800b7e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b7e8:	6007      	str	r7, [r0, #0]
 800b7ea:	60c7      	str	r7, [r0, #12]
 800b7ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7f0:	6819      	ldr	r1, [r3, #0]
 800b7f2:	b159      	cbz	r1, 800b80c <_dtoa_r+0x5c>
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	604a      	str	r2, [r1, #4]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	4093      	lsls	r3, r2
 800b7fc:	608b      	str	r3, [r1, #8]
 800b7fe:	4658      	mov	r0, fp
 800b800:	f000 feda 	bl	800c5b8 <_Bfree>
 800b804:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	1e2b      	subs	r3, r5, #0
 800b80e:	bfb9      	ittee	lt
 800b810:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b814:	9303      	strlt	r3, [sp, #12]
 800b816:	2300      	movge	r3, #0
 800b818:	6033      	strge	r3, [r6, #0]
 800b81a:	9f03      	ldr	r7, [sp, #12]
 800b81c:	4b98      	ldr	r3, [pc, #608]	@ (800ba80 <_dtoa_r+0x2d0>)
 800b81e:	bfbc      	itt	lt
 800b820:	2201      	movlt	r2, #1
 800b822:	6032      	strlt	r2, [r6, #0]
 800b824:	43bb      	bics	r3, r7
 800b826:	d112      	bne.n	800b84e <_dtoa_r+0x9e>
 800b828:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b82a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b834:	4323      	orrs	r3, r4
 800b836:	f000 854d 	beq.w	800c2d4 <_dtoa_r+0xb24>
 800b83a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b83c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ba94 <_dtoa_r+0x2e4>
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 854f 	beq.w	800c2e4 <_dtoa_r+0xb34>
 800b846:	f10a 0303 	add.w	r3, sl, #3
 800b84a:	f000 bd49 	b.w	800c2e0 <_dtoa_r+0xb30>
 800b84e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b852:	2200      	movs	r2, #0
 800b854:	ec51 0b17 	vmov	r0, r1, d7
 800b858:	2300      	movs	r3, #0
 800b85a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b85e:	f7f5 f933 	bl	8000ac8 <__aeabi_dcmpeq>
 800b862:	4680      	mov	r8, r0
 800b864:	b158      	cbz	r0, 800b87e <_dtoa_r+0xce>
 800b866:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b868:	2301      	movs	r3, #1
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b86e:	b113      	cbz	r3, 800b876 <_dtoa_r+0xc6>
 800b870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b872:	4b84      	ldr	r3, [pc, #528]	@ (800ba84 <_dtoa_r+0x2d4>)
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ba98 <_dtoa_r+0x2e8>
 800b87a:	f000 bd33 	b.w	800c2e4 <_dtoa_r+0xb34>
 800b87e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b882:	aa16      	add	r2, sp, #88	@ 0x58
 800b884:	a917      	add	r1, sp, #92	@ 0x5c
 800b886:	4658      	mov	r0, fp
 800b888:	f001 f980 	bl	800cb8c <__d2b>
 800b88c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b890:	4681      	mov	r9, r0
 800b892:	2e00      	cmp	r6, #0
 800b894:	d077      	beq.n	800b986 <_dtoa_r+0x1d6>
 800b896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b898:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b8a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b8ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4b74      	ldr	r3, [pc, #464]	@ (800ba88 <_dtoa_r+0x2d8>)
 800b8b6:	f7f4 fce7 	bl	8000288 <__aeabi_dsub>
 800b8ba:	a369      	add	r3, pc, #420	@ (adr r3, 800ba60 <_dtoa_r+0x2b0>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fe9a 	bl	80005f8 <__aeabi_dmul>
 800b8c4:	a368      	add	r3, pc, #416	@ (adr r3, 800ba68 <_dtoa_r+0x2b8>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f7f4 fcdf 	bl	800028c <__adddf3>
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	f7f4 fe26 	bl	8000524 <__aeabi_i2d>
 800b8d8:	a365      	add	r3, pc, #404	@ (adr r3, 800ba70 <_dtoa_r+0x2c0>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fe8b 	bl	80005f8 <__aeabi_dmul>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	f7f4 fccf 	bl	800028c <__adddf3>
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	f7f5 f931 	bl	8000b58 <__aeabi_d2iz>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	4607      	mov	r7, r0
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f5 f8ec 	bl	8000adc <__aeabi_dcmplt>
 800b904:	b140      	cbz	r0, 800b918 <_dtoa_r+0x168>
 800b906:	4638      	mov	r0, r7
 800b908:	f7f4 fe0c 	bl	8000524 <__aeabi_i2d>
 800b90c:	4622      	mov	r2, r4
 800b90e:	462b      	mov	r3, r5
 800b910:	f7f5 f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 800b914:	b900      	cbnz	r0, 800b918 <_dtoa_r+0x168>
 800b916:	3f01      	subs	r7, #1
 800b918:	2f16      	cmp	r7, #22
 800b91a:	d851      	bhi.n	800b9c0 <_dtoa_r+0x210>
 800b91c:	4b5b      	ldr	r3, [pc, #364]	@ (800ba8c <_dtoa_r+0x2dc>)
 800b91e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b92a:	f7f5 f8d7 	bl	8000adc <__aeabi_dcmplt>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d048      	beq.n	800b9c4 <_dtoa_r+0x214>
 800b932:	3f01      	subs	r7, #1
 800b934:	2300      	movs	r3, #0
 800b936:	9312      	str	r3, [sp, #72]	@ 0x48
 800b938:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b93a:	1b9b      	subs	r3, r3, r6
 800b93c:	1e5a      	subs	r2, r3, #1
 800b93e:	bf44      	itt	mi
 800b940:	f1c3 0801 	rsbmi	r8, r3, #1
 800b944:	2300      	movmi	r3, #0
 800b946:	9208      	str	r2, [sp, #32]
 800b948:	bf54      	ite	pl
 800b94a:	f04f 0800 	movpl.w	r8, #0
 800b94e:	9308      	strmi	r3, [sp, #32]
 800b950:	2f00      	cmp	r7, #0
 800b952:	db39      	blt.n	800b9c8 <_dtoa_r+0x218>
 800b954:	9b08      	ldr	r3, [sp, #32]
 800b956:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b958:	443b      	add	r3, r7
 800b95a:	9308      	str	r3, [sp, #32]
 800b95c:	2300      	movs	r3, #0
 800b95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b962:	2b09      	cmp	r3, #9
 800b964:	d864      	bhi.n	800ba30 <_dtoa_r+0x280>
 800b966:	2b05      	cmp	r3, #5
 800b968:	bfc4      	itt	gt
 800b96a:	3b04      	subgt	r3, #4
 800b96c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b970:	f1a3 0302 	sub.w	r3, r3, #2
 800b974:	bfcc      	ite	gt
 800b976:	2400      	movgt	r4, #0
 800b978:	2401      	movle	r4, #1
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d863      	bhi.n	800ba46 <_dtoa_r+0x296>
 800b97e:	e8df f003 	tbb	[pc, r3]
 800b982:	372a      	.short	0x372a
 800b984:	5535      	.short	0x5535
 800b986:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b98a:	441e      	add	r6, r3
 800b98c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b990:	2b20      	cmp	r3, #32
 800b992:	bfc1      	itttt	gt
 800b994:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b998:	409f      	lslgt	r7, r3
 800b99a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b99e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b9a2:	bfd6      	itet	le
 800b9a4:	f1c3 0320 	rsble	r3, r3, #32
 800b9a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b9ac:	fa04 f003 	lslle.w	r0, r4, r3
 800b9b0:	f7f4 fda8 	bl	8000504 <__aeabi_ui2d>
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b9ba:	3e01      	subs	r6, #1
 800b9bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b9be:	e777      	b.n	800b8b0 <_dtoa_r+0x100>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e7b8      	b.n	800b936 <_dtoa_r+0x186>
 800b9c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b9c6:	e7b7      	b.n	800b938 <_dtoa_r+0x188>
 800b9c8:	427b      	negs	r3, r7
 800b9ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	eba8 0807 	sub.w	r8, r8, r7
 800b9d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9d4:	e7c4      	b.n	800b960 <_dtoa_r+0x1b0>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	dc35      	bgt.n	800ba4c <_dtoa_r+0x29c>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	9307      	str	r3, [sp, #28]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9ea:	e00b      	b.n	800ba04 <_dtoa_r+0x254>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e7f3      	b.n	800b9d8 <_dtoa_r+0x228>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9f6:	18fb      	adds	r3, r7, r3
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	9307      	str	r3, [sp, #28]
 800ba00:	bfb8      	it	lt
 800ba02:	2301      	movlt	r3, #1
 800ba04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba08:	2100      	movs	r1, #0
 800ba0a:	2204      	movs	r2, #4
 800ba0c:	f102 0514 	add.w	r5, r2, #20
 800ba10:	429d      	cmp	r5, r3
 800ba12:	d91f      	bls.n	800ba54 <_dtoa_r+0x2a4>
 800ba14:	6041      	str	r1, [r0, #4]
 800ba16:	4658      	mov	r0, fp
 800ba18:	f000 fd8e 	bl	800c538 <_Balloc>
 800ba1c:	4682      	mov	sl, r0
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d13c      	bne.n	800ba9c <_dtoa_r+0x2ec>
 800ba22:	4b1b      	ldr	r3, [pc, #108]	@ (800ba90 <_dtoa_r+0x2e0>)
 800ba24:	4602      	mov	r2, r0
 800ba26:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba2a:	e6d8      	b.n	800b7de <_dtoa_r+0x2e>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e7e0      	b.n	800b9f2 <_dtoa_r+0x242>
 800ba30:	2401      	movs	r4, #1
 800ba32:	2300      	movs	r3, #0
 800ba34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	9307      	str	r3, [sp, #28]
 800ba40:	2200      	movs	r2, #0
 800ba42:	2312      	movs	r3, #18
 800ba44:	e7d0      	b.n	800b9e8 <_dtoa_r+0x238>
 800ba46:	2301      	movs	r3, #1
 800ba48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba4a:	e7f5      	b.n	800ba38 <_dtoa_r+0x288>
 800ba4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	9307      	str	r3, [sp, #28]
 800ba52:	e7d7      	b.n	800ba04 <_dtoa_r+0x254>
 800ba54:	3101      	adds	r1, #1
 800ba56:	0052      	lsls	r2, r2, #1
 800ba58:	e7d8      	b.n	800ba0c <_dtoa_r+0x25c>
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
 800ba60:	636f4361 	.word	0x636f4361
 800ba64:	3fd287a7 	.word	0x3fd287a7
 800ba68:	8b60c8b3 	.word	0x8b60c8b3
 800ba6c:	3fc68a28 	.word	0x3fc68a28
 800ba70:	509f79fb 	.word	0x509f79fb
 800ba74:	3fd34413 	.word	0x3fd34413
 800ba78:	0800ea8d 	.word	0x0800ea8d
 800ba7c:	0800eaa4 	.word	0x0800eaa4
 800ba80:	7ff00000 	.word	0x7ff00000
 800ba84:	0800ea5d 	.word	0x0800ea5d
 800ba88:	3ff80000 	.word	0x3ff80000
 800ba8c:	0800eba0 	.word	0x0800eba0
 800ba90:	0800eafc 	.word	0x0800eafc
 800ba94:	0800ea89 	.word	0x0800ea89
 800ba98:	0800ea5c 	.word	0x0800ea5c
 800ba9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800baa0:	6018      	str	r0, [r3, #0]
 800baa2:	9b07      	ldr	r3, [sp, #28]
 800baa4:	2b0e      	cmp	r3, #14
 800baa6:	f200 80a4 	bhi.w	800bbf2 <_dtoa_r+0x442>
 800baaa:	2c00      	cmp	r4, #0
 800baac:	f000 80a1 	beq.w	800bbf2 <_dtoa_r+0x442>
 800bab0:	2f00      	cmp	r7, #0
 800bab2:	dd33      	ble.n	800bb1c <_dtoa_r+0x36c>
 800bab4:	4bad      	ldr	r3, [pc, #692]	@ (800bd6c <_dtoa_r+0x5bc>)
 800bab6:	f007 020f 	and.w	r2, r7, #15
 800baba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800babe:	ed93 7b00 	vldr	d7, [r3]
 800bac2:	05f8      	lsls	r0, r7, #23
 800bac4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bacc:	d516      	bpl.n	800bafc <_dtoa_r+0x34c>
 800bace:	4ba8      	ldr	r3, [pc, #672]	@ (800bd70 <_dtoa_r+0x5c0>)
 800bad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bad8:	f7f4 feb8 	bl	800084c <__aeabi_ddiv>
 800badc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bae0:	f004 040f 	and.w	r4, r4, #15
 800bae4:	2603      	movs	r6, #3
 800bae6:	4da2      	ldr	r5, [pc, #648]	@ (800bd70 <_dtoa_r+0x5c0>)
 800bae8:	b954      	cbnz	r4, 800bb00 <_dtoa_r+0x350>
 800baea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf2:	f7f4 feab 	bl	800084c <__aeabi_ddiv>
 800baf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bafa:	e028      	b.n	800bb4e <_dtoa_r+0x39e>
 800bafc:	2602      	movs	r6, #2
 800bafe:	e7f2      	b.n	800bae6 <_dtoa_r+0x336>
 800bb00:	07e1      	lsls	r1, r4, #31
 800bb02:	d508      	bpl.n	800bb16 <_dtoa_r+0x366>
 800bb04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb0c:	f7f4 fd74 	bl	80005f8 <__aeabi_dmul>
 800bb10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb14:	3601      	adds	r6, #1
 800bb16:	1064      	asrs	r4, r4, #1
 800bb18:	3508      	adds	r5, #8
 800bb1a:	e7e5      	b.n	800bae8 <_dtoa_r+0x338>
 800bb1c:	f000 80d2 	beq.w	800bcc4 <_dtoa_r+0x514>
 800bb20:	427c      	negs	r4, r7
 800bb22:	4b92      	ldr	r3, [pc, #584]	@ (800bd6c <_dtoa_r+0x5bc>)
 800bb24:	4d92      	ldr	r5, [pc, #584]	@ (800bd70 <_dtoa_r+0x5c0>)
 800bb26:	f004 020f 	and.w	r2, r4, #15
 800bb2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb36:	f7f4 fd5f 	bl	80005f8 <__aeabi_dmul>
 800bb3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb3e:	1124      	asrs	r4, r4, #4
 800bb40:	2300      	movs	r3, #0
 800bb42:	2602      	movs	r6, #2
 800bb44:	2c00      	cmp	r4, #0
 800bb46:	f040 80b2 	bne.w	800bcae <_dtoa_r+0x4fe>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1d3      	bne.n	800baf6 <_dtoa_r+0x346>
 800bb4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 80b7 	beq.w	800bcc8 <_dtoa_r+0x518>
 800bb5a:	4b86      	ldr	r3, [pc, #536]	@ (800bd74 <_dtoa_r+0x5c4>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4620      	mov	r0, r4
 800bb60:	4629      	mov	r1, r5
 800bb62:	f7f4 ffbb 	bl	8000adc <__aeabi_dcmplt>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	f000 80ae 	beq.w	800bcc8 <_dtoa_r+0x518>
 800bb6c:	9b07      	ldr	r3, [sp, #28]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 80aa 	beq.w	800bcc8 <_dtoa_r+0x518>
 800bb74:	9b00      	ldr	r3, [sp, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	dd37      	ble.n	800bbea <_dtoa_r+0x43a>
 800bb7a:	1e7b      	subs	r3, r7, #1
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4b7d      	ldr	r3, [pc, #500]	@ (800bd78 <_dtoa_r+0x5c8>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	4629      	mov	r1, r5
 800bb86:	f7f4 fd37 	bl	80005f8 <__aeabi_dmul>
 800bb8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb8e:	9c00      	ldr	r4, [sp, #0]
 800bb90:	3601      	adds	r6, #1
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7f4 fcc6 	bl	8000524 <__aeabi_i2d>
 800bb98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb9c:	f7f4 fd2c 	bl	80005f8 <__aeabi_dmul>
 800bba0:	4b76      	ldr	r3, [pc, #472]	@ (800bd7c <_dtoa_r+0x5cc>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	f7f4 fb72 	bl	800028c <__adddf3>
 800bba8:	4605      	mov	r5, r0
 800bbaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bbae:	2c00      	cmp	r4, #0
 800bbb0:	f040 808d 	bne.w	800bcce <_dtoa_r+0x51e>
 800bbb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbb8:	4b71      	ldr	r3, [pc, #452]	@ (800bd80 <_dtoa_r+0x5d0>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f7f4 fb64 	bl	8000288 <__aeabi_dsub>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbc8:	462a      	mov	r2, r5
 800bbca:	4633      	mov	r3, r6
 800bbcc:	f7f4 ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	f040 828b 	bne.w	800c0ec <_dtoa_r+0x93c>
 800bbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbda:	462a      	mov	r2, r5
 800bbdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bbe0:	f7f4 ff7c 	bl	8000adc <__aeabi_dcmplt>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	f040 8128 	bne.w	800be3a <_dtoa_r+0x68a>
 800bbea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bbee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bbf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f2c0 815a 	blt.w	800beae <_dtoa_r+0x6fe>
 800bbfa:	2f0e      	cmp	r7, #14
 800bbfc:	f300 8157 	bgt.w	800beae <_dtoa_r+0x6fe>
 800bc00:	4b5a      	ldr	r3, [pc, #360]	@ (800bd6c <_dtoa_r+0x5bc>)
 800bc02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc06:	ed93 7b00 	vldr	d7, [r3]
 800bc0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	ed8d 7b00 	vstr	d7, [sp]
 800bc12:	da03      	bge.n	800bc1c <_dtoa_r+0x46c>
 800bc14:	9b07      	ldr	r3, [sp, #28]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f340 8101 	ble.w	800be1e <_dtoa_r+0x66e>
 800bc1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc20:	4656      	mov	r6, sl
 800bc22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc26:	4620      	mov	r0, r4
 800bc28:	4629      	mov	r1, r5
 800bc2a:	f7f4 fe0f 	bl	800084c <__aeabi_ddiv>
 800bc2e:	f7f4 ff93 	bl	8000b58 <__aeabi_d2iz>
 800bc32:	4680      	mov	r8, r0
 800bc34:	f7f4 fc76 	bl	8000524 <__aeabi_i2d>
 800bc38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc3c:	f7f4 fcdc 	bl	80005f8 <__aeabi_dmul>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4620      	mov	r0, r4
 800bc46:	4629      	mov	r1, r5
 800bc48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc4c:	f7f4 fb1c 	bl	8000288 <__aeabi_dsub>
 800bc50:	f806 4b01 	strb.w	r4, [r6], #1
 800bc54:	9d07      	ldr	r5, [sp, #28]
 800bc56:	eba6 040a 	sub.w	r4, r6, sl
 800bc5a:	42a5      	cmp	r5, r4
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	f040 8117 	bne.w	800be92 <_dtoa_r+0x6e2>
 800bc64:	f7f4 fb12 	bl	800028c <__adddf3>
 800bc68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	460d      	mov	r5, r1
 800bc70:	f7f4 ff52 	bl	8000b18 <__aeabi_dcmpgt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f040 80f9 	bne.w	800be6c <_dtoa_r+0x6bc>
 800bc7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f4 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc86:	b118      	cbz	r0, 800bc90 <_dtoa_r+0x4e0>
 800bc88:	f018 0f01 	tst.w	r8, #1
 800bc8c:	f040 80ee 	bne.w	800be6c <_dtoa_r+0x6bc>
 800bc90:	4649      	mov	r1, r9
 800bc92:	4658      	mov	r0, fp
 800bc94:	f000 fc90 	bl	800c5b8 <_Bfree>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	7033      	strb	r3, [r6, #0]
 800bc9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc9e:	3701      	adds	r7, #1
 800bca0:	601f      	str	r7, [r3, #0]
 800bca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 831d 	beq.w	800c2e4 <_dtoa_r+0xb34>
 800bcaa:	601e      	str	r6, [r3, #0]
 800bcac:	e31a      	b.n	800c2e4 <_dtoa_r+0xb34>
 800bcae:	07e2      	lsls	r2, r4, #31
 800bcb0:	d505      	bpl.n	800bcbe <_dtoa_r+0x50e>
 800bcb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcb6:	f7f4 fc9f 	bl	80005f8 <__aeabi_dmul>
 800bcba:	3601      	adds	r6, #1
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	1064      	asrs	r4, r4, #1
 800bcc0:	3508      	adds	r5, #8
 800bcc2:	e73f      	b.n	800bb44 <_dtoa_r+0x394>
 800bcc4:	2602      	movs	r6, #2
 800bcc6:	e742      	b.n	800bb4e <_dtoa_r+0x39e>
 800bcc8:	9c07      	ldr	r4, [sp, #28]
 800bcca:	9704      	str	r7, [sp, #16]
 800bccc:	e761      	b.n	800bb92 <_dtoa_r+0x3e2>
 800bcce:	4b27      	ldr	r3, [pc, #156]	@ (800bd6c <_dtoa_r+0x5bc>)
 800bcd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bcd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcda:	4454      	add	r4, sl
 800bcdc:	2900      	cmp	r1, #0
 800bcde:	d053      	beq.n	800bd88 <_dtoa_r+0x5d8>
 800bce0:	4928      	ldr	r1, [pc, #160]	@ (800bd84 <_dtoa_r+0x5d4>)
 800bce2:	2000      	movs	r0, #0
 800bce4:	f7f4 fdb2 	bl	800084c <__aeabi_ddiv>
 800bce8:	4633      	mov	r3, r6
 800bcea:	462a      	mov	r2, r5
 800bcec:	f7f4 facc 	bl	8000288 <__aeabi_dsub>
 800bcf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcf4:	4656      	mov	r6, sl
 800bcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcfa:	f7f4 ff2d 	bl	8000b58 <__aeabi_d2iz>
 800bcfe:	4605      	mov	r5, r0
 800bd00:	f7f4 fc10 	bl	8000524 <__aeabi_i2d>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd0c:	f7f4 fabc 	bl	8000288 <__aeabi_dsub>
 800bd10:	3530      	adds	r5, #48	@ 0x30
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd1a:	f806 5b01 	strb.w	r5, [r6], #1
 800bd1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd22:	f7f4 fedb 	bl	8000adc <__aeabi_dcmplt>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d171      	bne.n	800be0e <_dtoa_r+0x65e>
 800bd2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd2e:	4911      	ldr	r1, [pc, #68]	@ (800bd74 <_dtoa_r+0x5c4>)
 800bd30:	2000      	movs	r0, #0
 800bd32:	f7f4 faa9 	bl	8000288 <__aeabi_dsub>
 800bd36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd3a:	f7f4 fecf 	bl	8000adc <__aeabi_dcmplt>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f040 8095 	bne.w	800be6e <_dtoa_r+0x6be>
 800bd44:	42a6      	cmp	r6, r4
 800bd46:	f43f af50 	beq.w	800bbea <_dtoa_r+0x43a>
 800bd4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd78 <_dtoa_r+0x5c8>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	f7f4 fc51 	bl	80005f8 <__aeabi_dmul>
 800bd56:	4b08      	ldr	r3, [pc, #32]	@ (800bd78 <_dtoa_r+0x5c8>)
 800bd58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd62:	f7f4 fc49 	bl	80005f8 <__aeabi_dmul>
 800bd66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd6a:	e7c4      	b.n	800bcf6 <_dtoa_r+0x546>
 800bd6c:	0800eba0 	.word	0x0800eba0
 800bd70:	0800eb78 	.word	0x0800eb78
 800bd74:	3ff00000 	.word	0x3ff00000
 800bd78:	40240000 	.word	0x40240000
 800bd7c:	401c0000 	.word	0x401c0000
 800bd80:	40140000 	.word	0x40140000
 800bd84:	3fe00000 	.word	0x3fe00000
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f7f4 fc34 	bl	80005f8 <__aeabi_dmul>
 800bd90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd94:	9415      	str	r4, [sp, #84]	@ 0x54
 800bd96:	4656      	mov	r6, sl
 800bd98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd9c:	f7f4 fedc 	bl	8000b58 <__aeabi_d2iz>
 800bda0:	4605      	mov	r5, r0
 800bda2:	f7f4 fbbf 	bl	8000524 <__aeabi_i2d>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdae:	f7f4 fa6b 	bl	8000288 <__aeabi_dsub>
 800bdb2:	3530      	adds	r5, #48	@ 0x30
 800bdb4:	f806 5b01 	strb.w	r5, [r6], #1
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	42a6      	cmp	r6, r4
 800bdbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdc2:	f04f 0200 	mov.w	r2, #0
 800bdc6:	d124      	bne.n	800be12 <_dtoa_r+0x662>
 800bdc8:	4bac      	ldr	r3, [pc, #688]	@ (800c07c <_dtoa_r+0x8cc>)
 800bdca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdce:	f7f4 fa5d 	bl	800028c <__adddf3>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdda:	f7f4 fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d145      	bne.n	800be6e <_dtoa_r+0x6be>
 800bde2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bde6:	49a5      	ldr	r1, [pc, #660]	@ (800c07c <_dtoa_r+0x8cc>)
 800bde8:	2000      	movs	r0, #0
 800bdea:	f7f4 fa4d 	bl	8000288 <__aeabi_dsub>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdf6:	f7f4 fe71 	bl	8000adc <__aeabi_dcmplt>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f43f aef5 	beq.w	800bbea <_dtoa_r+0x43a>
 800be00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be02:	1e73      	subs	r3, r6, #1
 800be04:	9315      	str	r3, [sp, #84]	@ 0x54
 800be06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be0a:	2b30      	cmp	r3, #48	@ 0x30
 800be0c:	d0f8      	beq.n	800be00 <_dtoa_r+0x650>
 800be0e:	9f04      	ldr	r7, [sp, #16]
 800be10:	e73e      	b.n	800bc90 <_dtoa_r+0x4e0>
 800be12:	4b9b      	ldr	r3, [pc, #620]	@ (800c080 <_dtoa_r+0x8d0>)
 800be14:	f7f4 fbf0 	bl	80005f8 <__aeabi_dmul>
 800be18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be1c:	e7bc      	b.n	800bd98 <_dtoa_r+0x5e8>
 800be1e:	d10c      	bne.n	800be3a <_dtoa_r+0x68a>
 800be20:	4b98      	ldr	r3, [pc, #608]	@ (800c084 <_dtoa_r+0x8d4>)
 800be22:	2200      	movs	r2, #0
 800be24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be28:	f7f4 fbe6 	bl	80005f8 <__aeabi_dmul>
 800be2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be30:	f7f4 fe68 	bl	8000b04 <__aeabi_dcmpge>
 800be34:	2800      	cmp	r0, #0
 800be36:	f000 8157 	beq.w	800c0e8 <_dtoa_r+0x938>
 800be3a:	2400      	movs	r4, #0
 800be3c:	4625      	mov	r5, r4
 800be3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be40:	43db      	mvns	r3, r3
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	4656      	mov	r6, sl
 800be46:	2700      	movs	r7, #0
 800be48:	4621      	mov	r1, r4
 800be4a:	4658      	mov	r0, fp
 800be4c:	f000 fbb4 	bl	800c5b8 <_Bfree>
 800be50:	2d00      	cmp	r5, #0
 800be52:	d0dc      	beq.n	800be0e <_dtoa_r+0x65e>
 800be54:	b12f      	cbz	r7, 800be62 <_dtoa_r+0x6b2>
 800be56:	42af      	cmp	r7, r5
 800be58:	d003      	beq.n	800be62 <_dtoa_r+0x6b2>
 800be5a:	4639      	mov	r1, r7
 800be5c:	4658      	mov	r0, fp
 800be5e:	f000 fbab 	bl	800c5b8 <_Bfree>
 800be62:	4629      	mov	r1, r5
 800be64:	4658      	mov	r0, fp
 800be66:	f000 fba7 	bl	800c5b8 <_Bfree>
 800be6a:	e7d0      	b.n	800be0e <_dtoa_r+0x65e>
 800be6c:	9704      	str	r7, [sp, #16]
 800be6e:	4633      	mov	r3, r6
 800be70:	461e      	mov	r6, r3
 800be72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be76:	2a39      	cmp	r2, #57	@ 0x39
 800be78:	d107      	bne.n	800be8a <_dtoa_r+0x6da>
 800be7a:	459a      	cmp	sl, r3
 800be7c:	d1f8      	bne.n	800be70 <_dtoa_r+0x6c0>
 800be7e:	9a04      	ldr	r2, [sp, #16]
 800be80:	3201      	adds	r2, #1
 800be82:	9204      	str	r2, [sp, #16]
 800be84:	2230      	movs	r2, #48	@ 0x30
 800be86:	f88a 2000 	strb.w	r2, [sl]
 800be8a:	781a      	ldrb	r2, [r3, #0]
 800be8c:	3201      	adds	r2, #1
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	e7bd      	b.n	800be0e <_dtoa_r+0x65e>
 800be92:	4b7b      	ldr	r3, [pc, #492]	@ (800c080 <_dtoa_r+0x8d0>)
 800be94:	2200      	movs	r2, #0
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	2200      	movs	r2, #0
 800be9c:	2300      	movs	r3, #0
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	f7f4 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f43f aebb 	beq.w	800bc22 <_dtoa_r+0x472>
 800beac:	e6f0      	b.n	800bc90 <_dtoa_r+0x4e0>
 800beae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800beb0:	2a00      	cmp	r2, #0
 800beb2:	f000 80db 	beq.w	800c06c <_dtoa_r+0x8bc>
 800beb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beb8:	2a01      	cmp	r2, #1
 800beba:	f300 80bf 	bgt.w	800c03c <_dtoa_r+0x88c>
 800bebe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bec0:	2a00      	cmp	r2, #0
 800bec2:	f000 80b7 	beq.w	800c034 <_dtoa_r+0x884>
 800bec6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800beca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800becc:	4646      	mov	r6, r8
 800bece:	9a08      	ldr	r2, [sp, #32]
 800bed0:	2101      	movs	r1, #1
 800bed2:	441a      	add	r2, r3
 800bed4:	4658      	mov	r0, fp
 800bed6:	4498      	add	r8, r3
 800bed8:	9208      	str	r2, [sp, #32]
 800beda:	f000 fc21 	bl	800c720 <__i2b>
 800bede:	4605      	mov	r5, r0
 800bee0:	b15e      	cbz	r6, 800befa <_dtoa_r+0x74a>
 800bee2:	9b08      	ldr	r3, [sp, #32]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dd08      	ble.n	800befa <_dtoa_r+0x74a>
 800bee8:	42b3      	cmp	r3, r6
 800beea:	9a08      	ldr	r2, [sp, #32]
 800beec:	bfa8      	it	ge
 800beee:	4633      	movge	r3, r6
 800bef0:	eba8 0803 	sub.w	r8, r8, r3
 800bef4:	1af6      	subs	r6, r6, r3
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	9308      	str	r3, [sp, #32]
 800befa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800befc:	b1f3      	cbz	r3, 800bf3c <_dtoa_r+0x78c>
 800befe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 80b7 	beq.w	800c074 <_dtoa_r+0x8c4>
 800bf06:	b18c      	cbz	r4, 800bf2c <_dtoa_r+0x77c>
 800bf08:	4629      	mov	r1, r5
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4658      	mov	r0, fp
 800bf0e:	f000 fcc7 	bl	800c8a0 <__pow5mult>
 800bf12:	464a      	mov	r2, r9
 800bf14:	4601      	mov	r1, r0
 800bf16:	4605      	mov	r5, r0
 800bf18:	4658      	mov	r0, fp
 800bf1a:	f000 fc17 	bl	800c74c <__multiply>
 800bf1e:	4649      	mov	r1, r9
 800bf20:	9004      	str	r0, [sp, #16]
 800bf22:	4658      	mov	r0, fp
 800bf24:	f000 fb48 	bl	800c5b8 <_Bfree>
 800bf28:	9b04      	ldr	r3, [sp, #16]
 800bf2a:	4699      	mov	r9, r3
 800bf2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf2e:	1b1a      	subs	r2, r3, r4
 800bf30:	d004      	beq.n	800bf3c <_dtoa_r+0x78c>
 800bf32:	4649      	mov	r1, r9
 800bf34:	4658      	mov	r0, fp
 800bf36:	f000 fcb3 	bl	800c8a0 <__pow5mult>
 800bf3a:	4681      	mov	r9, r0
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	4658      	mov	r0, fp
 800bf40:	f000 fbee 	bl	800c720 <__i2b>
 800bf44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf46:	4604      	mov	r4, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 81cf 	beq.w	800c2ec <_dtoa_r+0xb3c>
 800bf4e:	461a      	mov	r2, r3
 800bf50:	4601      	mov	r1, r0
 800bf52:	4658      	mov	r0, fp
 800bf54:	f000 fca4 	bl	800c8a0 <__pow5mult>
 800bf58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	f300 8095 	bgt.w	800c08c <_dtoa_r+0x8dc>
 800bf62:	9b02      	ldr	r3, [sp, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f040 8087 	bne.w	800c078 <_dtoa_r+0x8c8>
 800bf6a:	9b03      	ldr	r3, [sp, #12]
 800bf6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f040 8089 	bne.w	800c088 <_dtoa_r+0x8d8>
 800bf76:	9b03      	ldr	r3, [sp, #12]
 800bf78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf7c:	0d1b      	lsrs	r3, r3, #20
 800bf7e:	051b      	lsls	r3, r3, #20
 800bf80:	b12b      	cbz	r3, 800bf8e <_dtoa_r+0x7de>
 800bf82:	9b08      	ldr	r3, [sp, #32]
 800bf84:	3301      	adds	r3, #1
 800bf86:	9308      	str	r3, [sp, #32]
 800bf88:	f108 0801 	add.w	r8, r8, #1
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 81b0 	beq.w	800c2f8 <_dtoa_r+0xb48>
 800bf98:	6923      	ldr	r3, [r4, #16]
 800bf9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf9e:	6918      	ldr	r0, [r3, #16]
 800bfa0:	f000 fb72 	bl	800c688 <__hi0bits>
 800bfa4:	f1c0 0020 	rsb	r0, r0, #32
 800bfa8:	9b08      	ldr	r3, [sp, #32]
 800bfaa:	4418      	add	r0, r3
 800bfac:	f010 001f 	ands.w	r0, r0, #31
 800bfb0:	d077      	beq.n	800c0a2 <_dtoa_r+0x8f2>
 800bfb2:	f1c0 0320 	rsb	r3, r0, #32
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	dd6b      	ble.n	800c092 <_dtoa_r+0x8e2>
 800bfba:	9b08      	ldr	r3, [sp, #32]
 800bfbc:	f1c0 001c 	rsb	r0, r0, #28
 800bfc0:	4403      	add	r3, r0
 800bfc2:	4480      	add	r8, r0
 800bfc4:	4406      	add	r6, r0
 800bfc6:	9308      	str	r3, [sp, #32]
 800bfc8:	f1b8 0f00 	cmp.w	r8, #0
 800bfcc:	dd05      	ble.n	800bfda <_dtoa_r+0x82a>
 800bfce:	4649      	mov	r1, r9
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	4658      	mov	r0, fp
 800bfd4:	f000 fcbe 	bl	800c954 <__lshift>
 800bfd8:	4681      	mov	r9, r0
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dd05      	ble.n	800bfec <_dtoa_r+0x83c>
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4658      	mov	r0, fp
 800bfe6:	f000 fcb5 	bl	800c954 <__lshift>
 800bfea:	4604      	mov	r4, r0
 800bfec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d059      	beq.n	800c0a6 <_dtoa_r+0x8f6>
 800bff2:	4621      	mov	r1, r4
 800bff4:	4648      	mov	r0, r9
 800bff6:	f000 fd19 	bl	800ca2c <__mcmp>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	da53      	bge.n	800c0a6 <_dtoa_r+0x8f6>
 800bffe:	1e7b      	subs	r3, r7, #1
 800c000:	9304      	str	r3, [sp, #16]
 800c002:	4649      	mov	r1, r9
 800c004:	2300      	movs	r3, #0
 800c006:	220a      	movs	r2, #10
 800c008:	4658      	mov	r0, fp
 800c00a:	f000 faf7 	bl	800c5fc <__multadd>
 800c00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c010:	4681      	mov	r9, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 8172 	beq.w	800c2fc <_dtoa_r+0xb4c>
 800c018:	2300      	movs	r3, #0
 800c01a:	4629      	mov	r1, r5
 800c01c:	220a      	movs	r2, #10
 800c01e:	4658      	mov	r0, fp
 800c020:	f000 faec 	bl	800c5fc <__multadd>
 800c024:	9b00      	ldr	r3, [sp, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	4605      	mov	r5, r0
 800c02a:	dc67      	bgt.n	800c0fc <_dtoa_r+0x94c>
 800c02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c02e:	2b02      	cmp	r3, #2
 800c030:	dc41      	bgt.n	800c0b6 <_dtoa_r+0x906>
 800c032:	e063      	b.n	800c0fc <_dtoa_r+0x94c>
 800c034:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c036:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c03a:	e746      	b.n	800beca <_dtoa_r+0x71a>
 800c03c:	9b07      	ldr	r3, [sp, #28]
 800c03e:	1e5c      	subs	r4, r3, #1
 800c040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c042:	42a3      	cmp	r3, r4
 800c044:	bfbf      	itttt	lt
 800c046:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c048:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c04a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c04c:	1ae3      	sublt	r3, r4, r3
 800c04e:	bfb4      	ite	lt
 800c050:	18d2      	addlt	r2, r2, r3
 800c052:	1b1c      	subge	r4, r3, r4
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	bfbc      	itt	lt
 800c058:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c05a:	2400      	movlt	r4, #0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bfb5      	itete	lt
 800c060:	eba8 0603 	sublt.w	r6, r8, r3
 800c064:	9b07      	ldrge	r3, [sp, #28]
 800c066:	2300      	movlt	r3, #0
 800c068:	4646      	movge	r6, r8
 800c06a:	e730      	b.n	800bece <_dtoa_r+0x71e>
 800c06c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c06e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c070:	4646      	mov	r6, r8
 800c072:	e735      	b.n	800bee0 <_dtoa_r+0x730>
 800c074:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c076:	e75c      	b.n	800bf32 <_dtoa_r+0x782>
 800c078:	2300      	movs	r3, #0
 800c07a:	e788      	b.n	800bf8e <_dtoa_r+0x7de>
 800c07c:	3fe00000 	.word	0x3fe00000
 800c080:	40240000 	.word	0x40240000
 800c084:	40140000 	.word	0x40140000
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	e780      	b.n	800bf8e <_dtoa_r+0x7de>
 800c08c:	2300      	movs	r3, #0
 800c08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c090:	e782      	b.n	800bf98 <_dtoa_r+0x7e8>
 800c092:	d099      	beq.n	800bfc8 <_dtoa_r+0x818>
 800c094:	9a08      	ldr	r2, [sp, #32]
 800c096:	331c      	adds	r3, #28
 800c098:	441a      	add	r2, r3
 800c09a:	4498      	add	r8, r3
 800c09c:	441e      	add	r6, r3
 800c09e:	9208      	str	r2, [sp, #32]
 800c0a0:	e792      	b.n	800bfc8 <_dtoa_r+0x818>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	e7f6      	b.n	800c094 <_dtoa_r+0x8e4>
 800c0a6:	9b07      	ldr	r3, [sp, #28]
 800c0a8:	9704      	str	r7, [sp, #16]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	dc20      	bgt.n	800c0f0 <_dtoa_r+0x940>
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	dd1e      	ble.n	800c0f4 <_dtoa_r+0x944>
 800c0b6:	9b00      	ldr	r3, [sp, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f47f aec0 	bne.w	800be3e <_dtoa_r+0x68e>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	2205      	movs	r2, #5
 800c0c2:	4658      	mov	r0, fp
 800c0c4:	f000 fa9a 	bl	800c5fc <__multadd>
 800c0c8:	4601      	mov	r1, r0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4648      	mov	r0, r9
 800c0ce:	f000 fcad 	bl	800ca2c <__mcmp>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f77f aeb3 	ble.w	800be3e <_dtoa_r+0x68e>
 800c0d8:	4656      	mov	r6, sl
 800c0da:	2331      	movs	r3, #49	@ 0x31
 800c0dc:	f806 3b01 	strb.w	r3, [r6], #1
 800c0e0:	9b04      	ldr	r3, [sp, #16]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	9304      	str	r3, [sp, #16]
 800c0e6:	e6ae      	b.n	800be46 <_dtoa_r+0x696>
 800c0e8:	9c07      	ldr	r4, [sp, #28]
 800c0ea:	9704      	str	r7, [sp, #16]
 800c0ec:	4625      	mov	r5, r4
 800c0ee:	e7f3      	b.n	800c0d8 <_dtoa_r+0x928>
 800c0f0:	9b07      	ldr	r3, [sp, #28]
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 8104 	beq.w	800c304 <_dtoa_r+0xb54>
 800c0fc:	2e00      	cmp	r6, #0
 800c0fe:	dd05      	ble.n	800c10c <_dtoa_r+0x95c>
 800c100:	4629      	mov	r1, r5
 800c102:	4632      	mov	r2, r6
 800c104:	4658      	mov	r0, fp
 800c106:	f000 fc25 	bl	800c954 <__lshift>
 800c10a:	4605      	mov	r5, r0
 800c10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d05a      	beq.n	800c1c8 <_dtoa_r+0xa18>
 800c112:	6869      	ldr	r1, [r5, #4]
 800c114:	4658      	mov	r0, fp
 800c116:	f000 fa0f 	bl	800c538 <_Balloc>
 800c11a:	4606      	mov	r6, r0
 800c11c:	b928      	cbnz	r0, 800c12a <_dtoa_r+0x97a>
 800c11e:	4b84      	ldr	r3, [pc, #528]	@ (800c330 <_dtoa_r+0xb80>)
 800c120:	4602      	mov	r2, r0
 800c122:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c126:	f7ff bb5a 	b.w	800b7de <_dtoa_r+0x2e>
 800c12a:	692a      	ldr	r2, [r5, #16]
 800c12c:	3202      	adds	r2, #2
 800c12e:	0092      	lsls	r2, r2, #2
 800c130:	f105 010c 	add.w	r1, r5, #12
 800c134:	300c      	adds	r0, #12
 800c136:	f7ff faa2 	bl	800b67e <memcpy>
 800c13a:	2201      	movs	r2, #1
 800c13c:	4631      	mov	r1, r6
 800c13e:	4658      	mov	r0, fp
 800c140:	f000 fc08 	bl	800c954 <__lshift>
 800c144:	f10a 0301 	add.w	r3, sl, #1
 800c148:	9307      	str	r3, [sp, #28]
 800c14a:	9b00      	ldr	r3, [sp, #0]
 800c14c:	4453      	add	r3, sl
 800c14e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c150:	9b02      	ldr	r3, [sp, #8]
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	462f      	mov	r7, r5
 800c158:	930a      	str	r3, [sp, #40]	@ 0x28
 800c15a:	4605      	mov	r5, r0
 800c15c:	9b07      	ldr	r3, [sp, #28]
 800c15e:	4621      	mov	r1, r4
 800c160:	3b01      	subs	r3, #1
 800c162:	4648      	mov	r0, r9
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	f7ff fa98 	bl	800b69a <quorem>
 800c16a:	4639      	mov	r1, r7
 800c16c:	9002      	str	r0, [sp, #8]
 800c16e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c172:	4648      	mov	r0, r9
 800c174:	f000 fc5a 	bl	800ca2c <__mcmp>
 800c178:	462a      	mov	r2, r5
 800c17a:	9008      	str	r0, [sp, #32]
 800c17c:	4621      	mov	r1, r4
 800c17e:	4658      	mov	r0, fp
 800c180:	f000 fc70 	bl	800ca64 <__mdiff>
 800c184:	68c2      	ldr	r2, [r0, #12]
 800c186:	4606      	mov	r6, r0
 800c188:	bb02      	cbnz	r2, 800c1cc <_dtoa_r+0xa1c>
 800c18a:	4601      	mov	r1, r0
 800c18c:	4648      	mov	r0, r9
 800c18e:	f000 fc4d 	bl	800ca2c <__mcmp>
 800c192:	4602      	mov	r2, r0
 800c194:	4631      	mov	r1, r6
 800c196:	4658      	mov	r0, fp
 800c198:	920e      	str	r2, [sp, #56]	@ 0x38
 800c19a:	f000 fa0d 	bl	800c5b8 <_Bfree>
 800c19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1a2:	9e07      	ldr	r6, [sp, #28]
 800c1a4:	ea43 0102 	orr.w	r1, r3, r2
 800c1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1aa:	4319      	orrs	r1, r3
 800c1ac:	d110      	bne.n	800c1d0 <_dtoa_r+0xa20>
 800c1ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1b2:	d029      	beq.n	800c208 <_dtoa_r+0xa58>
 800c1b4:	9b08      	ldr	r3, [sp, #32]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	dd02      	ble.n	800c1c0 <_dtoa_r+0xa10>
 800c1ba:	9b02      	ldr	r3, [sp, #8]
 800c1bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c1c0:	9b00      	ldr	r3, [sp, #0]
 800c1c2:	f883 8000 	strb.w	r8, [r3]
 800c1c6:	e63f      	b.n	800be48 <_dtoa_r+0x698>
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	e7bb      	b.n	800c144 <_dtoa_r+0x994>
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	e7e1      	b.n	800c194 <_dtoa_r+0x9e4>
 800c1d0:	9b08      	ldr	r3, [sp, #32]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	db04      	blt.n	800c1e0 <_dtoa_r+0xa30>
 800c1d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1d8:	430b      	orrs	r3, r1
 800c1da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c1dc:	430b      	orrs	r3, r1
 800c1de:	d120      	bne.n	800c222 <_dtoa_r+0xa72>
 800c1e0:	2a00      	cmp	r2, #0
 800c1e2:	dded      	ble.n	800c1c0 <_dtoa_r+0xa10>
 800c1e4:	4649      	mov	r1, r9
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4658      	mov	r0, fp
 800c1ea:	f000 fbb3 	bl	800c954 <__lshift>
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4681      	mov	r9, r0
 800c1f2:	f000 fc1b 	bl	800ca2c <__mcmp>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	dc03      	bgt.n	800c202 <_dtoa_r+0xa52>
 800c1fa:	d1e1      	bne.n	800c1c0 <_dtoa_r+0xa10>
 800c1fc:	f018 0f01 	tst.w	r8, #1
 800c200:	d0de      	beq.n	800c1c0 <_dtoa_r+0xa10>
 800c202:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c206:	d1d8      	bne.n	800c1ba <_dtoa_r+0xa0a>
 800c208:	9a00      	ldr	r2, [sp, #0]
 800c20a:	2339      	movs	r3, #57	@ 0x39
 800c20c:	7013      	strb	r3, [r2, #0]
 800c20e:	4633      	mov	r3, r6
 800c210:	461e      	mov	r6, r3
 800c212:	3b01      	subs	r3, #1
 800c214:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c218:	2a39      	cmp	r2, #57	@ 0x39
 800c21a:	d052      	beq.n	800c2c2 <_dtoa_r+0xb12>
 800c21c:	3201      	adds	r2, #1
 800c21e:	701a      	strb	r2, [r3, #0]
 800c220:	e612      	b.n	800be48 <_dtoa_r+0x698>
 800c222:	2a00      	cmp	r2, #0
 800c224:	dd07      	ble.n	800c236 <_dtoa_r+0xa86>
 800c226:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c22a:	d0ed      	beq.n	800c208 <_dtoa_r+0xa58>
 800c22c:	9a00      	ldr	r2, [sp, #0]
 800c22e:	f108 0301 	add.w	r3, r8, #1
 800c232:	7013      	strb	r3, [r2, #0]
 800c234:	e608      	b.n	800be48 <_dtoa_r+0x698>
 800c236:	9b07      	ldr	r3, [sp, #28]
 800c238:	9a07      	ldr	r2, [sp, #28]
 800c23a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c240:	4293      	cmp	r3, r2
 800c242:	d028      	beq.n	800c296 <_dtoa_r+0xae6>
 800c244:	4649      	mov	r1, r9
 800c246:	2300      	movs	r3, #0
 800c248:	220a      	movs	r2, #10
 800c24a:	4658      	mov	r0, fp
 800c24c:	f000 f9d6 	bl	800c5fc <__multadd>
 800c250:	42af      	cmp	r7, r5
 800c252:	4681      	mov	r9, r0
 800c254:	f04f 0300 	mov.w	r3, #0
 800c258:	f04f 020a 	mov.w	r2, #10
 800c25c:	4639      	mov	r1, r7
 800c25e:	4658      	mov	r0, fp
 800c260:	d107      	bne.n	800c272 <_dtoa_r+0xac2>
 800c262:	f000 f9cb 	bl	800c5fc <__multadd>
 800c266:	4607      	mov	r7, r0
 800c268:	4605      	mov	r5, r0
 800c26a:	9b07      	ldr	r3, [sp, #28]
 800c26c:	3301      	adds	r3, #1
 800c26e:	9307      	str	r3, [sp, #28]
 800c270:	e774      	b.n	800c15c <_dtoa_r+0x9ac>
 800c272:	f000 f9c3 	bl	800c5fc <__multadd>
 800c276:	4629      	mov	r1, r5
 800c278:	4607      	mov	r7, r0
 800c27a:	2300      	movs	r3, #0
 800c27c:	220a      	movs	r2, #10
 800c27e:	4658      	mov	r0, fp
 800c280:	f000 f9bc 	bl	800c5fc <__multadd>
 800c284:	4605      	mov	r5, r0
 800c286:	e7f0      	b.n	800c26a <_dtoa_r+0xaba>
 800c288:	9b00      	ldr	r3, [sp, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bfcc      	ite	gt
 800c28e:	461e      	movgt	r6, r3
 800c290:	2601      	movle	r6, #1
 800c292:	4456      	add	r6, sl
 800c294:	2700      	movs	r7, #0
 800c296:	4649      	mov	r1, r9
 800c298:	2201      	movs	r2, #1
 800c29a:	4658      	mov	r0, fp
 800c29c:	f000 fb5a 	bl	800c954 <__lshift>
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4681      	mov	r9, r0
 800c2a4:	f000 fbc2 	bl	800ca2c <__mcmp>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	dcb0      	bgt.n	800c20e <_dtoa_r+0xa5e>
 800c2ac:	d102      	bne.n	800c2b4 <_dtoa_r+0xb04>
 800c2ae:	f018 0f01 	tst.w	r8, #1
 800c2b2:	d1ac      	bne.n	800c20e <_dtoa_r+0xa5e>
 800c2b4:	4633      	mov	r3, r6
 800c2b6:	461e      	mov	r6, r3
 800c2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2bc:	2a30      	cmp	r2, #48	@ 0x30
 800c2be:	d0fa      	beq.n	800c2b6 <_dtoa_r+0xb06>
 800c2c0:	e5c2      	b.n	800be48 <_dtoa_r+0x698>
 800c2c2:	459a      	cmp	sl, r3
 800c2c4:	d1a4      	bne.n	800c210 <_dtoa_r+0xa60>
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	2331      	movs	r3, #49	@ 0x31
 800c2ce:	f88a 3000 	strb.w	r3, [sl]
 800c2d2:	e5b9      	b.n	800be48 <_dtoa_r+0x698>
 800c2d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c334 <_dtoa_r+0xb84>
 800c2da:	b11b      	cbz	r3, 800c2e4 <_dtoa_r+0xb34>
 800c2dc:	f10a 0308 	add.w	r3, sl, #8
 800c2e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	4650      	mov	r0, sl
 800c2e6:	b019      	add	sp, #100	@ 0x64
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	f77f ae37 	ble.w	800bf62 <_dtoa_r+0x7b2>
 800c2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	e655      	b.n	800bfa8 <_dtoa_r+0x7f8>
 800c2fc:	9b00      	ldr	r3, [sp, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f77f aed6 	ble.w	800c0b0 <_dtoa_r+0x900>
 800c304:	4656      	mov	r6, sl
 800c306:	4621      	mov	r1, r4
 800c308:	4648      	mov	r0, r9
 800c30a:	f7ff f9c6 	bl	800b69a <quorem>
 800c30e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c312:	f806 8b01 	strb.w	r8, [r6], #1
 800c316:	9b00      	ldr	r3, [sp, #0]
 800c318:	eba6 020a 	sub.w	r2, r6, sl
 800c31c:	4293      	cmp	r3, r2
 800c31e:	ddb3      	ble.n	800c288 <_dtoa_r+0xad8>
 800c320:	4649      	mov	r1, r9
 800c322:	2300      	movs	r3, #0
 800c324:	220a      	movs	r2, #10
 800c326:	4658      	mov	r0, fp
 800c328:	f000 f968 	bl	800c5fc <__multadd>
 800c32c:	4681      	mov	r9, r0
 800c32e:	e7ea      	b.n	800c306 <_dtoa_r+0xb56>
 800c330:	0800eafc 	.word	0x0800eafc
 800c334:	0800ea80 	.word	0x0800ea80

0800c338 <_free_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4605      	mov	r5, r0
 800c33c:	2900      	cmp	r1, #0
 800c33e:	d041      	beq.n	800c3c4 <_free_r+0x8c>
 800c340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c344:	1f0c      	subs	r4, r1, #4
 800c346:	2b00      	cmp	r3, #0
 800c348:	bfb8      	it	lt
 800c34a:	18e4      	addlt	r4, r4, r3
 800c34c:	f000 f8e8 	bl	800c520 <__malloc_lock>
 800c350:	4a1d      	ldr	r2, [pc, #116]	@ (800c3c8 <_free_r+0x90>)
 800c352:	6813      	ldr	r3, [r2, #0]
 800c354:	b933      	cbnz	r3, 800c364 <_free_r+0x2c>
 800c356:	6063      	str	r3, [r4, #4]
 800c358:	6014      	str	r4, [r2, #0]
 800c35a:	4628      	mov	r0, r5
 800c35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c360:	f000 b8e4 	b.w	800c52c <__malloc_unlock>
 800c364:	42a3      	cmp	r3, r4
 800c366:	d908      	bls.n	800c37a <_free_r+0x42>
 800c368:	6820      	ldr	r0, [r4, #0]
 800c36a:	1821      	adds	r1, r4, r0
 800c36c:	428b      	cmp	r3, r1
 800c36e:	bf01      	itttt	eq
 800c370:	6819      	ldreq	r1, [r3, #0]
 800c372:	685b      	ldreq	r3, [r3, #4]
 800c374:	1809      	addeq	r1, r1, r0
 800c376:	6021      	streq	r1, [r4, #0]
 800c378:	e7ed      	b.n	800c356 <_free_r+0x1e>
 800c37a:	461a      	mov	r2, r3
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	b10b      	cbz	r3, 800c384 <_free_r+0x4c>
 800c380:	42a3      	cmp	r3, r4
 800c382:	d9fa      	bls.n	800c37a <_free_r+0x42>
 800c384:	6811      	ldr	r1, [r2, #0]
 800c386:	1850      	adds	r0, r2, r1
 800c388:	42a0      	cmp	r0, r4
 800c38a:	d10b      	bne.n	800c3a4 <_free_r+0x6c>
 800c38c:	6820      	ldr	r0, [r4, #0]
 800c38e:	4401      	add	r1, r0
 800c390:	1850      	adds	r0, r2, r1
 800c392:	4283      	cmp	r3, r0
 800c394:	6011      	str	r1, [r2, #0]
 800c396:	d1e0      	bne.n	800c35a <_free_r+0x22>
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	6053      	str	r3, [r2, #4]
 800c39e:	4408      	add	r0, r1
 800c3a0:	6010      	str	r0, [r2, #0]
 800c3a2:	e7da      	b.n	800c35a <_free_r+0x22>
 800c3a4:	d902      	bls.n	800c3ac <_free_r+0x74>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	602b      	str	r3, [r5, #0]
 800c3aa:	e7d6      	b.n	800c35a <_free_r+0x22>
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	1821      	adds	r1, r4, r0
 800c3b0:	428b      	cmp	r3, r1
 800c3b2:	bf04      	itt	eq
 800c3b4:	6819      	ldreq	r1, [r3, #0]
 800c3b6:	685b      	ldreq	r3, [r3, #4]
 800c3b8:	6063      	str	r3, [r4, #4]
 800c3ba:	bf04      	itt	eq
 800c3bc:	1809      	addeq	r1, r1, r0
 800c3be:	6021      	streq	r1, [r4, #0]
 800c3c0:	6054      	str	r4, [r2, #4]
 800c3c2:	e7ca      	b.n	800c35a <_free_r+0x22>
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000ec8 	.word	0x20000ec8

0800c3cc <malloc>:
 800c3cc:	4b02      	ldr	r3, [pc, #8]	@ (800c3d8 <malloc+0xc>)
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	f000 b825 	b.w	800c420 <_malloc_r>
 800c3d6:	bf00      	nop
 800c3d8:	20000018 	.word	0x20000018

0800c3dc <sbrk_aligned>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	4e0f      	ldr	r6, [pc, #60]	@ (800c41c <sbrk_aligned+0x40>)
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	6831      	ldr	r1, [r6, #0]
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	b911      	cbnz	r1, 800c3ee <sbrk_aligned+0x12>
 800c3e8:	f000 feb2 	bl	800d150 <_sbrk_r>
 800c3ec:	6030      	str	r0, [r6, #0]
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f000 fead 	bl	800d150 <_sbrk_r>
 800c3f6:	1c43      	adds	r3, r0, #1
 800c3f8:	d103      	bne.n	800c402 <sbrk_aligned+0x26>
 800c3fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c3fe:	4620      	mov	r0, r4
 800c400:	bd70      	pop	{r4, r5, r6, pc}
 800c402:	1cc4      	adds	r4, r0, #3
 800c404:	f024 0403 	bic.w	r4, r4, #3
 800c408:	42a0      	cmp	r0, r4
 800c40a:	d0f8      	beq.n	800c3fe <sbrk_aligned+0x22>
 800c40c:	1a21      	subs	r1, r4, r0
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 fe9e 	bl	800d150 <_sbrk_r>
 800c414:	3001      	adds	r0, #1
 800c416:	d1f2      	bne.n	800c3fe <sbrk_aligned+0x22>
 800c418:	e7ef      	b.n	800c3fa <sbrk_aligned+0x1e>
 800c41a:	bf00      	nop
 800c41c:	20000ec4 	.word	0x20000ec4

0800c420 <_malloc_r>:
 800c420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c424:	1ccd      	adds	r5, r1, #3
 800c426:	f025 0503 	bic.w	r5, r5, #3
 800c42a:	3508      	adds	r5, #8
 800c42c:	2d0c      	cmp	r5, #12
 800c42e:	bf38      	it	cc
 800c430:	250c      	movcc	r5, #12
 800c432:	2d00      	cmp	r5, #0
 800c434:	4606      	mov	r6, r0
 800c436:	db01      	blt.n	800c43c <_malloc_r+0x1c>
 800c438:	42a9      	cmp	r1, r5
 800c43a:	d904      	bls.n	800c446 <_malloc_r+0x26>
 800c43c:	230c      	movs	r3, #12
 800c43e:	6033      	str	r3, [r6, #0]
 800c440:	2000      	movs	r0, #0
 800c442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c51c <_malloc_r+0xfc>
 800c44a:	f000 f869 	bl	800c520 <__malloc_lock>
 800c44e:	f8d8 3000 	ldr.w	r3, [r8]
 800c452:	461c      	mov	r4, r3
 800c454:	bb44      	cbnz	r4, 800c4a8 <_malloc_r+0x88>
 800c456:	4629      	mov	r1, r5
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff ffbf 	bl	800c3dc <sbrk_aligned>
 800c45e:	1c43      	adds	r3, r0, #1
 800c460:	4604      	mov	r4, r0
 800c462:	d158      	bne.n	800c516 <_malloc_r+0xf6>
 800c464:	f8d8 4000 	ldr.w	r4, [r8]
 800c468:	4627      	mov	r7, r4
 800c46a:	2f00      	cmp	r7, #0
 800c46c:	d143      	bne.n	800c4f6 <_malloc_r+0xd6>
 800c46e:	2c00      	cmp	r4, #0
 800c470:	d04b      	beq.n	800c50a <_malloc_r+0xea>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	4639      	mov	r1, r7
 800c476:	4630      	mov	r0, r6
 800c478:	eb04 0903 	add.w	r9, r4, r3
 800c47c:	f000 fe68 	bl	800d150 <_sbrk_r>
 800c480:	4581      	cmp	r9, r0
 800c482:	d142      	bne.n	800c50a <_malloc_r+0xea>
 800c484:	6821      	ldr	r1, [r4, #0]
 800c486:	1a6d      	subs	r5, r5, r1
 800c488:	4629      	mov	r1, r5
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7ff ffa6 	bl	800c3dc <sbrk_aligned>
 800c490:	3001      	adds	r0, #1
 800c492:	d03a      	beq.n	800c50a <_malloc_r+0xea>
 800c494:	6823      	ldr	r3, [r4, #0]
 800c496:	442b      	add	r3, r5
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	f8d8 3000 	ldr.w	r3, [r8]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	bb62      	cbnz	r2, 800c4fc <_malloc_r+0xdc>
 800c4a2:	f8c8 7000 	str.w	r7, [r8]
 800c4a6:	e00f      	b.n	800c4c8 <_malloc_r+0xa8>
 800c4a8:	6822      	ldr	r2, [r4, #0]
 800c4aa:	1b52      	subs	r2, r2, r5
 800c4ac:	d420      	bmi.n	800c4f0 <_malloc_r+0xd0>
 800c4ae:	2a0b      	cmp	r2, #11
 800c4b0:	d917      	bls.n	800c4e2 <_malloc_r+0xc2>
 800c4b2:	1961      	adds	r1, r4, r5
 800c4b4:	42a3      	cmp	r3, r4
 800c4b6:	6025      	str	r5, [r4, #0]
 800c4b8:	bf18      	it	ne
 800c4ba:	6059      	strne	r1, [r3, #4]
 800c4bc:	6863      	ldr	r3, [r4, #4]
 800c4be:	bf08      	it	eq
 800c4c0:	f8c8 1000 	streq.w	r1, [r8]
 800c4c4:	5162      	str	r2, [r4, r5]
 800c4c6:	604b      	str	r3, [r1, #4]
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f000 f82f 	bl	800c52c <__malloc_unlock>
 800c4ce:	f104 000b 	add.w	r0, r4, #11
 800c4d2:	1d23      	adds	r3, r4, #4
 800c4d4:	f020 0007 	bic.w	r0, r0, #7
 800c4d8:	1ac2      	subs	r2, r0, r3
 800c4da:	bf1c      	itt	ne
 800c4dc:	1a1b      	subne	r3, r3, r0
 800c4de:	50a3      	strne	r3, [r4, r2]
 800c4e0:	e7af      	b.n	800c442 <_malloc_r+0x22>
 800c4e2:	6862      	ldr	r2, [r4, #4]
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	bf0c      	ite	eq
 800c4e8:	f8c8 2000 	streq.w	r2, [r8]
 800c4ec:	605a      	strne	r2, [r3, #4]
 800c4ee:	e7eb      	b.n	800c4c8 <_malloc_r+0xa8>
 800c4f0:	4623      	mov	r3, r4
 800c4f2:	6864      	ldr	r4, [r4, #4]
 800c4f4:	e7ae      	b.n	800c454 <_malloc_r+0x34>
 800c4f6:	463c      	mov	r4, r7
 800c4f8:	687f      	ldr	r7, [r7, #4]
 800c4fa:	e7b6      	b.n	800c46a <_malloc_r+0x4a>
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	42a3      	cmp	r3, r4
 800c502:	d1fb      	bne.n	800c4fc <_malloc_r+0xdc>
 800c504:	2300      	movs	r3, #0
 800c506:	6053      	str	r3, [r2, #4]
 800c508:	e7de      	b.n	800c4c8 <_malloc_r+0xa8>
 800c50a:	230c      	movs	r3, #12
 800c50c:	6033      	str	r3, [r6, #0]
 800c50e:	4630      	mov	r0, r6
 800c510:	f000 f80c 	bl	800c52c <__malloc_unlock>
 800c514:	e794      	b.n	800c440 <_malloc_r+0x20>
 800c516:	6005      	str	r5, [r0, #0]
 800c518:	e7d6      	b.n	800c4c8 <_malloc_r+0xa8>
 800c51a:	bf00      	nop
 800c51c:	20000ec8 	.word	0x20000ec8

0800c520 <__malloc_lock>:
 800c520:	4801      	ldr	r0, [pc, #4]	@ (800c528 <__malloc_lock+0x8>)
 800c522:	f7ff b8aa 	b.w	800b67a <__retarget_lock_acquire_recursive>
 800c526:	bf00      	nop
 800c528:	20000ec0 	.word	0x20000ec0

0800c52c <__malloc_unlock>:
 800c52c:	4801      	ldr	r0, [pc, #4]	@ (800c534 <__malloc_unlock+0x8>)
 800c52e:	f7ff b8a5 	b.w	800b67c <__retarget_lock_release_recursive>
 800c532:	bf00      	nop
 800c534:	20000ec0 	.word	0x20000ec0

0800c538 <_Balloc>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	69c6      	ldr	r6, [r0, #28]
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	b976      	cbnz	r6, 800c560 <_Balloc+0x28>
 800c542:	2010      	movs	r0, #16
 800c544:	f7ff ff42 	bl	800c3cc <malloc>
 800c548:	4602      	mov	r2, r0
 800c54a:	61e0      	str	r0, [r4, #28]
 800c54c:	b920      	cbnz	r0, 800c558 <_Balloc+0x20>
 800c54e:	4b18      	ldr	r3, [pc, #96]	@ (800c5b0 <_Balloc+0x78>)
 800c550:	4818      	ldr	r0, [pc, #96]	@ (800c5b4 <_Balloc+0x7c>)
 800c552:	216b      	movs	r1, #107	@ 0x6b
 800c554:	f000 fe0c 	bl	800d170 <__assert_func>
 800c558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c55c:	6006      	str	r6, [r0, #0]
 800c55e:	60c6      	str	r6, [r0, #12]
 800c560:	69e6      	ldr	r6, [r4, #28]
 800c562:	68f3      	ldr	r3, [r6, #12]
 800c564:	b183      	cbz	r3, 800c588 <_Balloc+0x50>
 800c566:	69e3      	ldr	r3, [r4, #28]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c56e:	b9b8      	cbnz	r0, 800c5a0 <_Balloc+0x68>
 800c570:	2101      	movs	r1, #1
 800c572:	fa01 f605 	lsl.w	r6, r1, r5
 800c576:	1d72      	adds	r2, r6, #5
 800c578:	0092      	lsls	r2, r2, #2
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 fe16 	bl	800d1ac <_calloc_r>
 800c580:	b160      	cbz	r0, 800c59c <_Balloc+0x64>
 800c582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c586:	e00e      	b.n	800c5a6 <_Balloc+0x6e>
 800c588:	2221      	movs	r2, #33	@ 0x21
 800c58a:	2104      	movs	r1, #4
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 fe0d 	bl	800d1ac <_calloc_r>
 800c592:	69e3      	ldr	r3, [r4, #28]
 800c594:	60f0      	str	r0, [r6, #12]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e4      	bne.n	800c566 <_Balloc+0x2e>
 800c59c:	2000      	movs	r0, #0
 800c59e:	bd70      	pop	{r4, r5, r6, pc}
 800c5a0:	6802      	ldr	r2, [r0, #0]
 800c5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5ac:	e7f7      	b.n	800c59e <_Balloc+0x66>
 800c5ae:	bf00      	nop
 800c5b0:	0800ea8d 	.word	0x0800ea8d
 800c5b4:	0800eb0d 	.word	0x0800eb0d

0800c5b8 <_Bfree>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	69c6      	ldr	r6, [r0, #28]
 800c5bc:	4605      	mov	r5, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	b976      	cbnz	r6, 800c5e0 <_Bfree+0x28>
 800c5c2:	2010      	movs	r0, #16
 800c5c4:	f7ff ff02 	bl	800c3cc <malloc>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	61e8      	str	r0, [r5, #28]
 800c5cc:	b920      	cbnz	r0, 800c5d8 <_Bfree+0x20>
 800c5ce:	4b09      	ldr	r3, [pc, #36]	@ (800c5f4 <_Bfree+0x3c>)
 800c5d0:	4809      	ldr	r0, [pc, #36]	@ (800c5f8 <_Bfree+0x40>)
 800c5d2:	218f      	movs	r1, #143	@ 0x8f
 800c5d4:	f000 fdcc 	bl	800d170 <__assert_func>
 800c5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5dc:	6006      	str	r6, [r0, #0]
 800c5de:	60c6      	str	r6, [r0, #12]
 800c5e0:	b13c      	cbz	r4, 800c5f2 <_Bfree+0x3a>
 800c5e2:	69eb      	ldr	r3, [r5, #28]
 800c5e4:	6862      	ldr	r2, [r4, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5ec:	6021      	str	r1, [r4, #0]
 800c5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	0800ea8d 	.word	0x0800ea8d
 800c5f8:	0800eb0d 	.word	0x0800eb0d

0800c5fc <__multadd>:
 800c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	690d      	ldr	r5, [r1, #16]
 800c602:	4607      	mov	r7, r0
 800c604:	460c      	mov	r4, r1
 800c606:	461e      	mov	r6, r3
 800c608:	f101 0c14 	add.w	ip, r1, #20
 800c60c:	2000      	movs	r0, #0
 800c60e:	f8dc 3000 	ldr.w	r3, [ip]
 800c612:	b299      	uxth	r1, r3
 800c614:	fb02 6101 	mla	r1, r2, r1, r6
 800c618:	0c1e      	lsrs	r6, r3, #16
 800c61a:	0c0b      	lsrs	r3, r1, #16
 800c61c:	fb02 3306 	mla	r3, r2, r6, r3
 800c620:	b289      	uxth	r1, r1
 800c622:	3001      	adds	r0, #1
 800c624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c628:	4285      	cmp	r5, r0
 800c62a:	f84c 1b04 	str.w	r1, [ip], #4
 800c62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c632:	dcec      	bgt.n	800c60e <__multadd+0x12>
 800c634:	b30e      	cbz	r6, 800c67a <__multadd+0x7e>
 800c636:	68a3      	ldr	r3, [r4, #8]
 800c638:	42ab      	cmp	r3, r5
 800c63a:	dc19      	bgt.n	800c670 <__multadd+0x74>
 800c63c:	6861      	ldr	r1, [r4, #4]
 800c63e:	4638      	mov	r0, r7
 800c640:	3101      	adds	r1, #1
 800c642:	f7ff ff79 	bl	800c538 <_Balloc>
 800c646:	4680      	mov	r8, r0
 800c648:	b928      	cbnz	r0, 800c656 <__multadd+0x5a>
 800c64a:	4602      	mov	r2, r0
 800c64c:	4b0c      	ldr	r3, [pc, #48]	@ (800c680 <__multadd+0x84>)
 800c64e:	480d      	ldr	r0, [pc, #52]	@ (800c684 <__multadd+0x88>)
 800c650:	21ba      	movs	r1, #186	@ 0xba
 800c652:	f000 fd8d 	bl	800d170 <__assert_func>
 800c656:	6922      	ldr	r2, [r4, #16]
 800c658:	3202      	adds	r2, #2
 800c65a:	f104 010c 	add.w	r1, r4, #12
 800c65e:	0092      	lsls	r2, r2, #2
 800c660:	300c      	adds	r0, #12
 800c662:	f7ff f80c 	bl	800b67e <memcpy>
 800c666:	4621      	mov	r1, r4
 800c668:	4638      	mov	r0, r7
 800c66a:	f7ff ffa5 	bl	800c5b8 <_Bfree>
 800c66e:	4644      	mov	r4, r8
 800c670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c674:	3501      	adds	r5, #1
 800c676:	615e      	str	r6, [r3, #20]
 800c678:	6125      	str	r5, [r4, #16]
 800c67a:	4620      	mov	r0, r4
 800c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c680:	0800eafc 	.word	0x0800eafc
 800c684:	0800eb0d 	.word	0x0800eb0d

0800c688 <__hi0bits>:
 800c688:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c68c:	4603      	mov	r3, r0
 800c68e:	bf36      	itet	cc
 800c690:	0403      	lslcc	r3, r0, #16
 800c692:	2000      	movcs	r0, #0
 800c694:	2010      	movcc	r0, #16
 800c696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c69a:	bf3c      	itt	cc
 800c69c:	021b      	lslcc	r3, r3, #8
 800c69e:	3008      	addcc	r0, #8
 800c6a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6a4:	bf3c      	itt	cc
 800c6a6:	011b      	lslcc	r3, r3, #4
 800c6a8:	3004      	addcc	r0, #4
 800c6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ae:	bf3c      	itt	cc
 800c6b0:	009b      	lslcc	r3, r3, #2
 800c6b2:	3002      	addcc	r0, #2
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	db05      	blt.n	800c6c4 <__hi0bits+0x3c>
 800c6b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c6bc:	f100 0001 	add.w	r0, r0, #1
 800c6c0:	bf08      	it	eq
 800c6c2:	2020      	moveq	r0, #32
 800c6c4:	4770      	bx	lr

0800c6c6 <__lo0bits>:
 800c6c6:	6803      	ldr	r3, [r0, #0]
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	f013 0007 	ands.w	r0, r3, #7
 800c6ce:	d00b      	beq.n	800c6e8 <__lo0bits+0x22>
 800c6d0:	07d9      	lsls	r1, r3, #31
 800c6d2:	d421      	bmi.n	800c718 <__lo0bits+0x52>
 800c6d4:	0798      	lsls	r0, r3, #30
 800c6d6:	bf49      	itett	mi
 800c6d8:	085b      	lsrmi	r3, r3, #1
 800c6da:	089b      	lsrpl	r3, r3, #2
 800c6dc:	2001      	movmi	r0, #1
 800c6de:	6013      	strmi	r3, [r2, #0]
 800c6e0:	bf5c      	itt	pl
 800c6e2:	6013      	strpl	r3, [r2, #0]
 800c6e4:	2002      	movpl	r0, #2
 800c6e6:	4770      	bx	lr
 800c6e8:	b299      	uxth	r1, r3
 800c6ea:	b909      	cbnz	r1, 800c6f0 <__lo0bits+0x2a>
 800c6ec:	0c1b      	lsrs	r3, r3, #16
 800c6ee:	2010      	movs	r0, #16
 800c6f0:	b2d9      	uxtb	r1, r3
 800c6f2:	b909      	cbnz	r1, 800c6f8 <__lo0bits+0x32>
 800c6f4:	3008      	adds	r0, #8
 800c6f6:	0a1b      	lsrs	r3, r3, #8
 800c6f8:	0719      	lsls	r1, r3, #28
 800c6fa:	bf04      	itt	eq
 800c6fc:	091b      	lsreq	r3, r3, #4
 800c6fe:	3004      	addeq	r0, #4
 800c700:	0799      	lsls	r1, r3, #30
 800c702:	bf04      	itt	eq
 800c704:	089b      	lsreq	r3, r3, #2
 800c706:	3002      	addeq	r0, #2
 800c708:	07d9      	lsls	r1, r3, #31
 800c70a:	d403      	bmi.n	800c714 <__lo0bits+0x4e>
 800c70c:	085b      	lsrs	r3, r3, #1
 800c70e:	f100 0001 	add.w	r0, r0, #1
 800c712:	d003      	beq.n	800c71c <__lo0bits+0x56>
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	4770      	bx	lr
 800c718:	2000      	movs	r0, #0
 800c71a:	4770      	bx	lr
 800c71c:	2020      	movs	r0, #32
 800c71e:	4770      	bx	lr

0800c720 <__i2b>:
 800c720:	b510      	push	{r4, lr}
 800c722:	460c      	mov	r4, r1
 800c724:	2101      	movs	r1, #1
 800c726:	f7ff ff07 	bl	800c538 <_Balloc>
 800c72a:	4602      	mov	r2, r0
 800c72c:	b928      	cbnz	r0, 800c73a <__i2b+0x1a>
 800c72e:	4b05      	ldr	r3, [pc, #20]	@ (800c744 <__i2b+0x24>)
 800c730:	4805      	ldr	r0, [pc, #20]	@ (800c748 <__i2b+0x28>)
 800c732:	f240 1145 	movw	r1, #325	@ 0x145
 800c736:	f000 fd1b 	bl	800d170 <__assert_func>
 800c73a:	2301      	movs	r3, #1
 800c73c:	6144      	str	r4, [r0, #20]
 800c73e:	6103      	str	r3, [r0, #16]
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	0800eafc 	.word	0x0800eafc
 800c748:	0800eb0d 	.word	0x0800eb0d

0800c74c <__multiply>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	4614      	mov	r4, r2
 800c752:	690a      	ldr	r2, [r1, #16]
 800c754:	6923      	ldr	r3, [r4, #16]
 800c756:	429a      	cmp	r2, r3
 800c758:	bfa8      	it	ge
 800c75a:	4623      	movge	r3, r4
 800c75c:	460f      	mov	r7, r1
 800c75e:	bfa4      	itt	ge
 800c760:	460c      	movge	r4, r1
 800c762:	461f      	movge	r7, r3
 800c764:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c768:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c76c:	68a3      	ldr	r3, [r4, #8]
 800c76e:	6861      	ldr	r1, [r4, #4]
 800c770:	eb0a 0609 	add.w	r6, sl, r9
 800c774:	42b3      	cmp	r3, r6
 800c776:	b085      	sub	sp, #20
 800c778:	bfb8      	it	lt
 800c77a:	3101      	addlt	r1, #1
 800c77c:	f7ff fedc 	bl	800c538 <_Balloc>
 800c780:	b930      	cbnz	r0, 800c790 <__multiply+0x44>
 800c782:	4602      	mov	r2, r0
 800c784:	4b44      	ldr	r3, [pc, #272]	@ (800c898 <__multiply+0x14c>)
 800c786:	4845      	ldr	r0, [pc, #276]	@ (800c89c <__multiply+0x150>)
 800c788:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c78c:	f000 fcf0 	bl	800d170 <__assert_func>
 800c790:	f100 0514 	add.w	r5, r0, #20
 800c794:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c798:	462b      	mov	r3, r5
 800c79a:	2200      	movs	r2, #0
 800c79c:	4543      	cmp	r3, r8
 800c79e:	d321      	bcc.n	800c7e4 <__multiply+0x98>
 800c7a0:	f107 0114 	add.w	r1, r7, #20
 800c7a4:	f104 0214 	add.w	r2, r4, #20
 800c7a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c7ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c7b0:	9302      	str	r3, [sp, #8]
 800c7b2:	1b13      	subs	r3, r2, r4
 800c7b4:	3b15      	subs	r3, #21
 800c7b6:	f023 0303 	bic.w	r3, r3, #3
 800c7ba:	3304      	adds	r3, #4
 800c7bc:	f104 0715 	add.w	r7, r4, #21
 800c7c0:	42ba      	cmp	r2, r7
 800c7c2:	bf38      	it	cc
 800c7c4:	2304      	movcc	r3, #4
 800c7c6:	9301      	str	r3, [sp, #4]
 800c7c8:	9b02      	ldr	r3, [sp, #8]
 800c7ca:	9103      	str	r1, [sp, #12]
 800c7cc:	428b      	cmp	r3, r1
 800c7ce:	d80c      	bhi.n	800c7ea <__multiply+0x9e>
 800c7d0:	2e00      	cmp	r6, #0
 800c7d2:	dd03      	ble.n	800c7dc <__multiply+0x90>
 800c7d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d05b      	beq.n	800c894 <__multiply+0x148>
 800c7dc:	6106      	str	r6, [r0, #16]
 800c7de:	b005      	add	sp, #20
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e4:	f843 2b04 	str.w	r2, [r3], #4
 800c7e8:	e7d8      	b.n	800c79c <__multiply+0x50>
 800c7ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800c7ee:	f1ba 0f00 	cmp.w	sl, #0
 800c7f2:	d024      	beq.n	800c83e <__multiply+0xf2>
 800c7f4:	f104 0e14 	add.w	lr, r4, #20
 800c7f8:	46a9      	mov	r9, r5
 800c7fa:	f04f 0c00 	mov.w	ip, #0
 800c7fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c802:	f8d9 3000 	ldr.w	r3, [r9]
 800c806:	fa1f fb87 	uxth.w	fp, r7
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c810:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c814:	f8d9 7000 	ldr.w	r7, [r9]
 800c818:	4463      	add	r3, ip
 800c81a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c81e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c822:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c826:	b29b      	uxth	r3, r3
 800c828:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c82c:	4572      	cmp	r2, lr
 800c82e:	f849 3b04 	str.w	r3, [r9], #4
 800c832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c836:	d8e2      	bhi.n	800c7fe <__multiply+0xb2>
 800c838:	9b01      	ldr	r3, [sp, #4]
 800c83a:	f845 c003 	str.w	ip, [r5, r3]
 800c83e:	9b03      	ldr	r3, [sp, #12]
 800c840:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c844:	3104      	adds	r1, #4
 800c846:	f1b9 0f00 	cmp.w	r9, #0
 800c84a:	d021      	beq.n	800c890 <__multiply+0x144>
 800c84c:	682b      	ldr	r3, [r5, #0]
 800c84e:	f104 0c14 	add.w	ip, r4, #20
 800c852:	46ae      	mov	lr, r5
 800c854:	f04f 0a00 	mov.w	sl, #0
 800c858:	f8bc b000 	ldrh.w	fp, [ip]
 800c85c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c860:	fb09 770b 	mla	r7, r9, fp, r7
 800c864:	4457      	add	r7, sl
 800c866:	b29b      	uxth	r3, r3
 800c868:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c86c:	f84e 3b04 	str.w	r3, [lr], #4
 800c870:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c878:	f8be 3000 	ldrh.w	r3, [lr]
 800c87c:	fb09 330a 	mla	r3, r9, sl, r3
 800c880:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c884:	4562      	cmp	r2, ip
 800c886:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c88a:	d8e5      	bhi.n	800c858 <__multiply+0x10c>
 800c88c:	9f01      	ldr	r7, [sp, #4]
 800c88e:	51eb      	str	r3, [r5, r7]
 800c890:	3504      	adds	r5, #4
 800c892:	e799      	b.n	800c7c8 <__multiply+0x7c>
 800c894:	3e01      	subs	r6, #1
 800c896:	e79b      	b.n	800c7d0 <__multiply+0x84>
 800c898:	0800eafc 	.word	0x0800eafc
 800c89c:	0800eb0d 	.word	0x0800eb0d

0800c8a0 <__pow5mult>:
 800c8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a4:	4615      	mov	r5, r2
 800c8a6:	f012 0203 	ands.w	r2, r2, #3
 800c8aa:	4607      	mov	r7, r0
 800c8ac:	460e      	mov	r6, r1
 800c8ae:	d007      	beq.n	800c8c0 <__pow5mult+0x20>
 800c8b0:	4c25      	ldr	r4, [pc, #148]	@ (800c948 <__pow5mult+0xa8>)
 800c8b2:	3a01      	subs	r2, #1
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8ba:	f7ff fe9f 	bl	800c5fc <__multadd>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	10ad      	asrs	r5, r5, #2
 800c8c2:	d03d      	beq.n	800c940 <__pow5mult+0xa0>
 800c8c4:	69fc      	ldr	r4, [r7, #28]
 800c8c6:	b97c      	cbnz	r4, 800c8e8 <__pow5mult+0x48>
 800c8c8:	2010      	movs	r0, #16
 800c8ca:	f7ff fd7f 	bl	800c3cc <malloc>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	61f8      	str	r0, [r7, #28]
 800c8d2:	b928      	cbnz	r0, 800c8e0 <__pow5mult+0x40>
 800c8d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c94c <__pow5mult+0xac>)
 800c8d6:	481e      	ldr	r0, [pc, #120]	@ (800c950 <__pow5mult+0xb0>)
 800c8d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c8dc:	f000 fc48 	bl	800d170 <__assert_func>
 800c8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8e4:	6004      	str	r4, [r0, #0]
 800c8e6:	60c4      	str	r4, [r0, #12]
 800c8e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c8ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8f0:	b94c      	cbnz	r4, 800c906 <__pow5mult+0x66>
 800c8f2:	f240 2171 	movw	r1, #625	@ 0x271
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	f7ff ff12 	bl	800c720 <__i2b>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c902:	4604      	mov	r4, r0
 800c904:	6003      	str	r3, [r0, #0]
 800c906:	f04f 0900 	mov.w	r9, #0
 800c90a:	07eb      	lsls	r3, r5, #31
 800c90c:	d50a      	bpl.n	800c924 <__pow5mult+0x84>
 800c90e:	4631      	mov	r1, r6
 800c910:	4622      	mov	r2, r4
 800c912:	4638      	mov	r0, r7
 800c914:	f7ff ff1a 	bl	800c74c <__multiply>
 800c918:	4631      	mov	r1, r6
 800c91a:	4680      	mov	r8, r0
 800c91c:	4638      	mov	r0, r7
 800c91e:	f7ff fe4b 	bl	800c5b8 <_Bfree>
 800c922:	4646      	mov	r6, r8
 800c924:	106d      	asrs	r5, r5, #1
 800c926:	d00b      	beq.n	800c940 <__pow5mult+0xa0>
 800c928:	6820      	ldr	r0, [r4, #0]
 800c92a:	b938      	cbnz	r0, 800c93c <__pow5mult+0x9c>
 800c92c:	4622      	mov	r2, r4
 800c92e:	4621      	mov	r1, r4
 800c930:	4638      	mov	r0, r7
 800c932:	f7ff ff0b 	bl	800c74c <__multiply>
 800c936:	6020      	str	r0, [r4, #0]
 800c938:	f8c0 9000 	str.w	r9, [r0]
 800c93c:	4604      	mov	r4, r0
 800c93e:	e7e4      	b.n	800c90a <__pow5mult+0x6a>
 800c940:	4630      	mov	r0, r6
 800c942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c946:	bf00      	nop
 800c948:	0800eb68 	.word	0x0800eb68
 800c94c:	0800ea8d 	.word	0x0800ea8d
 800c950:	0800eb0d 	.word	0x0800eb0d

0800c954 <__lshift>:
 800c954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c958:	460c      	mov	r4, r1
 800c95a:	6849      	ldr	r1, [r1, #4]
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c962:	68a3      	ldr	r3, [r4, #8]
 800c964:	4607      	mov	r7, r0
 800c966:	4691      	mov	r9, r2
 800c968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c96c:	f108 0601 	add.w	r6, r8, #1
 800c970:	42b3      	cmp	r3, r6
 800c972:	db0b      	blt.n	800c98c <__lshift+0x38>
 800c974:	4638      	mov	r0, r7
 800c976:	f7ff fddf 	bl	800c538 <_Balloc>
 800c97a:	4605      	mov	r5, r0
 800c97c:	b948      	cbnz	r0, 800c992 <__lshift+0x3e>
 800c97e:	4602      	mov	r2, r0
 800c980:	4b28      	ldr	r3, [pc, #160]	@ (800ca24 <__lshift+0xd0>)
 800c982:	4829      	ldr	r0, [pc, #164]	@ (800ca28 <__lshift+0xd4>)
 800c984:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c988:	f000 fbf2 	bl	800d170 <__assert_func>
 800c98c:	3101      	adds	r1, #1
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	e7ee      	b.n	800c970 <__lshift+0x1c>
 800c992:	2300      	movs	r3, #0
 800c994:	f100 0114 	add.w	r1, r0, #20
 800c998:	f100 0210 	add.w	r2, r0, #16
 800c99c:	4618      	mov	r0, r3
 800c99e:	4553      	cmp	r3, sl
 800c9a0:	db33      	blt.n	800ca0a <__lshift+0xb6>
 800c9a2:	6920      	ldr	r0, [r4, #16]
 800c9a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9a8:	f104 0314 	add.w	r3, r4, #20
 800c9ac:	f019 091f 	ands.w	r9, r9, #31
 800c9b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9b8:	d02b      	beq.n	800ca12 <__lshift+0xbe>
 800c9ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c9be:	468a      	mov	sl, r1
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	6818      	ldr	r0, [r3, #0]
 800c9c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c9c8:	4310      	orrs	r0, r2
 800c9ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9d2:	459c      	cmp	ip, r3
 800c9d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9d8:	d8f3      	bhi.n	800c9c2 <__lshift+0x6e>
 800c9da:	ebac 0304 	sub.w	r3, ip, r4
 800c9de:	3b15      	subs	r3, #21
 800c9e0:	f023 0303 	bic.w	r3, r3, #3
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	f104 0015 	add.w	r0, r4, #21
 800c9ea:	4584      	cmp	ip, r0
 800c9ec:	bf38      	it	cc
 800c9ee:	2304      	movcc	r3, #4
 800c9f0:	50ca      	str	r2, [r1, r3]
 800c9f2:	b10a      	cbz	r2, 800c9f8 <__lshift+0xa4>
 800c9f4:	f108 0602 	add.w	r6, r8, #2
 800c9f8:	3e01      	subs	r6, #1
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	612e      	str	r6, [r5, #16]
 800c9fe:	4621      	mov	r1, r4
 800ca00:	f7ff fdda 	bl	800c5b8 <_Bfree>
 800ca04:	4628      	mov	r0, r5
 800ca06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca0e:	3301      	adds	r3, #1
 800ca10:	e7c5      	b.n	800c99e <__lshift+0x4a>
 800ca12:	3904      	subs	r1, #4
 800ca14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca1c:	459c      	cmp	ip, r3
 800ca1e:	d8f9      	bhi.n	800ca14 <__lshift+0xc0>
 800ca20:	e7ea      	b.n	800c9f8 <__lshift+0xa4>
 800ca22:	bf00      	nop
 800ca24:	0800eafc 	.word	0x0800eafc
 800ca28:	0800eb0d 	.word	0x0800eb0d

0800ca2c <__mcmp>:
 800ca2c:	690a      	ldr	r2, [r1, #16]
 800ca2e:	4603      	mov	r3, r0
 800ca30:	6900      	ldr	r0, [r0, #16]
 800ca32:	1a80      	subs	r0, r0, r2
 800ca34:	b530      	push	{r4, r5, lr}
 800ca36:	d10e      	bne.n	800ca56 <__mcmp+0x2a>
 800ca38:	3314      	adds	r3, #20
 800ca3a:	3114      	adds	r1, #20
 800ca3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca4c:	4295      	cmp	r5, r2
 800ca4e:	d003      	beq.n	800ca58 <__mcmp+0x2c>
 800ca50:	d205      	bcs.n	800ca5e <__mcmp+0x32>
 800ca52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca56:	bd30      	pop	{r4, r5, pc}
 800ca58:	42a3      	cmp	r3, r4
 800ca5a:	d3f3      	bcc.n	800ca44 <__mcmp+0x18>
 800ca5c:	e7fb      	b.n	800ca56 <__mcmp+0x2a>
 800ca5e:	2001      	movs	r0, #1
 800ca60:	e7f9      	b.n	800ca56 <__mcmp+0x2a>
	...

0800ca64 <__mdiff>:
 800ca64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca68:	4689      	mov	r9, r1
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	4611      	mov	r1, r2
 800ca6e:	4648      	mov	r0, r9
 800ca70:	4614      	mov	r4, r2
 800ca72:	f7ff ffdb 	bl	800ca2c <__mcmp>
 800ca76:	1e05      	subs	r5, r0, #0
 800ca78:	d112      	bne.n	800caa0 <__mdiff+0x3c>
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f7ff fd5b 	bl	800c538 <_Balloc>
 800ca82:	4602      	mov	r2, r0
 800ca84:	b928      	cbnz	r0, 800ca92 <__mdiff+0x2e>
 800ca86:	4b3f      	ldr	r3, [pc, #252]	@ (800cb84 <__mdiff+0x120>)
 800ca88:	f240 2137 	movw	r1, #567	@ 0x237
 800ca8c:	483e      	ldr	r0, [pc, #248]	@ (800cb88 <__mdiff+0x124>)
 800ca8e:	f000 fb6f 	bl	800d170 <__assert_func>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca98:	4610      	mov	r0, r2
 800ca9a:	b003      	add	sp, #12
 800ca9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa0:	bfbc      	itt	lt
 800caa2:	464b      	movlt	r3, r9
 800caa4:	46a1      	movlt	r9, r4
 800caa6:	4630      	mov	r0, r6
 800caa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800caac:	bfba      	itte	lt
 800caae:	461c      	movlt	r4, r3
 800cab0:	2501      	movlt	r5, #1
 800cab2:	2500      	movge	r5, #0
 800cab4:	f7ff fd40 	bl	800c538 <_Balloc>
 800cab8:	4602      	mov	r2, r0
 800caba:	b918      	cbnz	r0, 800cac4 <__mdiff+0x60>
 800cabc:	4b31      	ldr	r3, [pc, #196]	@ (800cb84 <__mdiff+0x120>)
 800cabe:	f240 2145 	movw	r1, #581	@ 0x245
 800cac2:	e7e3      	b.n	800ca8c <__mdiff+0x28>
 800cac4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cac8:	6926      	ldr	r6, [r4, #16]
 800caca:	60c5      	str	r5, [r0, #12]
 800cacc:	f109 0310 	add.w	r3, r9, #16
 800cad0:	f109 0514 	add.w	r5, r9, #20
 800cad4:	f104 0e14 	add.w	lr, r4, #20
 800cad8:	f100 0b14 	add.w	fp, r0, #20
 800cadc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cae0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	46d9      	mov	r9, fp
 800cae8:	f04f 0c00 	mov.w	ip, #0
 800caec:	9b01      	ldr	r3, [sp, #4]
 800caee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800caf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	fa1f f38a 	uxth.w	r3, sl
 800cafc:	4619      	mov	r1, r3
 800cafe:	b283      	uxth	r3, r0
 800cb00:	1acb      	subs	r3, r1, r3
 800cb02:	0c00      	lsrs	r0, r0, #16
 800cb04:	4463      	add	r3, ip
 800cb06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb14:	4576      	cmp	r6, lr
 800cb16:	f849 3b04 	str.w	r3, [r9], #4
 800cb1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb1e:	d8e5      	bhi.n	800caec <__mdiff+0x88>
 800cb20:	1b33      	subs	r3, r6, r4
 800cb22:	3b15      	subs	r3, #21
 800cb24:	f023 0303 	bic.w	r3, r3, #3
 800cb28:	3415      	adds	r4, #21
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	42a6      	cmp	r6, r4
 800cb2e:	bf38      	it	cc
 800cb30:	2304      	movcc	r3, #4
 800cb32:	441d      	add	r5, r3
 800cb34:	445b      	add	r3, fp
 800cb36:	461e      	mov	r6, r3
 800cb38:	462c      	mov	r4, r5
 800cb3a:	4544      	cmp	r4, r8
 800cb3c:	d30e      	bcc.n	800cb5c <__mdiff+0xf8>
 800cb3e:	f108 0103 	add.w	r1, r8, #3
 800cb42:	1b49      	subs	r1, r1, r5
 800cb44:	f021 0103 	bic.w	r1, r1, #3
 800cb48:	3d03      	subs	r5, #3
 800cb4a:	45a8      	cmp	r8, r5
 800cb4c:	bf38      	it	cc
 800cb4e:	2100      	movcc	r1, #0
 800cb50:	440b      	add	r3, r1
 800cb52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb56:	b191      	cbz	r1, 800cb7e <__mdiff+0x11a>
 800cb58:	6117      	str	r7, [r2, #16]
 800cb5a:	e79d      	b.n	800ca98 <__mdiff+0x34>
 800cb5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cb60:	46e6      	mov	lr, ip
 800cb62:	0c08      	lsrs	r0, r1, #16
 800cb64:	fa1c fc81 	uxtah	ip, ip, r1
 800cb68:	4471      	add	r1, lr
 800cb6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cb6e:	b289      	uxth	r1, r1
 800cb70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb74:	f846 1b04 	str.w	r1, [r6], #4
 800cb78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb7c:	e7dd      	b.n	800cb3a <__mdiff+0xd6>
 800cb7e:	3f01      	subs	r7, #1
 800cb80:	e7e7      	b.n	800cb52 <__mdiff+0xee>
 800cb82:	bf00      	nop
 800cb84:	0800eafc 	.word	0x0800eafc
 800cb88:	0800eb0d 	.word	0x0800eb0d

0800cb8c <__d2b>:
 800cb8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb90:	460f      	mov	r7, r1
 800cb92:	2101      	movs	r1, #1
 800cb94:	ec59 8b10 	vmov	r8, r9, d0
 800cb98:	4616      	mov	r6, r2
 800cb9a:	f7ff fccd 	bl	800c538 <_Balloc>
 800cb9e:	4604      	mov	r4, r0
 800cba0:	b930      	cbnz	r0, 800cbb0 <__d2b+0x24>
 800cba2:	4602      	mov	r2, r0
 800cba4:	4b23      	ldr	r3, [pc, #140]	@ (800cc34 <__d2b+0xa8>)
 800cba6:	4824      	ldr	r0, [pc, #144]	@ (800cc38 <__d2b+0xac>)
 800cba8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cbac:	f000 fae0 	bl	800d170 <__assert_func>
 800cbb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbb8:	b10d      	cbz	r5, 800cbbe <__d2b+0x32>
 800cbba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	f1b8 0300 	subs.w	r3, r8, #0
 800cbc4:	d023      	beq.n	800cc0e <__d2b+0x82>
 800cbc6:	4668      	mov	r0, sp
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	f7ff fd7c 	bl	800c6c6 <__lo0bits>
 800cbce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbd2:	b1d0      	cbz	r0, 800cc0a <__d2b+0x7e>
 800cbd4:	f1c0 0320 	rsb	r3, r0, #32
 800cbd8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbdc:	430b      	orrs	r3, r1
 800cbde:	40c2      	lsrs	r2, r0
 800cbe0:	6163      	str	r3, [r4, #20]
 800cbe2:	9201      	str	r2, [sp, #4]
 800cbe4:	9b01      	ldr	r3, [sp, #4]
 800cbe6:	61a3      	str	r3, [r4, #24]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	bf0c      	ite	eq
 800cbec:	2201      	moveq	r2, #1
 800cbee:	2202      	movne	r2, #2
 800cbf0:	6122      	str	r2, [r4, #16]
 800cbf2:	b1a5      	cbz	r5, 800cc1e <__d2b+0x92>
 800cbf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbf8:	4405      	add	r5, r0
 800cbfa:	603d      	str	r5, [r7, #0]
 800cbfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc00:	6030      	str	r0, [r6, #0]
 800cc02:	4620      	mov	r0, r4
 800cc04:	b003      	add	sp, #12
 800cc06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc0a:	6161      	str	r1, [r4, #20]
 800cc0c:	e7ea      	b.n	800cbe4 <__d2b+0x58>
 800cc0e:	a801      	add	r0, sp, #4
 800cc10:	f7ff fd59 	bl	800c6c6 <__lo0bits>
 800cc14:	9b01      	ldr	r3, [sp, #4]
 800cc16:	6163      	str	r3, [r4, #20]
 800cc18:	3020      	adds	r0, #32
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	e7e8      	b.n	800cbf0 <__d2b+0x64>
 800cc1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc26:	6038      	str	r0, [r7, #0]
 800cc28:	6918      	ldr	r0, [r3, #16]
 800cc2a:	f7ff fd2d 	bl	800c688 <__hi0bits>
 800cc2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc32:	e7e5      	b.n	800cc00 <__d2b+0x74>
 800cc34:	0800eafc 	.word	0x0800eafc
 800cc38:	0800eb0d 	.word	0x0800eb0d

0800cc3c <_malloc_usable_size_r>:
 800cc3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc40:	1f18      	subs	r0, r3, #4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bfbc      	itt	lt
 800cc46:	580b      	ldrlt	r3, [r1, r0]
 800cc48:	18c0      	addlt	r0, r0, r3
 800cc4a:	4770      	bx	lr

0800cc4c <__sfputc_r>:
 800cc4c:	6893      	ldr	r3, [r2, #8]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	b410      	push	{r4}
 800cc54:	6093      	str	r3, [r2, #8]
 800cc56:	da08      	bge.n	800cc6a <__sfputc_r+0x1e>
 800cc58:	6994      	ldr	r4, [r2, #24]
 800cc5a:	42a3      	cmp	r3, r4
 800cc5c:	db01      	blt.n	800cc62 <__sfputc_r+0x16>
 800cc5e:	290a      	cmp	r1, #10
 800cc60:	d103      	bne.n	800cc6a <__sfputc_r+0x1e>
 800cc62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc66:	f000 b9df 	b.w	800d028 <__swbuf_r>
 800cc6a:	6813      	ldr	r3, [r2, #0]
 800cc6c:	1c58      	adds	r0, r3, #1
 800cc6e:	6010      	str	r0, [r2, #0]
 800cc70:	7019      	strb	r1, [r3, #0]
 800cc72:	4608      	mov	r0, r1
 800cc74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <__sfputs_r>:
 800cc7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7c:	4606      	mov	r6, r0
 800cc7e:	460f      	mov	r7, r1
 800cc80:	4614      	mov	r4, r2
 800cc82:	18d5      	adds	r5, r2, r3
 800cc84:	42ac      	cmp	r4, r5
 800cc86:	d101      	bne.n	800cc8c <__sfputs_r+0x12>
 800cc88:	2000      	movs	r0, #0
 800cc8a:	e007      	b.n	800cc9c <__sfputs_r+0x22>
 800cc8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc90:	463a      	mov	r2, r7
 800cc92:	4630      	mov	r0, r6
 800cc94:	f7ff ffda 	bl	800cc4c <__sfputc_r>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	d1f3      	bne.n	800cc84 <__sfputs_r+0xa>
 800cc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cca0 <_vfiprintf_r>:
 800cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca4:	460d      	mov	r5, r1
 800cca6:	b09d      	sub	sp, #116	@ 0x74
 800cca8:	4614      	mov	r4, r2
 800ccaa:	4698      	mov	r8, r3
 800ccac:	4606      	mov	r6, r0
 800ccae:	b118      	cbz	r0, 800ccb8 <_vfiprintf_r+0x18>
 800ccb0:	6a03      	ldr	r3, [r0, #32]
 800ccb2:	b90b      	cbnz	r3, 800ccb8 <_vfiprintf_r+0x18>
 800ccb4:	f7fe fbd8 	bl	800b468 <__sinit>
 800ccb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccba:	07d9      	lsls	r1, r3, #31
 800ccbc:	d405      	bmi.n	800ccca <_vfiprintf_r+0x2a>
 800ccbe:	89ab      	ldrh	r3, [r5, #12]
 800ccc0:	059a      	lsls	r2, r3, #22
 800ccc2:	d402      	bmi.n	800ccca <_vfiprintf_r+0x2a>
 800ccc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccc6:	f7fe fcd8 	bl	800b67a <__retarget_lock_acquire_recursive>
 800ccca:	89ab      	ldrh	r3, [r5, #12]
 800cccc:	071b      	lsls	r3, r3, #28
 800ccce:	d501      	bpl.n	800ccd4 <_vfiprintf_r+0x34>
 800ccd0:	692b      	ldr	r3, [r5, #16]
 800ccd2:	b99b      	cbnz	r3, 800ccfc <_vfiprintf_r+0x5c>
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f000 f9e4 	bl	800d0a4 <__swsetup_r>
 800ccdc:	b170      	cbz	r0, 800ccfc <_vfiprintf_r+0x5c>
 800ccde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cce0:	07dc      	lsls	r4, r3, #31
 800cce2:	d504      	bpl.n	800ccee <_vfiprintf_r+0x4e>
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cce8:	b01d      	add	sp, #116	@ 0x74
 800ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccee:	89ab      	ldrh	r3, [r5, #12]
 800ccf0:	0598      	lsls	r0, r3, #22
 800ccf2:	d4f7      	bmi.n	800cce4 <_vfiprintf_r+0x44>
 800ccf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccf6:	f7fe fcc1 	bl	800b67c <__retarget_lock_release_recursive>
 800ccfa:	e7f3      	b.n	800cce4 <_vfiprintf_r+0x44>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd00:	2320      	movs	r3, #32
 800cd02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd06:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd0a:	2330      	movs	r3, #48	@ 0x30
 800cd0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cebc <_vfiprintf_r+0x21c>
 800cd10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd14:	f04f 0901 	mov.w	r9, #1
 800cd18:	4623      	mov	r3, r4
 800cd1a:	469a      	mov	sl, r3
 800cd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd20:	b10a      	cbz	r2, 800cd26 <_vfiprintf_r+0x86>
 800cd22:	2a25      	cmp	r2, #37	@ 0x25
 800cd24:	d1f9      	bne.n	800cd1a <_vfiprintf_r+0x7a>
 800cd26:	ebba 0b04 	subs.w	fp, sl, r4
 800cd2a:	d00b      	beq.n	800cd44 <_vfiprintf_r+0xa4>
 800cd2c:	465b      	mov	r3, fp
 800cd2e:	4622      	mov	r2, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	4630      	mov	r0, r6
 800cd34:	f7ff ffa1 	bl	800cc7a <__sfputs_r>
 800cd38:	3001      	adds	r0, #1
 800cd3a:	f000 80a7 	beq.w	800ce8c <_vfiprintf_r+0x1ec>
 800cd3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd40:	445a      	add	r2, fp
 800cd42:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd44:	f89a 3000 	ldrb.w	r3, [sl]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 809f 	beq.w	800ce8c <_vfiprintf_r+0x1ec>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd58:	f10a 0a01 	add.w	sl, sl, #1
 800cd5c:	9304      	str	r3, [sp, #16]
 800cd5e:	9307      	str	r3, [sp, #28]
 800cd60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd64:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd66:	4654      	mov	r4, sl
 800cd68:	2205      	movs	r2, #5
 800cd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6e:	4853      	ldr	r0, [pc, #332]	@ (800cebc <_vfiprintf_r+0x21c>)
 800cd70:	f7f3 fa2e 	bl	80001d0 <memchr>
 800cd74:	9a04      	ldr	r2, [sp, #16]
 800cd76:	b9d8      	cbnz	r0, 800cdb0 <_vfiprintf_r+0x110>
 800cd78:	06d1      	lsls	r1, r2, #27
 800cd7a:	bf44      	itt	mi
 800cd7c:	2320      	movmi	r3, #32
 800cd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd82:	0713      	lsls	r3, r2, #28
 800cd84:	bf44      	itt	mi
 800cd86:	232b      	movmi	r3, #43	@ 0x2b
 800cd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd90:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd92:	d015      	beq.n	800cdc0 <_vfiprintf_r+0x120>
 800cd94:	9a07      	ldr	r2, [sp, #28]
 800cd96:	4654      	mov	r4, sl
 800cd98:	2000      	movs	r0, #0
 800cd9a:	f04f 0c0a 	mov.w	ip, #10
 800cd9e:	4621      	mov	r1, r4
 800cda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cda4:	3b30      	subs	r3, #48	@ 0x30
 800cda6:	2b09      	cmp	r3, #9
 800cda8:	d94b      	bls.n	800ce42 <_vfiprintf_r+0x1a2>
 800cdaa:	b1b0      	cbz	r0, 800cdda <_vfiprintf_r+0x13a>
 800cdac:	9207      	str	r2, [sp, #28]
 800cdae:	e014      	b.n	800cdda <_vfiprintf_r+0x13a>
 800cdb0:	eba0 0308 	sub.w	r3, r0, r8
 800cdb4:	fa09 f303 	lsl.w	r3, r9, r3
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	9304      	str	r3, [sp, #16]
 800cdbc:	46a2      	mov	sl, r4
 800cdbe:	e7d2      	b.n	800cd66 <_vfiprintf_r+0xc6>
 800cdc0:	9b03      	ldr	r3, [sp, #12]
 800cdc2:	1d19      	adds	r1, r3, #4
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	9103      	str	r1, [sp, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	bfbb      	ittet	lt
 800cdcc:	425b      	neglt	r3, r3
 800cdce:	f042 0202 	orrlt.w	r2, r2, #2
 800cdd2:	9307      	strge	r3, [sp, #28]
 800cdd4:	9307      	strlt	r3, [sp, #28]
 800cdd6:	bfb8      	it	lt
 800cdd8:	9204      	strlt	r2, [sp, #16]
 800cdda:	7823      	ldrb	r3, [r4, #0]
 800cddc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdde:	d10a      	bne.n	800cdf6 <_vfiprintf_r+0x156>
 800cde0:	7863      	ldrb	r3, [r4, #1]
 800cde2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cde4:	d132      	bne.n	800ce4c <_vfiprintf_r+0x1ac>
 800cde6:	9b03      	ldr	r3, [sp, #12]
 800cde8:	1d1a      	adds	r2, r3, #4
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	9203      	str	r2, [sp, #12]
 800cdee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdf2:	3402      	adds	r4, #2
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cecc <_vfiprintf_r+0x22c>
 800cdfa:	7821      	ldrb	r1, [r4, #0]
 800cdfc:	2203      	movs	r2, #3
 800cdfe:	4650      	mov	r0, sl
 800ce00:	f7f3 f9e6 	bl	80001d0 <memchr>
 800ce04:	b138      	cbz	r0, 800ce16 <_vfiprintf_r+0x176>
 800ce06:	9b04      	ldr	r3, [sp, #16]
 800ce08:	eba0 000a 	sub.w	r0, r0, sl
 800ce0c:	2240      	movs	r2, #64	@ 0x40
 800ce0e:	4082      	lsls	r2, r0
 800ce10:	4313      	orrs	r3, r2
 800ce12:	3401      	adds	r4, #1
 800ce14:	9304      	str	r3, [sp, #16]
 800ce16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce1a:	4829      	ldr	r0, [pc, #164]	@ (800cec0 <_vfiprintf_r+0x220>)
 800ce1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce20:	2206      	movs	r2, #6
 800ce22:	f7f3 f9d5 	bl	80001d0 <memchr>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d03f      	beq.n	800ceaa <_vfiprintf_r+0x20a>
 800ce2a:	4b26      	ldr	r3, [pc, #152]	@ (800cec4 <_vfiprintf_r+0x224>)
 800ce2c:	bb1b      	cbnz	r3, 800ce76 <_vfiprintf_r+0x1d6>
 800ce2e:	9b03      	ldr	r3, [sp, #12]
 800ce30:	3307      	adds	r3, #7
 800ce32:	f023 0307 	bic.w	r3, r3, #7
 800ce36:	3308      	adds	r3, #8
 800ce38:	9303      	str	r3, [sp, #12]
 800ce3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce3c:	443b      	add	r3, r7
 800ce3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce40:	e76a      	b.n	800cd18 <_vfiprintf_r+0x78>
 800ce42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce46:	460c      	mov	r4, r1
 800ce48:	2001      	movs	r0, #1
 800ce4a:	e7a8      	b.n	800cd9e <_vfiprintf_r+0xfe>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	3401      	adds	r4, #1
 800ce50:	9305      	str	r3, [sp, #20]
 800ce52:	4619      	mov	r1, r3
 800ce54:	f04f 0c0a 	mov.w	ip, #10
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce5e:	3a30      	subs	r2, #48	@ 0x30
 800ce60:	2a09      	cmp	r2, #9
 800ce62:	d903      	bls.n	800ce6c <_vfiprintf_r+0x1cc>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0c6      	beq.n	800cdf6 <_vfiprintf_r+0x156>
 800ce68:	9105      	str	r1, [sp, #20]
 800ce6a:	e7c4      	b.n	800cdf6 <_vfiprintf_r+0x156>
 800ce6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce70:	4604      	mov	r4, r0
 800ce72:	2301      	movs	r3, #1
 800ce74:	e7f0      	b.n	800ce58 <_vfiprintf_r+0x1b8>
 800ce76:	ab03      	add	r3, sp, #12
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	462a      	mov	r2, r5
 800ce7c:	4b12      	ldr	r3, [pc, #72]	@ (800cec8 <_vfiprintf_r+0x228>)
 800ce7e:	a904      	add	r1, sp, #16
 800ce80:	4630      	mov	r0, r6
 800ce82:	f7fd fead 	bl	800abe0 <_printf_float>
 800ce86:	4607      	mov	r7, r0
 800ce88:	1c78      	adds	r0, r7, #1
 800ce8a:	d1d6      	bne.n	800ce3a <_vfiprintf_r+0x19a>
 800ce8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce8e:	07d9      	lsls	r1, r3, #31
 800ce90:	d405      	bmi.n	800ce9e <_vfiprintf_r+0x1fe>
 800ce92:	89ab      	ldrh	r3, [r5, #12]
 800ce94:	059a      	lsls	r2, r3, #22
 800ce96:	d402      	bmi.n	800ce9e <_vfiprintf_r+0x1fe>
 800ce98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce9a:	f7fe fbef 	bl	800b67c <__retarget_lock_release_recursive>
 800ce9e:	89ab      	ldrh	r3, [r5, #12]
 800cea0:	065b      	lsls	r3, r3, #25
 800cea2:	f53f af1f 	bmi.w	800cce4 <_vfiprintf_r+0x44>
 800cea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cea8:	e71e      	b.n	800cce8 <_vfiprintf_r+0x48>
 800ceaa:	ab03      	add	r3, sp, #12
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	462a      	mov	r2, r5
 800ceb0:	4b05      	ldr	r3, [pc, #20]	@ (800cec8 <_vfiprintf_r+0x228>)
 800ceb2:	a904      	add	r1, sp, #16
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f7fe f92b 	bl	800b110 <_printf_i>
 800ceba:	e7e4      	b.n	800ce86 <_vfiprintf_r+0x1e6>
 800cebc:	0800ec68 	.word	0x0800ec68
 800cec0:	0800ec72 	.word	0x0800ec72
 800cec4:	0800abe1 	.word	0x0800abe1
 800cec8:	0800cc7b 	.word	0x0800cc7b
 800cecc:	0800ec6e 	.word	0x0800ec6e

0800ced0 <__sflush_r>:
 800ced0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ced4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced8:	0716      	lsls	r6, r2, #28
 800ceda:	4605      	mov	r5, r0
 800cedc:	460c      	mov	r4, r1
 800cede:	d454      	bmi.n	800cf8a <__sflush_r+0xba>
 800cee0:	684b      	ldr	r3, [r1, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	dc02      	bgt.n	800ceec <__sflush_r+0x1c>
 800cee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	dd48      	ble.n	800cf7e <__sflush_r+0xae>
 800ceec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ceee:	2e00      	cmp	r6, #0
 800cef0:	d045      	beq.n	800cf7e <__sflush_r+0xae>
 800cef2:	2300      	movs	r3, #0
 800cef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cef8:	682f      	ldr	r7, [r5, #0]
 800cefa:	6a21      	ldr	r1, [r4, #32]
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	d030      	beq.n	800cf62 <__sflush_r+0x92>
 800cf00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	0759      	lsls	r1, r3, #29
 800cf06:	d505      	bpl.n	800cf14 <__sflush_r+0x44>
 800cf08:	6863      	ldr	r3, [r4, #4]
 800cf0a:	1ad2      	subs	r2, r2, r3
 800cf0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf0e:	b10b      	cbz	r3, 800cf14 <__sflush_r+0x44>
 800cf10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf12:	1ad2      	subs	r2, r2, r3
 800cf14:	2300      	movs	r3, #0
 800cf16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf18:	6a21      	ldr	r1, [r4, #32]
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b0      	blx	r6
 800cf1e:	1c43      	adds	r3, r0, #1
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	d106      	bne.n	800cf32 <__sflush_r+0x62>
 800cf24:	6829      	ldr	r1, [r5, #0]
 800cf26:	291d      	cmp	r1, #29
 800cf28:	d82b      	bhi.n	800cf82 <__sflush_r+0xb2>
 800cf2a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfd4 <__sflush_r+0x104>)
 800cf2c:	410a      	asrs	r2, r1
 800cf2e:	07d6      	lsls	r6, r2, #31
 800cf30:	d427      	bmi.n	800cf82 <__sflush_r+0xb2>
 800cf32:	2200      	movs	r2, #0
 800cf34:	6062      	str	r2, [r4, #4]
 800cf36:	04d9      	lsls	r1, r3, #19
 800cf38:	6922      	ldr	r2, [r4, #16]
 800cf3a:	6022      	str	r2, [r4, #0]
 800cf3c:	d504      	bpl.n	800cf48 <__sflush_r+0x78>
 800cf3e:	1c42      	adds	r2, r0, #1
 800cf40:	d101      	bne.n	800cf46 <__sflush_r+0x76>
 800cf42:	682b      	ldr	r3, [r5, #0]
 800cf44:	b903      	cbnz	r3, 800cf48 <__sflush_r+0x78>
 800cf46:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf4a:	602f      	str	r7, [r5, #0]
 800cf4c:	b1b9      	cbz	r1, 800cf7e <__sflush_r+0xae>
 800cf4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf52:	4299      	cmp	r1, r3
 800cf54:	d002      	beq.n	800cf5c <__sflush_r+0x8c>
 800cf56:	4628      	mov	r0, r5
 800cf58:	f7ff f9ee 	bl	800c338 <_free_r>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf60:	e00d      	b.n	800cf7e <__sflush_r+0xae>
 800cf62:	2301      	movs	r3, #1
 800cf64:	4628      	mov	r0, r5
 800cf66:	47b0      	blx	r6
 800cf68:	4602      	mov	r2, r0
 800cf6a:	1c50      	adds	r0, r2, #1
 800cf6c:	d1c9      	bne.n	800cf02 <__sflush_r+0x32>
 800cf6e:	682b      	ldr	r3, [r5, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0c6      	beq.n	800cf02 <__sflush_r+0x32>
 800cf74:	2b1d      	cmp	r3, #29
 800cf76:	d001      	beq.n	800cf7c <__sflush_r+0xac>
 800cf78:	2b16      	cmp	r3, #22
 800cf7a:	d11e      	bne.n	800cfba <__sflush_r+0xea>
 800cf7c:	602f      	str	r7, [r5, #0]
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e022      	b.n	800cfc8 <__sflush_r+0xf8>
 800cf82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf86:	b21b      	sxth	r3, r3
 800cf88:	e01b      	b.n	800cfc2 <__sflush_r+0xf2>
 800cf8a:	690f      	ldr	r7, [r1, #16]
 800cf8c:	2f00      	cmp	r7, #0
 800cf8e:	d0f6      	beq.n	800cf7e <__sflush_r+0xae>
 800cf90:	0793      	lsls	r3, r2, #30
 800cf92:	680e      	ldr	r6, [r1, #0]
 800cf94:	bf08      	it	eq
 800cf96:	694b      	ldreq	r3, [r1, #20]
 800cf98:	600f      	str	r7, [r1, #0]
 800cf9a:	bf18      	it	ne
 800cf9c:	2300      	movne	r3, #0
 800cf9e:	eba6 0807 	sub.w	r8, r6, r7
 800cfa2:	608b      	str	r3, [r1, #8]
 800cfa4:	f1b8 0f00 	cmp.w	r8, #0
 800cfa8:	dde9      	ble.n	800cf7e <__sflush_r+0xae>
 800cfaa:	6a21      	ldr	r1, [r4, #32]
 800cfac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cfae:	4643      	mov	r3, r8
 800cfb0:	463a      	mov	r2, r7
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	47b0      	blx	r6
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	dc08      	bgt.n	800cfcc <__sflush_r+0xfc>
 800cfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfc2:	81a3      	strh	r3, [r4, #12]
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfcc:	4407      	add	r7, r0
 800cfce:	eba8 0800 	sub.w	r8, r8, r0
 800cfd2:	e7e7      	b.n	800cfa4 <__sflush_r+0xd4>
 800cfd4:	dfbffffe 	.word	0xdfbffffe

0800cfd8 <_fflush_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	690b      	ldr	r3, [r1, #16]
 800cfdc:	4605      	mov	r5, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	b913      	cbnz	r3, 800cfe8 <_fflush_r+0x10>
 800cfe2:	2500      	movs	r5, #0
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	b118      	cbz	r0, 800cff2 <_fflush_r+0x1a>
 800cfea:	6a03      	ldr	r3, [r0, #32]
 800cfec:	b90b      	cbnz	r3, 800cff2 <_fflush_r+0x1a>
 800cfee:	f7fe fa3b 	bl	800b468 <__sinit>
 800cff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0f3      	beq.n	800cfe2 <_fflush_r+0xa>
 800cffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cffc:	07d0      	lsls	r0, r2, #31
 800cffe:	d404      	bmi.n	800d00a <_fflush_r+0x32>
 800d000:	0599      	lsls	r1, r3, #22
 800d002:	d402      	bmi.n	800d00a <_fflush_r+0x32>
 800d004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d006:	f7fe fb38 	bl	800b67a <__retarget_lock_acquire_recursive>
 800d00a:	4628      	mov	r0, r5
 800d00c:	4621      	mov	r1, r4
 800d00e:	f7ff ff5f 	bl	800ced0 <__sflush_r>
 800d012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d014:	07da      	lsls	r2, r3, #31
 800d016:	4605      	mov	r5, r0
 800d018:	d4e4      	bmi.n	800cfe4 <_fflush_r+0xc>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	059b      	lsls	r3, r3, #22
 800d01e:	d4e1      	bmi.n	800cfe4 <_fflush_r+0xc>
 800d020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d022:	f7fe fb2b 	bl	800b67c <__retarget_lock_release_recursive>
 800d026:	e7dd      	b.n	800cfe4 <_fflush_r+0xc>

0800d028 <__swbuf_r>:
 800d028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02a:	460e      	mov	r6, r1
 800d02c:	4614      	mov	r4, r2
 800d02e:	4605      	mov	r5, r0
 800d030:	b118      	cbz	r0, 800d03a <__swbuf_r+0x12>
 800d032:	6a03      	ldr	r3, [r0, #32]
 800d034:	b90b      	cbnz	r3, 800d03a <__swbuf_r+0x12>
 800d036:	f7fe fa17 	bl	800b468 <__sinit>
 800d03a:	69a3      	ldr	r3, [r4, #24]
 800d03c:	60a3      	str	r3, [r4, #8]
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	071a      	lsls	r2, r3, #28
 800d042:	d501      	bpl.n	800d048 <__swbuf_r+0x20>
 800d044:	6923      	ldr	r3, [r4, #16]
 800d046:	b943      	cbnz	r3, 800d05a <__swbuf_r+0x32>
 800d048:	4621      	mov	r1, r4
 800d04a:	4628      	mov	r0, r5
 800d04c:	f000 f82a 	bl	800d0a4 <__swsetup_r>
 800d050:	b118      	cbz	r0, 800d05a <__swbuf_r+0x32>
 800d052:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d056:	4638      	mov	r0, r7
 800d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	6922      	ldr	r2, [r4, #16]
 800d05e:	1a98      	subs	r0, r3, r2
 800d060:	6963      	ldr	r3, [r4, #20]
 800d062:	b2f6      	uxtb	r6, r6
 800d064:	4283      	cmp	r3, r0
 800d066:	4637      	mov	r7, r6
 800d068:	dc05      	bgt.n	800d076 <__swbuf_r+0x4e>
 800d06a:	4621      	mov	r1, r4
 800d06c:	4628      	mov	r0, r5
 800d06e:	f7ff ffb3 	bl	800cfd8 <_fflush_r>
 800d072:	2800      	cmp	r0, #0
 800d074:	d1ed      	bne.n	800d052 <__swbuf_r+0x2a>
 800d076:	68a3      	ldr	r3, [r4, #8]
 800d078:	3b01      	subs	r3, #1
 800d07a:	60a3      	str	r3, [r4, #8]
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	6022      	str	r2, [r4, #0]
 800d082:	701e      	strb	r6, [r3, #0]
 800d084:	6962      	ldr	r2, [r4, #20]
 800d086:	1c43      	adds	r3, r0, #1
 800d088:	429a      	cmp	r2, r3
 800d08a:	d004      	beq.n	800d096 <__swbuf_r+0x6e>
 800d08c:	89a3      	ldrh	r3, [r4, #12]
 800d08e:	07db      	lsls	r3, r3, #31
 800d090:	d5e1      	bpl.n	800d056 <__swbuf_r+0x2e>
 800d092:	2e0a      	cmp	r6, #10
 800d094:	d1df      	bne.n	800d056 <__swbuf_r+0x2e>
 800d096:	4621      	mov	r1, r4
 800d098:	4628      	mov	r0, r5
 800d09a:	f7ff ff9d 	bl	800cfd8 <_fflush_r>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d0d9      	beq.n	800d056 <__swbuf_r+0x2e>
 800d0a2:	e7d6      	b.n	800d052 <__swbuf_r+0x2a>

0800d0a4 <__swsetup_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4b29      	ldr	r3, [pc, #164]	@ (800d14c <__swsetup_r+0xa8>)
 800d0a8:	4605      	mov	r5, r0
 800d0aa:	6818      	ldr	r0, [r3, #0]
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	b118      	cbz	r0, 800d0b8 <__swsetup_r+0x14>
 800d0b0:	6a03      	ldr	r3, [r0, #32]
 800d0b2:	b90b      	cbnz	r3, 800d0b8 <__swsetup_r+0x14>
 800d0b4:	f7fe f9d8 	bl	800b468 <__sinit>
 800d0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0bc:	0719      	lsls	r1, r3, #28
 800d0be:	d422      	bmi.n	800d106 <__swsetup_r+0x62>
 800d0c0:	06da      	lsls	r2, r3, #27
 800d0c2:	d407      	bmi.n	800d0d4 <__swsetup_r+0x30>
 800d0c4:	2209      	movs	r2, #9
 800d0c6:	602a      	str	r2, [r5, #0]
 800d0c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0cc:	81a3      	strh	r3, [r4, #12]
 800d0ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0d2:	e033      	b.n	800d13c <__swsetup_r+0x98>
 800d0d4:	0758      	lsls	r0, r3, #29
 800d0d6:	d512      	bpl.n	800d0fe <__swsetup_r+0x5a>
 800d0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0da:	b141      	cbz	r1, 800d0ee <__swsetup_r+0x4a>
 800d0dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0e0:	4299      	cmp	r1, r3
 800d0e2:	d002      	beq.n	800d0ea <__swsetup_r+0x46>
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f7ff f927 	bl	800c338 <_free_r>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0f4:	81a3      	strh	r3, [r4, #12]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	6063      	str	r3, [r4, #4]
 800d0fa:	6923      	ldr	r3, [r4, #16]
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	f043 0308 	orr.w	r3, r3, #8
 800d104:	81a3      	strh	r3, [r4, #12]
 800d106:	6923      	ldr	r3, [r4, #16]
 800d108:	b94b      	cbnz	r3, 800d11e <__swsetup_r+0x7a>
 800d10a:	89a3      	ldrh	r3, [r4, #12]
 800d10c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d114:	d003      	beq.n	800d11e <__swsetup_r+0x7a>
 800d116:	4621      	mov	r1, r4
 800d118:	4628      	mov	r0, r5
 800d11a:	f000 f8b3 	bl	800d284 <__smakebuf_r>
 800d11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d122:	f013 0201 	ands.w	r2, r3, #1
 800d126:	d00a      	beq.n	800d13e <__swsetup_r+0x9a>
 800d128:	2200      	movs	r2, #0
 800d12a:	60a2      	str	r2, [r4, #8]
 800d12c:	6962      	ldr	r2, [r4, #20]
 800d12e:	4252      	negs	r2, r2
 800d130:	61a2      	str	r2, [r4, #24]
 800d132:	6922      	ldr	r2, [r4, #16]
 800d134:	b942      	cbnz	r2, 800d148 <__swsetup_r+0xa4>
 800d136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d13a:	d1c5      	bne.n	800d0c8 <__swsetup_r+0x24>
 800d13c:	bd38      	pop	{r3, r4, r5, pc}
 800d13e:	0799      	lsls	r1, r3, #30
 800d140:	bf58      	it	pl
 800d142:	6962      	ldrpl	r2, [r4, #20]
 800d144:	60a2      	str	r2, [r4, #8]
 800d146:	e7f4      	b.n	800d132 <__swsetup_r+0x8e>
 800d148:	2000      	movs	r0, #0
 800d14a:	e7f7      	b.n	800d13c <__swsetup_r+0x98>
 800d14c:	20000018 	.word	0x20000018

0800d150 <_sbrk_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d06      	ldr	r5, [pc, #24]	@ (800d16c <_sbrk_r+0x1c>)
 800d154:	2300      	movs	r3, #0
 800d156:	4604      	mov	r4, r0
 800d158:	4608      	mov	r0, r1
 800d15a:	602b      	str	r3, [r5, #0]
 800d15c:	f7f6 ffc2 	bl	80040e4 <_sbrk>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d102      	bne.n	800d16a <_sbrk_r+0x1a>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	b103      	cbz	r3, 800d16a <_sbrk_r+0x1a>
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	20000ebc 	.word	0x20000ebc

0800d170 <__assert_func>:
 800d170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d172:	4614      	mov	r4, r2
 800d174:	461a      	mov	r2, r3
 800d176:	4b09      	ldr	r3, [pc, #36]	@ (800d19c <__assert_func+0x2c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4605      	mov	r5, r0
 800d17c:	68d8      	ldr	r0, [r3, #12]
 800d17e:	b954      	cbnz	r4, 800d196 <__assert_func+0x26>
 800d180:	4b07      	ldr	r3, [pc, #28]	@ (800d1a0 <__assert_func+0x30>)
 800d182:	461c      	mov	r4, r3
 800d184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d188:	9100      	str	r1, [sp, #0]
 800d18a:	462b      	mov	r3, r5
 800d18c:	4905      	ldr	r1, [pc, #20]	@ (800d1a4 <__assert_func+0x34>)
 800d18e:	f000 f841 	bl	800d214 <fiprintf>
 800d192:	f000 f8d5 	bl	800d340 <abort>
 800d196:	4b04      	ldr	r3, [pc, #16]	@ (800d1a8 <__assert_func+0x38>)
 800d198:	e7f4      	b.n	800d184 <__assert_func+0x14>
 800d19a:	bf00      	nop
 800d19c:	20000018 	.word	0x20000018
 800d1a0:	0800ecbe 	.word	0x0800ecbe
 800d1a4:	0800ec90 	.word	0x0800ec90
 800d1a8:	0800ec83 	.word	0x0800ec83

0800d1ac <_calloc_r>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	fba1 5402 	umull	r5, r4, r1, r2
 800d1b2:	b93c      	cbnz	r4, 800d1c4 <_calloc_r+0x18>
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	f7ff f933 	bl	800c420 <_malloc_r>
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	b928      	cbnz	r0, 800d1ca <_calloc_r+0x1e>
 800d1be:	2600      	movs	r6, #0
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
 800d1c4:	220c      	movs	r2, #12
 800d1c6:	6002      	str	r2, [r0, #0]
 800d1c8:	e7f9      	b.n	800d1be <_calloc_r+0x12>
 800d1ca:	462a      	mov	r2, r5
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	f7fe f9d6 	bl	800b57e <memset>
 800d1d2:	e7f5      	b.n	800d1c0 <_calloc_r+0x14>

0800d1d4 <__ascii_mbtowc>:
 800d1d4:	b082      	sub	sp, #8
 800d1d6:	b901      	cbnz	r1, 800d1da <__ascii_mbtowc+0x6>
 800d1d8:	a901      	add	r1, sp, #4
 800d1da:	b142      	cbz	r2, 800d1ee <__ascii_mbtowc+0x1a>
 800d1dc:	b14b      	cbz	r3, 800d1f2 <__ascii_mbtowc+0x1e>
 800d1de:	7813      	ldrb	r3, [r2, #0]
 800d1e0:	600b      	str	r3, [r1, #0]
 800d1e2:	7812      	ldrb	r2, [r2, #0]
 800d1e4:	1e10      	subs	r0, r2, #0
 800d1e6:	bf18      	it	ne
 800d1e8:	2001      	movne	r0, #1
 800d1ea:	b002      	add	sp, #8
 800d1ec:	4770      	bx	lr
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	e7fb      	b.n	800d1ea <__ascii_mbtowc+0x16>
 800d1f2:	f06f 0001 	mvn.w	r0, #1
 800d1f6:	e7f8      	b.n	800d1ea <__ascii_mbtowc+0x16>

0800d1f8 <__ascii_wctomb>:
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	4608      	mov	r0, r1
 800d1fc:	b141      	cbz	r1, 800d210 <__ascii_wctomb+0x18>
 800d1fe:	2aff      	cmp	r2, #255	@ 0xff
 800d200:	d904      	bls.n	800d20c <__ascii_wctomb+0x14>
 800d202:	228a      	movs	r2, #138	@ 0x8a
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d20a:	4770      	bx	lr
 800d20c:	700a      	strb	r2, [r1, #0]
 800d20e:	2001      	movs	r0, #1
 800d210:	4770      	bx	lr
	...

0800d214 <fiprintf>:
 800d214:	b40e      	push	{r1, r2, r3}
 800d216:	b503      	push	{r0, r1, lr}
 800d218:	4601      	mov	r1, r0
 800d21a:	ab03      	add	r3, sp, #12
 800d21c:	4805      	ldr	r0, [pc, #20]	@ (800d234 <fiprintf+0x20>)
 800d21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d222:	6800      	ldr	r0, [r0, #0]
 800d224:	9301      	str	r3, [sp, #4]
 800d226:	f7ff fd3b 	bl	800cca0 <_vfiprintf_r>
 800d22a:	b002      	add	sp, #8
 800d22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d230:	b003      	add	sp, #12
 800d232:	4770      	bx	lr
 800d234:	20000018 	.word	0x20000018

0800d238 <__swhatbuf_r>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	460c      	mov	r4, r1
 800d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d240:	2900      	cmp	r1, #0
 800d242:	b096      	sub	sp, #88	@ 0x58
 800d244:	4615      	mov	r5, r2
 800d246:	461e      	mov	r6, r3
 800d248:	da0d      	bge.n	800d266 <__swhatbuf_r+0x2e>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d250:	f04f 0100 	mov.w	r1, #0
 800d254:	bf14      	ite	ne
 800d256:	2340      	movne	r3, #64	@ 0x40
 800d258:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d25c:	2000      	movs	r0, #0
 800d25e:	6031      	str	r1, [r6, #0]
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	b016      	add	sp, #88	@ 0x58
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	466a      	mov	r2, sp
 800d268:	f000 f848 	bl	800d2fc <_fstat_r>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dbec      	blt.n	800d24a <__swhatbuf_r+0x12>
 800d270:	9901      	ldr	r1, [sp, #4]
 800d272:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d276:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d27a:	4259      	negs	r1, r3
 800d27c:	4159      	adcs	r1, r3
 800d27e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d282:	e7eb      	b.n	800d25c <__swhatbuf_r+0x24>

0800d284 <__smakebuf_r>:
 800d284:	898b      	ldrh	r3, [r1, #12]
 800d286:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d288:	079d      	lsls	r5, r3, #30
 800d28a:	4606      	mov	r6, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	d507      	bpl.n	800d2a0 <__smakebuf_r+0x1c>
 800d290:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	2301      	movs	r3, #1
 800d29a:	6163      	str	r3, [r4, #20]
 800d29c:	b003      	add	sp, #12
 800d29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a0:	ab01      	add	r3, sp, #4
 800d2a2:	466a      	mov	r2, sp
 800d2a4:	f7ff ffc8 	bl	800d238 <__swhatbuf_r>
 800d2a8:	9f00      	ldr	r7, [sp, #0]
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f7ff f8b6 	bl	800c420 <_malloc_r>
 800d2b4:	b948      	cbnz	r0, 800d2ca <__smakebuf_r+0x46>
 800d2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ba:	059a      	lsls	r2, r3, #22
 800d2bc:	d4ee      	bmi.n	800d29c <__smakebuf_r+0x18>
 800d2be:	f023 0303 	bic.w	r3, r3, #3
 800d2c2:	f043 0302 	orr.w	r3, r3, #2
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	e7e2      	b.n	800d290 <__smakebuf_r+0xc>
 800d2ca:	89a3      	ldrh	r3, [r4, #12]
 800d2cc:	6020      	str	r0, [r4, #0]
 800d2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2d2:	81a3      	strh	r3, [r4, #12]
 800d2d4:	9b01      	ldr	r3, [sp, #4]
 800d2d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d2da:	b15b      	cbz	r3, 800d2f4 <__smakebuf_r+0x70>
 800d2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f000 f81d 	bl	800d320 <_isatty_r>
 800d2e6:	b128      	cbz	r0, 800d2f4 <__smakebuf_r+0x70>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f023 0303 	bic.w	r3, r3, #3
 800d2ee:	f043 0301 	orr.w	r3, r3, #1
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	431d      	orrs	r5, r3
 800d2f8:	81a5      	strh	r5, [r4, #12]
 800d2fa:	e7cf      	b.n	800d29c <__smakebuf_r+0x18>

0800d2fc <_fstat_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	@ (800d31c <_fstat_r+0x20>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f6 fec3 	bl	8004094 <_fstat>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_fstat_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_fstat_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	20000ebc 	.word	0x20000ebc

0800d320 <_isatty_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	@ (800d33c <_isatty_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f6 fec2 	bl	80040b4 <_isatty>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_isatty_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_isatty_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	20000ebc 	.word	0x20000ebc

0800d340 <abort>:
 800d340:	b508      	push	{r3, lr}
 800d342:	2006      	movs	r0, #6
 800d344:	f000 f82c 	bl	800d3a0 <raise>
 800d348:	2001      	movs	r0, #1
 800d34a:	f7f6 fe53 	bl	8003ff4 <_exit>

0800d34e <_raise_r>:
 800d34e:	291f      	cmp	r1, #31
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4605      	mov	r5, r0
 800d354:	460c      	mov	r4, r1
 800d356:	d904      	bls.n	800d362 <_raise_r+0x14>
 800d358:	2316      	movs	r3, #22
 800d35a:	6003      	str	r3, [r0, #0]
 800d35c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d360:	bd38      	pop	{r3, r4, r5, pc}
 800d362:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d364:	b112      	cbz	r2, 800d36c <_raise_r+0x1e>
 800d366:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d36a:	b94b      	cbnz	r3, 800d380 <_raise_r+0x32>
 800d36c:	4628      	mov	r0, r5
 800d36e:	f000 f831 	bl	800d3d4 <_getpid_r>
 800d372:	4622      	mov	r2, r4
 800d374:	4601      	mov	r1, r0
 800d376:	4628      	mov	r0, r5
 800d378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d37c:	f000 b818 	b.w	800d3b0 <_kill_r>
 800d380:	2b01      	cmp	r3, #1
 800d382:	d00a      	beq.n	800d39a <_raise_r+0x4c>
 800d384:	1c59      	adds	r1, r3, #1
 800d386:	d103      	bne.n	800d390 <_raise_r+0x42>
 800d388:	2316      	movs	r3, #22
 800d38a:	6003      	str	r3, [r0, #0]
 800d38c:	2001      	movs	r0, #1
 800d38e:	e7e7      	b.n	800d360 <_raise_r+0x12>
 800d390:	2100      	movs	r1, #0
 800d392:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d396:	4620      	mov	r0, r4
 800d398:	4798      	blx	r3
 800d39a:	2000      	movs	r0, #0
 800d39c:	e7e0      	b.n	800d360 <_raise_r+0x12>
	...

0800d3a0 <raise>:
 800d3a0:	4b02      	ldr	r3, [pc, #8]	@ (800d3ac <raise+0xc>)
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	f7ff bfd2 	b.w	800d34e <_raise_r>
 800d3aa:	bf00      	nop
 800d3ac:	20000018 	.word	0x20000018

0800d3b0 <_kill_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	4d07      	ldr	r5, [pc, #28]	@ (800d3d0 <_kill_r+0x20>)
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	4608      	mov	r0, r1
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	602b      	str	r3, [r5, #0]
 800d3be:	f7f6 fe09 	bl	8003fd4 <_kill>
 800d3c2:	1c43      	adds	r3, r0, #1
 800d3c4:	d102      	bne.n	800d3cc <_kill_r+0x1c>
 800d3c6:	682b      	ldr	r3, [r5, #0]
 800d3c8:	b103      	cbz	r3, 800d3cc <_kill_r+0x1c>
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	bd38      	pop	{r3, r4, r5, pc}
 800d3ce:	bf00      	nop
 800d3d0:	20000ebc 	.word	0x20000ebc

0800d3d4 <_getpid_r>:
 800d3d4:	f7f6 bdf6 	b.w	8003fc4 <_getpid>

0800d3d8 <_init>:
 800d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3da:	bf00      	nop
 800d3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3de:	bc08      	pop	{r3}
 800d3e0:	469e      	mov	lr, r3
 800d3e2:	4770      	bx	lr

0800d3e4 <_fini>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	bf00      	nop
 800d3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ea:	bc08      	pop	{r3}
 800d3ec:	469e      	mov	lr, r3
 800d3ee:	4770      	bx	lr
